[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "mkeoliya": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "mkeoliya": 32
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "T~1~read book"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 1
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "## Product Screenshot"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "![title](Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### Add tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Add any task(s) to your todo list, whether it is a regular todo, an event with a time or a deadline. Helps you keep track of your pending work."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### Mark tasks as done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Mark any task as done, or finished. Updates the todo list with the task(s) you\u0027ve finished!"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### Remove tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Remove any task(s) from your todo list, in case you don\u0027t need to do them anymore."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### List all tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "List all the current tasks (done or pending) for the user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### View all tasks on a single day"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "List all the current tasks (done or pending) _on a particular day_. Lets you view your daily schedule!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### Search for a task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Find a task based on a particular keyword. Lets you view related tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### Add Notes"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Add snippets of text that you need to remember."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### Remove Notes"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Remove notes that you don\u0027t need anymore."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### Persistent Storage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Stores all of your past todos, events, deadlines or notes - so that they don\u0027t get wiped out after you use the application once."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### `todo` - Add todo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "This adds a regular todo task (denoted by \"T\") to the list, along with a description of the todo. Initially, the todo is marked as \"not done.\" Can be aliased to `t`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "`todo read book`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    [T][X] read book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " Now you have 1 task(s) in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### `event` - Add event"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "This adds an event task (denoted by \"E\") to the list, along with a description of the event as well as an ISO date preceded by `/at`. Initially, the todo is marked as \"not done.\" Can be aliased to `e`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "`event Friday Hacks /at 2020-10-15`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    [E][X] Friday Hacks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " Now you have 2 task(s) in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### `deadline` - Add deadline"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "This adds an deadline task (denoted by \"D\") to the list, along with a description of the deadline as well as an ISO date preceded by `/by`. Initially, the todo is marked as \"not done.\" Can be aliased to `d`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "`deadline return book /by 2020-10-18`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    [D][X] return book"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " Now you have 3 task(s) in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### `done` - Mark task as done"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "This marks a pending task (denoted by its 1-based index) as done. Informs the user if a task has already been marked as done, or if the task index supplied does not exist.  "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Nice, I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    [T][✓] read book"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### `delete` - Delete a task"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "This deletes a task(denoted by its 1-based index) as done. Informs the user if the task index supplied does not exist. Can be aliased to `-d`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Example of usage: ."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "The following task has been removed successfully"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    [T][✓] read book"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Now you have 2 task(s) in the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### `list` - List all tasks"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Lists all tasks (along with their pending or done status) currently in the todo-list, itemized by a number (1-based). Can be aliased to `l`."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "[E][X] Friday Hacks (at: Oct 15 2020)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "[D][X] return book  (at: Oct 17 2020)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### `view` - List all tasks on a particular day"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Lists all tasks (along with their pending or done status) currently in the todo-list, if they are on a particular date supplied by the user. Can be aliased to `v`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "`view 2020-15-2020`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Here are the tasks on this day in your list:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "1. [E][X] Friday Hacks (at: Oct 15 2020)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### `find` - Find all tasks given keywords"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Lists all tasks (along with their pending or done status) currently in the todo-list, if their descriptions match the keywords supplied. Can be aliased to `f`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "`find book`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "1. [T][✓] read book"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "2. [D][✓] return book (by: Oct 17 2020)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "### `bye` - Shows exit message"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Shows exit message to the user."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "mkeoliya": 161
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ui.DialogBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Image dukeImage \u003dnew Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // constructor"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this(\"data\", \"./data/duke.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Duke(String dataDirectory, String filePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        storage \u003d new Storage(dataDirectory, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Label greeting \u003d new Label(ui.greet());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                DialogBox.getDukeDialog(greeting, new ImageView(dukeImage))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // Scroll down to the end every time dialogContainer\u0027s height changes"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // Add functionality to handle user input"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e runGUI()); // for button"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        userInput.setOnAction((event) -\u003e runGUI()); // for textfield"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private void runGUI() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String input \u003d userInput.getText().trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // process user input"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            output \u003d command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            output \u003d ui.format(e.getMessage());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assert !output.isEmpty() : \"Output should not be empty\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        // set labels and dialog container"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Label userText \u003d new Label(input);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Label dukeText \u003d new Label(output);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(userImage)),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(dukeImage))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 134
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public DukeException(ExceptionTypeEnum type) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        super(type.toString());"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 7
    }
  },
  {
    "path": "src/main/java/duke/ExceptionTypeEnum.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public enum ExceptionTypeEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // thrown in executing commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    INVALID_ITEM_NUMBER (\"That is not a valid item number.\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    INVALID_DONE_COMMAND(\"Sorry - only todos and deadlines can be marked as done!\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    ITEM_ALREADY_DONE (\"This task has already been marked as done.\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    // thrown in parser"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    INCORRECT_LIST (\"Did you mean to say \u0027list\u0027?\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    MISSING_FIND_KEYWORD (\"Please provide keyword(s) to look for\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    MISSING_SCHEDULE_DATE (\"Please provide a date to look for\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    MISSING_TODO_DESCRIPTION (\"The description for a todo cannot be empty.\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    MISSING_DEADLINE_DESCRIPTION (\"The description for a deadline cannot be empty.\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    MISSING_DEADLINE_DATE (\"The date for a deadline cannot be empty.\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    MISSING_EVENT_DESCRIPTION (\"The description for a task cannot be empty.\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    MISSING_EVENT_DATE (\"The date for an event cannot be empty.\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    MISSING_NOTE_NAME (\"The name for a note cannot be empty.\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    MISSING_NOTE_DESCRIPTION (\"The description for a note cannot be empty.\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    MISSING_DONE_ITEM (\"Please specify an item number.\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    MISSING_DELETE_ITEM (\"Please specify an item number.\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    INCORRECT_BYE (\"Did you mean to say \u0027bye\u0027?\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    UNKNOWN_COMMAND (\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    ExceptionTypeEnum(String message) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 36
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 12
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static List\u003cString\u003e names \u003d Arrays.asList(\"todo\", \"deadline\", \"\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public AddCommand() { }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Adds a task to the given list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param tasks current list of tasks which will be added to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param ui user interface to show messages"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param storage storage interface to write the entire TaskList to file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return ui.format(\"Got it. I\u0027ve added this task:\", \"\\t\" + task,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \"Now you have \" + tasks.size() + \" task(s) in the list\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 35
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    static final String BYE_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Prints the goodbye message to the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param tasks current list of tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param ui user interface to show messages"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param storage storage interface"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) { return ui.format(BYE_MESSAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 20
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 13
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ExceptionTypeEnum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    int index; // 0-based"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Deletes the task at a specified index (0-based)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param tasks current list of tasks to be deleted from"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param ui user interface to show messages"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param storage storage interface to write the current list of tasks in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assert index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size() : \"Invalid item number\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        tasks.delete(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return   ui.format(\"The following task has been removed successfully:\", \"\\t\" + task.toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \"Now you have \" + tasks.size() + \" items(s) left in the list.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 34
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ExceptionTypeEnum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    int index; // 0-based"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Marks the task at a specified index (0-based) as done/finished."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param tasks current list of tasks to be modified from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param ui user interface to show messages"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param storage storage interface to write the current list of tasks in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @throws DukeException if the index passed is invalid, or if the task is already marked as done"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return ui.format(\"Nice, I\u0027ve marked this task as done:\", \"\\t\" + task.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 32
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assert !keyword.isEmpty() : \"Find keyword should not be empty\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if(tasks.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return ui.format(\"There are no items in the list right now.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return ui.format(tasks.filterByDescription(keyword).itemize(\"Here are the matching tasks in your list:\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 23
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Shows the itemized list of tasks to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param tasks current list of tasks to be itemized and shown"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param ui user interface to show messages"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param storage storage interface to write the current list of tasks in"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if(tasks.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return ui.format(\"There are no items in the list right now.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "           return ui.format(tasks.itemize());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 25
    }
  },
  {
    "path": "src/main/java/duke/command/ScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class ScheduleCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public ScheduleCommand(LocalDate date) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assert date !\u003d null : \"Schedule date  should not be empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if(tasks.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return ui.format(\"There are no items in the list right now.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return ui.format(tasks.filterByDate(date).itemize(\"Here are the tasks on this day in your list:\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 25
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ExceptionTypeEnum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    static Map\u003cString, String\u003e commandMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Parses a line of user input, splits it via regex (~), creates a Command object with required information"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * and returns it."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param fullCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @return the Command represented by the input string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @throws DukeException with appropriate message if command encountered is incorrect"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String arr[] \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String command \u003d arr[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String remainingText \u003d arr.length \u003d\u003d 1 ? null : arr[1].trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String[] taskItems;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        switch (Parser.getMappedCommand(command)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (remainingText !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new DukeException(ExceptionTypeEnum.INCORRECT_LIST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (remainingText \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new DukeException(ExceptionTypeEnum.MISSING_FIND_KEYWORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return new FindCommand(remainingText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (remainingText \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new DukeException(ExceptionTypeEnum.MISSING_SCHEDULE_DATE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(remainingText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return new ScheduleCommand(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (remainingText \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new DukeException(ExceptionTypeEnum.MISSING_TODO_DESCRIPTION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            task \u003d new TodoTask(remainingText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return new AddCommand(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (remainingText \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new DukeException(ExceptionTypeEnum.MISSING_DEADLINE_DESCRIPTION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            taskItems \u003d remainingText.split(\" /by \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            description \u003d taskItems[0].trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (taskItems.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new DukeException(ExceptionTypeEnum.MISSING_DEADLINE_DATE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            LocalDate by \u003d LocalDate.parse(taskItems[1].trim());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            task \u003d new DeadlineTask(description, by);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return new AddCommand(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (remainingText \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new DukeException(ExceptionTypeEnum.MISSING_EVENT_DESCRIPTION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            taskItems \u003d remainingText.split(\" /at \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            description \u003d taskItems[0].trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (taskItems.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new DukeException(ExceptionTypeEnum.MISSING_EVENT_DATE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            LocalDate at \u003d LocalDate.parse(taskItems[1].trim());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            task \u003d new EventTask(description, at);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return new AddCommand(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        case \"note\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (remainingText \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new DukeException(ExceptionTypeEnum.MISSING_NOTE_NAME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            taskItems \u003d remainingText.split(\" /desc \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            String name \u003d taskItems[0].trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (taskItems.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new DukeException(ExceptionTypeEnum.MISSING_NOTE_DESCRIPTION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            description \u003d taskItems[1].trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            task \u003d new Note(description, name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return new AddCommand(task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (remainingText \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new DukeException(ExceptionTypeEnum.MISSING_DONE_ITEM);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            index \u003d Integer.parseInt(remainingText) - 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (remainingText \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new DukeException(ExceptionTypeEnum.MISSING_DELETE_ITEM);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            index \u003d Integer.parseInt(remainingText) - 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if (remainingText !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                throw new DukeException(ExceptionTypeEnum.INCORRECT_BYE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        case \"unknown\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new DukeException(ExceptionTypeEnum.UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private static String getMappedCommand(String command) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"list\", \"list\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"l\", \"list\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"todo\", \"todo\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"t\", \"todo\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"deadline\", \"deadline\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"d\", \"deadline\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"event\", \"event\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"e\", \"event\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"note\", \"note\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"n\", \"note\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"done\", \"done\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"delete\", \"delete\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"-d\", \"delete\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"find\", \"find\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"f\", \"find\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"view\", \"view\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"v\", \"view\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"bye\", \"bye\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        commandMap.put(\"x\", \"bye\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return Optional.ofNullable(commandMap.get(command)).orElse(\"unknown\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 149
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    String dataDirectory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    File file;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Storage(String dataDirectory, String pathname) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.dataDirectory \u003d dataDirectory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.file \u003d new File(pathname);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Load data from file, parses, and saves as tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @return a list of tasks corresponding to the ones loaded"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public List\u003cTask\u003e load()  {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            Files.createDirectories(Paths.get(dataDirectory));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            String record;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                record \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                String tokens[] \u003d record.split(\"~\", 3);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                String taskType \u003d tokens[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                boolean isDone \u003d Integer.parseInt(tokens[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                String remainingText \u003d tokens[2];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                String description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                switch(taskType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    description \u003d remainingText;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    list.add(new TodoTask(description, isDone));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    String eventTokens[] \u003d remainingText.split(\"~\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    description \u003d eventTokens[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    LocalDate at \u003d LocalDate.parse(eventTokens[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    list.add(new EventTask(description, at, isDone));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    String deadlineTokens[] \u003d remainingText.split(\"~\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    description \u003d deadlineTokens[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    LocalDate by \u003d LocalDate.parse(deadlineTokens[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    list.add(new DeadlineTask(description, by, isDone));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                case \"N\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    String noteTokens[] \u003d remainingText.split(\"~\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    description \u003d noteTokens[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    String name \u003d noteTokens[1];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    list.add(new Note(description, name));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        } catch(IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        finally {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Stores data to file (rewritten after each function call)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void write(TaskList tasks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            Files.createDirectories(Paths.get(dataDirectory));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            for(Task task: tasks.getList()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                writer.write(task.toDBString() + System.lineSeparator());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        } catch(Exception e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 93
    }
  },
  {
    "path": "src/main/java/duke/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private LocalDate by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    static final String TASK_TYPE \u003d \"D\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public DeadlineTask(String description, LocalDate by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public DeadlineTask(String description, LocalDate by, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Checks whether a given date is the same as the event date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param date a LocalDate to check for equality"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @return true if the event date \"at\" is the same as the date of the argument, false otherwise"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean isSameDate(LocalDate date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return by.equals(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Converts task to string - task type, tick/check and description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return String.format(\"[%s][%s] %s (by: %s)\", TASK_TYPE, getStatusIcon(), description,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Converts task to string representation in database- task type, 1 for done/0 for not done, and description"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toDBString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return TASK_TYPE + \"~\" + super.toDBString() + \"~\" + by.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 45
    }
  },
  {
    "path": "src/main/java/duke/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    LocalDate at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    static final String TASK_TYPE \u003d \"E\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public EventTask(String description, LocalDate at) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public EventTask(String description, LocalDate at, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Checks whether a given date is the same as the event date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param date a LocalDate to check for equality"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @return true if the event date \"at\" is the same as the date of the argument, false otherwise"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean isSameDate(LocalDate date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return at.equals(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Converts task to string - task type, tick/check and description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return String.format(\"[%s][%s] %s (at: %s)\", TASK_TYPE, getStatusIcon(), description,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Converts task to string representation in database- task type, 1 for done/0 for not done, and description"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toDBString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return TASK_TYPE + \"~\" + super.toDBString() + \"~\" + at.format(DateTimeFormatter.ofPattern(\"yyyy-mm-dd\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 45
    }
  },
  {
    "path": "src/main/java/duke/task/Note.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class Note extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    static final String TASK_TYPE \u003d \"N\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Note(String description, String name) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Note(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        super(description, false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Converts task to string - task type, tick/check and description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return String.format(\"[%s][%s] %s\", TASK_TYPE, name, description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Converts task to string representation in database- task type, 1 for done/0 for not done, and description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toDBString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            return TASK_TYPE + \"~\" + super.toDBString() + \"~\" + name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 31
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ExceptionTypeEnum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assert !description.isEmpty() : \"Task description should not be empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Checks whether a task\u0027s associated date is the same as the supplied date. Meant to be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * overriden in inherited classes such as \u003ccode\u003eDeadlineTask\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param date a LocalDate to check for equality"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean isSameDate(LocalDate date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); // return tick or X symbols"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void markAsDone() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if(this.isDone) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "           throw new DukeException(ExceptionTypeEnum.ITEM_ALREADY_DONE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toDBString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return String.format(\"%s~%s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 49
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.ExceptionTypeEnum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Constructor that initializes the Tasklist with a list of tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Adds a task to the end of the list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Removes a task at the given index (0-based)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param index index of the task to be deleted (0-based)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Checks if the TaskList is empty or not"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return list.isEmpty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Get the task at a specified index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param index index of the task to be returned (0-based)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @return the task at the specified index (0-based)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public Task get(int index) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        if(index \u003c 0 || index \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            throw new DukeException(ExceptionTypeEnum.INVALID_ITEM_NUMBER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns the current size of the TaskList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Getter for underlying List of Tasks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns filtered tasks based on exact matching with keyword"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @return a list of tasks that satisfy the constraints"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public TaskList filterByDescription(String keyword) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cTask\u003e filteredList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        for(Task task: list) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            if(task.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                filteredList.add(task);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new TaskList(filteredList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns filtered tasks based on exact matching with a date"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @return a list of tasks that satisfy the constraints"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public TaskList filterByDate(LocalDate date) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        Predicate\u003cTask\u003e byDate \u003d task -\u003e task.isSameDate(date);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cTask\u003e filteredTasks \u003d list.stream().filter(byDate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new TaskList(filteredTasks);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns itemized tasks, each with serial numbers (1-based)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @return a list of strings of the form \"1. deadline sample task /by time\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public List\u003cString\u003e itemize() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cString\u003e itemizedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        for(int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            itemizedList.add((i + 1) + \". \" + list.get(i));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return itemizedList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Returns itemized tasks with an intro message, each with serial numbers (1-based)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param introText the text to be displayed before the itemized list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @return a list of strings of the form \"1. deadline sample task /by time\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public List\u003cString\u003e itemize(String introText) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        List\u003cString\u003e itemizedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        itemizedList.add(introText);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        for(int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "            itemizedList.add((i + 1) + \". \" + list.get(i));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return itemizedList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 131
    }
  },
  {
    "path": "src/main/java/duke/task/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    static final String TASK_TYPE \u003d \"T\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public TodoTask(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public TodoTask(String description, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Converts task to string - task type, tick/check and description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return String.format(\"[%s][%s] %s\", TASK_TYPE, getStatusIcon(), description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Converts task to string representation in database- task type, 1 for done/0 for not done, and description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String toDBString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return TASK_TYPE + \"~\" + super.toDBString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 29
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public DialogBox(Label label, ImageView iv, Color color) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.text \u003d label;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.displayPicture \u003d iv;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        text.setBackground(new Background(new BackgroundFill(color,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                new CornerRadii(5.0), new Insets(-5.0))));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.setSpacing(10.0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.setAlignment(Pos.CENTER_RIGHT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        ObservableList\u003cNode\u003e temp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        FXCollections.reverse(temp);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        this.getChildren().setAll(temp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return new DialogBox(l, iv, Color.GREENYELLOW);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        DialogBox box \u003d new DialogBox(l, iv, Color.WHITE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        box.flip();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return box;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 53
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Prints the greeting message and prompt when Duke is launched."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String greet() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return \"Hello! I\u0027m Duke. What can I do for you?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return \"Oops! I wasn\u0027t able to load past tasks properly :(\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Prints the list of strings, each item separated by a newline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param strings a list of strings to be displayed on separate lines"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String format(List\u003cString\u003e strings) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "       return strings.stream().reduce(\"\", (x, acc) -\u003e x + \"\\n\" + acc).substring(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Prints the array of strings, each item separated by a newline"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * @param strings an array of strings to be displayed on separate lines"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public String format(String ...strings) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        return format(Arrays.asList(strings));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 35
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Check if parser returns appropriate command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void dukeParser_invalidCommand_throwsDukeException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        String badCommand \u003d \"lepak rsfsefew\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeException.class, () -\u003e Parser.parse(badCommand),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \"Expected parse() to throw error, but it didn\u0027t\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Check if parsing of date during creation of DeadlineTask works"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void deadlineTaskCreation_sampleObject_correctToString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(new DeadlineTask(\"return book\", LocalDate.parse(\"2019-10-15\")).toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \"[D][✘] return book (by: Oct 15 2019)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     * Check if parsing of date during creation of EventTask works"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    public void eventTaskCreation_sampleObject_correctToString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "        assertEquals(new EventTask(\"COVID\", LocalDate.parse(\"2020-10-15\")).toString(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "                \"[E][✘] COVID (at: Oct 15 2020)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 43
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "blah"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "mkeoliya": 2
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "# set UTF-8 encoding"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "if"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "  )"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "mkeoliya": 9
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "../src/main/java/ByeCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "../src/main/java/ListCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "../src/main/java/TodoTask.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "../src/main/java/EventTask.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "../src/main/java/Command.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "../src/main/java/AddCommand.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "../src/main/java/DeadlineTask.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "../src/main/java/Task.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "../src/main/java/duke.Duke.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "../src/main/java/DoneCommand.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mkeoliya"
        },
        "content": "../src/main/java/duke.DukeException.java"
      }
    ],
    "authorContributionMap": {
      "mkeoliya": 11
    }
  }
]
