[
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    LIST_MODE(\"list\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ECHO_MODE(\"echo\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    TODO_CMD(\"todo\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DEADLINE_CMD(\"deadline\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    EVENT_CMD(\"event\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    EXIT_CMD(\"bye\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    LIST_CMD(\"list\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DONE_CMD(\"done\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DELETE_CMD(\"delete\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    INVALID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String cmd;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static Map\u003cString, Command\u003e keyableMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    Command() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    } // constructor for INVALID"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    Command(String cmd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.cmd \u003d cmd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // init for the enums class: fills in the hashmap of message-label pairs"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Map\u003cString, Command\u003e commandLabelMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (Command c : Command.values()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            commandLabelMap.put(c.getCmd(), c);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Command.keyableMap \u003d commandLabelMap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String getCmd() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.cmd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static String getTag(Command c) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        switch (c.getCmd().charAt(0)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case \u0027e\u0027:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return \"E\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case \u0027d\u0027:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            if (c.getCmd().equals(\"delete\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                return \"D\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                return INVALID.cmd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case \u0027t\u0027:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return \"T\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return INVALID.cmd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static Command getLabel(String msg) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return keyableMap.getOrDefault(msg, Command.INVALID);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 63
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String DELIMITER \u003d \"by\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String dateString \u003d \"\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Deadline(String description, String dateString) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.dateString \u003d dateString;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // example: deadline return book /by Sunday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static Deadline createDeadline(String[] parsedOutput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String description \u003d parsedOutput[1];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String dateString \u003d parsedOutput[2];"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new Deadline(description, dateString);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    protected boolean isComplete() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return super.isComplete();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"[D]\" + super.toString()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + \" (\" + DELIMITER + \":\" + this.dateString + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 27
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // constant strings:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String lineBreak \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String indent \u003d \"    \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String mode \u003d \"list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    static boolean terminate \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        TaskList myTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        greet();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        while (!terminate) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            respond(sc, myTasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static void greet() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e greeting \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        greeting.add(\"Hello I\u0027m Duke\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        greeting.add(\"What can I do for you?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        printResponse(prettify(greeting));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static void respond(Scanner sc, TaskList myTasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e response \u003d new ArrayList\u003c\u003e(); // arraylist of lines"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String[] parsedOutput \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String command \u003d parsedOutput[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            if (command.equals(Command.EXIT_CMD.getCmd())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                response \u003d exit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            } else if (command.equals(Command.LIST_CMD.getCmd())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                response.add(Message.FETCHING_MSG.getMsg());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                ArrayList\u003cTask\u003e allTasks \u003d myTasks.getAllTasks();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                for (Task t : allTasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    response.add(t.getID() + \".\" + t.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            } else if (Duke.mode.equals(Command.ECHO_MODE.getCmd())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                response \u003d echo(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                response \u003d handleTask(parsedOutput, myTasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            response.add(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            printResponse(prettify(response));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static ArrayList\u003cString\u003e handleTask(String[] parsedOutput, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String command \u003d parsedOutput[0];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e response \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (command.equals(Command.DELETE_CMD.getCmd()) || command.equals(Command.DONE_CMD.getCmd())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            boolean toDelete \u003d command.equals(Command.DELETE_CMD.getCmd());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            int taskID \u003d Integer.parseInt(parsedOutput[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            if (toDelete) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                response.add(Message.DELETE_MSG.getMsg());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                response.add(tasks.deleteTask(taskID));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                response.add(tasks.getCurrentStatus());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                response.add(Message.DONE_MSG.getMsg());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                response.add(tasks.completeTask(taskID));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            response.add(Message.CONFIRMATION_MSG.getMsg());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String reply \u003d tasks.addEntry(parsedOutput);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            response.add(reply);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            response.add(tasks.getCurrentStatus());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static ArrayList\u003cString\u003e exit() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Duke.terminate \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e response \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        response.add(Message.EXIT_GREETING.getMsg());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return (response);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static ArrayList\u003cString\u003e echo(String output) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e response \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        response.add(output);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return (response);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // encapsulates and indents response lines:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static ArrayList\u003cString\u003e prettify(ArrayList\u003cString\u003e rawResponse) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        rawResponse.add(0, lineBreak);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        rawResponse.add(rawResponse.size(), lineBreak);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return indentLines(rawResponse);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static ArrayList\u003cString\u003e indentLines(ArrayList\u003cString\u003e responseLines) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (String current : responseLines) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            current \u003d indent + current;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            result.add(current);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static void printResponse(ArrayList\u003cString\u003e response) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (String s : response) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            System.out.println(s);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static void printLogo() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "//todo: create enums for messages, delims and commands/cases"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 123,
      "-": 9
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "// nb: might have to create children exception classes in the future, avoided"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "//     because it\u0027s simple message passing for now"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 13
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String DELIMITER \u003d \"at\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            TIME_DELIMITER \u003d \"-\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String startTime,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            endTime,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            dateString;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Event(String description, String dateString, String startTime, String endTime) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.dateString \u003d dateString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static Event createEvent(String[] parsedOutput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String description \u003d parsedOutput[1];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String dateString \u003d parsedOutput[2];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String startTime \u003d parsedOutput[3];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String endTime \u003d parsedOutput[4];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new Event(description, dateString, startTime, endTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    protected boolean isComplete() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return super.isComplete();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"[E]\" + super.toString()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + \" (\" + DELIMITER + \":\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + this.dateString + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + this.startTime + TIME_DELIMITER + this.endTime + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 35
    }
  },
  {
    "path": "src/main/java/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public enum Message {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    GREETING,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    EXIT_GREETING(\"Bye. Hope to see you again soon!\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DONE_MSG(\"Nice! I\u0027ve marked this task as done\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DELETE_MSG(\"Noted. I\u0027ve removed this task:\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    CONFIRMATION_MSG(\"Got it. I\u0027ve added this task:\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    FETCHING_MSG(\"Here are the tasks in your list:\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_UNKNOWN_CMD(\"upset parser: unknown command\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_DONEDELETE_ARGS(\"invalid done/delete command: do things one at a time pls!\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_DONEDELETE_NOTINT(\"invalid done/delete command: you gotta pass an integer\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_TODO_DESC(\"invalid todo command: do what?\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_DEADLINE_FORMAT(\"invalid deadline command: bad format, try deadline \u003cdesc\u003e /by \u003cdateString\u003e\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_DEADLINE_DESC(\"invalid deadline command: bro, where\u0027s the deadline description at?\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_EVENT_FORMAT(\"invalid event command: bad format, try event \u003cdesc\u003e /at \u003cdateString\u003e \u003cstartTime\u003e-\u003cendTime\u003e\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_EVENT_TIME(\"invalid event command: you need to pass in a start and end time for your event\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_EVENT_DATE(\"invalid event command: you didn\u0027t pass in the date!\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    INVALID;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static Map\u003cString, Message\u003e keyableMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    Message() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    } // constructor for INVALID"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    Message(String msg) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // init for the enums class: fills in the hashmap of message-label pairs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Map\u003cString, Message\u003e messageLabelMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (Message m : Message.values()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            messageLabelMap.put(m.getMsg(), m);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Message.keyableMap \u003d messageLabelMap;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String getMsg() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static Message getLabel(String msg) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return keyableMap.getOrDefault(msg, Message.INVALID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 51
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String DEADLINE_DELIMITER \u003d \"/by\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String EVENT_DELIMITER \u003d \"/at\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String TIME_DELIMITER \u003d \"-\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // takes in the input and returns a string arr, does exception checking here as well:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String[] parseCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String command \u003d words[0].toLowerCase().trim();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (input.equals(Command.EXIT_CMD.getCmd())) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return new String[]{command};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else if (input.equals(Command.LIST_CMD.getCmd())) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return new String[]{command};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else if (command.equals(Command.DONE_CMD.getCmd())"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                || command.equals(Command.DELETE_CMD.getCmd())) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return parseDoneDelete(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                return parseToDo(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                return parseDeadline(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                return parseEvent(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                throw new DukeException(Message.ERROR_UNKNOWN_CMD.getMsg());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String[] parseDoneDelete(String input) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (st.countTokens() !\u003d 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_DONEDELETE_ARGS.getMsg());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String command \u003d st.nextToken(), taskID \u003d st.nextToken();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!isInteger(taskID)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_DONEDELETE_NOTINT.getMsg());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new String[]{command, taskID};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String[] parseToDo(String input) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        st.nextToken();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_TODO_DESC.getMsg());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder description \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        while (st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            description.append(st.nextToken()).append(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new String[]{\"T\", description.toString().stripTrailing()};"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String[] parseDeadline(String input) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] separatedInput \u003d input.split(DEADLINE_DELIMITER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (separatedInput.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_DEADLINE_FORMAT.getMsg());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String dateString \u003d separatedInput[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(separatedInput[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        st.nextToken();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder newDescription \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        while (st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            newDescription.append(st.nextToken()).append(\" \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String description \u003d newDescription.toString().stripTrailing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_DEADLINE_DESC.getMsg());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new String[]{\"D\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            description,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            dateString};"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // e.g. event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // todo: refactor this later"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String[] parseEvent(String input) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] separatedInput \u003d input.split(EVENT_DELIMITER); //  \u003cwords\u003e /at \u003ctimeInfo\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (separatedInput.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_EVENT_FORMAT.getMsg());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] words \u003d separatedInput[0].split(\" \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] timeInfo \u003d separatedInput[1].split(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String duration \u003d timeInfo[timeInfo.length - 1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] separatedTime \u003d duration.split(TIME_DELIMITER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (separatedTime.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_EVENT_TIME.getMsg());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder dateStringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (int i \u003d 0; i \u003c timeInfo.length - 2; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            dateStringBuilder.append(timeInfo[i]).append(\" \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        dateStringBuilder.append(timeInfo[timeInfo.length - 2]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String dateString \u003d dateStringBuilder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (dateString.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_EVENT_DATE.getMsg());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String startTime \u003d separatedTime[0],"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                endTime \u003d separatedTime[1];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder newDescription \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (int i \u003d 1; i \u003c words.length - 1; i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            newDescription.append(words[i]).append(\" \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        newDescription.append(words[words.length - 1]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new String[]{\"E\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            newDescription.toString().stripTrailing(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            dateString,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            startTime,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            endTime};"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private boolean isInteger(String s) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return s.matches(\"\\\\d+\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 128
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static int taskCount \u003d 0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private int taskID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private boolean completed;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String TICK \u003d \"\\u2713\", CROSS \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.taskID \u003d ++taskCount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.completed \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    protected Task complete() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.completed \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    protected Task decrementID() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        --this.taskID;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    protected static void decrementTaskCount() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        --Task.taskCount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    protected boolean isComplete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.completed;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public int getID() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.taskID;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"[\" + (this.completed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                      ? TICK"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                      : CROSS) + \"] \" + this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 43
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // side effect: create \u0026 add task + return response"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    protected String addEntry(String[] parsedOutput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String command \u003d parsedOutput[0];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ToDo newToDo \u003d new ToDo(parsedOutput[1]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.taskList.add(newToDo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return newToDo.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Deadline newDeadline \u003d Deadline.createDeadline(parsedOutput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.taskList.add(newDeadline);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return newDeadline.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Event newEvent \u003d Event.createEvent(parsedOutput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.taskList.add(newEvent);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return newEvent.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return \"ugh how did we get here\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // side effect: completes task + returns string for completed task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    protected String completeTask(int taskID) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        verifyTaskValidity(taskID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        taskList.set(taskID - 1, taskList.get(taskID - 1).complete());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return taskList.get(taskID - 1).toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String deleteTask(int taskID) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        verifyTaskValidity(taskID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Task toDelete \u003d taskList.get(taskID - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        taskList.remove(toDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (int i \u003d taskID - 1; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            taskList.set(i, taskList.get(i).decrementID());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Task.decrementTaskCount();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return toDelete.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private void verifyTaskValidity(int taskID) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (taskID \u003e taskList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(\"invalid task: task id \u003e list size\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else if (taskID \u003c 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(\"invalid task: task id \u003c 1\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String getCurrentStatus() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        int incompleteTasks \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            if (!t.isComplete()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                incompleteTasks++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"Now you have \" + incompleteTasks"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + ((incompleteTasks \u003d\u003d 1)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                   ? \" undone task\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                   : \" undone tasks\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + \" in the list.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 77
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    protected boolean isComplete() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return super.isComplete();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "blah"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 4 5 6"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done a"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline /by Sunday"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event /at Mon"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event /at 2-4pm"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 25
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 1,
      "-": 37
    }
  }
]
