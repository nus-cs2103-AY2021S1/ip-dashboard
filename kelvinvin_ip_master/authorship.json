[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation \u0027com.joestelmach:natty:0.13\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    implementation \u0027org.slf4j:slf4j-nop:2.0.0-alpha1\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 19,
      "-": 45
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "D | 1 | add product screenshot | 2020-09-12"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "E | 0 | lunch with Damith | 2020-09-13"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 2
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### Manage your tasks easily"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Navigate your way through a busy schedule with Batman"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### Autosaving "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Any changes to tasks will automatically be updated and saved in data/tasks.txt"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### CLI-first "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Increased efficiency for fast typists"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### Portable "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Works without requiring an installer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### `todo` - Creates a todo"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "A todo will be created. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`todo \u003cdescription\u003e`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`todo get A+ for CS2103T`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`[T][0] get A+ for CS2103T`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### `event` - Creates an event at a specified date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "An event will be created at the date specified by the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`event \u003cdescription\u003e /at \u003cdate\u003e`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`event lunch with Damith /at tomorrow`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`[E][0] lunch with Damith (at: Sep 13 2020)`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### `deadline` - Creates a deadline at a specified date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "A deadline will be created at the date specified by the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`deadline \u003cdescription\u003e /by \u003cdate\u003e`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`deadline finish product website /by tomorrow`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`[D][0] finish product website (by: Sep 13 2020)`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### `done` - Marks a task as done"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Marks a specified event/deadline/todo as done. This changes the task\u0027s status code from 0 to 1."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`done \u003cindex of task\u003e`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`[D][1] finish product website (by: Sep 13 2020)`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### `list` - Describe action"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Asks Batman to display all the tasks in a list to the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`Here are the tasks in your list:`\\"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`1. [E][0] lunch with Damith (at: Sep 13 2020)`\\"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`2. [D][1] finish product website (by: Sep 13 2020)`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### `delete` - Deletes the task at the specified index"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Deletes the task at the specified index. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`delete \u003cindex of task\u003e`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`Noted. I\u0027ve removed this task:`\\"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`[E][0] lunch with Damith (at: Sep 13 2020)`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### `delete` - Deletes the task at the specified index"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Deletes the task at the specified index. "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`delete \u003cindex of task\u003e`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`Noted. I\u0027ve removed this task:`\\"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`[E][0] lunch with Damith (at: Sep 13 2020)`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### `find` - Finds all matching tasks"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Finds and returns all tasks that match user input\u0027s search terms. "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`find \u003csearch term\u003e`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`find lunch with Damith`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`Here are the matching tasks in your list:`\\"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`1.[E][0] lunch with Damith (at: Sep 13 2020)`\\"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`2.[E][0] lunch with Seth (at: Sep 14 2020)`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "### `bye` - Closes program"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Ends the conversation with Batman and closes the program after 1 second delay."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "`Farewell.`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "Natty - a third library used to parse date using natural language - http://natty.joestelmach.com/"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 141,
      "-": 21
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 61
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * Entry point of the Duke application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns a Duke."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param filePath Location of file to load tasks from."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return a duke for the current program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            Parser parser \u003d new Parser(fullCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            Command c \u003d parser.parse();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Runs the program with each of the strings in the argument. For testing purposes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param input test commands for Duke to carry out."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void testRun(String[] input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        for (String line : input) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                Parser parser \u003d new Parser(line);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                Command c \u003d parser.parse();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "         new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            Parser parser \u003d new Parser(input);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            Command c \u003d parser.parse();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String dukeReply \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return dukeReply;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 96,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 11
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            stage.setTitle(\"Batman\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 33
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                DialogBox.getDukeDialog(\"Hello I\u0027m batman\", dukeImage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 54
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.CommandNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.IncompleteCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /** the string input by the user to be parsed. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    String input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /** the string input but separated by delimiter whitespace. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    String[] inputSplitWhitespace;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Parser(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.inputSplitWhitespace \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns the task category of the user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return the task category of the user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String getTaskCategory() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return this.inputSplitWhitespace[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns the task message of the user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return the task message of the user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @throws IncompleteCommandException if there is no task message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String getTaskMessage() throws IncompleteCommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return this.inputSplitWhitespace[1].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new IncompleteCommandException(this.getTaskCategory());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns the task description of the user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return the task description of the user input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @throws DukeException if there is no task message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String getTaskDescription() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String[] taskMessageArr \u003d this.getTaskMessage().split(\"/\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return taskMessageArr[0].trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns the task time specified by the user input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return the task time specified by the user input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @throws DukeException if there is no task message or the task message is missing \"/\"."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String getTaskTime() throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String[] taskMessageArr \u003d this.getTaskMessage().split(\"/\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        boolean hasTime \u003d taskMessageArr.length \u003e 1 \u0026\u0026"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                taskMessageArr[1].split(\" \", 2).length \u003e 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        if (!hasTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new DukeException(\"Please specify the time of task e.g. event finish book /by 2019-15-10\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String originalTime \u003d taskMessageArr[1].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            com.joestelmach.natty.Parser parser \u003d new com.joestelmach.natty.Parser();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            List\u003cDateGroup\u003e groups \u003d parser.parse(originalTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "//            for (DateGroup dates:groups) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "//                System.out.println(dates.getDates());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return format.format(groups.get(0).getDates().get(0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns the task number specified by the user input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return the task number specified by the user input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @throws DukeException if the task number is not specified."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public int getTaskNumber() throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String digitsOnlyInput \u003d this.input.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        if (digitsOnlyInput.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new DukeException(\"Specify the task number to change e.g. done 12 / delete 4\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            int taskNumberToMark \u003d Integer.parseInt(digitsOnlyInput);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return taskNumberToMark;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Parses and makes sense of every user input before creating the respective commands."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return respective commands requested by the user input."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @throws DukeException if the tasktime cannot be parsed into datetime."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        switch (getTaskCategory()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return new DoneCommand(getTaskNumber());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return new DeleteCommand(getTaskNumber());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return new FindCommand(getTaskDescription());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return new AddCommand(\"todo\", getTaskMessage());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                return new AddCommand(getTaskCategory(), getTaskDescription(), getTaskTime());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                throw new DukeException(\"Datetime could not be recognised. Use yyyy-mm-dd format e.g. 2019-10-15\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new CommandNotFoundException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 131
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * Storage for loading and saving tasks to file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /** Creates a new Storage with the given filePath."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param filePath a relative URL giving the base location of the file to write to."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /** Saves the tasks to the file located at filePath."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Tasks are saved in the format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * \"\u003ctaskCategory\u003e | \u003ctaskStatus\u003e | \u003ctaskDescription\u003e | \u003ctaskTime\u003e\"."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void save(TaskList tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String fileData \u003d tasks.getAllTasksPlainText();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            fw.write(fileData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            System.out.println(\"An IO exception has occurred writing to .\" + this.filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /** Loads tasks from the file located at filePath."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return A array of strings, each representing a newline found in the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @throws DukeException if there is no file at filePath."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String[] load() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            // creates data directory if it does not exist"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            // creates duke.txt if it does not exist"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            ArrayList\u003cString\u003e fileData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                String plainText \u003d s.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                fileData.add(plainText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String[] strAr \u003d new String[fileData.size()];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return fileData.toArray(strAr);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new DukeException(\"File could not be found\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 73
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * List of tasks for adding, removing of tasks etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public TaskList() { }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Creates a TaskList from a String array."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param taskList String array with each string representing a line of Task.plaintext()."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @throws DukeException if newTaskTime cannot be parsed to DateTime format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public TaskList(String[] taskList) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        for (String plainText : taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String[] plainTextSplit \u003d plainText.split(\" \\\\| \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String newTaskCategory \u003d plainTextSplit[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String newTaskStatus \u003d plainTextSplit[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String newTaskDescription \u003d plainTextSplit[2];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String newTaskTime \u003d plainTextSplit.length \u003e 3 ? plainTextSplit[3] : \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            switch (newTaskCategory) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                addTask(new ToDo(newTaskDescription, Boolean.parseBoolean(newTaskStatus)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                addTask(new Event(newTaskDescription, Boolean.parseBoolean(newTaskStatus), newTaskTime));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                addTask(new Deadline(newTaskDescription, Boolean.parseBoolean(newTaskStatus), newTaskTime));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                assert newTaskCategory !\u003d null : \"The text file is corrupted. There is a unrecognised task category.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns a array of Tasks within the taskList that match the searchTerm."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param searchTerm"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return a array of Tasks within the taskList that match the searchTerm."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Task[] findTasks(String searchTerm) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ArrayList\u003cTask\u003e tasksFound \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            if (task.getDescription().contains(searchTerm)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                tasksFound.add(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return tasksFound.toArray(new Task[tasksFound.size()]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns a array of the string representation of Tasks within the taskList that match the searchTerm."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param searchTerm"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return a array of the string representation of Tasks within the taskList that match the searchTerm."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String[] findTasksToString(String searchTerm) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ArrayList\u003cString\u003e tasksFound \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            if (task.getDescription().contains(searchTerm)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                tasksFound.add(counter + \".\" + task.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return tasksFound.toArray(new String[tasksFound.size()]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Deletes a task from the task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param taskNumberToMark the position of the task to delete within the tasklist."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return the task that was deleted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Task deleteTask(int taskNumberToMark) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Task taskToMark \u003d this.taskList.remove(taskNumberToMark - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return taskToMark;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Marks a task from the task list as done."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param taskNumberToMark the position of the task to mark as done within the tasklist."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return the task that was marked done."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Task markTask(int taskNumberToMark) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Task taskToMark \u003d this.taskList.get(taskNumberToMark - 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        taskToMark.markAsDone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return taskToMark;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Adds a task to the taskList."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param newTask the task to be added."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return the task that was added."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Task addTask(Task newTask) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Gets the size of the tasklist."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return size of the tasklist."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Gets the task at the specified index in the tasklist."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param index the index of the task to return."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return the task at the specified index in the tasklist."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return this.taskList.get(index);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Gets a concatenated string of all the tasks in plainText for saving to file."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return a concatenated string of all the tasks in plainText."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String getAllTasksPlainText() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String[] taskArr \u003d new String[this.getSize()];"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        for (int k \u003d 0; k \u003c this.getSize(); k++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            taskArr[k] \u003d this.getTask(k).getPlainText();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String fileData \u003d String.join(\"\\n\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                taskArr);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return fileData;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 151
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " * Front facing interface for printing and accepting of user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    private Scanner scannerObj;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Ui () {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.scannerObj \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    static String MSG_DIVIDER \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Shows a LoadingError message to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        System.out.println(\"Oops! We couldn\u0027t load the file\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Prints a line divider."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        System.out.println(MSG_DIVIDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Shows a error message to the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param err description of the error"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void showError(String err) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        System.out.println(\"Error: \" + err);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Shows a message to the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param msg the message to be printed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void showMessage(String msg) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Shows a welcome message to the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        System.out.println(\"Hello I\u0027m batman\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Shows a farewell message to the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void showFarewell() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        System.out.println(\"byeee\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Reads the user\u0027s input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return the user\u0027s input as a string"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String input \u003d scannerObj.nextLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 71
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class AddCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    String taskCategory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    String taskDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    String taskTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public AddCommand(String taskCategory, String taskDescription, String taskTime) throws DateTimeParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.taskCategory \u003d taskCategory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.taskTime \u003d taskTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public AddCommand(String taskCategory, String taskDescription) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.taskCategory \u003d taskCategory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DateTimeParseException, DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assert taskCategory !\u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assert taskDescription !\u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        switch (taskCategory) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            newTask \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        case \"event\" :"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            assert taskTime !\u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            newTask \u003d new Event(taskDescription, taskTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            assert taskTime !\u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            newTask \u003d new Deadline(taskDescription, taskTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            newTask \u003d new Task();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String successMsg \u003d \"Got it. I\u0027ve added this task:\\n\" + newTask;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String remainingTasksMsg \u003d \"\\nNow you have \" + tasks.getSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String finalMsg \u003d successMsg + remainingTasksMsg;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ui.showMessage(finalMsg);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return finalMsg;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 61
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        CompletableFuture.runAsync(() -\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                Thread.sleep(1000);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            } catch (InterruptedException ex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                Thread.currentThread().interrupt();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ui.showFarewell();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return \"Farewell.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 24
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Executes the command on the current program\u0027s tasks, UI and stored file based on type of command and user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param tasks the tasklist to modify during execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param ui the frontend interface to communicate with the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param storage the storage file to save and load tasks from."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    int taskNumberToDelete;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public DeleteCommand(int taskNumberToDelete) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.taskNumberToDelete \u003d taskNumberToDelete;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assert taskNumberToDelete \u003e 0 : \"Task number must be greater than 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        if (taskNumberToDelete \u003e tasks.getSize() | taskNumberToDelete \u003c 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new DukeException(\"There is no such task number.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            Task taskToDelete \u003d tasks.deleteTask(this.taskNumberToDelete);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String successfulMsg \u003d \"Noted. I\u0027ve removed this task:\\n\" + taskToDelete;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String remainingTasksMsg \u003d \"\\nNow you have \" + tasks.getSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String finalMsg \u003d successfulMsg + remainingTasksMsg;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            ui.showMessage(finalMsg);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return finalMsg;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    int taskNumberToMark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public DoneCommand(int taskNumberToMark) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.taskNumberToMark \u003d taskNumberToMark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assert taskNumberToMark \u003e 0 : \"Task number must be greater than 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        if (taskNumberToMark \u003e tasks.getSize() | taskNumberToMark \u003c 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new DukeException(\"There is no such task number.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            Task taskToMark \u003d tasks.markTask(this.taskNumberToMark);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String finalMessage \u003d \"Nicely done. I\u0027ve marked this task as done:\" + \"\\n\" + taskToMark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            ui.showMessage(finalMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return finalMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 29
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    String searchTerms;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public FindCommand(String searchTerms) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.searchTerms \u003d searchTerms;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String[] tasksFound \u003d tasks.findTasksToString(this.searchTerms);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        if (tasksFound.length \u003e 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String listTasksFound \u003d String.join(\"\\n\", tasksFound);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String successfulMsg \u003d \"Here are the matching tasks in your list:\\n\" + listTasksFound;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            ui.showMessage(successfulMsg);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return successfulMsg;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            String unsuccessfulMsg \u003d \"There were no matches to that term\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            ui.showMessage(unsuccessfulMsg);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            return unsuccessfulMsg;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 30
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        if (tasks.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            message +\u003d \"You have no tasks currently :)\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            message +\u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            for (int n \u003d 1; n \u003c\u003d tasks.getSize(); n++) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                message +\u003d (\"\\n\" + n + \".\" + tasks.getTask(n - 1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        ui.showMessage(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 22
    }
  },
  {
    "path": "src/main/java/duke/exception/CommandNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class CommandNotFoundException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public CommandNotFoundException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public DukeException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/IncompleteCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class IncompleteCommandException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public IncompleteCommandException(String taskName) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        super(\"OOPS!!! The description of a \" + taskName + \" cannot be empty.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 8
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /** the time by which the task needs to be completed by */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Creates a Deadline with the specified description and deadline time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param by the time by which the task should be finished by."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @throws DukeException if the deadline time cannot be parsed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            this.by \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new DukeException(\"Datetime could not be recognised.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     /** Creates a Deadline with the specified description, completion status and deadline time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      * @param description the description of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      * @param isDone the completion status of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      * @param by the time by which the task should be finished by."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      * @throws DukeException if the deadline time cannot be parsed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "      */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Deadline(String description, boolean isDone, String by) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            this.by \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new DukeException(\"Datetime could not be recognised. Use yyyy-mm-dd format e.g. 2019-10-15\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns a plainText formatted string representation of the task, for saving and loading into a text file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return a plainText formatted string representation of the task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String getPlainText() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return super.getPlainText() + \" | \" + by;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String formattedBy \u003d by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formattedBy + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 60
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /** the time by which the task starts */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Creates a Event with the specified description and event time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param at the time by which the task should starts at."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @throws DukeException if the event time cannot be parsed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Event(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            this.at \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new DukeException(\"Datetime could not be recognised. Use yyyy-mm-dd format e.g. 2019-10-15\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Creates a Event with the specified description and event time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param isDone the completion status of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @param at the time by which the task should starts at."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @throws DukeException if the event time cannot be parsed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Event(String description, boolean isDone, String at) throws DukeException  {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            this.at \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            throw new DukeException(\"Loading: Datetime could not be recognised. Use yyyy-mm-dd format e.g. 2019-10-15\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns a plainText formatted string representation of the task, for saving and loading into a text file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return a plainText formatted string representation of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String getPlainText() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return super.getPlainText() + \" | \" + at;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String formattedAt \u003d at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formattedAt + \")\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 61
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /** description of the task. */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /** completion status of the task. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.description \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return the description of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns icons representing the completion status of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return icons representing the completion status of the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return (isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Sets the isDone status of the task as done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * Returns a plainText formatted string representation of the task, for saving and loading into a text file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     * @return a plainText formatted string representation of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String getPlainText() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        char className \u003d this.getClass().getSimpleName().charAt(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String completionStatus \u003d isDone? \"1\" : \"0\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return className + \" | \" + completionStatus + \" | \" + description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 62
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 16
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 19
    }
  },
  {
    "path": "src/test/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void deadlineCreation_deadlineFulMessage_deadlineMatches() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        File fw \u003d new File(\"../data/tasks.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        fw.delete();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Duke testDuke \u003d new Duke(\"../data/tasks.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String[] testInput \u003d {\"deadline finish level-7 /by 2020-08-24\", \"bye\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        testDuke.testRun(testInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Task taskCreated \u003d testDuke.getTasks().getTask(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertEquals(new Deadline(\"finish level-7\", LocalDate.parse(\"2020-08-24\").toString()).getPlainText(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "                taskCreated.getPlainText());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 27
    }
  },
  {
    "path": "src/test/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void toDoParsing_todoMessage_matchesToDo(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String testInput \u003d \"todo read book\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Parser testParser \u003d new Parser(testInput);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertEquals(\"todo\", testParser.getTaskCategory());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void eventParsing_eventFullMessage_matchesTaskTime() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String testInput \u003d \"event read book /by 2020-14-05\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Parser testParser \u003d new Parser(testInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        assertEquals(\"2020-14-05\", testParser.getTaskTime());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    public void eventCreation_eventFullMessage_taskAdded() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        String testInput \u003d \"event finish level-7 /by 2020-08-25\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Parser testParser \u003d new Parser(testInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        Storage storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        storage.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            testParser.parse().execute(tasks, new Ui(), storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            assertEquals(1, tasks.getSize());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "            System.out.print(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 38
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "deadline wakeup /by 730am"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "todo finish cs2103 ip"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "event lunch /at 12pm-1pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "event todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "todo event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "hey alexa play despacito"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinvin"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "kelvinvin": 15
    }
  }
]
