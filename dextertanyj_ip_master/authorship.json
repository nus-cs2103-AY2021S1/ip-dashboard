[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    archiveBaseName \u003d \"ip\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 17,
      "-": 43
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.setAlignment(Pos.CENTER_RIGHT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        dialog.setText(removeNewline(text));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Circle mask \u003d new Circle(displayPicture.getFitHeight() / 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        mask.setCenterX(displayPicture.getFitHeight() / 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        mask.setCenterY(displayPicture.getFitWidth() / 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        displayPicture.setClip(mask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image image) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new DialogBox(text, image).flip();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image image) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new DialogBox(text, image);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private DialogBox flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String removeNewline(String content) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (content.endsWith(\"\\n\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return content.substring(0, content.length() - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return content;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 63
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.CliWrapper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Entry point for the chat bot."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Execute the jar file with \"-mode cli\" as arguments to access command line interface."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Otherwise, defaults to graphical user interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // Adapted from https://stackoverflow.com/a/1254338"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cString\u003e arguments \u003d Arrays.asList(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int modeIndex \u003d arguments.indexOf(\"-mode\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String mode \u003d modeIndex \u003d\u003d -1 ? \"gui\" : arguments.get(modeIndex + 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (mode.equals(\"gui\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else if (mode.equals(\"cli\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String[] defaultArgs \u003d {};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            CliWrapper.main(defaultArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 29
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * A GUI for duke.Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().start();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 27
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.Response;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // Images from https://www.pngguru.com"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // License: PNGGuru is an open community for users to share PNG cliparts,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // all PNG cliparts in PNGGuru are for Non-Commercial Use, no attribution required."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // Image from https://www.pngguru.com/free-transparent-background-png-clipart-kwdio"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // Image from https://www.pngguru.com/free-transparent-background-png-clipart-mnsxw"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Image botImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Bot.png\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            duke \u003d new Duke(true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (DukeStorageException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            print(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            duke \u003d new Duke(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            greet();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Retrieves user input and executes it. Prints a dialog box to echo the user input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * and another dialog box containing the chat bot response."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        printInput(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Response response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            print(response.getResponseMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (response.shouldExit()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                // Adapted from https://stackoverflow.com/a/27334614"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                PauseTransition pause \u003d new PauseTransition((Duration.seconds(2)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                pause.setOnFinished((event) -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    Platform.exit();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                pause.play();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            print(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void printInput(String input) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void print(String response) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DialogBox.getDukeDialog(response, botImage)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void greet() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String welcomeMessage \u003d \"Konnichiwa!\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + \"What can I do for you?\\n\";;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(welcomeMessage, botImage));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 100
    }
  },
  {
    "path": "src/main/java/duke/CliWrapper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.Response;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.ui.Clui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class CliWrapper {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Clui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private CliWrapper(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ui \u003d new Clui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            duke \u003d new Duke(filePath, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (DukeStorageException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ui.print(e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            duke \u003d new Duke(filePath, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Response response \u003d duke.getResponse(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ui.print(response.getResponseMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                isExit \u003d response.shouldExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (IncompleteDukeCommandException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ui.print(\"Something went wrong, but I\u0027m not sure what...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ui.print(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        new CliWrapper(Storage.FILE_PATH).run();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 45
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.Response;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Duke} class controls the logic of the chat bot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an instance of the chat bot logic."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Uses the default save location."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param useHistory true if the local save file at the default save location should be loaded."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Duke(boolean useHistory) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this(Storage.FILE_PATH, useHistory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an instance of the chat bot logic."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param filePath the file path to store the local save file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param useHistory true if the local save file should be loaded."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeStorageException if the file at the specified {@code filePath} could not be found."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Duke(String filePath, boolean useHistory) throws DukeStorageException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (useHistory) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (DukeStorageException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"I think I lost my memory... Let me start afresh.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the appropriate {@link Response} for the specified input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param input the user input to process."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the response from the chat bot."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Response getResponse(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        c.execute(taskList, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Response(c.isExit(), c.feedback());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 60
    }
  },
  {
    "path": "src/main/java/duke/Encodable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public interface Encodable\u003cT\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    String encode();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 6
    }
  },
  {
    "path": "src/main/java/duke/Searchable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public interface Searchable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    boolean match(String searchParameter);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 6
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code CompleteCommand} class represents a command to create a new {@link Task}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Task createdTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int remainingTaskCount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an {@code AddCommand} with the specified type and specified task details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param type           the type of {@code Task} to be added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param taskDetail     the details of the task to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeException if the specified type is null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public AddCommand(TaskType type, String taskDetail) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            createdTask \u003d Deadline.createTask(taskDetail);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            createdTask \u003d Event.createTask(taskDetail);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            createdTask \u003d ToDo.createTask(taskDetail);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeException(\"I don\u0027t understand.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code AddCommand} by adding the created {@code Task} to the specified {@code list}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        list.add(createdTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        remainingTaskCount \u003d list.taskCount();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints a feedback confirming the execution of this {@code AddCommand}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteDukeCommandException if this {@code AddCommand} was not executed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String feedback() throws IncompleteDukeCommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return String.format("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    \"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in your list.\\n\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    createdTask.toString(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    remainingTaskCount);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"Add command was not completed.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 82
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Command} class provides a skeletal implementation of an executable command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected boolean completed \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes the command with the supplied {@code list} and {@code storage}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public abstract void execute(TaskList list, Storage storage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints a feedback after this {@code Command} has been executed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeException if this {@code Command} has not been executed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public abstract String feedback() throws DukeException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if this {@code Command} should terminate the program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if this {@code Command} should terminate the program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 35
    }
  },
  {
    "path": "src/main/java/duke/command/CompleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code CompleteCommand} class represents a command to mark a {@link Task} in a {@link TaskList} as complete."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class CompleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Task completedTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code CompleteCommand} with the specified {@code index}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to mark as complete."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public CompleteCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code CompleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Marks the {@code Task} in the specified {@code list} at the stored {@code index} as complete."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        completedTask \u003d list.markAsComplete(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints a feedback confirming the execution of this {@code CompleteCommand}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteDukeCommandException if this {@code CompleteCommand} was not executed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String feedback() throws IncompleteDukeCommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return String.format(\"Nice! I\u0027ve marked this task as complete:\\n  %s\\n\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    completedTask.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"Complete command was not completed.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 61
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteAllCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code DeleteAllCommand} class represents a command to remove all entries in a {@link TaskList}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DeleteAllCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code DeleteAllCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Deletes all contents in the specified {@code list}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        list.clearList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints a feedback confirming the execution of this {@code DeleteAllCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteDukeCommandException if this {@code DeleteAllCommand} was not executed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String feedback() throws IncompleteDukeCommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return \"I\u0027ve cleared all your tasks.\\nYou sure are efficient.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"Delete all command was not completed.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 47
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code DeleteCommand} class represents a command to delete a {@link Task} in a {@link TaskList}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Task deletedTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int remainingTaskCount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code DeleteCommand} with the specified {@code index}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to delete."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Deletes the {@code Task} in the specified {@code list} at the stored {@code index}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        deletedTask \u003d list.deleteTask(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        remainingTaskCount \u003d list.taskCount();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints a feedback confirming the execution of this {@code DeleteCommand}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteDukeCommandException if this {@code DeleteCommand} was not executed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String feedback() throws IncompleteDukeCommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return String.format(\"Noted. I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in your list.\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    deletedTask.toString(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    remainingTaskCount);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"Delete command was not completed.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 64
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Exit} class represents a command to safely terminate the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code ExitCommand} by saving the specified {@code list} to file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints a feedback confirming the execution of this {@code ExitCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteDukeCommandException if this {@code ExitCommand} was not executed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String feedback() throws IncompleteDukeCommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return \"Ja ne!\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"Exit command was not completed.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code ListCommand} class represents a command to print all contents of a {@link TaskList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The output of the {@code ListCommand} retains the same order of tasks in the {@code TaskList}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private List\u003cTask\u003e existingTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code ListCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        existingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            existingTasks.add(task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints the result of executing this {@code ListCommand}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteDukeCommandException if this {@code ListCommand} was not executed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String feedback() throws IncompleteDukeCommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String printout \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (existingTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                printout \u003d \"Congratulations! You don\u0027t have any tasks left to do.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                printout \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                for (int i \u003d 0; i \u003c existingTasks.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    printout +\u003d String.format(\"%d.%s\\n\", i + 1, existingTasks.get(i).toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return printout;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"List command was not completed.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 65
    }
  },
  {
    "path": "src/main/java/duke/command/Response.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Response} class represents a response of an executed {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Response {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String responseMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code Response} with the specified {@code responseMessage} and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code isExit} value."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param isExit true if the {@code Command} executed was the {@link ExitCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param responseMessage the feedback message from the {@code Command}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Response(boolean isExit, String responseMessage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.responseMessage \u003d responseMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the message stored in this {@code Response} object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the message stored in this {@code Response} object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String getResponseMessage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return responseMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if the {@code Command} executed was the {@code ExitCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if the {@code Command} executed was the {@code ExitCommand}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 40
    }
  },
  {
    "path": "src/main/java/duke/command/SearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code SearchCommand} class represents a command that allows the user to search for tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The user is able to search for tasks either through their description or"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * their date (if the type of task supports it)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String searchParameter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private List\u003cTask\u003e results;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code SearchCommand} with the specified {@code searchParameter}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param searchParameter the string for which to search for."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public SearchCommand(String searchParameter) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.searchParameter \u003d searchParameter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code SearchCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (task.match(searchParameter)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints the result of executing this {@code SearchCommand}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteDukeCommandException if this {@code DeleteCommand} was not executed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String feedback() throws IncompleteDukeCommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String resultPrint \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (Task result : results) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                if (resultPrint.length() \u003e 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    resultPrint \u003d resultPrint.concat(\"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                resultPrint \u003d resultPrint.concat(result.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return resultPrint;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"Search command was not completed.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 75
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(String.format(\"Gomen nasai~ %s\\n\", message));"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeStorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DukeStorageException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public DukeStorageException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeTaskCreationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DukeTaskCreationException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public DukeTaskCreationException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/IncompleteDukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class IncompleteDukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public IncompleteDukeCommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ParseDukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ParseDukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ParseDukeCommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/duke/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code DateParser} class provides methods for parsing date-time and duration related strings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Also provides methods for converting {@code LocalDateTime} objects to standardised strings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final List\u003cString\u003e ACCEPTED_FORMATS_WITH_TIME \u003d Arrays.asList(\"d MMM uuuu HH:mm\", \"d-M-uuuu HH:mm\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \"d/M/uuuu HH:mm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final List\u003cString\u003e ACCEPTED_FORMATS_DATE_ONLY \u003d Arrays.asList(\"d MMM uuuu\", \"d-M-uuuu\", \"d/M/uuuu\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final int HAS_TIME_INDICATOR \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final int NULL_TIME_INDICATOR \u003d 30;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Parses the specified {@code input} string into a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Does not support storing seconds."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param input the string to be parsed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the {@code LocalDateTime} object representing the specified date and time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeException if the format of the input is not recognised."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static LocalDateTime parseString(String input) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (input.contains(\":\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (String format : ACCEPTED_FORMATS_WITH_TIME) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    DateTimeFormatter formatter \u003d builder.parseCaseInsensitive().appendPattern(format).toFormatter();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return LocalDateTime.parse(input, formatter)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                            .withSecond(HAS_TIME_INDICATOR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    // We continue to try other formats until all fails before we throw an exception."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (String format : ACCEPTED_FORMATS_DATE_ONLY) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    // Since we do not support seconds for date and time based information, we use the second field to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    // differentiate between a LocalDateTime with no defined time and one with time defined at midnight."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    DateTimeFormatter formatter \u003d builder.parseCaseInsensitive().appendPattern(format).toFormatter();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return LocalDate.parse(input, formatter).atStartOfDay()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                            .withSecond(NULL_TIME_INDICATOR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    // We continue to try other formats until all fails before we throw an exception."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new DukeException(\"I can\u0027t quite understand what you\u0027re saying...\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Parses the specified {@code input} string into its corresponding duration in minutes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param input the string to be parsed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the parsed duration in minutes."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeException if the format of the input is not recognised."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static int parseDuration(String input) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            int minutes \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (input.contains(\"d\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                minutes +\u003d 1440 * Double.parseDouble(input.split(\"d\")[0].trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                if (input.split(\"d\").length \u003e 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    input \u003d input.split(\"d\")[1].replaceAll(\"[^\\\\d]\", \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    input \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (input !\u003d null \u0026\u0026 input.contains(\"h\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                minutes +\u003d 60 * Double.parseDouble(input.split(\"h\")[0].trim());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                if (input.split(\"h\").length \u003e 1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    input \u003d input.split(\"h\")[1].replaceAll(\"[^\\\\d]\", \"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    input \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (input !\u003d null \u0026\u0026 input.contains(\"m\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                minutes +\u003d Double.parseDouble(input.split(\"m\")[0]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return minutes;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeException(\"I can\u0027t understand what you\u0027re saying...\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Converts the specified {@code LocalDateTime} object to a string."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param dateTime the {@code LocalDateTime} object to be converted."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the string representation of the specified {@code LocalDateTime} object."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static String parseLocalDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (dateTime.getSecond() \u003d\u003d NULL_TIME_INDICATOR) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return dateTime.format(DateTimeFormatter.ofPattern(ACCEPTED_FORMATS_DATE_ONLY.get(0)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return dateTime.format(DateTimeFormatter.ofPattern(ACCEPTED_FORMATS_WITH_TIME.get(0)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if the specified {@code LocalDateTime} object represents only a date with no time."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param dateTime the {@code LocalDateTime} object to test."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if the {@code LocalDateTime} object represents only a date with no time."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static boolean isDateOnly(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return dateTime.getSecond() \u003d\u003d NULL_TIME_INDICATOR;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 122
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.CompleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.DeleteAllCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.SearchCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.ParseDukeCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Parser} class provides methods for parsing user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * An enum containing keywords used by the user for program control."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    enum Keyword {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        EXIT(\"exit\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LIST(\"list\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        COMPLETE(\"complete\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TODO(\"todo\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        EVENT(\"event\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DELETE(\"delete\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        SEARCH(\"search\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        private final String input;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Keyword(String keyword) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            input \u003d keyword;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         * Finds and returns the {@code Keyword} matching the specified input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         * @param keyword the input to match against."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         * @return the {@code keyword} corresponding to the specified input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         * @throws ParseDukeCommandException if there is no matching {@code Keyword}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        public static Keyword findKeyword(String keyword) throws ParseDukeCommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (Keyword k : values()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                if (keyword.toLowerCase().equals(k.input)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return k;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ParseDukeCommandException(\"Wakarimasen~\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Parses the specified user input and returns its corresponding {@link Command}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param userInput the user input to be parsed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Command} object to be executed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ParseDukeCommandException if the user input is not recognised."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Command parse(String userInput) throws ParseDukeCommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] inputs \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // By spec, inputs is guaranteed to have at least one element."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String inputKeyword \u003d inputs[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Keyword keyword \u003d Keyword.findKeyword(inputKeyword);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case COMPLETE:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                int index \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new CompleteCommand(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"What did you complete exaclty?\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"This isn\u0027t harry potter, please use only integers.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                if (userInput.toLowerCase().contains(\"all\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return new DeleteAllCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    int index \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return new DeleteCommand(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"What do you want to remove exactly?\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"This isn\u0027t harry potter, please use only integers.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new AddCommand(TaskType.DEADLINE, inputs[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"What are you rushing for? To wait?\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new AddCommand(TaskType.TODO, inputs[1]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"I know your life is empty but your todo can\u0027t be empty.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new AddCommand(TaskType.EVENT, inputs[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"Are you going to attend a nameless event?\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case SEARCH:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new SearchCommand(inputs[1]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"I don\u0027t have the answer to every or anything\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ParseDukeCommandException(\"Wakarimasen~\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 122
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Storage} class provides persistent local storage for tasks stored in the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * The default local file path to be used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String FILE_PATH \u003d \"duke/localData/data.duke\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code Storage} object from the specified file path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param filePath the file path to store the local save file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *                 Relative to the user\u0027s home directory."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Saves the specified list of tasks to the local save file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list the {@link TaskList} to be saved."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeStorageException if the file cannot be written to."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void save(TaskList list) throws DukeStorageException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] directories \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Path path \u003d Paths.get(home, directories);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!Files.exists(path.getParent())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            boolean directoriesCreated \u003d path.getParent().toFile().mkdirs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (!directoriesCreated) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"I got lost somewhere in your folders.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            FileWriter writer \u003d new FileWriter(path.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (Task item : list) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                writer.write(item.encode() + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeStorageException(\"I didn\u0027t have enough strength to move the bits.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // TODO: Consider moving decoding switch statement to its own method or under a util class."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a list of tasks loaded from the local save file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a list of tasks loaded from the local save file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeStorageException if the file does not exist or its content corrupted."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeStorageException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String[] directories \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Path path \u003d Paths.get(home, directories);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            File history \u003d new File(path.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Scanner sc \u003d new Scanner(history);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            List\u003cTask\u003e temporaryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Task loadedTask \u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                switch (line.charAt(0)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                case \u0027E\u0027:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    loadedTask \u003d Event.decode(line);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                case \u0027D\u0027:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    loadedTask \u003d Deadline.decode(line);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                case \u0027T\u0027:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    loadedTask \u003d ToDo.decode(line);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    throw new DukeStorageException(\"There\u0027s something wrong with my memory...\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                temporaryList.add(loadedTask);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return temporaryList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeStorageException(\"There\u0027s something wrong with my memory...\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeStorageException(\"I lost my memories.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 111
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeTaskCreationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Deadline} class represents a task with a specific deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Extends the {@link Task} class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String DEADLINE_DELIMITER \u003d \"by\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Deadline(String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@code Deadline} object with the specified {@code details}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param details the description and deadline of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Deadline} object with the specified details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeTaskCreationException if format of the specified details is not recognised."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Deadline createTask(String details) throws DukeTaskCreationException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (details \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeTaskCreationException(\"I need something to work with.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String description \u003d details.substring(0, details.lastIndexOf(DEADLINE_DELIMITER)).trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String dateTimeString \u003d details.substring(details.lastIndexOf(DEADLINE_DELIMITER) + 2).trim().toLowerCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDateTime dateTime \u003d DateParser.parseString(dateTimeString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeTaskCreationException(\"So you never did plan on doing it huh...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Decodes an encoded string into a {@code Deadline} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param code the encoded string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Deadline} reconstructed from the encoded string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeStorageException if format of the code is incorrect."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Deadline decode(String code) throws DukeStorageException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (code.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String[] content \u003d code.split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (content.length !\u003d 4) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"There are some holes in my memory...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline newDeadline \u003d new Deadline(content[3], DateParser.parseString(content[2]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (content[1].equals(\"Y\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                newDeadline.setCompleted();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } else if (!content[1].equals(\"N\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"There are some holes in my memory...\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return newDeadline;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeStorageException(\"Something doesn\u0027t seem right...\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an encoded string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an encoded string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return String.format(\"D|%s|%s|%s\", super.completed ? \"Y\" : \"N\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DateParser.parseLocalDateTime(dateTime),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                super.description);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if this {@code Deadline} matches the specified {@code searchParameter}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param searchParameter the string to test against."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if this {@code Deadline} matches the specified {@code searchParameter}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean match(String searchParameter) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDate searchDate \u003d DateParser.parseString(searchParameter).toLocalDate();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (searchDate.isEqual(dateTime.toLocalDate())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            // We attempt to parse the string as a LocalDate and compare it to the deadline date,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            // but upon failure, we perform a comparison with the deadline description."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return searchParameter.contains(description) || description.contains(searchParameter);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + DateParser.parseLocalDateTime(dateTime) + \")\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 113
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeTaskCreationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Event} class represents an event with a scheduled time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Extends the {@link Task} class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String EVENT_DELIMITER \u003d \"from\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String DURATION_DELIMITER \u003d \"for\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String END_TIME_DELIMITER \u003d \"to\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String ALL_DAY_KEYWORD \u003d \"all day\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Event(String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        startDateTime \u003d start;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        endDateTime \u003d end;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an {@code Event} object with the specified {@code details}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param details the description and time of the event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an {@code Event} object with the specified details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeTaskCreationException if format of the specified details is not recognised."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Event createTask(String details) throws DukeTaskCreationException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (details \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeTaskCreationException(\"I need something to work with.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String description \u003d details.substring(0, details.lastIndexOf(EVENT_DELIMITER)).trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String dateTimeComponent \u003d details.substring(details.lastIndexOf(EVENT_DELIMITER) + 4).trim().toLowerCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (dateTimeComponent.contains(ALL_DAY_KEYWORD)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String start \u003d dateTimeComponent.split(ALL_DAY_KEYWORD)[0].split(DURATION_DELIMITER)[0].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                LocalDateTime startDateTime \u003d DateParser.parseString(start);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                LocalDateTime endDateTime \u003d startDateTime.withHour(23).withMinute(59);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new Event(description, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } else if (dateTimeComponent.contains(END_TIME_DELIMITER)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    String start \u003d dateTimeComponent.split(END_TIME_DELIMITER)[0].trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    String end \u003d dateTimeComponent.split(END_TIME_DELIMITER)[1].trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    LocalDateTime startDateTime \u003d DateParser.parseString(start);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    LocalDateTime endDateTime \u003d DateParser.parseString(end);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return new Event(description, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    throw new DukeTaskCreationException(\"Does this thing ever end???\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } else if (dateTimeComponent.contains(DURATION_DELIMITER)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    String start \u003d dateTimeComponent.split(DURATION_DELIMITER)[0].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    int duration \u003d DateParser.parseDuration(dateTimeComponent.split(DURATION_DELIMITER)[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    LocalDateTime startDateTime \u003d DateParser.parseString(start);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    LocalDateTime endDateTime \u003d startDateTime.plusMinutes(duration);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return new Event(description, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    throw new DukeTaskCreationException(\"Does this thing ever end???\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeTaskCreationException(\"Wow that sure is one long event.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeTaskCreationException(\"Something\u0027s missing, oh right I lost track of time.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Decodes an encoded string into an {@code Event} object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param code the encoded string."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an {@code Event} reconstructed from the encoded string."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeStorageException if format of the code is incorrect."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Event decode(String code) throws DukeStorageException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (code.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String[] content \u003d code.split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (content.length !\u003d 5) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"There are some holes in my memory...\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Event newEvent \u003d new Event(content[3],"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    DateParser.parseString(content[2]),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    DateParser.parseString(content[3]));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (content[1].equals(\"Y\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                newEvent.setCompleted();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } else if (!content[1].equals(\"N\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"There are some holes in my memory...\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return newEvent;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeStorageException(\"Something doesn\u0027t seem right...\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an encoded string representation of this {@code Event}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an encoded string representation of this {@code Event}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return String.format(\"E|%s|%s|%s|%s\", super.completed ? \"Y\" : \"N\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DateParser.parseLocalDateTime(startDateTime),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DateParser.parseLocalDateTime(endDateTime),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                super.description);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if this {@code Event} matches the specified {@code searchParameter}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param searchParameter the string to test against."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if this {@code Event} matches the specified {@code searchParameter}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean match(String searchParameter) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDate searchDate \u003d DateParser.parseString(searchParameter).toLocalDate();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (searchDate.isEqual(startDateTime.toLocalDate()) || searchDate.isEqual(endDateTime.toLocalDate())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    || (searchDate.isBefore(endDateTime.toLocalDate())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    \u0026\u0026 searchDate.isAfter(startDateTime.toLocalDate()))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            // We attempt to parse the string as a LocalDate and compare it to the event date,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            // but upon failure, we perform a comparison with the event description."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return searchParameter.contains(description) || description.contains(searchParameter);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string representation of this {@code Event} object."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string representation of this {@code Event} object."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (DateParser.isDateOnly(startDateTime) \u0026\u0026 startDateTime.toLocalDate().isEqual(endDateTime.toLocalDate())) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return \"[E]\" + super.toString() + \" (on \" + DateParser.parseLocalDateTime(startDateTime)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    + \" for all day)\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return \"[E]\" + super.toString() + \" (from \" + DateParser.parseLocalDateTime(startDateTime)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    + \" to \" + DateParser.parseLocalDateTime(endDateTime) + \")\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 158
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Encodable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Searchable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeTaskCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Task} class provides a skeletal implementation of an object representing a task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Implements the {@code Encodable} and {@code Searchable} interface."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public abstract class Task implements Encodable\u003cTask\u003e, Searchable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String COMPLETED_ICON \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String INCOMPLETE_ICON \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected boolean completed;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an instance of a task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeTaskCreationException if the {@code description} is empty."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected Task(String description) throws DukeTaskCreationException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (description.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeTaskCreationException(\"That\u0027s really descriptive...\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        completed \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Marks a task as complete."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setCompleted() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        completed \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return completed ? COMPLETED_ICON : INCOMPLETE_ICON;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string representation of this {@code Task}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Contains the description and completion status of this {@code Task}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string representation of this {@code Task}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 54
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code TaskList} class is an ordered collection of {@link Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * This class provides methods to add, delete and mark as complete {@code Task}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * This class also provides methods to list and remove all {@code Task}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Implements the {@code Iterable} interface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private List\u003cTask\u003e store;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an empty {@code TaskList} instance."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        store \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code TaskList} containing {@code Task} of the specified list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list the list of {@code Task} whose contents are to be imported into this {@code TaskList}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        store \u003d list;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Adds the specified {@code Task} to the end of this {@code TaskList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param item the task to be inserted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the task that was inserted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Task add(Task item) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        store.add(item);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Marks the {@code Task} at the specified index in this {@code TaskList} as complete."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to mark as complete."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the {@code Task} that was marked as complete."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeException if the index is out of range."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Task markAsComplete(int index) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Task selected \u003d store.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            selected.setCompleted();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return selected;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeException(\"I couldn\u0027t find that task. Are you trying to make 2020 worse?\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Deletes the {@code Task} at the specified index in this {@code TaskList}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to delete."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the {@code Task} that was deleted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Task deleteTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Task removed \u003d store.remove(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return removed;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeException(\"I couldn\u0027t find that task. Are you trying to make 2020 worse?\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Deletes all existing {@code Task} in this {@code TaskList}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if this {@code TaskList} was successfully cleared."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean clearList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        store \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the number of {@code Task} in this {@code TaskList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the number of {@code Task} in this {@code TaskList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public int taskCount() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return store.size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an {@code Iterator} over the contents of this {@code TaskList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an {@code Iterator} over the contents of this {@code TaskList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return store.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 107
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * An enum containing the types of {@link Task} supported by the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 10
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeTaskCreationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code ToDo} class represents the most basic task with no additional parameters."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Extends the {@link Task} class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@code ToDo} object with the specified {@code details}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param details the description of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code ToDo} object with the specified details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeTaskCreationException if format of the specified details is not recognised."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static ToDo createTask(String details) throws DukeTaskCreationException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (details \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeTaskCreationException(\"I need something to work with.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ToDo(details);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Decodes an encoded string into a {@code ToDo} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param code the encoded string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code ToDo} reconstructed from the encoded string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeStorageException if format of the code is incorrect."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static ToDo decode(String code) throws DukeStorageException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (code.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String[] content \u003d code.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (content.length !\u003d 3) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"There are some holes in my memory...\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo newToDo \u003d new ToDo(content[2]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (content[1].equals(\"Y\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                newToDo.setCompleted();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } else if (!content[1].equals(\"N\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"There are some holes in my memory...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return newToDo;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeStorageException(\"Something doesn\u0027t seem right...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an encoded string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an encoded string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return String.format(\"T|%s|%s\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                super.completed ? \"Y\" : \"N\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                super.description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string representation of this {@code ToDo}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string representation of this {@code ToDo}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean match(String searchParameter) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return description.contains(searchParameter) || searchParameter.contains(description);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 81
    }
  },
  {
    "path": "src/main/java/duke/ui/Clui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Clui} class manages program input and output."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Clui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String DIVIDER \u003d \"________________________________________________________\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code Clui} instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Clui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string containing the specified content where each line is"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * indented by the specified indent. The returned string always contains a newline character at the end."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * If provided a negative indent, an indent of 0 is applied."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param content the content to indent."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param indent  the amount of spaces to indent by."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string containing the specified content where each line is indented by the specified indent."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String prependIndent(String content, int indent) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String spaces \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (int i \u003d 0; i \u003c indent; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            spaces +\u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] contentArray \u003d content.split(\"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (int i \u003d 0; i \u003c contentArray.length; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            result +\u003d spaces + contentArray[i] + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Formats and prints the specified content."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param content the content to be printed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void print(String content) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.print(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.print(prependIndent(content, 5));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.println(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints the default welcome message."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String welcomeMessage \u003d \"Konnichiwa!\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + \"What can I do for you?\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.printf(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.printf(prependIndent(welcomeMessage, 5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.println(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Reads in user input until the next line separator."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the user input that was read."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 74
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_RIGHT\" fillHeight\u003d\"false\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"130.0\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_LEFT\" lineSpacing\u003d\"1.0\" maxWidth\u003d\"275.0\" minHeight\u003d\"-Infinity\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 30
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"Infinity\" prefHeight\u003d\"555.0\" prefWidth\u003d\"385.0\" style\u003d\"-fx-background-color: #00e1bf50;\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 26
    }
  },
  {
    "path": "src/test/java/duke/task/ConcreteTaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ConcreteTaskStub extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    ConcreteTaskStub(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean match(String test) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 16
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeTaskCreationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_dateOnly_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline deadline \u003d Deadline.createTask(\"return book by 20-03-2019\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[D][\\u2718] return book (by: 20 Mar 2019)\", deadline.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_dateTime_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline deadline \u003d Deadline.createTask(\"IP Project A-JUnit by 20-03-2019 23:59\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[D][\\u2718] IP Project A-JUnit (by: 20 Mar 2019 23:59)\", deadline.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_unrecognisedDate_throwsException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.createTask(\"Fix parsing by 20th January 2019\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"I can\u0027t quite understand what you\u0027re saying...\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_unrecognisedTime_throwsException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.createTask(\"Fix parsing by 20-03-2019 1200\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"I can\u0027t quite understand what you\u0027re saying...\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_withoutDate_throwsException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeTaskCreationException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.createTask(\"Submit homework\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"So you never did plan on doing it huh...\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_withoutDescription_throwsException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeTaskCreationException.class, () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.createTask(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"I need something to work with.\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void encode_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline deadline \u003d Deadline.createTask(\"Description by 1 Jan 2020 11:59\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"D|N|1 Jan 2020 11:59|Description\", deadline.encode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline deadline \u003d Deadline.decode(\"D|N|1 Jan 2020 11:59|Description\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[D][\\u2718] Description (by: 1 Jan 2020 11:59)\", deadline.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingCompletion_throwsException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.decode(\"D|1 Jan 2020 11:59|Description\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"There are some holes in my memory...\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingDescription_throwsException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.decode(\"D|N\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"There are some holes in my memory...\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectCompletion_throwsException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.decode(\"D|X|Description\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"There are some holes in my memory...\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectTaskType_throwsException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.decode(\"E|X|Description\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"Something doesn\u0027t seem right...\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 102
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeTaskCreationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ConcreteTaskStub task \u003d new ConcreteTaskStub(\"Description\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[\\u2718] Description\", task.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_missingDescription_throwsException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeTaskCreationException.class, () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ConcreteTaskStub task \u003d new ConcreteTaskStub(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"That\u0027s really descriptive...\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setCompleted_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ConcreteTaskStub task \u003d new ConcreteTaskStub(\"Description\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        task.setCompleted();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[\\u2713] Description\", task.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 34
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeTaskCreationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_dateOnly_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo todo \u003d ToDo.createTask(\"return book\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[T][\\u2718] return book\", todo.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_withoutDescription_throwsException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeTaskCreationException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.createTask(null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"I need something to work with.\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void encode_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo todo \u003d ToDo.createTask(\"Description\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"T|N|Description\", todo.encode());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo todo \u003d ToDo.decode(\"T|N|Description\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[T][\\u2718] Description\", todo.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingCompletion_throwsException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.decode(\"T|Description\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"There are some holes in my memory...\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingDescription_throwsException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.decode(\"T|N\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"There are some holes in my memory...\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectCompletion_throwsException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.decode(\"T|X|Description\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"There are some holes in my memory...\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectTaskType_throwsException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.decode(\"E|X|Description\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"Something doesn\u0027t seem right...\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 72
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "deadline return book by 14 Aug 2019"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event celebrate birthday from 22 Aug 2020 for all day"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event CS2103T lecture from 28 Aug 2020 16:00 to 28 Aug 2020 18:00"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event weekend from 29 Aug 2020 for 2 days"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "done -3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "todo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event missing end time from 10 Sept 2020"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event missing time"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "deadline missing duedate"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "delete 1.5"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 25
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "del %systemdrive%%homepath%\\duke\\localData\\duke.data"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 4,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "mv $HOME/duke/localData/data.duke $HOME/duke/localData/data.duke.temp"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*/*.java ../src/main/java/duke/*.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "java -classpath ../bin duke.CliWrapper \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "mv $HOME/duke/localData/data.duke.temp $HOME/duke/localData/data.duke"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 5,
      "-": 37
    }
  }
]
