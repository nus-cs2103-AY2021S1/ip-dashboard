[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 2,
      "-": 24
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Event | done | swimming | 23/04/2020 12:30 PM"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Deadline | done | return book | 23/04/2020 12:50 AM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ToDo | done | borrow book"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 3
    }
  },
  {
    "path": "src/main/java/duke/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.regex.PatternSyntaxException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents an add command for a task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Adds a task to TaskList, depending on the type of task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Enumeration of a command */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final CommandEnum command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** User input as a String */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs an AddCommand object with command and a user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param command Enumeration of a command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param userInput User input as a String."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    AddCommand(CommandEnum command, String userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Adds a task to a task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Execution depends on the type of task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param taskList Task list containing tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param storage Storage for storing and retrieving all tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param ui Handles printing of user interaction."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws DukeException When input for addToDo, addDeadline and addEvent is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws IOException When input for addToDo is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute(TaskList taskList, Storage storage, Ui ui)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throws DukeException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "           addToDo(taskList, storage, ui, this.userInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "           break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "           addDeadline(taskList, storage, ui, this.userInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "           break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "           addEvent(taskList, storage, ui, this.userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "           break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "           System.out.println(\"An invalid command is entered! :(\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "           break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns user input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return User input as a String."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return this.userInput;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Adds a ToDo task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param tasks Task List containing tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param storage Writes the task being added into file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param ui Handles printing of user interaction."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param userInput User input as a String."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws DukeException When description of a ToDo task is empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws IOException When writing to file fails."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void addToDo(TaskList tasks, Storage storage, Ui ui,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        String userInput) throws DukeException, IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!userInput.substring(4).isBlank()) { //if got space behind, it will add also"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            ToDo todo \u003d new ToDo(userInput.substring(5));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            tasks.addTask(todo); //adds into tasks list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            ui.printAddTodo(todo, tasks);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            storage.writeToFile(tasks.getTasks());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getBot());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Adds a Deadline Task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param tasks Task List containing tasks."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param storage Writes the task being added into file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param ui Handles printing of user interaction."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param userInput User input as a String."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws DukeException When input for Deadline is invalid, respective error messages are printed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void addDeadline(TaskList tasks, Storage storage, Ui ui, String userInput)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String[] input \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!userInput.substring(8).isBlank()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                String de \u003d String.join(\" \", Arrays.copyOfRange(input, 1, input.length));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                String description \u003d de.split(\" /by \")[0];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                String date \u003d de.split(\" /by \")[1];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                tasks.addTask(deadline);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                ui.printAddDeadline(deadline, tasks);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                storage.writeToFile(tasks.getTasks());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            } catch (PatternSyntaxException | ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                System.out.println(Ui.getBot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                throw new DukeException(\"You have keyed in an invalid command for \u0027deadline\u0027!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                throw new DukeException(\"Please key in your deadline in the form:\\n /by \u003cdd/MM/yyyy hh:mm AM/PM\u003e\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getBot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new DukeException(\"The description of a deadline cannot be empty!\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Adds an Event task."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param tasks Task List containing tasks."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param storage Writes the task being added into file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param ui Handles printing of user interaction."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param userInput User input as a String."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws DukeException When input for Event is invalid, respective error messages are printed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void addEvent(TaskList tasks, Storage storage, Ui ui, String userInput)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String[] input \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!userInput.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                String ev \u003d String.join(\" \","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        Arrays.copyOfRange(input, 1, input.length));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                String description \u003d ev.split(\" /at \")[0];"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                String dateAndTime \u003d ev.split(\" /at \")[1];"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                Event event \u003d new Event(description, dateAndTime);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                tasks.addTask(event);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                storage.writeToFile(tasks.getTasks());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                ui.printAddEvent(event, tasks);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            } catch (PatternSyntaxException | ArrayIndexOutOfBoundsException ex ) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                System.out.println(Ui.getBot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                throw new DukeException(\"You have keyed in an invalid input for \u0027event\u0027!\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                throw new DukeException(\"Please key in your event \" +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        \"in the form:\\n /at \u003cdd/MM/yyyy hh:mm AM/PM\u003e\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getBot());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new DukeException(\"The description of an event cannot be empty!\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 173
    }
  },
  {
    "path": "src/main/java/duke/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents a bye command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Terminates execution of bot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param taskList Task list containing tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param storage Storage for storing and retrieving all tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param ui Handles printing of user interaction."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ui.printBye();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 18
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents an abstract Command class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Abstract method to be implemented by all subclasses of Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param taskList Task list containing tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param storage Storage for storing and retrieving all tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param ui Handles printing of user interaction."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws DukeException When execution fails."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws IOException When execution fails."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public abstract void execute(TaskList taskList, Storage storage, Ui ui)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throws DukeException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 21
    }
  },
  {
    "path": "src/main/java/duke/CommandEnum.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents enumerations for commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public enum CommandEnum {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    BYE, LIST, DEADLINE, EVENT, TODO, DONE, DELETE, FIND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 8
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents a Deadline task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Deadline of task in local date time */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new instance of Deadline task with description and deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param by Deadline of task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        super(description, Type.DEADLINE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \"dd/MM/yyyy hh:mm a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new instance of Deadline task with description, deadline, status of completion."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param by Deadline of task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param isDone Status of completion."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        super(description, Type.DEADLINE, isDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \"dd/MM/yyyy hh:mm a\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns deadline of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return Deadline of task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return this.by.format("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns a string representation of a Deadline task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return String representation of a Deadline task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        DateTimeFormatter.ofLocalizedDateTime("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                FormatStyle.MEDIUM)) + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 58
    }
  },
  {
    "path": "src/main/java/duke/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents a delete command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** User input as a String */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    String userInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a DeleteCommand object with user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param userInput User input as a String."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    DeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Executes the deleting of a task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param taskList Task list containing tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param storage Storage for storing and retrieving all tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param ui Handles printing of user interaction."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws DukeException When input for delete is invalid, respective error messages are printed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!userInput.substring(6).isBlank()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                String toDelete \u003d userInput.substring(7);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                int index \u003d Integer.parseInt(toDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                if (index \u003c\u003d taskList.size() \u0026\u0026 index \u003e 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    System.out.println(Ui.getBot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    System.out.println(\"Noted! I\u0027ve deleted this task:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    System.out.println(taskList.getTasks().get(index - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    taskList.getTasks().remove(index - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    storage.writeToFile(taskList.getTasks());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            } catch (NumberFormatException | IndexOutOfBoundsException | IOException ex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                throw new DukeException(\"The number keyed in is invalid!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new DukeException(\"The description of a delete cannot be empty!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 54
    }
  },
  {
    "path": "src/main/java/duke/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents a done command for a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** User input as a String */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    String userInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new instance of a DoneCommand object with user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param userInput User input as a String."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    DoneCommand(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Executes the marking of task as done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param taskList Task list containing tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param storage Storage for storing and retrieving all tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param ui Handles printing of user interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws DukeException if index \u003c 0 or index \u003e taskList.size()."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws IOException When writing to file fails."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute(TaskList taskList, Storage storage, Ui ui)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throws DukeException, IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        int len \u003d userInput.length();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        int pos \u003d Integer.parseInt(userInput.substring(5, len));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (pos \u003c\u003d taskList.size() \u0026\u0026 pos \u003e 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            taskList.getTasks().get(pos - 1).markAsDone(); //marking task as done"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getBot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(\"Great work! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(taskList.getTasks().get(pos - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(\"Keep the ticks going! ^_^\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            storage.writeToFile(taskList.getTasks());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new DukeException(\"You have keyed in an invalid number!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 47
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents a Duke class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Storage for reading and writing all tasks */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Task list containing tasks */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Handles printing of user interaction */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new instance of Duke object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param filePath Path of file to store tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            tasks \u003d new TaskList(storage.read());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } catch (DukeException | IOException ex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            tasks \u003d new TaskList(tasks.getTasks());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Runs the Duke program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ui.printGreetings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        while (ui.hasMoreInput()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "           try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "               String userInput \u003d ui.readCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "               Command command \u003d Parser.parseCommands(userInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "               command.execute(this.tasks, this.storage, this.ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "           } catch (DukeException | IOException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "               System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "           } finally {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "               System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "           }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Executes the main program."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param args Command line arguments."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "andreatanky": 63,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents Duke Exception class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Error message of exception */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs an exception specific to Duke program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param message Error message of exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        super(\"OOPS!!! :( \" + message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 19
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents an Event task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Event of task in local date time */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    protected LocalDateTime dateAndTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new instance of an Event with description and date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param dateAndTime Date and time of event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Event(String description, String dateAndTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        super(description, Type.EVENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.dateAndTime \u003d LocalDateTime.parse("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                dateAndTime, DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new instance of an Event with description, date and completion status."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param dateAndTime Date and time of event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param isDone Completion status."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Event(String description, String dateAndTime, boolean isDone) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        super(description, Type.EVENT, isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.dateAndTime \u003d LocalDateTime.parse("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                dateAndTime, DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns date and time of event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return Date and time of event as a String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return this.dateAndTime.format("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns string representation of an event."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return String representation of an event."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return \"[E]\" + super.toString() +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \" (at: \" + dateAndTime.format("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)) + \")\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 61
    }
  },
  {
    "path": "src/main/java/duke/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents a find command for a task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** User input as a string */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a FindCommand object with user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param userInput User input as a string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public FindCommand(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Executes finding tasks with keyword."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param taskList Task list containing tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param storage Storage for storing and retrieving all tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param ui Handles printing of user interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws DukeException When invalid inputs are entered."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws IOException When invalid inputs are entered."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            TaskList taskList, Storage storage, Ui ui) throws DukeException, IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ui.printFindings(taskList.findTasks(userInput));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 35
    }
  },
  {
    "path": "src/main/java/duke/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents a list command for tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Executes listing of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param taskList Task list containing tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param storage Storage for storing and retrieving all tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param ui Handles printing of user interaction."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (taskList.getTasks().isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getBot());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(\"There are no tasks in your list yet! \u003e_\u003c\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getBot());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                System.out.println(i + 1 + \".\" + \" \" + taskList.getTasks().get(i));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 30
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents Parser class that parses input commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns a specific command after parsing."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param userInput User input as a String."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return Specific input command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws DukeException When invalid command or formatting is entered."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static Command parseCommands(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        CommandEnum command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            String[] input \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            int len \u003d userInput.length();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            String extractCommand \u003d input[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            command \u003d CommandEnum.valueOf(extractCommand.toUpperCase());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } catch (NullPointerException | IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(Ui.getBot());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    \"You have keyed in an invalid command or formatting!\\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                            \"(Valid commands: todo, deadline, event, list, delete, bye, done)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                return new DoneCommand(userInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                return new AddCommand(CommandEnum.TODO, userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                return new AddCommand(CommandEnum.DEADLINE, userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                return new AddCommand(CommandEnum.EVENT, userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                return new DeleteCommand(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                return new FindCommand(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                System.out.println(Ui.getLine());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                System.out.println(Ui.getBot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                throw new DukeException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        \"You have keyed in an invalid command!\\n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                \"(Valid commands: todo, deadline,\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                \" event, list, delete, bye, done, find)\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 56
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents Storage class for reading and writing tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Path of file */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new instance of storage object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param filePath Path of file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws DukeException When there is an error in creating file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     public Storage(String filePath) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         String dir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         path \u003d Path.of(dir, filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         File file \u003d new File(String.valueOf(path));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         if (!file.exists()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             file.createNewFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         } catch (IOException ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             throw new DukeException(\"Error in creating duke.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Adds tasks to file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param tasks Tasks in an arraylist."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws IOException When writing to file fails."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     public void writeToFile(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             FileWriter fileWriter \u003d new FileWriter(path.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             for (Task task : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 String isDone \u003d task.isDone ? \"done\" : \"undone\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 String description \u003d task.getTask();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 Type taskType \u003d task.getType(); //null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 String stringTaskType \u003d taskType.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 switch (taskType) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 case TODO:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                     String writeTodo \u003d String.format(\"%s | %s | %s\\n\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                             stringTaskType, isDone, description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                     fileWriter.write(writeTodo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                     break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 case DEADLINE:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 case EVENT:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                     String dnt \u003d task.getTime();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                     String write \u003d String.format(\"%s | %s | %s | %s\\n\", stringTaskType, isDone,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                            description, dnt);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                     fileWriter.write(write);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                     break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                     System.out.println(\"Write failed :(\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                     break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             fileWriter.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         } catch (IOException ex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             System.err.println(ex.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Retrieves all tasks when bot starts running."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return ArrayList of tasks."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws FileNotFoundException When file with specified pathname does not exist."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ArrayList\u003cTask\u003e read() throws FileNotFoundException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             File f \u003d path.toFile();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             Scanner scanner \u003d new Scanner(f);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 String[] splitString \u003d input.split(\" \\\\| \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 boolean check \u003d splitString[1].equals(\"done\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 switch (splitString[0]) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 case \"ToDo\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    Task td \u003d new ToDo(splitString[2], check);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    tasks.add(td);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 case \"Deadline\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    Task dl \u003d new Deadline(splitString[2], splitString[3], check);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    tasks.add(dl);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 case \"Event\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    Task ev \u003d new Event(splitString[2], splitString[3], check);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    tasks.add(ev);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                     System.out.println(\"Cannot read file! :(\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                     break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                 }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             System.err.print(ex.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         return tasks;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 117
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Description of task */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    protected String task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Completion status */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Type of task */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    protected Type type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new instance of a task with its description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param task Description of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Task(String task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new instance of a task with its description and type."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param task Description of task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param type Type of task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Task(String task, Type type) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new instance of a task with its description, type and completion status."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param task Description of task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param type Type of task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param isDone Completion status."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Task(String task, Type type, boolean isDone) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns description of task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns date and time in subclasses, when valid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return Date and time as a string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns status icon of task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return Status icon of task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Marks task as done."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns type of task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return Type of task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns string representation of task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return String representation of task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + \" \" + getTask();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 105
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents taskList containing tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** ArrayList of tasks */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new instance of TaskList with an arraylist of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param tasks ArrayList of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Adds tasks to TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param task ArrayList of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns an Arraylist of tasks with keyword."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param userInput User input as string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return Arraylist of tasks with keyword."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasks(String userInput) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String keyword \u003d userInput.substring(5);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ArrayList\u003cTask\u003e findings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            if (task.getTask().contains(keyword)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                findings.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return findings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Deletes task from task list at this index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param index Index at which task should be removed at."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return Task to be removed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Task deleteTask(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return this.tasks.remove(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns number of tasks in task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return Number of tasks in task list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns arraylist of tasks."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return ArrayList of tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 75
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents a ToDo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class ToDo extends Task { //added"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new instance of a ToDo object with description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        super(description, Type.TODO);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new instance of a ToDo object with description and completion status."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param isDone Completion status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        super(description, Type.TODO, isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns string representation of ToDo task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return String representation of ToDo task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 37
    }
  },
  {
    "path": "src/main/java/duke/Type.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents Enumeration class for types of commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public enum Type {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         * Returns string representation of ToDo task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         * @return String representation of ToDo task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return \"ToDo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }, DEADLINE {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         * Returns string representation of Deadline task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         * @return String representation of Deadline task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return \"Deadline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }, EVENT {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         * Returns string representation of Event task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         * @return String representation of Event task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return \"Event\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 35
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Represents user interface class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Bot\u0027s reply prefix */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private static final String bot \u003d \"Dave says:\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Line separator */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private static final String line \u003d \"_______________________________________________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Scanner object */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    Scanner scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a new Ui object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Prints greetings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void printGreetings() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(bot);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(\"Greetings from me, Dave!\\n\" + \"How can I help you? ^_^\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns prefix of reply."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return String of prefix of reply."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static String getBot() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return Ui.bot;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns line separator."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return Line separator."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static String getLine() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return Ui.line;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Prints goodbye and terminates."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void printBye() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(bot);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(\"Goodbye! Hope to see you again soon! ^_^\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Prints tasks in task list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param tasks ArrayList containing tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void printTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(line);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(bot);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(\"There are no tasks in your list yet! \u003e_\u003c\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(line);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(line);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(bot);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                //System.out.println(i + 1 + \".\" + \" \" + \"[\" + tasks.get(i).getStatusIcon() + \"]\" + \" \" + tasks.get(i).getTask());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                System.out.println(i + 1 + \".\" + \" \" + tasks.get(i));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Marks tasks as done."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param tasks Arraylist of tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param pos Index in arraylist."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws DukeException When index \u003c 0 or index \u003e tasks.size()."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void printDone(ArrayList\u003cTask\u003e tasks, int pos) throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (pos \u003c\u003d tasks.size() \u0026\u0026 pos \u003e 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            tasks.get(pos - 1).markAsDone(); //marking task as done"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(line);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(bot);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(\"Great work! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            //System.out.println(\"[\" + tasks.get(pos - 1).getStatusIcon() + \"]\" + \" \" + tasks.get(pos - 1).getTask());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(tasks.get(pos - 1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(\"Keep the ticks going! ^_^\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new DukeException(\"You have keyed in an invalid number!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Prints tasks with the keyword."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param findings Arraylist of tasks with the keyword."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws DukeException When findings is empty."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void printFindings(ArrayList\u003cTask\u003e findings) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(bot);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (findings.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new DukeException(\"There are no such tasks with this keyword! :(\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            System.out.println(\"These are the tasks with your keyword:\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            for (Task finding : findings) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                System.out.println(finding);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Prints replies when ToDo task is added."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param todoTask Task to be done."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param tasks TaskList to add task to."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void printAddTodo(ToDo todoTask, TaskList tasks) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(bot);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(\"Got it! I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(todoTask);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Prints replies when Event task is added."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param eventTask Event task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param tasks TaskList to add task to."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void printAddEvent(Event eventTask, TaskList tasks) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(bot);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(\"Got it! I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(eventTask);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Prints replies when Deadline task is added."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param deadlineTask Deadline task."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param tasks TaskList to add task to."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void printAddDeadline(Deadline deadlineTask, TaskList tasks) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(bot);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(\"Got it! I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(deadlineTask);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns user inputs."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return User input."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Checks if there is more user input."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return True if there is more input, if not false."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean hasMoreInput() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return scanner.hasNext();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Prints loading of tasks error."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(\"I am unable to load your tasks! D:\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 191
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parseCommands_getCommand_success() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        AddCommand c \u003d new AddCommand(CommandEnum.TODO, \"todo sleep\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(c.getUserInput(), \"todo sleep\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 11
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void size_getIntSize_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ArrayList\u003cTask\u003e aList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        TaskList taskList \u003d new TaskList(aList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        taskList.getTasks().add(new Task(\"swimming\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        taskList.getTasks().add(new Task(\"read book\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(2, taskList.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 17
    }
  },
  {
    "path": "src/test/java/duke/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void getTask_getStringDescription_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Task task \u003d new Task(\"Borrow book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(\"Borrow book\", task.getTask());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 2,
      "-": 37
    }
  }
]
