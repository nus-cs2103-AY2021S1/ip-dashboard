[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 2,
      "-": 24
    }
  },
  {
    "path": "src/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeCommandSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeTaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.input.UserInput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeCommandSet commandSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeState state;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public CommandParser commandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeTaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeStorage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandSet \u003d new DukeCommandSet();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        state \u003d new DukeState();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ui \u003d new Ui(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskList \u003d new DukeTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        storage \u003d new DukeStorage(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void run() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        storage.loadSavedTasks();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        while (!state.exitLoop) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String inputLine \u003d UserInput.getOneLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            commandParser.parse(inputLine, this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        storage.saveCurrentTasks();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 43,
      "-": 3
    }
  },
  {
    "path": "src/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String[] names;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public abstract void execute(String str, Duke duke);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 10
    }
  },
  {
    "path": "src/duke/command/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeCommandSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.NoDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void parse(String str, Duke duke) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String[] splitParts \u003d splitInputLine(str);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String commandName \u003d splitParts[0];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String rest \u003d splitParts[1];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Command command \u003d tryGetCommand(commandName, duke.commandSet);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (command !\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            tryExecuteCommand(command, rest, duke);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String[] splitInputLine(String inputLine) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String[] splitParts \u003d new String[2];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String[] inputParts \u003d inputLine.split(\" \", 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        splitParts[0] \u003d inputParts[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        splitParts[1] \u003d inputParts.length \u003d\u003d 2 ? inputParts[1] : \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return splitParts;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Command tryGetCommand(String commandName, DukeCommandSet commandSet) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command \u003d commandSet.getCommand(commandName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (UnknownCommandException exception) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            System.out.println(exception.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void tryExecuteCommand(Command command, String rest, Duke duke) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(rest, duke);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (NoDescriptionException | IncorrectFormatException | InvalidIndexException exception) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            System.out.println(exception.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 54
    }
  },
  {
    "path": "src/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DeadlineCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"deadline\" };"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Deadline newDeadline \u003d Deadline.createDeadline(str);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.taskList.tasks.add(newDeadline);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.ui.reportNewTask(newDeadline);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 18
    }
  },
  {
    "path": "src/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DeleteCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"delete\" };"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) throws InvalidIndexException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        boolean canParseInt \u003d tryParseInt(str);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int taskIndex \u003d canParseInt ? Integer.parseInt(str) - 1 : -1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        checkException(taskIndex, str, duke);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Task task \u003d duke.taskList.tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.ui.reportDeleteTask(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private boolean tryParseInt(String str) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Integer.parseInt(str);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void checkException(int taskIndex, String str, Duke duke) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.taskList.tasks.size() \u003c\u003d taskIndex || taskIndex \u003c 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String line \u003d UIPrint.getLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    line + \"\\nSorry \" + str + \" is not a valid index\\n\" + line;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new InvalidIndexException(errMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 43
    }
  },
  {
    "path": "src/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DoneCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"done\" };"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) throws InvalidIndexException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        boolean canParseInt \u003d tryParseInt(str);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int taskIndex \u003d canParseInt ? Integer.parseInt(str) - 1 : -1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        checkException(taskIndex, str, duke);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Task task \u003d duke.taskList.tasks.get(taskIndex);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.ui.reportDoneTask(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private boolean tryParseInt(String str) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Integer.parseInt(str);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void checkException(int taskIndex, String str, Duke duke) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.taskList.tasks.size() \u003c\u003d taskIndex || taskIndex \u003c 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String line \u003d UIPrint.getLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    line + \"\\nSorry \" + str + \" is not a valid index\\n\" + line;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new InvalidIndexException(errMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 44
    }
  },
  {
    "path": "src/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public EventCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"event\" };"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Event newEvent \u003d Event.createEvent(str);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.taskList.tasks.add(newEvent);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.ui.reportNewTask(newEvent);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 19
    }
  },
  {
    "path": "src/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"bye\" };"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.ui.reportExit();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.state.exitLoop \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 17
    }
  },
  {
    "path": "src/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"list\" };"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.ui.reportCurrentTasks();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 15
    }
  },
  {
    "path": "src/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.NoDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public TodoCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"todo\" };"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) throws NoDescriptionException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ToDo newToDo \u003d ToDo.createToDo(str);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.taskList.tasks.add(newToDo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.ui.reportNewTask(newToDo);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 21
    }
  },
  {
    "path": "src/duke/data/DukeCommandSet.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeCommandSet {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private HashMap\u003cString, Command\u003e commandSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeCommandSet() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandSet \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new ExitCommand());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new ListCommand());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new DoneCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new TodoCommand());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new DeadlineCommand());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new EventCommand());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new DeleteCommand());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void registerCommand(Command command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (String name : command.names) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            commandSet.put(name, command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Command getCommand(String commandName) throws UnknownCommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!commandSet.containsKey(commandName)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String line \u003d UIPrint.getLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    line + \"\\nOOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" + line;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new UnknownCommandException(errMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return commandSet.get(commandName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 42
    }
  },
  {
    "path": "src/duke/data/DukeState.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeState {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean exitLoop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeState() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        exitLoop \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 10
    }
  },
  {
    "path": "src/duke/data/DukeTaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeTaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeTaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 13
    }
  },
  {
    "path": "src/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public abstract class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected DukeException(String errMessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(errMessage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 8
    }
  },
  {
    "path": "src/duke/exception/IncorrectFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class IncorrectFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public IncorrectFormatException(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 8
    }
  },
  {
    "path": "src/duke/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public InvalidIndexException(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 8
    }
  },
  {
    "path": "src/duke/exception/NoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class NoDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public NoDescriptionException(String errMessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(errMessage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 8
    }
  },
  {
    "path": "src/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public UnknownCommandException(String errMessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(errMessage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 8
    }
  },
  {
    "path": "src/duke/exception/UnknownTaskTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UnknownTaskTypeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public UnknownTaskTypeException(String errMessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(errMessage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 8
    }
  },
  {
    "path": "src/duke/input/UserInput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.input;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UserInput {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String getOneLine() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String inputLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return inputLine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 13
    }
  },
  {
    "path": "src/duke/storage/DukeStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeStorage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeStorage(Duke duke) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void loadSavedTasks() throws IOException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.taskList.tasks \u003d TaskStorage.getInstance().getSavedTasks();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void saveCurrentTasks() throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        TaskStorage.getInstance().saveTasks(duke.taskList.tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 22
    }
  },
  {
    "path": "src/duke/storage/TaskStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.UnknownTaskTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TaskStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Path folderPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private File folderFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Path taskFilePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private File taskFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Path isDoneFilePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private File isDoneFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Scanner taskReader;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Scanner isDoneReader;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static TaskStorage instance;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static TaskStorage getInstance() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            instance \u003d new TaskStorage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private TaskStorage() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        folderPath \u003d Paths.get(\".\", \"saves\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        folderFile \u003d folderPath.toFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskFilePath \u003d Paths.get(folderPath.toString(), \"taskSave.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskFile \u003d taskFilePath.toFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        isDoneFilePath \u003d Paths.get(folderPath.toString(), \"isDoneSave.txt\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        isDoneFile \u003d isDoneFilePath.toFile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        folderFile.mkdir();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskFile.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        isDoneFile.createNewFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskReader \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        isDoneReader \u003d new Scanner(isDoneFile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Task stringToTask(String taskString) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String[] taskStringParts \u003d taskString.split(\" \", 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String taskType \u003d taskStringParts[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String taskInfo \u003d taskStringParts[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return ToDo.createToDo(taskInfo);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return Deadline.createDeadline(taskInfo);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return Event.createEvent(taskInfo);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new UnknownTaskTypeException(taskType + \"is not a duke.task type\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String taskToString(Task task) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return task.getTaskType() + \" \" + task.taskInfo;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ArrayList\u003cTask\u003e getSavedTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        while (taskReader.hasNextLine() \u0026\u0026 isDoneReader.hasNextLine()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String taskString \u003d taskReader.nextLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            boolean isTaskDone \u003d isDoneReader.nextBoolean();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Task task \u003d stringToTask(taskString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            if (isTaskDone) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void saveTasks(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        FileWriter taskWriter \u003d new FileWriter(taskFile);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        FileWriter isDoneWriter \u003d new FileWriter(isDoneFile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskWriter.write(\"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        isDoneWriter.write(\"\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskWriter.append(taskToString(task) + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            isDoneWriter.append(Boolean.toString(task.isTaskDone()) + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskWriter.close();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        isDoneWriter.close();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 106
    }
  },
  {
    "path": "src/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.time.Time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Time deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Deadline(String icon, String description, String deadline, String taskInfo) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(icon, description, taskInfo);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.deadline \u003d Time.stringToTime(deadline);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return \"deadline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static Deadline createDeadline(String deadlineInfo) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String[] splitStr \u003d deadlineInfo.split(\" /by \", 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        checkException(splitStr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String deadline \u003d splitStr[1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(UIPrint.deadlineIcon, description, deadline, deadlineInfo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return newDeadline;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static void checkException(String[] splitStr) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (splitStr.length !\u003d 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String line \u003d UIPrint.getLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    line + \"\\nPlease follow the format of deadline \u003cduke.task description\u003e /by \u003cdeadline\u003e\\n\" + line;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new IncorrectFormatException(errMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return super.toString() + \" (by: \" + deadline + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 47
    }
  },
  {
    "path": "src/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.time.Time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Event(String icon, String description, String time, String taskInfo) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(icon, description, taskInfo);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.time \u003d Time.stringToTime(time);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return \"event\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static Event createEvent(String eventInfo) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String[] splitStr \u003d eventInfo.split(\" /at \", 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        checkException(splitStr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String time \u003d splitStr[1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Event newEvent \u003d new Event(UIPrint.eventIcon, description, time, eventInfo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static void checkException(String[] splitStr) throws IncorrectFormatException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (splitStr.length !\u003d 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String line \u003d UIPrint.getLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    line + \"\\nPlease follow the format of event \u003cduke.task description\u003e /at \u003cevent duke.time\u003e\\n\" + line;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new IncorrectFormatException(errMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return super.toString() + \" (at: \" + time + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 47
    }
  },
  {
    "path": "src/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String icon;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String taskInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected Task(String icon, String description, String taskInfo) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.icon \u003d icon;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.taskInfo \u003d taskInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return \"task\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean isTaskDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String statusIcon \u003d isDone ? UIPrint.tick : UIPrint.cross;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return icon + statusIcon + \" \" + description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 37
    }
  },
  {
    "path": "src/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.NoDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ToDo(String icon, String description, String taskInfo) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(icon, description, taskInfo);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static ToDo createToDo(String todoInfo) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        checkException(todoInfo);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ToDo newToDo \u003d new ToDo(UIPrint.todoIcon, todoInfo, todoInfo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return newToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return \"todo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static void checkException(String str) throws NoDescriptionException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (str.isBlank()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String line \u003d UIPrint.getLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    line + \"\\nOOPS!!! The description of a todo cannot be empty.\\n\" + line;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new NoDescriptionException(errMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 33
    }
  },
  {
    "path": "src/duke/time/Time.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public LocalDateTime time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String timeDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Time(LocalDateTime time) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        timeDescription \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Time(String timeDescription) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        time \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.timeDescription \u003d timeDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static Time stringToTime(String timeString) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        LocalDateTime time \u003d TimeParser.parse(timeString);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return new Time(timeString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return new Time(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public TimeComparison compareTo(Time time) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (time.time \u003d\u003d null || this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return TimeComparison.INCOMPARABLE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else if (this.time.isBefore(time.time)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return TimeComparison.IS_BEFORE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else if (this.time.isAfter(time.time)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return TimeComparison.IS_AFTER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else if (this.time.isEqual(time.time)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return TimeComparison.EQUAL;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (time !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return time.format(TimeFormat.dateTimeFormatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return timeDescription;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 52
    }
  },
  {
    "path": "src/duke/time/TimeComparison.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public enum TimeComparison {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    IS_BEFORE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    IS_AFTER,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    EQUAL,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    INCOMPARABLE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 8
    }
  },
  {
    "path": "src/duke/time/TimeFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TimeFormat {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final DateTimeFormatter dateFormatter \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final DateTimeFormatter timeFormatter1 \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            DateTimeFormatter.ofPattern(\"HH:mm:ss\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final DateTimeFormatter timeFormatter2 \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final DateTimeFormatter dateTimeFormatter \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 18
    }
  },
  {
    "path": "src/duke/time/TimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TimeParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static LocalDateTime parse(String timeString) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(timeString, TimeFormat.dateTimeFormatter);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (DateTimeParseException exception1) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(timeString, TimeFormat.dateFormatter);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                return date.atTime(LocalTime.MIN);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            } catch (DateTimeParseException exception2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    LocalTime time \u003d LocalTime.parse(timeString, TimeFormat.timeFormatter1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    return LocalDate.now().atTime(time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                } catch (DateTimeParseException exception3) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        LocalTime time \u003d LocalTime.parse(timeString, TimeFormat.timeFormatter2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        return LocalDate.now().atTime(time);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    } catch (DateTimeParseException exception4) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 33
    }
  },
  {
    "path": "src/duke/ui/UIPrint.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UIPrint {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static char star \u003d \u0027*\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String tick \u003d \"[Done]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String cross \u003d \"[Not Done]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String todoIcon \u003d \"[T]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String deadlineIcon \u003d \"[D]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String eventIcon \u003d \"[E]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static void drawLine(char ch, int length) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(getLine(ch, length));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String getLine(char ch, int length) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String line \u003d \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            line +\u003d ch;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        line +\u003d \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 31
    }
  },
  {
    "path": "src/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Ui(Duke duke) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(UIPrint.logo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Hello! I\u0027m duke.Duke\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void echo(String str) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(str);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportCurrentTasks() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Current tasks:\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (int i \u003d 0; i \u003c duke.taskList.tasks.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            System.out.println(i + 1 + \". \" + duke.taskList.tasks.get(i));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.taskList.tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            System.out.println(\"None\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportNewTask(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this duke.task: \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Now you have \" + duke.taskList.tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportDoneTask(Task task) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Nice, I\u0027ve marked this duke.task as done:\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportDeleteTask(Task task) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this duke.task: \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Now you have \" + duke.taskList.tasks.size() + \" tasks in the list\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportExit() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String exitWords \u003d \"Bye, hope to see you again soon!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(exitWords);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UIPrint.drawLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 84
    }
  },
  {
    "path": "src/test/java/duke/DukeStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeStub extends Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeStub() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 8
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 12
    }
  },
  {
    "path": "src/test/java/duke/command/DeadlineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DeadlineCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DeadlineCommand command \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new DeadlineCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_normalInput_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String normalInput \u003d \"return book /by 12:33:01\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(normalInput, dukeStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String invalidInput \u003d \"return book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows(IncorrectFormatException.class,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                () -\u003e command.execute(invalidInput, dukeStub));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String line \u003d UIPrint.getLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                line + \"\\nPlease follow the format of deadline \u003cduke.task description\u003e /by \u003cdeadline\u003e\\n\" + line;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 49
    }
  },
  {
    "path": "src/test/java/duke/command/EventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final EventCommand command \u003d new EventCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new EventCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_normalInput_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String normalInput \u003d \"return book /at 12:33:01\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(normalInput, dukeStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String invalidInput \u003d \"return book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows(IncorrectFormatException.class,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                () -\u003e command.execute(invalidInput, dukeStub));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String line \u003d UIPrint.getLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                line + \"\\nPlease follow the format of event \u003cduke.task description\u003e /at \u003cevent duke.time\u003e\\n\" + line;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 49
    }
  },
  {
    "path": "src/test/java/duke/command/TodoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.NoDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TodoCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final TodoCommand command \u003d new TodoCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new TodoCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_normalInput_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String normalInput \u003d \"read book\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(normalInput, dukeStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String invalidInput \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows(NoDescriptionException.class,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                () -\u003e command.execute(invalidInput, dukeStub));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String line \u003d UIPrint.getLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                line + \"\\nOOPS!!! The description of a todo cannot be empty.\\n\" + line;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 49
    }
  },
  {
    "path": "src/test/java/duke/data/DukeCommandSetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeCommandSetTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeCommandSet commandSet \u003d new DukeCommandSet();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getCommand_validCommandName_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String commandName01 \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String commandName02 \u003d \"todo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String commandName03 \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            commandSet.getCommand(commandName01);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            commandSet.getCommand(commandName02);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            commandSet.getCommand(commandName03);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getCommand_invalidCommandName_exceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String invalidCommandName \u003d \"hahaha\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows(UnknownCommandException.class,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                () -\u003e commandSet.getCommand(invalidCommandName));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String line \u003d UIPrint.getLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                line + \"\\nOOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" + line;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 41
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createDeadline_normalInput_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input01 \u003d \"read book /by tmr\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input02 \u003d \"return book /by 18:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input03 \u003d \"have dinner /by 2020-08-26 12:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Deadline.createDeadline(input01);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Deadline.createDeadline(input02);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Deadline.createDeadline(input03);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createDeadline_noDeadline_exceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows(IncorrectFormatException.class,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                () -\u003e Deadline.createDeadline(\"read book\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String line \u003d UIPrint.getLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                line + \"\\nPlease follow the format of deadline \u003cduke.task description\u003e /by \u003cdeadline\u003e\\n\" + line;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTaskTypeTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(\"deadline\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                Deadline.createDeadline(\"read book /by tmr\").getTaskType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 45
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createEvent_normalInput_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input01 \u003d \"read book /at tmr\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input02 \u003d \"return book /at 18:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input03 \u003d \"have dinner /at 2020-08-26 12:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Event.createEvent(input01);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Event.createEvent(input02);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Event.createEvent(input03);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createDeadline_noTime_exceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows(IncorrectFormatException.class,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                () -\u003e Event.createEvent(\"read book\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String line \u003d UIPrint.getLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                line + \"\\nPlease follow the format of event \u003cduke.task description\u003e /at \u003cevent duke.time\u003e\\n\" + line;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTaskTypeTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(\"event\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                Event.createEvent(\"read book /at tmr\").getTaskType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 45
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.NoDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UIPrint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createToDo_normalInput_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input01 \u003d \"read book\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input02 \u003d \"return book\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input03 \u003d \"have dinner\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            ToDo.createToDo(input01);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            ToDo.createToDo(input02);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            ToDo.createToDo(input03);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createToDo_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows(NoDescriptionException.class, () -\u003e ToDo.createToDo(\"\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String line \u003d UIPrint.getLine(UIPrint.star, 50);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                line + \"\\nOOPS!!! The description of a todo cannot be empty.\\n\" + line;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTaskTypeTest() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(\"todo\", ToDo.createToDo(\"read book\").getTaskType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 43
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "event jump"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Hahaha"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "deadline sleep"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "todo have dinner"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "# run the program, feed commands from duke.input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 1,
      "-": 37
    }
  }
]
