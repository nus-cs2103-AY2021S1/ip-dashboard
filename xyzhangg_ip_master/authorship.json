[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 16,
      "-": 46
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    AddCommand(Task task) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        taskList.addNewTask(task);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        storage.updateTasks(taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return ui.showAddedTask(task, taskList.getListLength());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 15
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 9
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public String saveAsString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"D\" + super.saveAsString() + \" | \" + by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 22
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String  execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Task task \u003d taskList.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        storage.updateTasks(taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return ui.showDeleteTask(task, taskList.getListLength());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 15
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 59
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Task task \u003d taskList.doneTask(taskIndex);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        storage.updateTasks(taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return ui.showDoneTask(task);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 15
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static String FILE_PATH \u003d \"myTaskList.txt\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return ui.showError(e);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 24,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    DukeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        super(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 15
    }
  },
  {
    "path": "src/main/java/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    EmptyDescriptionException(String task) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        super(\"☹ OOPS!!! The description of a \" + task + \" cannot be empty.\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 7
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public String saveAsString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"E\" + super.saveAsString() + \" | \" + at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 22
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        storage.updateTasks(taskList);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return ui.showGoodbye();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 13
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    FindCommand(String keyword) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        String matchingTasks \u003d taskList.findTask(keyword);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return ui.showMatchingTask(matchingTasks);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 14
    }
  },
  {
    "path": "src/main/java/InvalidDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class InvalidDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    InvalidDateTimeException(String task) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        super(\"☹ OOPS!!! Please enter a valid date/time for a \" + task + \".\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 6
    }
  },
  {
    "path": "src/main/java/InvalidTaskIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class InvalidTaskIndexException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    InvalidTaskIndexException(String command) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        super(\"☹ OOPS!!! Please enter a valid task index to be \" + (command.startsWith(\"done\")"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                ? \"marked as done.\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                : \"deleted.\"));"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 8
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 10
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return ui.showTaskList(taskList.toString());"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 49
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Encapsulates a parser class, supports the function to parse the user input into a command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    final static String BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    final static String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    final static String DONE \u003d \"done\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    final static String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    final static String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    final static String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    final static String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    final static String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns a task index for a done or delete user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param input       user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param commandType type of command, either a done or delete."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return an integer representing a task index."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if input has an invalid format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static int getTaskIndex(String input, String commandType) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        final int TASK_INDEX_POSITION \u003d commandType.equals(DONE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                ? 5"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                : commandType.equals(DELETE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                ? 7"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                : 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assert TASK_INDEX_POSITION !\u003d 0 : \"Command type should be done or delete.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (input.equals(commandType) || input.equals(commandType + \" \")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new InvalidTaskIndexException(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else if (input.startsWith(commandType + \" \") \u0026\u0026 input.length() \u003e TASK_INDEX_POSITION) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                return Integer.parseInt(input.substring(TASK_INDEX_POSITION));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                throw new InvalidTaskIndexException(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Takes in a user input starting with \u0027done\u0027 and returns a done command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param input user input that starts with \u0027done\u0027."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return a done command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if user input has an invalid format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static DoneCommand done(String input) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return new DoneCommand(getTaskIndex(input, DONE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Takes in a user input starting with \u0027delete\u0027 and returns a delete command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param input user input that starts with \u0027delete\u0027."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return a delete command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if user input has an invalid format."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static DeleteCommand delete(String input) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return new DeleteCommand(getTaskIndex(input, DELETE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Takes in a user input starting with \u0027find\u0027 and returns a find command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param input user input that starts with \u0027find\u0027."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return a find command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if user input has an invalid format."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static FindCommand find(String input) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        final int KEYWORD_INDEX \u003d 5;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (input.equals(FIND) || input.equals(FIND + \" \")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new EmptyDescriptionException(FIND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else if (input.startsWith(FIND + \" \") \u0026\u0026 input.length() \u003e KEYWORD_INDEX) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return new FindCommand(input.substring(KEYWORD_INDEX));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Takes in a user input starting with \u0027todo\u0027 and returns an add command that adds a new todo."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param input user input that starts with \u0027todo\u0027."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return an add command."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if user input has an invalid format."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static AddCommand newTodo(String input) throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        final int DESCRIPTION_INDEX \u003d 5;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (input.equals(TODO) || input.equals(TODO + \" \")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new EmptyDescriptionException(TODO);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else if (input.startsWith(TODO + \" \") \u0026\u0026 input.length() \u003e DESCRIPTION_INDEX) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            Todo newTodo \u003d new Todo(input.substring(DESCRIPTION_INDEX));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return new AddCommand(newTodo);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Creates an add command for tasks with timings. Takes in a user input starting with \u0027deadline\u0027 or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * \u0027event\u0027 and returns an add command for those tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param input user input that starts with \u0027deadline\u0027 or \u0027event\u0027."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return an add command."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if user input has an invalid format."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static AddCommand newTaskWithTiming(String input, String taskType) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        final int DESCRIPTION_INDEX \u003d taskType.equals(DEADLINE)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                ? 9"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                : taskType.equals(EVENT)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    ? 6"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    : 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        final int TIME_INDEX \u003d 5;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        final String TIME_DESCRIPTOR \u003d taskType.equals(DEADLINE)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                ? \" /by \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                : taskType.equals(EVENT)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    ? \" /at \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    : \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assert DESCRIPTION_INDEX !\u003d 0 : \"Task type should deadline or event.\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (input.equals(taskType) || input.equals(taskType + \" \")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new EmptyDescriptionException(taskType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else if (input.startsWith(taskType + \" \") \u0026\u0026 input.length() \u003e DESCRIPTION_INDEX) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            if (!input.contains(TIME_DESCRIPTOR)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                throw new InvalidDateTimeException(taskType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                int index \u003d input.indexOf(TIME_DESCRIPTOR);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                String description \u003d input.substring(DESCRIPTION_INDEX, index);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                String date \u003d input.substring(index + TIME_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    LocalDate eventDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    Task newTask;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    if (taskType.equals(DEADLINE)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                        newTask \u003d new Deadline(description, eventDate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                        newTask \u003d new Event(description, eventDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    return new AddCommand(newTask);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    throw new InvalidDateTimeException(taskType);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Takes in a user input starting with \u0027deadline\u0027 and returns an add command."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param input user input that starts with \u0027deadline\u0027."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return an add command."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if user input has an invalid format."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static AddCommand newDeadline(String input) throws DukeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return newTaskWithTiming(input, DEADLINE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Takes in a user input starting with \u0027event\u0027 and returns an add command."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param input user input that starts with \u0027event\u0027."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return an add command."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if user input has an invalid format."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static AddCommand newEvent(String input) throws DukeException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return newTaskWithTiming(input, EVENT);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Parses the user\u0027s input and returns the corresponding command."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return a command"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if user input has an invalid format."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (input.equals(BYE)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else if (input.equals(LIST) || input.equals(LIST + \" \")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            if (input.startsWith(DONE)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                return done(input);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            } else if (input.startsWith(DELETE)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                return delete(input);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            } else if (input.startsWith(FIND)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                return find(input);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            } else if (input.startsWith(TODO)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                return newTodo(input);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            } else if (input.startsWith(DEADLINE)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                return newDeadline(input);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            } else if (input.startsWith(EVENT)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                return newEvent(input);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                throw new DukeException();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 204
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Encapsulates a storage class, handles the writing or reading of the task list to or from a text file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Reads the tasks from the local storage file and creates a list of Tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return a list of Tasks stored in the local storage file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if the local storage file cannot be created or loaded."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            //noinspection ResultOfMethodCallIgnored"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! There was an error creating a save file.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assert file.exists() : \"File should exist.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            Scanner fileReader \u003d new Scanner(file);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            while (fileReader.hasNextLine()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                String s \u003d fileReader.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                Task task \u003d getTask(s);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                taskList.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (FileNotFoundException | DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! There was an error while loading the file\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Converts a string into a Task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param taskString string description of a Task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return a Task described by the input string."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if input string is in the wrong format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Task getTask(String taskString) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            Task currentTask \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            if (taskString.startsWith(\"T\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                currentTask \u003d new Todo(taskString.substring(8));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                int index \u003d taskString.lastIndexOf(\" |\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                String dateTime \u003d taskString.substring(index + 3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                if (taskString.startsWith(\"D\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    currentTask \u003d new Deadline(taskString.substring(8, index), LocalDate.parse(dateTime));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                } else if (taskString.startsWith(\"E\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    currentTask \u003d new Event(taskString.substring(8, index), LocalDate.parse(dateTime));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                } "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            assert currentTask !\u003d null : \"Invalid task description.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            if (taskString.charAt(4) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                currentTask.markAsDone();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return currentTask;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Updates the local storage file and stores the list of Tasks."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param taskList list of Tasks to be stored."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if local storage file cannot be accessed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    void updateTasks(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            assert new File(filePath).exists() : \"File should exist.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            for (Task t : taskList.getMyTaskList()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                fileWriter.write(t.saveAsString() + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Unable to update tasks.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 99
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return (isDone ? \"[\\u2713] \" : \"[\\u2718] \"); //return tick or X symbols"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public String saveAsString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return getStatusIcon() + description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 26
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Encapsulates a taskList class, contains a list of tasks and supports operations that adds, deletes or"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * finds tasks, or marks tasks as done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final ArrayList\u003cTask\u003e myTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        myTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.myTaskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    ArrayList\u003cTask\u003e getMyTaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return myTaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    int getListLength() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return myTaskList.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void addNewTask(Task newTask) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        myTaskList.add(newTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Marks a task as done. Throws an exception if the task index is invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param taskIndex index of task to be marked as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return the done task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if index is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Task doneTask(int taskIndex) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            Task temp \u003d myTaskList.get(taskIndex - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            temp.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new InvalidTaskIndexException(\"done\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Deletes a task from the list. Throws an exception if the task index is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param taskIndex index of task to be deleted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return the deleted task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DukeException if index is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Task deleteTask(int taskIndex) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            Task temp \u003d myTaskList.get(taskIndex - 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            myTaskList.remove(temp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new InvalidTaskIndexException(\"delete\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Finds all the tasks with description that contains the input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param input the required keyword to be searched for."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return a string describing the list of tasks that contains the input in their description."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String findTask(String input) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        for (Task t : myTaskList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            if (t.description.contains(input)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                tasks.add(t);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return new TaskList(tasks).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns a numbered list of all the tasks in the task list, with each task on a new line. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return a numbered list of tasks."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (myTaskList.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            StringBuilder taskListString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            for (int i \u003d 1; i \u003c myTaskList.size() + 1; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                taskListString"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                        .append(\"     \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                        .append(i)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                        .append(\".\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                        .append(myTaskList.get(i - 1))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            taskListString.delete(taskListString.length() - 1, taskListString.length());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return taskListString.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 104
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public String saveAsString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"T\" + super.saveAsString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 16
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static final String LOGO \u003d"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            \" \\n____        _        \\n\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static final String DIVIDER \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String showDivider() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return DIVIDER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String showError(DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"     \" + e.getMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"Hello from\\n\" + LOGO"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                + showDivider()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                + \"     Hello! I\u0027m Duke!\\n\" + \"     What can I do for you?\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                + showDivider();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String showGoodbye() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"     Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String showTaskList(String taskListString) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"     Here are the tasks in your list:\\n\" +  taskListString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String showDoneTask(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"     Nice! I\u0027ve marked this task as done:\\n       \" + task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String showDeleteTask(Task task, int listLength) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"     Noted. I\u0027ve removed this task:\\n       \" + task "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                + \"\\n     Now you have \" + listLength + \" tasks in the list.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String showAddedTask(Task task, int listLength) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"     Got it. I\u0027ve added this task:\\n       \" + task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                + \"\\n     Now you have \" + listLength + \" tasks in the list.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String showMatchingTask(String taskList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return \"     Here are the matching tasks in your list:\\n\" + taskList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 53
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 19
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void doneTask_success() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        TaskList taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertTrue(taskList.doneTask(1).isDone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void doneTask_taskIndexOutOfBounds_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        TaskList taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            assertTrue(taskList.doneTask(2).isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    \"☹ OOPS!!! Please enter a valid task index to be marked as done.\", "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void deleteTask_success() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        TaskList taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        taskList.deleteTask(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertTrue(taskList.getMyTaskList().isEmpty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void deleteTask_taskIndexOutOfBounds_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        TaskList taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            taskList.deleteTask(2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    \"☹ OOPS!!! Please enter a valid task index to be deleted.\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        TaskList taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertEquals(\"     1.[T][✘] read book\", taskList.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 67
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 2,
      "-": 20
    }
  }
]
