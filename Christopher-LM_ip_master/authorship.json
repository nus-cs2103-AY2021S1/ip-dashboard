[
  {
    "path": "src/main/java/duke/tasks/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a Bye Command. This command handles the bye input from users"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * to exit Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public ByeCommand() { }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 13
    }
  },
  {
    "path": "src/main/java/duke/tasks/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a Command. This Command executes the necessary input from"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws IOException { }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Returns if the command requires Duke to terminate."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return if Duke is to be terminated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 19
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a Deadline task that is created upon user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    int code \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructor for a Deadline Task which stores the description of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * the task and the deadline of it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param description Task description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param by Task deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.date \u003d LocalDate.parse(this.by);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Prints out an error when the format of the deadline is incorrect."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static void invalidInput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        invalidInput(\"OOPS!!! The format of the Deadline is wrong.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + this.dateFormatted() + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 37
    }
  },
  {
    "path": "src/main/java/duke/tasks/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a deadline command. This command handles the deadline input"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * from users."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected String deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructor that stores the deadline string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param deadline input from user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public DeadlineCommand(String deadline) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        //add event task to list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        tasks.deadline(this.deadline);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        //write to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String s \u003d storage.genList(tasks.getTaskLs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        storage.writeToFile(\"data/duke.rtf\", s);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 29
    }
  },
  {
    "path": "src/main/java/duke/tasks/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a Delete Command. This command handles the delete input"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * from users."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected String delete;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructor that stores the string to be deleted."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param delete string to be removed from list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public DeleteCommand(String delete) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.delete \u003d delete;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        //add event task to list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        tasks.delete(this.delete);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        //write to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String s \u003d storage.genList(tasks.getTaskLs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        storage.writeToFile(\"data/duke.rtf\", s);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 29
    }
  },
  {
    "path": "src/main/java/duke/tasks/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a Done Command. This command handles the done input"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * from users."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected String done;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public DoneCommand(String done) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        //remove event task from list of tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        tasks.done(this.done);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        //write to file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String s \u003d storage.genList(tasks.getTaskLs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        storage.writeToFile(\"data/duke.rtf\", s);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public abstract static class Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        public void execute(TaskList tasks, UI ui, Storage storage) throws IOException { }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 33
    }
  },
  {
    "path": "src/main/java/duke/tasks/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents the Duke Program. Helps manage user\u0027s tasks and keeps them in check."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public Duke() throws FileNotFoundException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            storage \u003d new Storage(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Here is where the Duke program is run and commands are executed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws IOException File containing list of task may not be found."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void run() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        UI.intro();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        while(!isExit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            String toPrint \u003d ui.nextInput();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            ui.dividerLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            Command c \u003d parser.parse(toPrint);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            ui.dividerLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static void main(String[] args) throws DukeException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "//    public static boolean isValidDate(String dateStr) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "//            LocalDate.parse(dateStr);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "//        } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "//            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "//        return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "//    }"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 60,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/tasks/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents an Error when input is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    DukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 10
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents an Event task that is created upon user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    int code \u003d 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructor for an Event Task which stores the description"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * of the task and the specific timing of it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param description Task description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param at Task timing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.date \u003d LocalDate.parse(this.at);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Getter for the specific timing of the Event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return Task timing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Prints out an error when the format of the deadline is incorrect."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static void invalidInput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        invalidInput(\"OOPS!!! The format of the Event is wrong.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + this.dateFormatted() + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 43
    }
  },
  {
    "path": "src/main/java/duke/tasks/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents an Event Command. This command handles the event input"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * from users."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected String event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructor that stores the event string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param event input from user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public EventCommand(String event) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        //add event task to list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        tasks.event(this.event);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        //write to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String s \u003d storage.genList(tasks.getTaskLs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        storage.writeToFile(\"data/duke.rtf\", s);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 30
    }
  },
  {
    "path": "src/main/java/duke/tasks/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a Find Command. This command handles the find input"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * from users."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected String toFind;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructor that stores the find command string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param toFind input from user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public FindCommand(String toFind) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.toFind \u003d toFind;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        //find tasks with matching keywords in the string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        tasks.find(this.toFind);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 25
    }
  },
  {
    "path": "src/main/java/duke/tasks/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a list command. This command handles the list input"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * from users."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected String list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructor that stores the list string."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param str input from user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public ListCommand(String str) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.list \u003d str;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        //gets the list of tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        tasks.list();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 23
    }
  },
  {
    "path": "src/main/java/duke/tasks/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a parser where the inputs from the user is filtered according to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * the command issued."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Creates a command that is specified by the user. The command will be"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * executed in the main program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param toPrint input from the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return type of command to be executed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static Command parse(String toPrint) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        if (toPrint.startsWith(\"list\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new ListCommand(toPrint);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        else if (toPrint.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new DoneCommand(toPrint);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        else if (toPrint.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new DeleteCommand(toPrint);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        else if (toPrint.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new TodoCommand(toPrint);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        else if (toPrint.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new EventCommand(toPrint);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        else if (toPrint.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new DeadlineCommand(toPrint);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        else if (toPrint.startsWith(\"bye\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        else if (toPrint.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new FindCommand(toPrint);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 46
    }
  },
  {
    "path": "src/main/java/duke/tasks/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a Storage system where the tasks lists and its content are"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * being stored in."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    static String rtfPath \u003d \"data/duke.rtf\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    static String newLine \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public Storage(TaskList tasksLs) throws FileNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        readFromFile(rtfPath, tasksLs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Stores the list of tasks in a rtf file before Duke is terminated."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param filePath location of rtf file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param textToAdd tasks to be added to the rtf file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws IOException file may not be found in the path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static void writeToFile(String filePath, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Loads the list of tasks from the rtf file when Duke is launched."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param filePath location of rtf file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param taskLs tasks lists where tasks are being loaded into."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws FileNotFoundException file may not be found in the path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static void readFromFile(String filePath, TaskList taskLs) throws FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            String eachTask \u003d s.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            if (eachTask.startsWith(\"[T]\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                String[] description \u003d eachTask.split(\"%\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                Todo todoTask \u003d new Todo(description[2]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                taskLs.add(todoTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            } else if (eachTask.startsWith(\"[D]\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                String[] description \u003d eachTask.split(\"%\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                Deadline deadlineTask \u003d new Deadline(description[2], description[3]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                taskLs.add(deadlineTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            } else if (eachTask.startsWith(\"[E]\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                String[] description \u003d eachTask.split(\"%\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                Event eventTask \u003d new Event(description[2], description[3]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                taskLs.add(eventTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            } else {}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Generates the format for the type of tasks to be displayed in a list format."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param itemsLs list of tasks to be made into a string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return string containing the tasks in the list of tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static String genList(ArrayList\u003cTask\u003e itemsLs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        for (Task n : itemsLs) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            if (n instanceof Todo) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                s \u003d s + \"[T]\" + \"%\" +  n.isDone + \"%\" + n.description + newLine;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            } else if (n instanceof Deadline) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                s \u003d s + \"[D]\" + \"%\" + n.isDone + \"%\" + n.description + \"%\" + ((Deadline) n).by + newLine;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            } else if (n instanceof  Event) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                s \u003d s + \"[E]\" + \"%\" + n.isDone + \"%\" + n.description + \"%\" + ((Event) n).at + newLine;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            } else {}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 85
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a Task that is created upon user input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructor which stores the description of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * and initialises the completion of it to be false."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param description Task description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Formats the date into a certain pattern."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return the date in string format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String dateFormatted() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Returns a string as a tick or a cross."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return String representing a tick or a cross."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Marks the task as completed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Checks if the task is completed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return if the task is completed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Getter for the description of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return String representation of the description."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Prints out the error message when the input is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param error invalid input from user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static void invalidInput(String error) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String errorMsg \u003d \"Error: \" + error;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        System.out.println(errorMsg);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return \"[\" + this.isDone + \"]\" + this.description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 77
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a TaskList of all the tasks managed in Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected ArrayList\u003cTask\u003e taskLs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        taskLs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskLs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return this.taskLs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.taskLs.add(toAdd);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Prints out a statement to inform users that the input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * is invalid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static void confused() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String str \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        System.out.println(str);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Removes the task from the list of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param toDelete task to be removed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void delete(String toDelete) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String command \u003d toDelete.replaceAll(\"[^\\\\d.]\", \"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        int i \u003d Integer.parseInt(command.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        Task deletedTask \u003d this.taskLs.get(i-1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.taskLs.remove(i-1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        int numTask \u003d this.taskLs.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        System.out.println(deletedTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        System.out.println(\"Now you have \" + numTask + \" tasks in the list.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Lists all the task from the list of tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        System.out.println(\"Here are the tasks in your list: \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.taskLs.forEach(n -\u003e System.out.println(this.taskLs.indexOf(n) + 1 + \". \" + n));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Lists the task from the list of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void findList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.taskLs.forEach(n -\u003e System.out.println(this.taskLs.indexOf(n) + 1 + \". \" + n));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param toPrint contains int to mark the specific task as done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void done(String toPrint) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String command \u003d toPrint.replaceAll(\"[^\\\\d.]\", \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        int indexCommand \u003d Integer.parseInt(command.trim());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        Task completedTask \u003d this.taskLs.get(indexCommand - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        completedTask.markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        System.out.println(\"[\" + completedTask.getStatusIcon() + \"] \" + completedTask.description);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Creates a todo task and adds it to the list of tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param toPrint Description of task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void todo(String toPrint) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            toPrint \u003d toPrint.substring(4);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            if (toPrint.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                throw new DukeException(\"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            Todo taskTodo \u003d new Todo(toPrint);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            this.taskLs.add(taskTodo);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            System.out.println(taskTodo);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            System.out.println(\"Now you have \" + this.taskLs.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            Todo.invalidInput();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Creates a event task and adds it to the list of tasks."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param toPrint Description and at of task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void event(String toPrint) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            toPrint \u003d toPrint.substring(5);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            String[] arrtoPrint \u003d toPrint.split(\"/at \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            Event taskEvent \u003d new Event(arrtoPrint[0], arrtoPrint[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            this.taskLs.add(taskEvent);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            System.out.println(taskEvent);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            System.out.println(\"Now you have \" + this.taskLs.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            Event.invalidInput();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Creates a deadline task and adds it to the list of tasks."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param toPrint Description and by of task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void deadline(String toPrint) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            toPrint \u003d toPrint.substring(8);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            String[] arrtoPrint \u003d toPrint.split(\"/by \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            Deadline taskDeadline \u003d new Deadline(arrtoPrint[0], arrtoPrint[1]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            this.taskLs.add(taskDeadline);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            System.out.println(taskDeadline);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            System.out.println(\"Now you have \" + this.taskLs.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            Deadline.invalidInput();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Finds the tasks in the list of tasks matching the keyword."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param toPrint Keyword entered by user."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void find(String toPrint) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        TaskList duplicateTaskLs \u003d new TaskList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        duplicateTaskLs.taskLs \u003d new ArrayList\u003c\u003e(this.getTaskLs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        toPrint \u003d toPrint.substring(4);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String finalToPrint \u003d toPrint;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        duplicateTaskLs.taskLs.removeIf(n -\u003e !n.getDescription().contains(finalToPrint));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list: \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        duplicateTaskLs.findList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 157
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a Todo task that is created upon user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    int code \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructor for a Todo task which stores the description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param description Task description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Prints out an error when the format of the Todo is incorrect."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static void invalidInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        invalidInput(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 29
    }
  },
  {
    "path": "src/main/java/duke/tasks/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a todo command. This command handles the todo input"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * from users."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class TodoCommand extends Command{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected String todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructor that stores the description string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param todo input from user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public TodoCommand(String todo) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.todo \u003d todo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        //add todo task to list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        tasks.todo(this.todo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        //write task to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String s \u003d storage.genList(tasks.getTaskLs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        storage.writeToFile(\"data/duke.rtf\", s);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 29
    }
  },
  {
    "path": "src/main/java/duke/tasks/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents the UI to be displayed on the console."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Prints out the format for the divider lines."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    protected Scanner myObj;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructor for the UI object that initialises a scanner for"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * user inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.myObj \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Takes in the user\u0027s next input and returns it as a string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return string format of user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String nextInput() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return this.myObj.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Prints the formatting line before and after a list of task is displayed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static void dividerLine() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        System.out.println(\"______________________________________________________\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Duke\u0027s intro when a user starts up Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static void intro() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        //Intro"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 43
    }
  },
  {
    "path": "src/test/java/duke/tasksTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class tasksTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void add_addTodoTask_todoTaskAdded(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        TaskList testTaskList \u003d  new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        Todo testTask \u003d new Todo(\"borrow lamp\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        testTaskList.add(testTask);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        assertEquals(\"borrow lamp\", testTaskList.getTaskLs().get(0).getDescription());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void event_checkStatusOfTask_eventTaskDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        TaskList testTaskList \u003d  new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        Event testTask \u003d new Event(\"borrow books\", \"2018-08-08\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        testTaskList.add(testTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        testTaskList.getTaskLs().get(0).markAsDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        assertEquals(true, testTaskList.getTaskLs().get(0).isDone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void doneCommand_checkIfExitDuke_falseExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        DoneCommand testDoneCommand \u003d new DoneCommand(\"testing\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        assertEquals(false, testDoneCommand.isExit());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 37
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "  )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 5,
      "-": 37
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "../src/main/java/TaskList.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "../src/main/java/Event.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "../src/main/java/Task.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "../src/main/java/Duke.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "../src/main/java/Deadline.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "../src/main/java/Todo.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "../src/main/java/DukeException.java"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 7
    }
  }
]
