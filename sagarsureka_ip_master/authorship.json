[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    mainClassName \u003d \"dobby.gui.Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    archiveBaseName \u003d \"dobby\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 17,
      "-": 43
    }
  },
  {
    "path": "dobbylist.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "[E][✓] Presentation (at: Sep 29 2020 2:00 pm)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "[T][✘] Prepare for vacation"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 2
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "### Add Tasks "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "You can add 3 types of tasks: Deadlines, Events and Todo."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "1. Adding a **Deadline** Task:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Adds a task which has to be completed by a specific deadline date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Usage: `deadline description /by dd/mm/yyyy (hhhh)`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Constraints:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The description cannot be empty"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The deadline date must be in dd/mm/yyyy format, eg. 24/08/2020"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The deadline time must be in 24 hour format, eg. for 11:59 pm input must be 2359"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The deadline time field is optional. "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Example command: "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * `deadline Submit Report /by 30/09/2020 2359`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Expected outcome:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * `Great! I\u0027ve added the following task:`\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         ` [D][✘] Submit Report (by: Sep 30 2020 11:59 pm)`\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         `Now you have 1 task in the list`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "2. Adding an **Event** Task:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Adds a task for an event scheduled on a specific date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Usage: `event description /at dd/mm/yyyy (hhhh)`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Constraints:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The description cannot be empty"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The event date must be in dd/mm/yyyy format, eg. 24/08/2020"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The event time must be in 24 hour format, eg. for 11:59 pm input must be 2359"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The event time field is optional. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Example command: "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * `event Presentation meeting /at 30/09/2020 1500`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Expected outcome:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * `Great! I\u0027ve added the following task:`\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         ` [E][✘] Presentation meeting (at: Sep 30 2020 3:00 pm)`\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         `Now you have 2 tasks in the list`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "3. Adding a **Todo** Task:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Adds a todo task which the you want to do."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Usage: `todo description`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Constraint:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The description cannot be empty"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Example command:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * `todo Prepare for vacation`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Expected outcome:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * `Great! I\u0027ve added the following task:`\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         ` [T][✘] Prepare for vacation`\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         `Now you have 3 tasks in the list`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "### Listing Tasks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Lists all the tasks currently stored in the application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Usage: `list`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Example command:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * `list`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * `1. [D][✘] Submit Report (by: Sep 30 2020 11:59 pm)`\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    `2. [E][✘] Presentation meeting (at: Sep 30 2020 3:00 pm)`\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    `3. [T][✘] Prepare for vacation`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "### Marking tasks done"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Marks any task as done [✓]."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Usage: `done task_number`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Constraints:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * The `task_number` must be a valid task number, i.e. it should be within the range of the indices of the tasks returned by the list command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Example command:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * `done 1`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Expected outcome: (when `list` returns the above expected outcome)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * `Great! i\u0027ve marked this task as done:`\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    `  [D][✓] Submit Report (by: Sep 30 2020 11:59 pm)`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "### Deleting Tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Deletes a task from the ones currently stored in the application based on the index of the task in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Usage: `delete task_number`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Constraints:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * The `task_number` must be a valid task number, i.e. it should be within the range of the indices of the tasks returned by the list command."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Example command:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * `delete 1` "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Expected outcome: (when `list` returns the above expected outcome)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * `Noted. I\u0027ve removed this task:`\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    ` [D][✘] Submit Report (by: Sep 30 2020 11:59 pm)`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "### Find tasks"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "You can search for task in 3 ways: find, findtype and scheduled."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "1. Searching for tasks based on **keyword**:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Returns tasks from the ones currently stored based on a keyword to search for."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Usage: `find keyword`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Constraints:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The keyword cannot be empty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * There can only be a single keyword."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The search on the basis of the keyword is case-sensitive, i.e. keyword \"presentation\" will not match \"Presentation\"."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * Tasks returned may also contain the keyword as a part of a word, i.e. searching with \"sent\" will return the task containing \"Presentation\"."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Example command:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * \u0027find meet`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Expected outcome:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * `1. [E][✘] Presentation meeting (at: Sep 30 2020 3:00 pm)`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "2. Searching for tasks based on the **task type**:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Returns tasks from the ones currently stored based on a task type to search for."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Usage: `findtype type`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Constraints:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The type cannot be empty."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * Type can be of only 3 kinds - D or E or T (standing for Deadline, Even and Todo respectively)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The search on the basis of the type is not case-sensitive, i.e. type \"d\" will match \"D\"."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Example command:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * \u0027findtype T`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Expected outcome:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * `1. [T][✘] Prepare for vacation`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "3. Searching for tasks based on **scheduling details**:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Returns tasks from the ones currently stored based on a date of scheduling to search for."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Usage: `scheduled dd/mm/yyyy`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Constraints:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The date cannot be empty."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * The date must be in dd/mm/yyyy format, eg. 24/08/2020"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Example command:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * \u0027scheduled 30/09/2020`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    * Expected outcome:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "      * `1. [E][✘] Presentation meeting (at: Sep 30 2020 3:00 pm)`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "### Updating tasks"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Updates the description and/or date and/or time (whichever ones are applicable)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Usage: `update _task_number_ (desc: new_description) (date: new_date) (time: new_time)`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Constraints:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * The `task_number` must be a valid task number, i.e. it should be within the range of the indices of the tasks returned by the list command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * At least one of the three fields (description/date/time) must be specified."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * For task of Todo type, only description must be specified."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * You can perform upto three updates on any task. If you have more than one update to the same task, ensure the relative orders of the field is maintained, i.e. *desc* before *date* before *time*."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * If the date is being updated, the new date must also be in dd/mm/yyyy format, eg. 24/08/2020."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * If the time is being updated, the new time must also be in 24 hour format, eg. for 11:59 pm input must be 2359."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Example command:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  * `update 1 desc: Presentation date: 29/09/2020 time: 1400`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Expected outcome: (the example updates the event being used in the above examples)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "  *  `Updated task number 1:`\u003cbr\u003e `  [E][✘] Presentation (at: Sep 29 2020 2:00 pm)`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "### Exiting the application"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Saves all the changes made and exits the application."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* Usage: `bye`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "**Q**: How do I transfer my data to another computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Dobby- Task Manager. The file would be named as \"dobbylist.txt\"."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Add deadline task**: `deadline description /by dd/mm/yyyy (hhhh)`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Add event task**: `event description /at dd/mm/yyyy (hhhh)`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Add todo task**: `todo description`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **List tasks**: `list`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Mark tasks as done**: `done task_number`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Delete tasks**: `delete task_number`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Find with keyword**: `find keyword`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Find the type**: `findtype type`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Find with scheduling**: `scheduled dd/mm/yyyy`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Update task**: `update _task_number_ (desc: new_description) (date: new_date) (time: new_time)`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "* **Exit application**: `bye`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 140,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 2,
      "-": 103
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * This file was generated by the Gradle \u0027init\u0027 task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * The settings file is used to specify which projects to include in your build."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Detailed information about configuring a multi-project build in Gradle can be found"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * in the user manual at https://docs.gradle.org/6.5/userguide/multi_project_builds.html"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "rootProject.name \u003d \u0027ip\u0027"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 10
    }
  },
  {
    "path": "src/main/java/dobby/Dobby.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Main class which begins the running of the chat bot"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Dobby {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private boolean isInitialized \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Dobby() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Loads the dobbylist storage file and initializes other components of package"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        File dobbyFile \u003d new File(\"./dobbylist.txt\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (!dobbyFile.exists()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                dobbyFile.getParentFile().mkdirs(); // Will create parent directories if not exists"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                dobbyFile.createNewFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                FileOutputStream s \u003d new FileOutputStream(dobbyFile, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.parser \u003d new Parser(this.tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.storage \u003d new Storage(dobbyFile.getPath(), tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.storage.readFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        isInitialized \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns the text to be replied to the user based on input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return response"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (!isInitialized) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            this.initialize();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            response \u003d this.parser.getMessage(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (input.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                storage.rewriteFile();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            response \u003d e.getMessage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Main function"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Dobby dobby \u003d new Dobby();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        dobby.initialize();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        dobby.ui.greet();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 74
    }
  },
  {
    "path": "src/main/java/dobby/DobbyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Exception class with specified message"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class DobbyException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public DobbyException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 10
    }
  },
  {
    "path": "src/main/java/dobby/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.command.FindtypeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.command.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.command.InvalidInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.command.ScheduledCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.command.TodoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.command.UpdateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Parses the input given by the user and interacts with TaskList accordingly"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Parser(TaskList tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns the chat bot reply or the error message depending on the input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param text text inputted by user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return message reply to user based on input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @throws DobbyException based on conditions with customised message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getMessage(String text) throws DobbyException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String command \u003d text.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (text.indexOf(\u0027 \u0027) \u003e 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                command \u003d text.substring(0, text.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            switch(command.toLowerCase()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return (new TodoCommand()).parseInput(tasks, text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return (new DeadlineCommand()).parseInput(tasks, text);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return (new EventCommand()).parseInput(tasks, text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return (new ListCommand()).parseInput(tasks, text);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return (new DoneCommand()).parseInput(tasks, text);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return (new DeleteCommand()).parseInput(tasks, text);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            case \"scheduled\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return (new ScheduledCommand()).parseInput(tasks, text);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return (new FindCommand()).parseInput(tasks, text);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            case \"findtype\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return (new FindtypeCommand()).parseInput(tasks, text);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return (new ByeCommand()).parseInput(tasks, text);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return (new HelpCommand()).parseInput(tasks, text);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            case \"update\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return (new UpdateCommand()).parseInput(tasks, text);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return (new InvalidInput()).parseInput(tasks, text);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 73
    }
  },
  {
    "path": "src/main/java/dobby/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Reads the stored tasks at updates the storage file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    Storage(String filePath, TaskList tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Reads the storage file and add tasks to the TaskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void readFile() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                String str \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    this.tasks.createFromStorage(str);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                } catch (ParseException e) { // should never be called"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    Ui.reply(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Ui.reply(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Updates current tasks to the storage file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void rewriteFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            fileWriter.flush();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            for (int i \u003d 0; i \u003c (this.tasks).getSize() - 1; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                Task task \u003d (this.tasks).getTask(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                fileWriter.write(task.getDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if ((this.tasks).getSize() \u003e 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                Task lastTask \u003d tasks.getTask((this.tasks).getSize() - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                fileWriter.write(lastTask.getDescription());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Ui.reply(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 68
    }
  },
  {
    "path": "src/main/java/dobby/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.TimedTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Stores the tasks and performs operations or returns details depending on function called"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Create task with details from the input string and add to the tasks list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void createFromStorage(String str) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        boolean isDone \u003d str.charAt(4) \u003d\u003d \u0027\\u2713\u0027;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (str.charAt(1) \u003d\u003d \u0027T\u0027) { // TODO"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String decription \u003d str.substring(str.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            task \u003d new Todo(decription);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (str.charAt(1) \u003d\u003d \u0027D\u0027) { // DEADLINE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String description \u003d str.substring(str.indexOf(\u0027 \u0027) + 1, str.indexOf(\"(by: \") - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String by \u003d str.substring(str.indexOf(\"(by: \") + 5, str.length() - 1); //Aug 28 2020 4:00 pm"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            int thirdIndex \u003d by.indexOf(\u0027 \u0027, 10);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String dateText \u003d by.substring(0, thirdIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String timeText \u003d by.substring(thirdIndex + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateText, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            task \u003d new Deadline(description, timeText, date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else { // EVENT"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String description \u003d str.substring(str.indexOf(\u0027 \u0027) + 1, str.indexOf(\"(at: \") - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String at \u003d str.substring(str.indexOf(\"(at: \") + 5, str.length() - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            int thirdIndex \u003d at.indexOf(\u0027 \u0027, 10);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String dateText \u003d at.substring(0, thirdIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateText, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String timeText \u003d at.substring(thirdIndex + 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            task \u003d new Event(description, timeText, date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            task.setDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void addToList(Task task) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns a string format of all the tasks in the list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return String all tasks in the list in a particular format"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getListedTasks() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String allTasks \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        for (Task task : (this.tasks)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            allTasks \u003d allTasks + index + \". \" + task.getDescription();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (index \u003c tasks.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                allTasks \u003d allTasks + \"\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            allTasks \u003d \"The task list is currently empty.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns a string format of all the tasks in the list ,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * scheduled on a particular date"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param date scheduled at"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return String all tasks in the list scheduled on given date,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * in a particular format"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getScheduledTasks(LocalDate date) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (task instanceof TimedTask) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                TimedTask timedTask \u003d (TimedTask) task;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if (date.equals(timedTask.getDate())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    message \u003d message + String.format(\"%d. %s\\n\", ++counter, timedTask.getDescription());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return counter \u003d\u003d 0 ? \"The task list is currently empty.\" : message;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Checks for tasks of the type of user requirement and returns a message of those tasks listed"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param type either D or T or E"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return message list of task descriptions of given type"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String findOfType(String type) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert List.of(\"T\", \"D\", \"E\").contains(type) : \"Type can be T, D, or E only\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        for (Task task: this.tasks) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if ((task.getTag()).equals(\"[\" + type + \"]\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d message + String.format(\"%d. %s\\n\", ++counter, task.getDescription());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (counter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d \"There are no tasks of type \" + type;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns a message list of tasks whose descriptions contain the given keyword"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param keyword keyword to search for"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return message list of task descriptions of containing given keyword"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String findWithKeyword(String keyword) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert keyword !\u003d null : \"String to search for cannot be empty\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        for (Task task: this.tasks) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if ((task.getDescription()).contains(keyword)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d message + String.format(\"%d. %s\\n\", ++counter, task.getDescription());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (counter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d \"There are no tasks of containing the word - \" + keyword;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tasks.remove(index);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 171
    }
  },
  {
    "path": "src/main/java/dobby/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Interacts with the user"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private static final Scanner SC \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Calls reply function with greeting string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static String greet() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"Hello! I\u0027m Dobby. \\nHow can I help you!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns string which is entered by user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return String user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static String getInput() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String text \u003d SC.nextLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (text.equals(\"bye\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            SC.close();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Prints reply message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static void reply(String message) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        System.out.println(message + \"\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 37
    }
  },
  {
    "path": "src/main/java/dobby/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    protected static final String USAGE \u003d \"bye\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String parseInput(TaskList tasks, String text) throws DobbyException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert text.equals(\"bye\") : \"Bye command must be bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return \"Goodbye.\\nHope to see you again soon!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 15
    }
  },
  {
    "path": "src/main/java/dobby/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Takes user input command and interprets that accordingly"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param tasks TaskList object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param text user input text"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @throws DobbyException"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    String parseInput(TaskList tasks, String text) throws DobbyException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 15
    }
  },
  {
    "path": "src/main/java/dobby/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String parseInput(TaskList tasks, String text) throws DobbyException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert text.startsWith(\"deadline\") : \"Deadline command must start with deadline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            int commandLen \u003d \"deadline\".length();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            text \u003d text.substring(commandLen + 1).trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (text.indexOf(\"/by\") \u003c 0 \u0026\u0026 text.length() \u003e\u003d 1) { // non-empty description and /by missing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\nDeadline details cannot be empty. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Please try again.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } else if (text.indexOf(\"/by\") \u003d\u003d 0) { // no description, by given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\nDescription cannot be empty. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Please try again.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String by \u003d text.substring(text.indexOf(\"/by\") + 4).trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String description \u003d text.substring(0, text.indexOf(\"/by\") - 1).trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Deadline deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            boolean hasTime \u003d by.lastIndexOf(\u0027 \u0027) \u003e 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (hasTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                boolean isCorrectFormat \u003d by.substring(1 + by.lastIndexOf(\u0027 \u0027)).length() \u003e 4;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if (isCorrectFormat) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Details of time should be in 24hr format with only 4 digits. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Please try again.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            tasks.addToList(deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d \"Great! I\u0027ve added the following task:\\n  \" + deadline.getDescription()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + String.format(\"\\nNow you have %d task%s in the list.\", tasks.getSize(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    tasks.getSize() \u003e 1 ? \"s\" : \"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (text.startsWith(\"deadline\") || text \u003d\u003d null) { // description empty"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\nDescription cannot be empty. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Please try again.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } else { // no deadline details specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\nDeadline details cannot be empty. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Please try again.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\\nThe format of the date in incorrect. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + \"Please try again.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) { // empty description or /by missing"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert message !\u003d null : \"Return message to user cannot be empty\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 62
    }
  },
  {
    "path": "src/main/java/dobby/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String parseInput(TaskList tasks, String text) throws DobbyException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert text.startsWith(\"delete\") : \"Delete command must start with delete\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            int commandLen \u003d \"delete\".length();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            text \u003d text.substring(commandLen).trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            int index \u003d Integer.parseInt(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (tasks.getSize() \u003c index) { // if index is out of range throw exception"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Task number must be within the correct range.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            assert index \u003c\u003d tasks.getSize() : \"Task to delete must be in correct range\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Task task \u003d tasks.getTask(index - 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            tasks.removeTask(index - 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d \"Noted. I\u0027ve removed this task:\\n  \" + task.getDescription();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) { // if index is out of range return message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (Exception e) { // missing number after done"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + \"Please enter a task number after delete.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert message !\u003d null : \"Return message to user cannot be empty\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 37
    }
  },
  {
    "path": "src/main/java/dobby/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String parseInput(TaskList tasks, String text) throws DobbyException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert text.startsWith(\"done\") : \"Done command must start with done\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            int commandLen \u003d \"done\".length();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            text \u003d text.substring(commandLen).trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            int index \u003d Integer.parseInt(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (tasks.getSize() \u003c index) { // if index is out of range throw exception"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Task number must be within the correct range.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Task task \u003d tasks.getTask(index - 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            task.setDone();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            assert task.isDone() : \"Task should be marked done\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d \"Great! I\u0027ve marked this task as done:\\n  \" + task.getDescription();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) { // if index is out of range return message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (Exception e) { // missing number after done"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + \"Please enter a task number after done.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert message !\u003d null : \"Return message to user cannot be empty\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 38
    }
  },
  {
    "path": "src/main/java/dobby/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String parseInput(TaskList tasks, String text) throws DobbyException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert text.startsWith(\"event\") : \"Event command must start with event\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            int commandLen \u003d \"event\".length();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            text \u003d text.substring(commandLen + 1).trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (text.indexOf(\"/at\") \u003c 0 \u0026\u0026 text.length() \u003e\u003d 1) { // non-empty description and /by missing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\nSchedule details cannot be empty. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Please try again.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } else if (text.indexOf(\"/at\") \u003d\u003d 0) { // no description, by given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\nDescription cannot be empty. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Please try again.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String at \u003d text.substring(text.indexOf(\"/at\") + 4).trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String description \u003d text.substring(0, text.indexOf(\"/at\") - 1).trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Event event \u003d new Event(description, at);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            boolean hasTime \u003d at.lastIndexOf(\u0027 \u0027) \u003e 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (hasTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                boolean isCorrectFormat \u003d at.substring(1 + at.lastIndexOf(\u0027 \u0027)).length() \u003e 4;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if (isCorrectFormat) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Details of time should be in 24hr format with only 4 digits. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Please try again.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            tasks.addToList(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d \"Great! I\u0027ve added the following task:\\n  \" + event.getDescription()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + String.format(\"\\nNow you have %d task%s in the list.\", tasks.getSize(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    tasks.getSize() \u003e 1 ? \"s\" : \"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (text.startsWith(\"event\") || text \u003d\u003d null) { // description empty"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\nDescription cannot be empty. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Please try again.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } else { // no schedule details specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\nSchedule details cannot be empty. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Please try again.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\\nThe format of the date in incorrect. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + \"Please try again.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) { // empty description or /at missing"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert message !\u003d null : \"Return message to user cannot be empty\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 62
    }
  },
  {
    "path": "src/main/java/dobby/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String parseInput(TaskList tasks, String text) throws DobbyException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert text.startsWith(\"find\") : \"Find command must start with find\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String keyword \u003d (text.substring(text.indexOf(\u0027 \u0027))).substring(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (keyword.indexOf(\u0027 \u0027) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"You can only give a single word. Please try again.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } else if (keyword.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Keyword required cannot be empty. Please try again.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            assert !keyword.equals(null) : \"String to search for cannot be null.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d tasks.findWithKeyword(keyword);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + \"Keyword required cannot be empty. Please try again.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert message !\u003d null : \"Return message to user cannot be empty\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 32
    }
  },
  {
    "path": "src/main/java/dobby/command/FindtypeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class FindtypeCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String parseInput(TaskList tasks, String text) throws DobbyException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert text.startsWith(\"findtype\") : \"Findtype command must start with findtype\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String type \u003d text.substring(text.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (type.length() \u003e 1) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Please try again.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            type \u003d type.toUpperCase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            boolean isNotTaskType \u003d !(type.equals(\"T\") || type.equals(\"D\") || type.equals(\"E\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (isNotTaskType) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Type can be T, D, or E only. Please try again.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            assert List.of(\"T\", \"D\", \"E\").contains(type) : \"Type can be T, D, or E only\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d tasks.findOfType(type.toUpperCase());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + \"Type required cannot be empty. Please try again.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert message !\u003d null : \"Return message to user cannot be empty\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 38
    }
  },
  {
    "path": "src/main/java/dobby/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String parseInput(TaskList tasks, String text) throws DobbyException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert text.equals(\"help\") : \"Help command must be help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String userGuide \u003d \"https://sagarsureka.github.io/ip/\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return \"Please look at the user guide at: \" + userGuide;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 14
    }
  },
  {
    "path": "src/main/java/dobby/command/InvalidInput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class InvalidInput implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String parseInput(TaskList tasks, String text) throws DobbyException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        throw new DobbyException(\"Sorry that command is not supported. Please try again.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 12
    }
  },
  {
    "path": "src/main/java/dobby/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String parseInput(TaskList tasks, String text) throws DobbyException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert text.equals(\"list\") : \"Input text must be list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return tasks.getListedTasks();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 14
    }
  },
  {
    "path": "src/main/java/dobby/command/ScheduledCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class ScheduledCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String parseInput(TaskList tasks, String text) throws DobbyException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert text.startsWith(\"scheduled\") : \"Scheduled command must start with scheduled.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String date \u003d text.substring(text.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String day \u003d date.substring(0, date.indexOf(\u0027/\u0027));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String month \u003d date.substring(date.indexOf(\u0027/\u0027) + 1, date.lastIndexOf(\u0027/\u0027));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String year \u003d date.substring(date.lastIndexOf(\u0027/\u0027) + 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            LocalDate parsedDate \u003d LocalDate.parse(year + \"-\" + month + \"-\" + day);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d tasks.getScheduledTasks(parsedDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + \"The format of the date in incorrect. Please try again.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert message !\u003d null : \"Return message to user cannot be empty\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 30
    }
  },
  {
    "path": "src/main/java/dobby/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class TodoCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String parseInput(TaskList tasks, String text) throws DobbyException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert text.startsWith(\"todo\") : \"Todo command must start with todo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            int commandLen \u003d \"todo\".length();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String description \u003d text.substring(commandLen + 1).trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            tasks.addToList(todo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d \"Great! I\u0027ve added the following task:\\n  \" + todo.getDescription()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + String.format(\"\\nNow you have %d task%s in the list.\", tasks.getSize(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    tasks.getSize() \u003e 1 ? \"s\" : \"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\\nDescription cannot be empty. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + \"Please try again.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert message !\u003d null : \"Return message to user cannot be empty\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 30
    }
  },
  {
    "path": "src/main/java/dobby/command/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.DobbyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.TimedTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class UpdateCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    protected static final String USAGE \u003d \"update _task_number_ desc: _new_description_(optional) \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + \"date: _new_date_(optional) time: _new_time_(optional)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String parseInput(TaskList tasks, String text) throws DobbyException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert text.startsWith(\"update\") : \"Update command must start with update\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        System.out.println(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            int commandLen \u003d \"update\".length();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            text \u003d text.substring(commandLen + 1).trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            int taskIndex \u003d (int) (text.charAt(0)) - 48;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            System.out.println(\"Task index: \" + taskIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (taskIndex \u003e tasks.getSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Task number must be within the correct range. Please try again.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Task task \u003d tasks.getTask(taskIndex - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            text \u003d text.substring(2).trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                System.out.println(\"updating todo\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d updateTodo(tasks, text, (Todo) task, taskIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } else if (task instanceof TimedTask) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                System.out.println(\"updating timed task\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d updateTimedTask(tasks, text, (TimedTask) task, taskIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert message !\u003d null : \"Return message to user cannot be empty\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Updates the Todo task as required"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param tasks TaskList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param text String input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param task Task to be updated"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param index index of task in TaskList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return message to reply to user"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @throws DobbyException"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private String updateTodo(TaskList tasks, String text, Todo task, int index) throws DobbyException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (!text.startsWith(\"desc:\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert text.startsWith(\"desc:\") : \"Ensure correct usage of command\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String description \u003d text.substring(\"desc:\".length()).trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (description.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\\n  \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + \"Description cannot be empty.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert description.length() \u003e 0 : \"Description cannot be empty\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        task.setDescription(description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return String.format(\"Updated task number %d:\\n  %s\", index, task.getDescription());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Updates the Timed task as required"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param tasks TaskList"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param text String input"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param task Task to be updated"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param index index of task in TaskList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return message to reply to user"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private String updateTimedTask(TaskList tasks, String text, TimedTask task, int index) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            boolean isUpdatingDescription \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (text.contains(\"desc:\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                isUpdatingDescription \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            boolean isUpdatingDate \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (text.contains(\"date:\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                isUpdatingDate \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            boolean isUpdatingTime \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (text.contains(\"time:\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                isUpdatingTime \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (isUpdatingDescription) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                text \u003d parseDescription(task, text, isUpdatingDate, isUpdatingTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (isUpdatingDate) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                text \u003d parseDate(task, text, isUpdatingTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (isUpdatingTime) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                parseTime(task, text);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (!(isUpdatingDate || isUpdatingDescription || isUpdatingTime)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"Incorrect usage of command.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            return String.format(\"Updated task number %d:\\n  %s\", index, task.getDescription());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Updates the description as required. Called only when updating a TimedTask"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param task TaskList"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param text String input"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param isUpdatingDate"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param isUpdatingTime"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return updated value of variable text"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @throws DobbyException"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private String parseDescription(TimedTask task, String text,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                                    boolean isUpdatingDate, boolean isUpdatingTime) throws DobbyException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        text \u003d text.substring(\"desc:\".length()).trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (isUpdatingDate) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            description \u003d text.substring(0, text.indexOf(\"date:\") - 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            text \u003d text.substring(text.indexOf(\"date:\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (isUpdatingTime) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            description \u003d text.substring(0, text.indexOf(\"time:\") - 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            text \u003d text.substring(text.indexOf(\"time:\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            description \u003d text;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (description.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\\n  \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + \"Description cannot be empty.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert description.length() \u003e 0 : \"Description cannot be empty\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        task.setDescription(description);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Updates the date as required. Called only when updating a TimedTask"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param task TaskList"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param text String input"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param isUpdatingTime"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return updated value of variable text"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @throws DobbyException"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private String parseDate(TimedTask task, String text, boolean isUpdatingTime) throws DobbyException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        text \u003d text.substring(\"date:\".length()).trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (isUpdatingTime) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            date \u003d text.substring(0, text.indexOf(\"time:\") - 1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            text \u003d text.substring(text.indexOf(\"time:\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            date \u003d text.trim();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (date.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\\n  \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + \"Date cannot be empty.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert date.length() \u003e 0 : \"Date cannot be empty\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        task.setDate(date);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Updates the time as required. Called only when updating a TimedTask"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param task TaskList"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param text String input"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @throws DobbyException"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private void parseTime(TimedTask task, String text) throws DobbyException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        text \u003d text.substring(\"time:\".length()).trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        time \u003d text;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (time.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(\"Incorrect usage of command.\\n  \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    + \"Time cannot be empty.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assert time.length() \u003e 0 : \"Time cannot be empty\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        task.setTime(time);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 193
    }
  },
  {
    "path": "src/main/java/dobby/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Circle clip \u003d new Circle(50, 50, 48);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        db.setBackground("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                new Background("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        new BackgroundFill(Color.LIGHTSKYBLUE, CornerRadii.EMPTY, Insets.EMPTY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                )"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        BackgroundFill bFill;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (text.startsWith(\"Incorrect\") || text.startsWith(\"Sorry\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            bFill \u003d new BackgroundFill(Color.ORANGERED, CornerRadii.EMPTY, Insets.EMPTY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            bFill \u003d new BackgroundFill(Color.LIGHTCYAN, CornerRadii.EMPTY, Insets.EMPTY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        db.setBackground(new Background(bFill));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 82
    }
  },
  {
    "path": "src/main/java/dobby/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 12
    }
  },
  {
    "path": "src/main/java/dobby/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.Dobby;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private Dobby dobby \u003d new Dobby();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            stage.setTitle(\"DOBBY- Task Manager\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(dobby);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 33
    }
  },
  {
    "path": "src/main/java/dobby/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.Dobby;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private Dobby dobby;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private Image dobbyImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDobby.jpeg\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Greet the user and initialise the scroll pane"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                DialogBox.getDukeDialog(Ui.greet(), dobbyImage)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        BackgroundFill backgroundFill \u003d new BackgroundFill(Color.LIGHTCYAN, CornerRadii.EMPTY, Insets.EMPTY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        dialogContainer.setBackground(new Background(backgroundFill));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void setDuke(Dobby d) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        dobby \u003d d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String response \u003d dobby.getResponse(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                DialogBox.getDukeDialog(response, dobbyImage)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (input.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 73
    }
  },
  {
    "path": "src/main/java/dobby/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Class for deadline tasks"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Deadline extends TimedTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private static final String TAG \u003d \"[D]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, by, TAG);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Deadline(String description, String time, LocalDate date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, time, date, TAG);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 18
    }
  },
  {
    "path": "src/main/java/dobby/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Class for Event task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Event extends TimedTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private static final String TAG \u003d \"[E]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, at, TAG);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Event(String description, String time, LocalDate date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, time, date, TAG);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 18
    }
  },
  {
    "path": "src/main/java/dobby/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Parent class for all tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    Task(String description, String tag) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns the full description of the task object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return description full description of the Task object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String checkbox \u003d \"[\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (this.isDone()) { // tick"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            checkbox \u003d checkbox + \"\\u2713] \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else { // or cross"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            checkbox \u003d checkbox + \"\\u2718] \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return checkbox + this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void setDescription(String des) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.description \u003d des;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return this.tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 49
    }
  },
  {
    "path": "src/main/java/dobby/task/TimedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Parent class for deadline and event classes"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class TimedTask extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Constructor used for tasks input by user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public TimedTask(String description, String time, String tag) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, tag);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String dt \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (time.indexOf(\u0027 \u0027) \u003e 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            dt \u003d time.substring(0, time.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String tm \u003d time.substring(time.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            this.time \u003d parseTime(tm);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            dt \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            this.time \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        date \u003d parseDate(dt);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Constructor used for tasks read from storage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public TimedTask(String description, String time, LocalDate date, String tag) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, tag);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Takes in user date input and parses it to give a LocalDate object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param dt date in user input format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return parsedDate date parsed into java LocalDate class formatted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private LocalDate parseDate(String dt) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        LocalDate parsedDate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String day \u003d dt.substring(0, dt.indexOf(\u0027/\u0027));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String month \u003d dt.substring(dt.indexOf(\u0027/\u0027) + 1, dt.lastIndexOf(\u0027/\u0027));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String year \u003d dt.substring(dt.lastIndexOf(\u0027/\u0027) + 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        parsedDate \u003d LocalDate.parse(year + \"-\" + month + \"-\" + day);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return parsedDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Takes in user time input and parses it to give a required format"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param time time in user input format"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return time time parsed into required format"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private String parseTime(String time) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        int tm \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String hr \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String ampm \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String min \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (tm / 100 \u003e 12) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            hr \u003d String.format(\"%d:\", (tm / 100) % 12);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            ampm \u003d \" pm\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (tm / 100 \u003c 12) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            hr \u003d String.format(\"%d:\", (tm / 100));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            ampm \u003d \" am\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (tm / 100 \u003d\u003d 12) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            hr \u003d \"12:\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            ampm \u003d \" pm\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (tm % 100 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            min \u003d \"00\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            min \u003d String.valueOf(tm % 100);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (tm % 100 \u003c 10) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                min \u003d \"0\" + min;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return hr + min + ampm;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d this.tag + super.getDescription() + \" \" + this.getSchedule();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.date \u003d parseDate(date);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void setTime(String time) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.time \u003d parseTime(time);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns a string to compare scheduling of Task object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return schedule string to indicate scheduling details"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getSchedule() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String timeTag \u003d \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (super.getTag() \u003d\u003d \"[D]\") {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            timeTag \u003d \"(by: \";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (super.getTag() \u003d\u003d \"[E]\") {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            timeTag \u003d \"(at: \";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return timeTag + this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy \"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + time + \")\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 138
    }
  },
  {
    "path": "src/main/java/dobby/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Class for todo tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private static final String TAG \u003d \"[T]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, TAG);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return TAG + super.getDescription();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 17
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 22
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c?import javafx.scene.effect.ColorAdjust?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"609.0\" prefWidth\u003d\"514.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"dobby.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"1.0\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"47.0\" prefWidth\u003d\"436.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"437.0\" layoutY\u003d\"561.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"47.0\" prefWidth\u003d\"76.0\" text\u003d\"SEND\" textFill\u003d\"#6872c6\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            \u003cColorAdjust brightness\u003d\"-0.7\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "         \u003c/effect\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"3.0\" layoutY\u003d\"1.0\" prefHeight\u003d\"558.0\" prefWidth\u003d\"508.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"558.0\" prefWidth\u003d\"489.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 27
    }
  },
  {
    "path": "src/test/java/dobby/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void getMessageByeTest () {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // test bye command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String bye;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            bye \u003d parser.getMessage(\"bye\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            bye \u003d e.getMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"Goodbye.\\nHope to see you again soon!\", bye);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void getMessageTodoTest () {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for todo command with no description"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String todoNoDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            todoNoDescription \u003d parser.getMessage(\"todo\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            todoNoDescription \u003d e.getMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"Description cannot be empty. Please try again.\", todoNoDescription);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for valid todo command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String todoTask;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            todoTask \u003d parser.getMessage(\"todo test todo command\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            todoTask \u003d e.getMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"Great! I\u0027ve added the following task:\\n  [T][\\u2718] test todo command\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"\\nNow you have 1 task in the list.\", todoTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void getMessageDeadlineTest () {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for deadline command with no description"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String deadlineNoDescription;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            deadlineNoDescription \u003d parser.getMessage(\"deadline\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            deadlineNoDescription \u003d e.getMessage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"Description cannot be empty. Please try again.\", deadlineNoDescription);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for deadline command with no deadline details"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String emptyDeadlineDetails;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            emptyDeadlineDetails \u003d parser.getMessage(\"deadline week3 iP /by \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            emptyDeadlineDetails \u003d e.getMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"Incorrect usage of command.\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"Deadline details cannot be empty. Please try again.\", emptyDeadlineDetails);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for valid deadline command"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String deadlineTask;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            deadlineTask \u003d parser.getMessage(\"deadline week3 iP /by 28/08/2020 1400\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            deadlineTask \u003d e.getMessage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"Great! I\u0027ve added the following task:\\n  [D][\\u2718] week3 iP \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"(by: Aug 28 2020 2:00 pm)\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"\\nNow you have 1 task in the list.\", deadlineTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void getMessageEventTest () {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for event command with no description"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String eventNoDescription;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            eventNoDescription \u003d parser.getMessage(\"event\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            eventNoDescription \u003d e.getMessage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"Incorrect usage of command.\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"\\nDescription cannot be empty. Please try again.\", eventNoDescription);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for event command with no schedule details"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String emptyEventDetails;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            emptyEventDetails \u003d parser.getMessage(\"event week3 lec /at \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            emptyEventDetails \u003d e.getMessage();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"Incorrect usage of command.\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"\\nSchedule details cannot be empty. Please try again.\", emptyEventDetails);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for valid event command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String eventTask;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            eventTask \u003d parser.getMessage(\"event week3 lec /at 28/08/2020 1400\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            eventTask \u003d e.getMessage();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"Great! I\u0027ve added the following task:\\n  [E][\\u2718] week3 lec \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"(at: Aug 28 2020 2:00 pm)\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"\\nNow you have 1 task in the list.\", eventTask);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void getMessageListDoneDeleteTest () {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // create a todo task for testing purpose"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            parser.getMessage(\"todo test done and delete commands\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // test list command"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String listTodo;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            listTodo \u003d parser.getMessage(\"list\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            listTodo \u003d e.getMessage();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"1. [T][\\u2718] test done and delete commands\", listTodo);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // test done command"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String doneTodo;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            doneTodo \u003d parser.getMessage(\"done 1\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            doneTodo \u003d e.getMessage();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"Great! I\u0027ve marked this task as done:\\n  \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"[T][\\u2713] test done and delete commands\", doneTodo);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // test delete command"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String deleteTodo;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            deleteTodo \u003d parser.getMessage(\"delete 1\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            deleteTodo \u003d e.getMessage();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"Noted. I\u0027ve removed this task:\\n  \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"[T][\\u2713] test done and delete commands\", deleteTodo);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void getMessageScheduledTest () {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // deadline task for testing purpose"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            parser.getMessage(\"deadline push A-JUnit to github /by 24/08/2020 2359\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // test scheduled command"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String scheduled;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            scheduled \u003d parser.getMessage(\"scheduled 24/08/2020\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            scheduled \u003d e.getMessage();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"1. [D][\\u2718] push A-JUnit to github (by: Aug 24 2020 11:59 pm)\\n\", scheduled);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void findTypeTest () {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String noType;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            parser.getMessage(\"todo test findtype command\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d parser.getMessage(\"findtype T\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            noType \u003d parser.getMessage(\"findtype\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            noType \u003d e.getMessage();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"1. [T][\\u2718] test findtype command\\n\", message);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"Incorrect usage of command. Please try again.\", noType);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void findKeywordTest () {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String noKeyword;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String noTaskContainingKeyword;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            parser.getMessage(\"todo test findtype command\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d parser.getMessage(\"find command\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            noKeyword \u003d parser.getMessage(\"find\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            noKeyword \u003d e.getMessage();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            noTaskContainingKeyword \u003d parser.getMessage(\"find none\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            noTaskContainingKeyword \u003d e.getMessage();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"1. [T][\\u2718] test findtype command\\n\", message);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"Incorrect usage of command.\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"\\nKeyword required cannot be empty. \""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"Please try again.\", noKeyword);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"There are no tasks of containing the word - none\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                noTaskContainingKeyword);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 244
    }
  },
  {
    "path": "src/test/java/dobby/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void taskListTest () {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            tasks.createFromStorage(\"[D][\\u2718] ip task for week 3 (by: Aug 27 2020 11:59 pm)\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String allTasks \u003d tasks.getListedTasks();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"1. [D][\\u2718] ip task for week 3 (by: Aug 27 2020 11:59 pm)\", allTasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-27\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String scheduledTasks \u003d tasks.getScheduledTasks(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"1. [D][\\u2718] ip task for week 3 (by: Aug 27 2020 11:59 pm)\\n\", scheduledTasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 30
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "delete"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "delete n"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline /by 27/08/2020 2359"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline ip task for week 3 /by"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline ip task for week 3 /by 27/08/2020 2359"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event /at 28/08/2020 1600"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event lecture /at"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event lecture /at 28/08/2020 1600"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "todo"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "todo push new levels to github"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "scheduled 28/08/2020"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "find"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "find nomatch"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "find lecture"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "findtype"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "findtype D"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 33
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/dobby/*.java ../src/main/java/dobby/task/*.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "java -classpath ../bin dobby.Dobby \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 4,
      "-": 36
    }
  },
  {
    "path": "text-ui-test/testing-deadline-exceptions.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline /by week8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline cs2103t /by"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline r /by 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 6
    }
  },
  {
    "path": "text-ui-test/testing-done-exceptions.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "todo ip"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done n"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 7
    }
  },
  {
    "path": "text-ui-test/testing-event-exceptions.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event /at friday 4pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event lecture /at"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event lecture /at friday 4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 6
    }
  },
  {
    "path": "text-ui-test/testing_todo-exceptions.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "todo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "todo ip"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 4
    }
  }
]
