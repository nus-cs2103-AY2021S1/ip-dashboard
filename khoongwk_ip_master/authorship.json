[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"# Elon"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":"Elon is a desktop application for managing tasks, such as to-dos, events,"},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"and deadlines. This project is built as a greenfield Java project, based off the"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"original project named Duke. This was done as an assignment for CS2103T at "},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"the National University of Singapore, Fall 2020."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project`"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"   to close the existing project dialog first)"},{"lineNumber":13,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"      where you installed JDK 11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":18,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"   1. Navigate to the project directory, select `build.gradle`, and click `OK`"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"1. After the importing is complete, locate the `src/main/java/duke/Launcher.java` file, right-click it, and choose"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"   `Run Launcher.main()`. If the setup is correct, you should see something like the below:\\"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"   ![Image of Elon Program](docs/Ui_Intro_Screen.png)"}],"authorContributionMap":{"khoongwk":13,"-":11}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"compileJava.options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"    archiveBaseName \u003d \"elon\""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":66,"author":{"gitId":"khoongwk"},"content":"    enableAssertions \u003d true"},{"lineNumber":67,"author":{"gitId":"khoongwk"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"khoongwk":23,"-":45}},{"path":"data/taskList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"todo - 1 - make coffee"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":"event - 1 - go for tutorial - Thursday 2pm"},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"todo - 1 - eat dinner"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"event - 0 - presentation - 20th Sept 2pm"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"deadline - 0 - 2103T iP - SEPTEMBER 18 2020 11:59 PM"}],"authorContributionMap":{"khoongwk":5}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"# Elon User Guide"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":"Elon is a desktop application for managing tasks, such as to-dos, events,"},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"and deadlines. The user interacts with the system in a graphical user"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"interface that is designed to look like a chat-bot."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"To interact with Elon, commands are type in a text field and submitted"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"with the send button or simply pressing \u0027Enter\u0027 on they keyboard."},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"Commands have a general format: [command] [description]"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"## Quick Start"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"1. Ensure you have Java 11 or higher installed on your system."},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"1. Download `elon.jar` from this repository and run it with `java -jar elon.jar`."},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"1. You should see the introduction screen appear:\\"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"![Elon introduction screen](Ui_Intro_Screen.png)"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"## Features"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"* [Adding a task: `todo`, `event`, `deadline`](#adding-a-task-todo-event-deadline)"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"* [Listing all tasks: `list`](#listing-all-tasks-list)"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"* [Mark a task as done: `done`](#mark-a-task-as-done-done)"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"* [Delete an existing task: `delete`](#delete-an-existing-task-delete)"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"* [Find a task `find`](#find-a-task-find)"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"* [Save and exit Elon: `bye`](#save-and-exit-elon-bye)"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"* [Get help `help`](#get-help-help)"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"### Adding a Task: `todo` `event` `deadline`"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"A task consists of a description and optionally, a date and/or time"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"if the task is an event or deadline. Elon will attempt to parse the"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"date and/or time provided for events and deadlines."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"Format:"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"* To-do: `todo [description]`"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"* Event: `event [description] /at [date]`"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"* Deadline: `deadline [description] /by [date]`"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"Examples:"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"* `todo Sweep the floor`"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"* `event School concert /at 20-01-2021 1200`"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"* `deadline Coding project /by this Friday 5pm`"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"Expected Outcomes:"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"```$xslt"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"Got it, I\u0027ve added this todo: [T][X] Sweep the floor"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"   Now you have 1 tasks in the list."},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"Got it, I\u0027ve added this event: [E][X] School concert (at: JANUARY 20 2021 12:00AM)"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"   Now you have 2 tasks in the list."},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"Got it, I\u0027ve added this deadline: [D][X] Coding project (by: this Friday 5pm)"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"   Now you have 3 tasks in the list."},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"```"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"### Listing All Tasks: `list`"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"Displays all the current tasks stored in Elon."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"Format: `list`"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"Expected Outcome:"},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"```$xslt"},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":"Here are the tasks in your list:"},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":"    1. [T][X] Sweep the floorw`"},{"lineNumber":60,"author":{"gitId":"khoongwk"},"content":"    2. [E][X] School concert (at: JANUARY 20 2021 12:00AM)"},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"    3. [D][X] Coding project (by: this Friday 5pm)`"},{"lineNumber":62,"author":{"gitId":"khoongwk"},"content":"```"},{"lineNumber":63,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":64,"author":{"gitId":"khoongwk"},"content":"### Mark a task as done: `done`"},{"lineNumber":65,"author":{"gitId":"khoongwk"},"content":"Given the task\u0027s number, Elon will mark the specified"},{"lineNumber":66,"author":{"gitId":"khoongwk"},"content":"task as done with a tick. The task number is based on "},{"lineNumber":67,"author":{"gitId":"khoongwk"},"content":"the ordering when `list` is called."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"khoongwk"},"content":"Format: `done [task number]`"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"khoongwk"},"content":"Example: `done 2`"},{"lineNumber":72,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":73,"author":{"gitId":"khoongwk"},"content":"Expected Outcome:"},{"lineNumber":74,"author":{"gitId":"khoongwk"},"content":"```$xslt"},{"lineNumber":75,"author":{"gitId":"khoongwk"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":76,"author":{"gitId":"khoongwk"},"content":"[E][✔] School concert (at: JANUARY 20 2021 12:00AM)"},{"lineNumber":77,"author":{"gitId":"khoongwk"},"content":"```"},{"lineNumber":78,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":79,"author":{"gitId":"khoongwk"},"content":"### Delete an existing task: `delete`"},{"lineNumber":80,"author":{"gitId":"khoongwk"},"content":"Given the task\u0027s number, Elon will delete the specified"},{"lineNumber":81,"author":{"gitId":"khoongwk"},"content":"task. The task number is based on the ordering when `list` is called."},{"lineNumber":82,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":83,"author":{"gitId":"khoongwk"},"content":"Format: `delete [task number]`"},{"lineNumber":84,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":85,"author":{"gitId":"khoongwk"},"content":"Example: `delete 3`"},{"lineNumber":86,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":87,"author":{"gitId":"khoongwk"},"content":"Expected Outcome:"},{"lineNumber":88,"author":{"gitId":"khoongwk"},"content":"```$xslt"},{"lineNumber":89,"author":{"gitId":"khoongwk"},"content":"Noted. I have removed this task:"},{"lineNumber":90,"author":{"gitId":"khoongwk"},"content":"[D][X] Coding project (by: this Friday 5pm)"},{"lineNumber":91,"author":{"gitId":"khoongwk"},"content":"Now you have 2 tasks in the list."},{"lineNumber":92,"author":{"gitId":"khoongwk"},"content":"```"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"khoongwk"},"content":"### Find a task `find`"},{"lineNumber":95,"author":{"gitId":"khoongwk"},"content":"Display existing task(s) which match the user\u0027s keyword(s)."},{"lineNumber":96,"author":{"gitId":"khoongwk"},"content":"The searching process is case-insensitive."},{"lineNumber":97,"author":{"gitId":"khoongwk"},"content":"Format: `find [keyword 1] [keyword 2] (optional) ...`"},{"lineNumber":98,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":99,"author":{"gitId":"khoongwk"},"content":"Example:"},{"lineNumber":100,"author":{"gitId":"khoongwk"},"content":"* `find school concert`"},{"lineNumber":101,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":102,"author":{"gitId":"khoongwk"},"content":"Expected Outcome:"},{"lineNumber":103,"author":{"gitId":"khoongwk"},"content":"```$xslt"},{"lineNumber":104,"author":{"gitId":"khoongwk"},"content":"Here are the matching tasks in your list:"},{"lineNumber":105,"author":{"gitId":"khoongwk"},"content":"1. [E][✔] School concert (at: JANUARY 20 2021 12:00AM)"},{"lineNumber":106,"author":{"gitId":"khoongwk"},"content":"```"},{"lineNumber":107,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":108,"author":{"gitId":"khoongwk"},"content":"### Save and exit Elon: `bye`"},{"lineNumber":109,"author":{"gitId":"khoongwk"},"content":"Saves any tasks in Elon and prepares exiting of the program."},{"lineNumber":110,"author":{"gitId":"khoongwk"},"content":"Enter any other command after `bye` to exit Elon."},{"lineNumber":111,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":112,"author":{"gitId":"khoongwk"},"content":"Format: `bye`"},{"lineNumber":113,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":114,"author":{"gitId":"khoongwk"},"content":"Expected Outcome:"},{"lineNumber":115,"author":{"gitId":"khoongwk"},"content":"```"},{"lineNumber":116,"author":{"gitId":"khoongwk"},"content":"Saved your list. Enter new command to exit..."},{"lineNumber":117,"author":{"gitId":"khoongwk"},"content":"```"},{"lineNumber":118,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":119,"author":{"gitId":"khoongwk"},"content":"### Get help `help`"},{"lineNumber":120,"author":{"gitId":"khoongwk"},"content":"Displays this list of commands in Elon."},{"lineNumber":121,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":122,"author":{"gitId":"khoongwk"},"content":"Format: `help`"},{"lineNumber":123,"author":{"gitId":"khoongwk"},"content":" "},{"lineNumber":124,"author":{"gitId":"khoongwk"},"content":"For specific help to a particular command, type the command after `help`:"},{"lineNumber":125,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":126,"author":{"gitId":"khoongwk"},"content":"Example:"},{"lineNumber":127,"author":{"gitId":"khoongwk"},"content":"* `help event`"},{"lineNumber":128,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":129,"author":{"gitId":"khoongwk"},"content":"Expected outcome:"},{"lineNumber":130,"author":{"gitId":"khoongwk"},"content":"```$xslt"},{"lineNumber":131,"author":{"gitId":"khoongwk"},"content":"event: Add an event task."},{"lineNumber":132,"author":{"gitId":"khoongwk"},"content":"Usage: event [description] /at [date]"},{"lineNumber":133,"author":{"gitId":"khoongwk"},"content":"Date can be in the following formats:"},{"lineNumber":134,"author":{"gitId":"khoongwk"},"content":"dd/MM/yyyy HHmm, yyyy/MM/dd HHmm, MM/dd/yyyy HHmm,"},{"lineNumber":135,"author":{"gitId":"khoongwk"},"content":"HHmm dd/MM/yyyy, HHmm yyyy/MM/dd, HHmm MM/dd/yyyy,"},{"lineNumber":136,"author":{"gitId":"khoongwk"},"content":"dd-MM-yyyy HHmm, yyyy-MM-dd HHmm, MM/dd/yyyy HHmm,"},{"lineNumber":137,"author":{"gitId":"khoongwk"},"content":"HHmm dd-MM-yyyy, HHmm yyyy-MM-dd, HHmm MM-dd-yyyy."},{"lineNumber":138,"author":{"gitId":"khoongwk"},"content":"It is fine to omit the hours and minutes. If your"},{"lineNumber":139,"author":{"gitId":"khoongwk"},"content":"input does not match the date time format, then\\"},{"lineNumber":140,"author":{"gitId":"khoongwk"},"content":"Duke will simply enter the date as whatever you"},{"lineNumber":141,"author":{"gitId":"khoongwk"},"content":"input as [date]."},{"lineNumber":142,"author":{"gitId":"khoongwk"},"content":"```"}],"authorContributionMap":{"khoongwk":128,"-":14}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import duke.ui.TextUi;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":" * Duke is the main program where most of the logic is"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":" * processed. It is a task manager that records tasks"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":" * based on user input, with the option to list all"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":" * task, find a particular one, delete tasks, etc."},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    private static final String GREETING \u003d"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"            \"Hi, I\u0027m your Professor, Elon. I keep track of\\n\""},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"                    + \"your tasks and load them if you have any saved.\\n\";"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    private static final String HELP_MESSAGE \u003d"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"            \"You can ask me to do these:\\n\""},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"                    + \"list: List the current tasks in your list.\\n\""},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"                    + \"bye: Saves any tasks in the list and quits the program.\\n\""},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"                    + \"todo: Add a To-Do task.\\n\""},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"                    + \"event: Add an event task.\\n\""},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"                    + \"deadline: Add a deadline task.\\n\""},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"                    + \"done: Mark task as done based on the task\u0027s number.\\n\""},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"                    + \"delete: Deletes task based on the task\u0027s number.\\n\""},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"                    + \"find: Find a task which matches your description.\""},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"                    + \"help: Repeat this list of possible commands.\";"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"    private final Storage storage;"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"    private TaskList taskList;"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"    private final TextUi textUi;"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"    private boolean isRunning;"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"     * Initialise Duke with filePath of the saved list of tasks."},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"    public Duke() {"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"        this.textUi \u003d new TextUi();"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"        this.storage \u003d new Storage();"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"        this.isRunning \u003d true;"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"            taskList \u003d new TaskList(storage.load());"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"        } catch (DukeException e) {"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"            textUi.showException(e);"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"            taskList \u003d new TaskList();"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"     * Main control system which runs Duke in the Command line."},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"    private void runInConsole() {"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"        textUi.showMessage(GREETING);"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"        textUi.showMessage(HELP_MESSAGE);"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":"        textUi.showLine();"},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"        // Loop program until command \u0027bye\u0027 is entered as input."},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"        while (isRunning) {"},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":"            try {"},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":"                String input \u003d textUi.readCommand();"},{"lineNumber":60,"author":{"gitId":"khoongwk"},"content":"                String response \u003d getResponse(input);"},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"                textUi.showMessage(response);"},{"lineNumber":62,"author":{"gitId":"khoongwk"},"content":"            } catch (DukeException e) {"},{"lineNumber":63,"author":{"gitId":"khoongwk"},"content":"                textUi.showException(e);"},{"lineNumber":64,"author":{"gitId":"khoongwk"},"content":"            } finally {"},{"lineNumber":65,"author":{"gitId":"khoongwk"},"content":"                textUi.showLine();"},{"lineNumber":66,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"khoongwk"},"content":"        textUi.closeUi();"},{"lineNumber":69,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":71,"author":{"gitId":"khoongwk"},"content":"    public String getResponse(String input) throws DukeException {"},{"lineNumber":72,"author":{"gitId":"khoongwk"},"content":"        Command command \u003d Parser.getCommand(input, taskList, storage);"},{"lineNumber":73,"author":{"gitId":"khoongwk"},"content":"        String response \u003d command.executeWithResponse();"},{"lineNumber":74,"author":{"gitId":"khoongwk"},"content":"        isRunning \u003d command.continueDuke();"},{"lineNumber":75,"author":{"gitId":"khoongwk"},"content":"        return response;"},{"lineNumber":76,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":78,"author":{"gitId":"khoongwk"},"content":"    public boolean checkIsRunning() {"},{"lineNumber":79,"author":{"gitId":"khoongwk"},"content":"        return isRunning;"},{"lineNumber":80,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":82,"author":{"gitId":"khoongwk"},"content":"    public String getGreeting() {"},{"lineNumber":83,"author":{"gitId":"khoongwk"},"content":"        return GREETING;"},{"lineNumber":84,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":86,"author":{"gitId":"khoongwk"},"content":"    public String getHelpMessage() {"},{"lineNumber":87,"author":{"gitId":"khoongwk"},"content":"        return HELP_MESSAGE;"},{"lineNumber":88,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":90,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"khoongwk"},"content":"     * Initialise program with a new instance of Duke."},{"lineNumber":92,"author":{"gitId":"khoongwk"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"khoongwk"},"content":"     * @param args String array passed into main."},{"lineNumber":94,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"khoongwk"},"content":"    public static void main(String[] args) {"},{"lineNumber":96,"author":{"gitId":"khoongwk"},"content":"        Duke dukeProgram \u003d new Duke();"},{"lineNumber":97,"author":{"gitId":"khoongwk"},"content":"        dukeProgram.runInConsole();"},{"lineNumber":98,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":99}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":" * Wrapper exception for exceptions thrown when"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":" * Duke program is run."},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"public class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"    private String errorMsg;"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"    public DukeException(String msg) {"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"        this.errorMsg \u003d msg;"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"        return errorMsg;"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":19}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"        Application.launch(MainGui.class, args);"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":9}},{"path":"src/main/java/duke/MainGui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"public class MainGui extends Application {"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    private final Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().showIntroduction();"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":32}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"    private Button sendButton;"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"    private Duke duke;"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDoge.png\"));"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaMusk.png\"));"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"    public void initialize() {"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"        duke \u003d d;"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"     * Show introduction and help message when"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"     * GUI is first initialized."},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"    public void showIntroduction() {"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"                DialogBox.getDukeDialog(duke.getGreeting(), dukeImage),"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"                DialogBox.getDukeDialog(duke.getHelpMessage(), dukeImage)"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"        );"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"    private void handleUserInput() {"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":"        boolean dukeIsRunning \u003d duke.checkIsRunning();"},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"        if (!dukeIsRunning) {"},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"            System.exit(0);"},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":60,"author":{"gitId":"khoongwk"},"content":"        String response \u003d \"\";"},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"khoongwk"},"content":"            response \u003d duke.getResponse(input);"},{"lineNumber":63,"author":{"gitId":"khoongwk"},"content":"        } catch (DukeException e) {"},{"lineNumber":64,"author":{"gitId":"khoongwk"},"content":"            response \u003d e.toString();"},{"lineNumber":65,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"khoongwk"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":67,"author":{"gitId":"khoongwk"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":68,"author":{"gitId":"khoongwk"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":69,"author":{"gitId":"khoongwk"},"content":"        );"},{"lineNumber":70,"author":{"gitId":"khoongwk"},"content":"        userInput.clear();"},{"lineNumber":71,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":72}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"import duke.task.Deadline;"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"import duke.task.Event;"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"import duke.task.Task;"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"import duke.task.Todo;"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":" * Handles the opening and storing of tasks from text files."},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"    private final Path path;"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"     * Constructor for the Storage object to track locally saved tasks."},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"     * The storage object checks for any pre-existing files and"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"     * if it is not available, the storage object will create a file."},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"    public Storage() {"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"        String filePath \u003d \"./data/taskList.txt\";"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"        path \u003d Paths.get(filePath);"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"        File taskListfile \u003d new File(filePath);"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"        if (Files.notExists(this.path)) {"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"            try {"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"                taskListfile.createNewFile();"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"            } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"                e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"     * Constructor for the Storage object to track locally saved tasks."},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"     * The storage object checks for any pre-existing files and"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"     * if it is not available, the storage object will create a file."},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"     * @param filePath path where the saved task list is stored."},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"    public Storage(String filePath) {"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"        path \u003d Paths.get(filePath);"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"        File taskListfile \u003d new File(filePath);"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"        if (Files.notExists(this.path)) {"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"            try {"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"                taskListfile.createNewFile();"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"            } catch (IOException e) {"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"                e.printStackTrace();"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"khoongwk"},"content":"     * Parses text file from file path specified to get"},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"     * the Task objects stored, and returns them all"},{"lineNumber":62,"author":{"gitId":"khoongwk"},"content":"     * packaged in an ArrayList."},{"lineNumber":63,"author":{"gitId":"khoongwk"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"khoongwk"},"content":"     * @return ArrayList containing Task objects."},{"lineNumber":65,"author":{"gitId":"khoongwk"},"content":"     * @throws DukeException Exception while loading from text file."},{"lineNumber":66,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"khoongwk"},"content":"    ArrayList\u003cTask\u003e load() throws DukeException {"},{"lineNumber":68,"author":{"gitId":"khoongwk"},"content":"        ArrayList\u003cTask\u003e outputTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"khoongwk"},"content":"        Scanner taskReader;"},{"lineNumber":70,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"khoongwk"},"content":"            taskReader \u003d new Scanner(path.toFile());"},{"lineNumber":72,"author":{"gitId":"khoongwk"},"content":"            while (taskReader.hasNextLine()) {"},{"lineNumber":73,"author":{"gitId":"khoongwk"},"content":"                String taskFromFile \u003d taskReader.nextLine();"},{"lineNumber":74,"author":{"gitId":"khoongwk"},"content":"                // Note, this is assuming that format of"},{"lineNumber":75,"author":{"gitId":"khoongwk"},"content":"                // task.Task.getDescriptionForDatabase() remains the same."},{"lineNumber":76,"author":{"gitId":"khoongwk"},"content":"                String[] formattedTaskString \u003d taskFromFile.split(\" - \");"},{"lineNumber":77,"author":{"gitId":"khoongwk"},"content":"                String taskType \u003d formattedTaskString[0];"},{"lineNumber":78,"author":{"gitId":"khoongwk"},"content":"                boolean isTaskDone \u003d formattedTaskString[1].equals(\"1\");"},{"lineNumber":79,"author":{"gitId":"khoongwk"},"content":"                switch (taskType) {"},{"lineNumber":80,"author":{"gitId":"khoongwk"},"content":"                case \"todo\":"},{"lineNumber":81,"author":{"gitId":"khoongwk"},"content":"                    outputTaskList.add(new Todo(formattedTaskString[2], isTaskDone));"},{"lineNumber":82,"author":{"gitId":"khoongwk"},"content":"                    break;"},{"lineNumber":83,"author":{"gitId":"khoongwk"},"content":"                case \"event\":"},{"lineNumber":84,"author":{"gitId":"khoongwk"},"content":"                    outputTaskList.add("},{"lineNumber":85,"author":{"gitId":"khoongwk"},"content":"                            new Event("},{"lineNumber":86,"author":{"gitId":"khoongwk"},"content":"                                    formattedTaskString[2],"},{"lineNumber":87,"author":{"gitId":"khoongwk"},"content":"                                    formattedTaskString[3],"},{"lineNumber":88,"author":{"gitId":"khoongwk"},"content":"                                    isTaskDone"},{"lineNumber":89,"author":{"gitId":"khoongwk"},"content":"                            )"},{"lineNumber":90,"author":{"gitId":"khoongwk"},"content":"                    );"},{"lineNumber":91,"author":{"gitId":"khoongwk"},"content":"                    break;"},{"lineNumber":92,"author":{"gitId":"khoongwk"},"content":"                case \"deadline\":"},{"lineNumber":93,"author":{"gitId":"khoongwk"},"content":"                    outputTaskList.add("},{"lineNumber":94,"author":{"gitId":"khoongwk"},"content":"                            new Deadline("},{"lineNumber":95,"author":{"gitId":"khoongwk"},"content":"                                    formattedTaskString[2],"},{"lineNumber":96,"author":{"gitId":"khoongwk"},"content":"                                    formattedTaskString[3],"},{"lineNumber":97,"author":{"gitId":"khoongwk"},"content":"                                    isTaskDone"},{"lineNumber":98,"author":{"gitId":"khoongwk"},"content":"                            )"},{"lineNumber":99,"author":{"gitId":"khoongwk"},"content":"                    );"},{"lineNumber":100,"author":{"gitId":"khoongwk"},"content":"                    break;"},{"lineNumber":101,"author":{"gitId":"khoongwk"},"content":"                default:"},{"lineNumber":102,"author":{"gitId":"khoongwk"},"content":"                    break;"},{"lineNumber":103,"author":{"gitId":"khoongwk"},"content":"                }"},{"lineNumber":104,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"khoongwk"},"content":"            taskReader.close();"},{"lineNumber":106,"author":{"gitId":"khoongwk"},"content":"        } catch (IOException e) {"},{"lineNumber":107,"author":{"gitId":"khoongwk"},"content":"            throw new DukeException(\"Exception while scanning task list file: \" + e);"},{"lineNumber":108,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"khoongwk"},"content":"        return outputTaskList;"},{"lineNumber":110,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":112,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"khoongwk"},"content":"     * Saves the Tasks stored in a TaskList into the file path of the Storage."},{"lineNumber":114,"author":{"gitId":"khoongwk"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"khoongwk"},"content":"     * @param taskList TaskList object containing Task(s) to store."},{"lineNumber":116,"author":{"gitId":"khoongwk"},"content":"     * @return true if store was successful."},{"lineNumber":117,"author":{"gitId":"khoongwk"},"content":"     * @throws DukeException Exception while storing into file."},{"lineNumber":118,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"khoongwk"},"content":"    public boolean store(TaskList taskList) throws DukeException {"},{"lineNumber":120,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"khoongwk"},"content":"            File taskListFile \u003d path.toFile();"},{"lineNumber":122,"author":{"gitId":"khoongwk"},"content":"            // Clear the pre-existing file if there is one."},{"lineNumber":123,"author":{"gitId":"khoongwk"},"content":"            if (taskListFile.exists()) {"},{"lineNumber":124,"author":{"gitId":"khoongwk"},"content":"                taskListFile.delete();"},{"lineNumber":125,"author":{"gitId":"khoongwk"},"content":"                taskListFile.createNewFile();"},{"lineNumber":126,"author":{"gitId":"khoongwk"},"content":"            } else {"},{"lineNumber":127,"author":{"gitId":"khoongwk"},"content":"                throw new IOException(\"No file found at the specified path.\");"},{"lineNumber":128,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"khoongwk"},"content":"            assert taskListFile.exists() : \"Task list file does not exist.\";"},{"lineNumber":130,"author":{"gitId":"khoongwk"},"content":"            if (taskList.getSize() \u003e 0) {"},{"lineNumber":131,"author":{"gitId":"khoongwk"},"content":"                FileWriter taskWriter \u003d new FileWriter(taskListFile);"},{"lineNumber":132,"author":{"gitId":"khoongwk"},"content":"                for (Task t : taskList.getTaskList()) {"},{"lineNumber":133,"author":{"gitId":"khoongwk"},"content":"                    taskWriter.write(t.getDescriptionForDatabase());"},{"lineNumber":134,"author":{"gitId":"khoongwk"},"content":"                    taskWriter.write(\"\\n\");"},{"lineNumber":135,"author":{"gitId":"khoongwk"},"content":"                }"},{"lineNumber":136,"author":{"gitId":"khoongwk"},"content":"                taskWriter.close();"},{"lineNumber":137,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":138,"author":{"gitId":"khoongwk"},"content":"            return true;"},{"lineNumber":139,"author":{"gitId":"khoongwk"},"content":"        } catch (IOException e) {"},{"lineNumber":140,"author":{"gitId":"khoongwk"},"content":"            throw new DukeException(\"Exception occurred while storing into file: \" + e);"},{"lineNumber":141,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":143}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":" * Contains Tasks stored in an ArrayList. Includes other"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":" * useful methods such as adding, deleting, and listing of tasks."},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"    TaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"        this.tasks \u003d taskList;"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"    public int getSize() {"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"        return tasks.size();"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"        return tasks;"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"     * Gets Task from the list based on the index supplied"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"     * @param index index of Task to retrieve from the task list."},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"     * @return Task from the task list"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"     * @throws DukeException Exception while getting Task from task list."},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"    public Task getTask(int index) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"            return tasks.get(index);"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"            throw new DukeException(\"Hey! That number is not in the list!\");"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"     * List all tasks currently stored in the system."},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"     * @return String format of all the Tasks stored in the task list."},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"    public String getAllTasks() {"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"        int numEntries \u003d tasks.size();"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"        String output \u003d \"\";"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"        if (numEntries \u003e 0) {"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":"            StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"            for (int i \u003d 0; i \u003c numEntries; i++) {"},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"                sb.append((i + 1) + \". \" + tasks.get(i));"},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":"                if (i \u003c numEntries - 1) {"},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":"                    sb.append(\"\\n\");"},{"lineNumber":60,"author":{"gitId":"khoongwk"},"content":"                }"},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"khoongwk"},"content":"            output \u003d sb.toString();"},{"lineNumber":63,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"khoongwk"},"content":"        return output;"},{"lineNumber":65,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":67,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"khoongwk"},"content":"     * Gets all Tasks with descriptions matching the keyword(s)"},{"lineNumber":69,"author":{"gitId":"khoongwk"},"content":"     * specified by the user."},{"lineNumber":70,"author":{"gitId":"khoongwk"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"khoongwk"},"content":"     * @param keywords keyword(s) to filter Tasks."},{"lineNumber":72,"author":{"gitId":"khoongwk"},"content":"     * @return String containing all Tasks in string"},{"lineNumber":73,"author":{"gitId":"khoongwk"},"content":"     * format appended together which also match the"},{"lineNumber":74,"author":{"gitId":"khoongwk"},"content":"     * keyword specified."},{"lineNumber":75,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"khoongwk"},"content":"    public String getMatchingTasks(String keywords) {"},{"lineNumber":77,"author":{"gitId":"khoongwk"},"content":"        String output \u003d \"\";"},{"lineNumber":78,"author":{"gitId":"khoongwk"},"content":"        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitId":"khoongwk"},"content":"        tasks.forEach(task -\u003e {"},{"lineNumber":80,"author":{"gitId":"khoongwk"},"content":"            if (task.getDescription().toLowerCase().contains(keywords.toLowerCase())) {"},{"lineNumber":81,"author":{"gitId":"khoongwk"},"content":"                filteredTaskList.add(task);"},{"lineNumber":82,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"khoongwk"},"content":"        });"},{"lineNumber":84,"author":{"gitId":"khoongwk"},"content":"        int taskListSize \u003d filteredTaskList.size();"},{"lineNumber":85,"author":{"gitId":"khoongwk"},"content":"        if (taskListSize \u003e 0) {"},{"lineNumber":86,"author":{"gitId":"khoongwk"},"content":"            StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":87,"author":{"gitId":"khoongwk"},"content":"            for (int i \u003d 0; i \u003c taskListSize; i++) {"},{"lineNumber":88,"author":{"gitId":"khoongwk"},"content":"                sb.append((i + 1) + \". \" + filteredTaskList.get(i));"},{"lineNumber":89,"author":{"gitId":"khoongwk"},"content":"                if (i \u003c taskListSize - 1) {"},{"lineNumber":90,"author":{"gitId":"khoongwk"},"content":"                    sb.append(\"\\n\");"},{"lineNumber":91,"author":{"gitId":"khoongwk"},"content":"                }"},{"lineNumber":92,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"khoongwk"},"content":"            output \u003d sb.toString();"},{"lineNumber":94,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"khoongwk"},"content":"        return output;"},{"lineNumber":96,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":98,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"khoongwk"},"content":"     * Adds a Task into the Task list and returns true"},{"lineNumber":100,"author":{"gitId":"khoongwk"},"content":"     * if successful."},{"lineNumber":101,"author":{"gitId":"khoongwk"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"khoongwk"},"content":"     * @param taskToAdd Task to add into taskList."},{"lineNumber":103,"author":{"gitId":"khoongwk"},"content":"     * @return true if adding of Task was successful."},{"lineNumber":104,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"khoongwk"},"content":"    public boolean addTask(Task taskToAdd) {"},{"lineNumber":106,"author":{"gitId":"khoongwk"},"content":"        tasks.add(taskToAdd);"},{"lineNumber":107,"author":{"gitId":"khoongwk"},"content":"        return true;"},{"lineNumber":108,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":110,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"khoongwk"},"content":"     * Removes a task from the task list based on its"},{"lineNumber":112,"author":{"gitId":"khoongwk"},"content":"     * number in the list."},{"lineNumber":113,"author":{"gitId":"khoongwk"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"khoongwk"},"content":"     * @param taskNum the number of the task to remove."},{"lineNumber":115,"author":{"gitId":"khoongwk"},"content":"     * @return true if deleting of task was successful."},{"lineNumber":116,"author":{"gitId":"khoongwk"},"content":"     * @throws DukeException Exception while deleting of task."},{"lineNumber":117,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"khoongwk"},"content":"    public boolean deleteTask(int taskNum) throws DukeException {"},{"lineNumber":119,"author":{"gitId":"khoongwk"},"content":"        if (taskNum \u003c\u003d 0 || taskNum \u003e tasks.size()) {"},{"lineNumber":120,"author":{"gitId":"khoongwk"},"content":"            throw new DukeException(\"Invalid task number for current task list.\");"},{"lineNumber":121,"author":{"gitId":"khoongwk"},"content":"        } else {"},{"lineNumber":122,"author":{"gitId":"khoongwk"},"content":"            tasks.remove(taskNum - 1);"},{"lineNumber":123,"author":{"gitId":"khoongwk"},"content":"            return true;"},{"lineNumber":124,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":127,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"khoongwk"},"content":"     * Given a particular task number, mark that task in the task list as done."},{"lineNumber":129,"author":{"gitId":"khoongwk"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"khoongwk"},"content":"     * @param taskNum The task number to mark as done."},{"lineNumber":131,"author":{"gitId":"khoongwk"},"content":"     * @return true if marking of task as done was successful."},{"lineNumber":132,"author":{"gitId":"khoongwk"},"content":"     * @throws DukeException Exception while marking task as done."},{"lineNumber":133,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"khoongwk"},"content":"    public boolean markTaskDone(int taskNum) throws DukeException {"},{"lineNumber":135,"author":{"gitId":"khoongwk"},"content":"        if (taskNum \u003c\u003d 0 || taskNum \u003e tasks.size()) {"},{"lineNumber":136,"author":{"gitId":"khoongwk"},"content":"            throw new DukeException(\"Task number does not exist.\");"},{"lineNumber":137,"author":{"gitId":"khoongwk"},"content":"        } else {"},{"lineNumber":138,"author":{"gitId":"khoongwk"},"content":"            Task t \u003d tasks.get(taskNum - 1);"},{"lineNumber":139,"author":{"gitId":"khoongwk"},"content":"            t.markDone();"},{"lineNumber":140,"author":{"gitId":"khoongwk"},"content":"            return true;"},{"lineNumber":141,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":143}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.util.StringJoiner;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":" * Command to save TaskList into file and exit Duke."},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"public class ByeCommand implements Command {"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"    private final TaskList taskList;"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    private final Storage storage;"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"     * Initialise ByeCommand with the taskList to store into storage"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"     * @param storage The storage object which handles file i/o."},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"     * @param taskList The taskList to be saved into storage."},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"    public ByeCommand(Storage storage, TaskList taskList) {"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"        this.storage \u003d storage;"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"    public String executeWithResponse() throws DukeException {"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"        StringJoiner responseBuilder \u003d new StringJoiner(\"\\n\");"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"        if (storage.store(taskList)) {"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"            responseBuilder.add(\"Saved your list. Enter new command to exit...\");"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"            responseBuilder.add(\"Failed to save list. Enter new command to exit...\");"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"        return responseBuilder.toString();"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"    public boolean continueDuke() {"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"        return false;"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":42}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":" * Command can be executed with a String response. Can also call"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":" * continueDuke() to determine if Duke has to stop running after"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":" * this command is completed."},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"public interface Command {"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"    String executeWithResponse() throws DukeException;"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"    boolean continueDuke();"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":16}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.util.StringJoiner;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"import duke.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"import duke.task.Deadline;"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":" * Command to create a Deadline task."},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"public class DeadlineCommand implements Command {"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    private final String fullCommand;"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    private final TaskList taskList;"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"    private boolean isDone;"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"     * Initialise a deadline command with the user\u0027s input and the task list."},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"     * @param fullCommand The full user input into Duke for this Deadline command."},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"     * @param taskList The list where the new Deadline will be stored into."},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"    public DeadlineCommand(String fullCommand, TaskList taskList) {"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"        this.isDone \u003d false;"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"     * Initialise a deadline command with the user\u0027s input and the task list."},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"     * @param fullCommand The full user input into Duke for this Deadline command."},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"     * @param taskList The list where the new Deadline will be stored into."},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"     * @param isDone The state of whether the Deadline task has been done."},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"    public DeadlineCommand(String fullCommand, TaskList taskList, boolean isDone) {"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"    public String executeWithResponse() throws DukeException {"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"        if (fullCommand.substring(8).length() \u003c\u003d 1) {"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"            StringJoiner responseBuilder \u003d new StringJoiner(\"\\n\");"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"            String description \u003d fullCommand.substring(9);"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"            String[] processedDesc \u003d Parser.parseTimedTask(description);"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"            Deadline d \u003d new Deadline(processedDesc[0], processedDesc[1], isDone);"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"            if (taskList.addTask(d)) {"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Got it, I\u0027ve added this deadline: \" + d);"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Now you have \" + taskList.getSize() + \" tasks in the list.\");"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"            } else {"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Failed to add the deadline.\");"},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"            return responseBuilder.toString();"},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"khoongwk"},"content":"    public boolean continueDuke() {"},{"lineNumber":63,"author":{"gitId":"khoongwk"},"content":"        return true;"},{"lineNumber":64,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":65}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.util.StringJoiner;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":" * Command to delete a task from the task list based on its index."},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"    private final TaskList taskList;"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"     * Initialise Delete command with the entire user input"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"     * and the task list from which a task will be deleted."},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"     * @param fullCommand The entire user command."},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"     * @param taskList The list containing tasks from which one"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"     *                 task will be deleted."},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"    public DeleteCommand(String fullCommand, TaskList taskList) {"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"    public String executeWithResponse() throws DukeException {"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"        if (fullCommand.substring(6).length() \u003c\u003d 1) {"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"            throw new DukeException(\"Invalid number for delete command.\");"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"            StringJoiner responseBuilder \u003d new StringJoiner(\"\\n\");"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"            String numString \u003d fullCommand.substring(7);"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"            int entryNum;"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"            try {"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"                entryNum \u003d Integer.parseInt(numString);"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"                throw new DukeException(\"You did not pass in a number for delete!\");"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"            String taskToRemoveString \u003d taskList.getTask(entryNum - 1).toString();"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"            if (taskList.deleteTask(entryNum)) {"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Noted. I have removed this task:\");"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(taskToRemoveString);"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Now you have \" + taskList.getSize() + \" tasks in the list.\");"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"            } else {"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Failed to delete task.\");"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"            return responseBuilder.toString();"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"    public boolean continueDuke() {"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":"        return true;"},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":57}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.util.StringJoiner;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":" * Command to mark a task in the task list as done."},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"public class DoneCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"    private final TaskList taskList;"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"     * Initialise command with the command string and task list"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"     * containing the task to mark as done."},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"     * @param fullCommand The entire input string from the user."},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"     * @param taskList The list containing all tasks of the user."},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"    public DoneCommand(String fullCommand, TaskList taskList) {"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"    public String executeWithResponse() throws DukeException {"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"        if (fullCommand.substring(4).length() \u003c\u003d 1) {"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"            throw new DukeException(\"Invalid number for done command.\");"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"            StringJoiner responseBuilder \u003d new StringJoiner(\"\\n\");"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"            // For processing \"done\" command with the corresponding integer value."},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"            String numString \u003d fullCommand.substring(5);"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"            int entryNum;"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"            try {"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"                entryNum \u003d Integer.parseInt(numString);"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"                throw new DukeException(\"You did not pass in a number for done command.\");"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"            if (taskList.markTaskDone(entryNum)) {"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(taskList.getTask(entryNum - 1).toString());"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"            } else {"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Failed to mark task as done.\");"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"            return responseBuilder.toString();"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"    public boolean continueDuke() {"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"        return true;"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":55}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.util.StringJoiner;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"import duke.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":" * Command to create an event task."},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"public class EventCommand implements Command {"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    private final String fullCommand;"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    private final TaskList taskList;"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"    private boolean isDone;"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"     * Initialise command to create an event to be"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"     * placed inside the task list."},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"     * @param fullCommand The user\u0027s full input of the event command."},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"     * @param taskList The list where the event task will be stored into."},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"    public EventCommand(String fullCommand, TaskList taskList) {"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"        this.isDone \u003d false;"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"     * Initialise command to create an event to be"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"     * placed inside the task list."},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"     * @param fullCommand The user\u0027s full input of the event command."},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"     * @param taskList The list where the event task will be stored into."},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"     * @param isDone The state of whether the Event is completed."},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"    public EventCommand(String fullCommand, TaskList taskList, boolean isDone) {"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"    public String executeWithResponse() throws DukeException {"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"        if (fullCommand.substring(5).length() \u003c\u003d 1) {"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"            throw new DukeException(\"The description of an event cannot be empty.\");"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"        } else {"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"            StringJoiner responseBuilder \u003d new StringJoiner(\"\\n\");"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"            String description \u003d fullCommand.substring(6);"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"            String[] processedDesc \u003d Parser.parseTimedTask(description);"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"            Event e \u003d new Event(processedDesc[0], processedDesc[1], isDone);"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"            if (taskList.addTask(e)) {"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Got it, I\u0027ve added this event: \" + e);"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Now you have \" + taskList.getSize() + \" tasks in the list.\");"},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"            } else {"},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Failed to add the event.\");"},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":"            return responseBuilder.toString();"},{"lineNumber":60,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":63,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"khoongwk"},"content":"    public boolean continueDuke() {"},{"lineNumber":65,"author":{"gitId":"khoongwk"},"content":"        return true;"},{"lineNumber":66,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":68,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":68}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.util.StringJoiner;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":" * Command to find all the tasks which matches the keywords provided."},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"public class FindCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"    private final String fullCommand;"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"    private final TaskList taskList;"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"     * Initialise find command with the keyword(s) to search"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"     * and the task list to search."},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"     * @param keywords The phrase or word to search."},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"     * @param taskList The list of the user\u0027s tasks."},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"    public FindCommand(String keywords, TaskList taskList) {"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"        this.fullCommand \u003d keywords;"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"    public String executeWithResponse() throws DukeException {"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"        if (fullCommand.substring(4).length() \u003c\u003d 1) {"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"            throw new DukeException(\"Invalid keyword(s) specified for find command.\");"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"            StringJoiner responseBuilder \u003d new StringJoiner(\"\\n\");"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"            String description \u003d fullCommand.substring(5);"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"            String matchingTasks \u003d taskList.getMatchingTasks(description);"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"            if (matchingTasks.length() \u003e 0) {"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Here are the matching tasks in your list:\");"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(matchingTasks);"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"            } else {"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"No tasks matching your description was found.\");"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"            return responseBuilder.toString();"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"    public boolean continueDuke() {"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"        return true;"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":49}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"public class HelpCommand implements Command {"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"    private static final String HELP_MESSAGE \u003d \"You can ask me to do these:\\n\""},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"                    + \"list: List the current tasks in your list.\\n\""},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"                    + \"bye: Saves any tasks in the list and quits the program.\\n\""},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"                    + \"todo: Add a To-Do task.\\n\""},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"                    + \"event: Add an event task.\\n\""},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"                    + \"deadline: Add a deadline task.\\n\""},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"                    + \"done: Mark task as done based on the task\u0027s number.\\n\""},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"                    + \"delete: Deletes task based on the task\u0027s number.\\n\""},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"                    + \"find: Find a task which matches your description.\\n\""},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"                    + \"help: Repeat this list of possible commands.\\n\""},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"                    + \"For more specific help, type help [command]\";"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"    private final String userInput;"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    public HelpCommand(String fullInput) {"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"        this.userInput \u003d fullInput;"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"    public String executeWithResponse() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"        String[] splitInput \u003d userInput.split(\" \");"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"        if (splitInput.length \u003e 2) {"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"            throw new DukeException(\"Sorry, I don\u0027t understand that help command.\");"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"        } else if (splitInput.length \u003d\u003d 1) {"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"            return HELP_MESSAGE;"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"            switch (splitInput[1].toLowerCase()) {"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"            case \"list\":"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"                return \"list: Lists the current tasks in your list.\\n\""},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"                        + \"Tasks are ordered based on the time\\n\""},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"                        + \"it was entered into the system.\";"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"            case \"bye\":"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"                return \"bye: Saves any tasks in the list and quits the program.\\n\""},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"                        + \"If GUI version is running, an additional command is\\n\""},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"                        + \"required to exit the program after this bye command.\";"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"            case \"todo\":"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"                return \"todo: Add a To-Do task.\\n\""},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"                        + \"Usage: todo [description]\";"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"            case \"event\":"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"                return \"event: Add an event task.\\n\""},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"                        + \"Usage: event [description] /at [date]\\n\""},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"                        + \"Date can be in the following formats:\\n\""},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"                        + \"dd/MM/yyyy HHmm, yyyy/MM/dd HHmm, MM/dd/yyyy HHmm,\\n\""},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"                        + \"HHmm dd/MM/yyyy, HHmm yyyy/MM/dd, HHmm MM/dd/yyyy,\\n\""},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"                        + \"dd-MM-yyyy HHmm, yyyy-MM-dd HHmm, MM/dd/yyyy HHmm\\n\""},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"                        + \"HHmm dd-MM-yyyy, HHmm yyyy-MM-dd, HHmm MM-dd-yyyy\\n\""},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"                        + \"It is fine to omit the hours and minutes. If your\\n\""},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"                        + \"input does not match the date time format, then\\n\""},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"                        + \"Duke will simply enter the date as whatever you\\n\""},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"                        + \"input as [date].\";"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"            case \"deadline\":"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":"                return \"deadline: Add a deadline task.\\n\""},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"                        + \"Usage: deadline [description] /by [date]\\n\""},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"                        + \"Date can be in the following formats:\\n\""},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":"                        + \"dd/MM/yyyy HHmm, yyyy/MM/dd HHmm, MM/dd/yyyy HHmm,\\n\""},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":"                        + \"HHmm dd/MM/yyyy, HHmm yyyy/MM/dd, HHmm MM/dd/yyyy,\\n\""},{"lineNumber":60,"author":{"gitId":"khoongwk"},"content":"                        + \"dd-MM-yyyy HHmm, yyyy-MM-dd HHmm, MM/dd/yyyy HHmm\\n\""},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"                        + \"HHmm dd-MM-yyyy, HHmm yyyy-MM-dd, HHmm MM-dd-yyyy\\n\""},{"lineNumber":62,"author":{"gitId":"khoongwk"},"content":"                        + \"It is fine to omit the hours and minutes. If your\\n\""},{"lineNumber":63,"author":{"gitId":"khoongwk"},"content":"                        + \"input does not match the date time format, then\\n\""},{"lineNumber":64,"author":{"gitId":"khoongwk"},"content":"                        + \"Duke will simply enter the date as whatever you\\n\""},{"lineNumber":65,"author":{"gitId":"khoongwk"},"content":"                        + \"input as [date].\";"},{"lineNumber":66,"author":{"gitId":"khoongwk"},"content":"            case \"done\":"},{"lineNumber":67,"author":{"gitId":"khoongwk"},"content":"                return \"done: Mark task as done based on the task\u0027s number.\\n\""},{"lineNumber":68,"author":{"gitId":"khoongwk"},"content":"                        + \"Usage: done [task number]\\n\""},{"lineNumber":69,"author":{"gitId":"khoongwk"},"content":"                        + \"The task number corresponds to the number when list\\n\""},{"lineNumber":70,"author":{"gitId":"khoongwk"},"content":"                        + \"called. Numbers outside of the range will be rejected.\";"},{"lineNumber":71,"author":{"gitId":"khoongwk"},"content":"            case \"delete\":"},{"lineNumber":72,"author":{"gitId":"khoongwk"},"content":"                return \"delete: Deletes task based on the task\u0027s number.\\n\""},{"lineNumber":73,"author":{"gitId":"khoongwk"},"content":"                        + \"Usage: delete [task number]\\n\""},{"lineNumber":74,"author":{"gitId":"khoongwk"},"content":"                        + \"The task number corresponds to the number when list\\n\""},{"lineNumber":75,"author":{"gitId":"khoongwk"},"content":"                        + \"called. Numbers outside of the range will be rejected.\";"},{"lineNumber":76,"author":{"gitId":"khoongwk"},"content":"            case \"find\":"},{"lineNumber":77,"author":{"gitId":"khoongwk"},"content":"                return \"find: Find a task which matches your description.\\n\""},{"lineNumber":78,"author":{"gitId":"khoongwk"},"content":"                        + \"Usage: find [keyword(s)]\\n\""},{"lineNumber":79,"author":{"gitId":"khoongwk"},"content":"                        + \"Duke only finds task that contain\\n\""},{"lineNumber":80,"author":{"gitId":"khoongwk"},"content":"                        + \"all of the keywords specified\";"},{"lineNumber":81,"author":{"gitId":"khoongwk"},"content":"            default:"},{"lineNumber":82,"author":{"gitId":"khoongwk"},"content":"                return \"I don\u0027t understand that command.\\n\""},{"lineNumber":83,"author":{"gitId":"khoongwk"},"content":"                        + HELP_MESSAGE;"},{"lineNumber":84,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":88,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"khoongwk"},"content":"    public boolean continueDuke() {"},{"lineNumber":90,"author":{"gitId":"khoongwk"},"content":"        return true;"},{"lineNumber":91,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":92}},{"path":"src/main/java/duke/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":" * Command in the event that the input is invalid."},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"public class InvalidCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"    public String executeWithResponse() throws DukeException {"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"        throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    public boolean continueDuke() {"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"        return true;"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":20}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.util.StringJoiner;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":" * Command to list all tasks in the task list."},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"public class ListCommand implements Command {"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"    private final TaskList taskList;"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"    public ListCommand(TaskList taskList) {"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"    public String executeWithResponse() {"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"        StringJoiner responseBuilder \u003d new StringJoiner(\"\\n\");"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"        responseBuilder.add(\"Here are the tasks in your list:\");"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"        String tasksString \u003d taskList.getAllTasks();"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"        if (tasksString.length() \u003d\u003d 0) {"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"            responseBuilder.add(\"No tasks found.\");"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"            responseBuilder.add(tasksString);"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"        return responseBuilder.toString();"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"    public boolean continueDuke() {"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"        return true;"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":36}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.util.StringJoiner;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":" * Command to create a To-do Task."},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"public class TodoCommand implements Command {"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"    private final String fullCommand;"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    private final TaskList taskList;"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    private boolean isDone;"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"     * Initialise command to create a new To-do to be"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"     * placed inside the task list."},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"     * @param fullCommand The user\u0027s full input of the to-do command."},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"     * @param taskList The list containing the tasks of the user."},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"    public TodoCommand(String fullCommand, TaskList taskList) {"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"        this.isDone \u003d false;"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"     * Initialise command to create a To-do to be"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"     * placed inside the task list."},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"     * @param fullCommand The user\u0027s full input of the to-do command."},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"     * @param taskList The list containing the tasks of the user."},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"     * @param isDone The state of whether the To-do is done."},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"    public TodoCommand(String fullCommand, TaskList taskList, boolean isDone) {"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"    public String executeWithResponse() throws DukeException {"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"        if (fullCommand.substring(4).length() \u003c\u003d 1) {"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"            StringJoiner responseBuilder \u003d new StringJoiner(\"\\n\");"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"            String description \u003d fullCommand.substring(5);"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"            Todo d \u003d new Todo(description, isDone);"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"            if (taskList.addTask(d)) {"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Got it, I\u0027ve added this todo: \" + d);"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Now you have \" + taskList.getSize() + \" tasks in the list.\");"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"            } else {"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":"                responseBuilder.add(\"Failed to add the todo.\");"},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"            return responseBuilder.toString();"},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"khoongwk"},"content":"    public boolean continueDuke() {"},{"lineNumber":63,"author":{"gitId":"khoongwk"},"content":"        return true;"},{"lineNumber":64,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":66,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":66}},{"path":"src/main/java/duke/parser/DateTimeProcessor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import java.time.Month;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":" * This processor parses strings and returns a neatly"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":" * formatted Date-Time String."},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"public class DateTimeProcessor {"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    private final ArrayList\u003cString\u003e possibleDateFormats \u003d new ArrayList\u003c\u003e("},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"            Arrays.asList("},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"                    \"dd/MM/yyyy\", \"yyyy/MM/dd\", \"MM/dd/yyyy\","},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"                    \"dd-MM-yyyy\", \"yyyy-MM-dd\", \"MM-dd-yyyy\""},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"            )"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"    );"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"    private final ArrayList\u003cString\u003e possibleDateTimeFormats \u003d new ArrayList\u003c\u003e("},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"            Arrays.asList("},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"                        \"dd/MM/yyyy HHmm\", \"yyyy/MM/dd HHmm\", \"MM/dd/yyyy HHmm\","},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"                        \"HHmm dd/MM/yyyy\", \"HHmm yyyy/MM/dd\", \"HHmm MM/dd/yyyy\","},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"                        \"dd-MM-yyyy HHmm\", \"yyyy-MM-dd HHmm\", \"MM/dd/yyyy HHmm\","},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"                        \"HHmm dd-MM-yyyy\", \"HHmm yyyy-MM-dd\", \"HHmm MM-dd-yyyy\""},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"            )"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"    );"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"    private Optional\u003cLocalDateTime\u003e parseDateTime(String input) {"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"        for (String format : possibleDateTimeFormats) {"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"            try {"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"                return Optional.of(LocalDateTime.parse(input, DateTimeFormatter.ofPattern(format)));"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"                continue;"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"        return Optional.empty();"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"    private Optional\u003cLocalDate\u003e parseDate(String input) {"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"        for (String format : possibleDateFormats) {"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"            try {"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"                return Optional.of(LocalDate.parse(input, DateTimeFormatter.ofPattern(format)));"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"                continue;"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"        return Optional.empty();"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"     * The string passed as date and/or time to an Event or Deadline"},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":"     * can be formatted to a neater format if it matches a pattern,"},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":"     * such as dd/MM/yyyy HHmm."},{"lineNumber":60,"author":{"gitId":"khoongwk"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"     * @param input The date-time string which may not be formatted properly."},{"lineNumber":62,"author":{"gitId":"khoongwk"},"content":"     * @return The neatly formatted date-time string."},{"lineNumber":63,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"khoongwk"},"content":"    public String getParsedDate(String input) {"},{"lineNumber":65,"author":{"gitId":"khoongwk"},"content":"        assert input.length() \u003e 0 : \"Input string is empty\";"},{"lineNumber":66,"author":{"gitId":"khoongwk"},"content":"        Optional\u003cLocalDateTime\u003e possibleDateTime \u003d parseDateTime(input);"},{"lineNumber":67,"author":{"gitId":"khoongwk"},"content":"        Optional\u003cLocalDate\u003e possibleDate \u003d parseDate(input);"},{"lineNumber":68,"author":{"gitId":"khoongwk"},"content":"        if (possibleDateTime.isPresent()) {"},{"lineNumber":69,"author":{"gitId":"khoongwk"},"content":"            LocalDateTime dateTime \u003d possibleDateTime.get();"},{"lineNumber":70,"author":{"gitId":"khoongwk"},"content":"            Month month \u003d dateTime.getMonth();"},{"lineNumber":71,"author":{"gitId":"khoongwk"},"content":"            int day \u003d dateTime.getDayOfMonth();"},{"lineNumber":72,"author":{"gitId":"khoongwk"},"content":"            int year \u003d dateTime.getYear();"},{"lineNumber":73,"author":{"gitId":"khoongwk"},"content":"            int hour \u003d dateTime.getHour();"},{"lineNumber":74,"author":{"gitId":"khoongwk"},"content":"            int min \u003d dateTime.getMinute();"},{"lineNumber":75,"author":{"gitId":"khoongwk"},"content":"            String meridian \u003d hour \u003e 12 ? \"PM\" : \"AM\";"},{"lineNumber":76,"author":{"gitId":"khoongwk"},"content":"            return month.toString() + \" \" + day + \" \""},{"lineNumber":77,"author":{"gitId":"khoongwk"},"content":"                    + year + \" \" + (hour \u003e 12 ? hour - 12 : hour)"},{"lineNumber":78,"author":{"gitId":"khoongwk"},"content":"                    + \":\" + (min \u003c 10 ? \"0\" + min : min) + \" \" + meridian;"},{"lineNumber":79,"author":{"gitId":"khoongwk"},"content":"        } else if (possibleDate.isPresent()) {"},{"lineNumber":80,"author":{"gitId":"khoongwk"},"content":"            LocalDate dateTime \u003d possibleDate.get();"},{"lineNumber":81,"author":{"gitId":"khoongwk"},"content":"            Month month \u003d dateTime.getMonth();"},{"lineNumber":82,"author":{"gitId":"khoongwk"},"content":"            int day \u003d dateTime.getDayOfMonth();"},{"lineNumber":83,"author":{"gitId":"khoongwk"},"content":"            int year \u003d dateTime.getYear();"},{"lineNumber":84,"author":{"gitId":"khoongwk"},"content":"            return month.toString() + \" \" + day + \" \" + year;"},{"lineNumber":85,"author":{"gitId":"khoongwk"},"content":"        } else {"},{"lineNumber":86,"author":{"gitId":"khoongwk"},"content":"            // If no possible format can be found, just return"},{"lineNumber":87,"author":{"gitId":"khoongwk"},"content":"            // the same string."},{"lineNumber":88,"author":{"gitId":"khoongwk"},"content":"            return input;"},{"lineNumber":89,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":91}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import duke.command.ByeCommand;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"import duke.command.DoneCommand;"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"import duke.command.EventCommand;"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"import duke.command.FindCommand;"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"import duke.command.HelpCommand;"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"import duke.command.InvalidCommand;"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"import duke.command.ListCommand;"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"import duke.command.TodoCommand;"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":" * Contains two parse functions, one for interpreting user input"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":" * to get the correct Command used, and another function to separate"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":" * strings with time into its description and time."},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"public class Parser {"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"     * Given the full input string, this method checks the first"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"     * few characters to see if the keyword corresponds to a specific"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"     * Command and returns a new command to be executed."},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"     * @param fullCommand The entire command from the user input."},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"     * @return The Command corresponding to the keyword from the user."},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"    public static Command getCommand(String fullCommand, TaskList taskList, Storage storage) {"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"        String[] splitWords \u003d fullCommand.split(\" \");"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"        String keyword \u003d splitWords[0].toLowerCase();"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"        switch (keyword) {"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"        case \"bye\":"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"            return new ByeCommand(storage, taskList);"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"        case \"list\":"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"            return new ListCommand(taskList);"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"        case \"done\":"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"            return new DoneCommand(fullCommand, taskList);"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"        case \"delete\":"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"            return new DeleteCommand(fullCommand, taskList);"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"        case \"todo\":"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"            return new TodoCommand(fullCommand, taskList);"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"        case \"event\":"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"            return new EventCommand(fullCommand, taskList);"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"        case \"deadline\":"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"            return new DeadlineCommand(fullCommand, taskList);"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"        case \"find\":"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"            return new FindCommand(fullCommand, taskList);"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"        case \"help\":"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"            return new HelpCommand(fullCommand);"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":"        default:"},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"            return new InvalidCommand();"},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":60,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"     * Helper function to process a timed task description (task.Event, task.Deadline) and"},{"lineNumber":62,"author":{"gitId":"khoongwk"},"content":"     * split it into 2 strings, the description and the task date."},{"lineNumber":63,"author":{"gitId":"khoongwk"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"khoongwk"},"content":"     * @param str The raw string to be processed."},{"lineNumber":65,"author":{"gitId":"khoongwk"},"content":"     * @return A String array of size 2. Index 0 contains the task\u0027s description,"},{"lineNumber":66,"author":{"gitId":"khoongwk"},"content":"     * index 1 contains the date of the task."},{"lineNumber":67,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"khoongwk"},"content":"    public static String[] parseTimedTask(String str) throws DukeException {"},{"lineNumber":69,"author":{"gitId":"khoongwk"},"content":"        String[] result \u003d new String[2];"},{"lineNumber":70,"author":{"gitId":"khoongwk"},"content":"        // Split the string first then loop through to find the stop point at either /at or /by."},{"lineNumber":71,"author":{"gitId":"khoongwk"},"content":"        String[] arr \u003d str.split(\" \");"},{"lineNumber":72,"author":{"gitId":"khoongwk"},"content":"        int indexToStop \u003d -1;"},{"lineNumber":73,"author":{"gitId":"khoongwk"},"content":"        for (int i \u003d 0; i \u003c arr.length; i++) {"},{"lineNumber":74,"author":{"gitId":"khoongwk"},"content":"            if (arr[i].equals(\"/at\") || arr[i].equals(\"/by\")) {"},{"lineNumber":75,"author":{"gitId":"khoongwk"},"content":"                indexToStop \u003d i;"},{"lineNumber":76,"author":{"gitId":"khoongwk"},"content":"                // Stop index when indicator /at or /by is found."},{"lineNumber":77,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"khoongwk"},"content":"        if (indexToStop \u003d\u003d -1) {"},{"lineNumber":80,"author":{"gitId":"khoongwk"},"content":"            throw new DukeException(\"Incorrect Input for timed task.\");"},{"lineNumber":81,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":83,"author":{"gitId":"khoongwk"},"content":"        // Use StringBuilder Class to recreate the description and time separately."},{"lineNumber":84,"author":{"gitId":"khoongwk"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":85,"author":{"gitId":"khoongwk"},"content":"        for (int j \u003d 0; j \u003c indexToStop; j++) {"},{"lineNumber":86,"author":{"gitId":"khoongwk"},"content":"            sb.append(arr[j]);"},{"lineNumber":87,"author":{"gitId":"khoongwk"},"content":"            if (j !\u003d indexToStop - 1) {"},{"lineNumber":88,"author":{"gitId":"khoongwk"},"content":"                sb.append(\" \");"},{"lineNumber":89,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"khoongwk"},"content":"        // task.Event / task.Deadline description has been built, pass it to result[0]."},{"lineNumber":92,"author":{"gitId":"khoongwk"},"content":"        result[0] \u003d sb.toString();"},{"lineNumber":93,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":94,"author":{"gitId":"khoongwk"},"content":"        sb \u003d new StringBuilder();"},{"lineNumber":95,"author":{"gitId":"khoongwk"},"content":"        for (int k \u003d indexToStop + 1; k \u003c arr.length; k++) {"},{"lineNumber":96,"author":{"gitId":"khoongwk"},"content":"            sb.append(arr[k]);"},{"lineNumber":97,"author":{"gitId":"khoongwk"},"content":"            if (k !\u003d arr.length - 1) {"},{"lineNumber":98,"author":{"gitId":"khoongwk"},"content":"                sb.append(\" \");"},{"lineNumber":99,"author":{"gitId":"khoongwk"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"khoongwk"},"content":"        String date \u003d sb.toString();"},{"lineNumber":102,"author":{"gitId":"khoongwk"},"content":"        // Now to check if this date can be formatted nicely using DateTimeProcessor class."},{"lineNumber":103,"author":{"gitId":"khoongwk"},"content":"        String parsedDate \u003d new DateTimeProcessor().getParsedDate(date);"},{"lineNumber":104,"author":{"gitId":"khoongwk"},"content":"        result[1] \u003d parsedDate;"},{"lineNumber":105,"author":{"gitId":"khoongwk"},"content":"        return result;"},{"lineNumber":106,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":107}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":" * A Task with a time-based deadline."},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"    private String deadline;"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"     * Initialise a deadline with a description and date of deadline."},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"     * @param description The description of this task."},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"     * @param deadline The deadline of this task."},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    public Deadline(String description, String deadline) {"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"     * Initialise a deadline with a description and date of deadline"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"     * and whether it has been completed."},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"     * @param description The description of this task."},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"     * @param deadline The deadline of this task."},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"     * @param isDone Whether the deadline has been met."},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"    public Deadline(String description, String deadline, boolean isDone) {"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"        super(description, isDone);"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"        return \"[D]\" + super.toString() + \" (by: \""},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"                + deadline + \")\";"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"    public String getDescriptionForDatabase() {"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"        return \"deadline - \" + (isTaskDone() ? \"1\" : \"0\") + \" - \""},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"                + getDescription() + \" - \" + deadline;"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":43}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":" * An event is a task which occurs at a particular date and time."},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"    private String eventDate;"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"     * Initialise an event with description and date of the event."},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"     * @param description Description of the event."},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"     * @param date Date of the event."},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    public Event(String description, String date) {"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"        this.eventDate \u003d date;"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"     * Initialise an event with description and date of the event."},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"     * @param description Description of the event."},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"     * @param date Date of the event."},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"     * @param isDone Whether the event is completed."},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"    public Event(String description, String date, boolean isDone) {"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"        super(description, isDone);"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"        this.eventDate \u003d date;"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"        return \"[E]\" + super.toString() + \" (at: \""},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"                + eventDate + \")\";"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"    public String getDescriptionForDatabase() {"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"        return \"event - \" + (isTaskDone() ? \"1\" : \"0\") + \" - \""},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"                + getDescription() + \" - \" + eventDate;"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":42}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":" * A Task. Contains a description, and a boolean to"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":" * indicate if it is done."},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"public abstract class Task {"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"    private String description;"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"    private boolean isDone;"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"    protected Task(String description) {"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"        this.isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"    protected Task(String description, boolean isDone) {"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"     * Mark this task as done."},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"    public void markDone() {"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"        this.isDone \u003d true;"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"        return \"[\" + (isDone ? \"✓\" : \"X\") + \"] \" + description;"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"     * Getter method for this Task\u0027s description."},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"     * @return Description of this Task."},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"    public String getDescription() {"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"        return description;"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"     * Getter method for this Task\u0027s isDone status."},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"     * @return Boolean indicating if this Task is completed."},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"    public boolean isTaskDone() {"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"        return isDone;"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"    public abstract String getDescriptionForDatabase();"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":51}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":" * A To-do is a Task to be done some time in the future."},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"    public Todo(String description) {"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"        super(description, isDone);"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"    public String getDescriptionForDatabase() {"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"        return \"todo - \" + (isTaskDone() ? \"1\" : \"0\")"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"                + \" - \" + getDescription();"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":26}},{"path":"src/main/java/duke/ui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":" * Handles console input and output."},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"public class TextUi {"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"    private static final String INTRODUCTION \u003d \"Hi, I\u0027m your Professor, Martin. I keep track of\\n\""},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"            + \"your tasks and load them if you have any saved.\\n\""},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"            + \"What can I do for you? You can ask me to do these:\\n\""},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"            + \"list: List the current tasks in your list.\\n\""},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"            + \"bye: Saves any tasks in the list and quits the program.\\n\""},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"            + \"todo: Add a To-Do task.\\n\""},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"            + \"event: Add an event task.\\n\""},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"            + \"deadline: Add a deadline task.\\n\""},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"            + \"done: Mark task as done based on the task\u0027s number.\\n\""},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"            + \"delete: Deletes task based on the task\u0027s number.\\n\""},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"            + \"find: Find a task which matches your description.\";;"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"    private Scanner reader;"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"     * Initialise Ui with scanner."},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"    public TextUi() {"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"        reader \u003d new Scanner(System.in);"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"     * Reads input from user."},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"     * @return Console input string from user."},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"    public String readCommand() {"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"        System.out.println(\"Enter input:\");"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"        return reader.hasNextLine() ? reader.nextLine() : \"\";"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"     * Prints the introduction message onto console."},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"    public void showIntroduction() {"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"        System.out.println(INTRODUCTION);"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"     * Prints a dashed line to indicate a new section of the program."},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"    public void showLine() {"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"        System.out.println(\"------------------------------------------------\");"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"     * Displays messages onto console."},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":"     * @param message Message to printed."},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"    public void showMessage(String message) {"},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":"        System.out.println(message);"},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":61,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"khoongwk"},"content":"     * Closes the Scanner to save resources."},{"lineNumber":63,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"khoongwk"},"content":"    public void closeUi() {"},{"lineNumber":65,"author":{"gitId":"khoongwk"},"content":"        reader.close();"},{"lineNumber":66,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":68,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"khoongwk"},"content":"     * Prints an exception\u0027s message onto console."},{"lineNumber":70,"author":{"gitId":"khoongwk"},"content":"     * @param e Exception to be printed onto console."},{"lineNumber":71,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"khoongwk"},"content":"    public void showException(Exception e) {"},{"lineNumber":73,"author":{"gitId":"khoongwk"},"content":"        System.out.println(e);"},{"lineNumber":74,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":76,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":76}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"\u003cfx:root alignment\u003d\"BOTTOM_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"khoongwk":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"42.0\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\" AnchorPane.topAnchor\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"khoongwk":19}},{"path":"src/test/data/testTaskListToLoad.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"todo - 1 - make coffee"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":"event - 1 - go for tutorial - Thursday 2pm"},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"todo - 0 - eat dinner"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"event - 0 - presentation - 20th Sept 2pm"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"event - 0 - 4th event - OCTOBER 20 2021 12:45 AM"}],"authorContributionMap":{"khoongwk":5}},{"path":"src/test/data/testTaskListToStore.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"todo - 0 - Make tea tonight!"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":"event - 0 - Midterm Test - Sep 30th 2020"},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"deadline - 1 - Submit tutorial - tonight!"}],"authorContributionMap":{"khoongwk":3}},{"path":"src/test/java/duke/DateTimeProcessorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"import duke.parser.DateTimeProcessor;"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":" * Test class for the DateTimeProcessor."},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"public class DateTimeProcessorTest {"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"     * Given sample strings, the date time processor should"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"     * return the formatted string in the correct format."},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    void testDateTime_correctFormat_isReturned() {"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"        DateTimeProcessor processor \u003d new DateTimeProcessor();"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"        String result \u003d processor.getParsedDate(\"20-10-2021 1245\");"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"        assertEquals(\"OCTOBER 20 2021 12:45 AM\", result);"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"        result \u003d processor.getParsedDate(\"10/08/2011\");"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"        assertEquals(\"AUGUST 10 2011\", result);"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"        result \u003d processor.getParsedDate(\"tomorrow\");"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"        assertEquals(\"tomorrow\", result);"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":27}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"import duke.parser.Parser;"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":" * JUnit test class to test methods in Parser."},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"class ParserTest {"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"     * Tests Parser if it returns the correct formatted date and time"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"     * provided the input date/time matches the format."},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"    void testParserCorrectTime() {"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"        String correctFormatTime \u003d \"random description /by 20-01-2021 2359\";"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"        String incorrectFormatTime \u003d \"random description /by ASAP!!!\";"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"            String[] parsedTime1 \u003d Parser.parseTimedTask(correctFormatTime);"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"            assertEquals(\"random description\", parsedTime1[0]);"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"            assertEquals(\"JANUARY 20 2021 11:59 PM\", parsedTime1[1]);"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"            String[] parsedTime2 \u003d Parser.parseTimedTask(incorrectFormatTime);"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"            assertEquals(\"random description\", parsedTime2[0]);"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"            assertEquals(\"ASAP!!!\", parsedTime2[1]);"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"        } catch (DukeException e) {"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"            System.out.println(e);"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"            fail();"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"     * Tests the parseCommand method for invalid Commands."},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"    void testParserInvalidCommand() {"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"            Parser.getCommand(\"im not sure\", new TaskList(), new Storage(\"\")).executeWithResponse();"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"        } catch (DukeException e) {"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"            assertEquals(\"I\u0027m sorry, but I don\u0027t know what that means :-(\", e.toString());"},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"            Parser.getCommand(\"even t concert /at tonight!\", new TaskList(), new Storage(\"\")).executeWithResponse();"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"        } catch (DukeException e) {"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"            assertEquals(\"I\u0027m sorry, but I don\u0027t know what that means :-(\", e.toString());"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":54}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"import duke.task.Deadline;"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"import duke.task.Event;"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"import duke.task.Todo;"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":" * JUnit test class to test the Storage class."},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"class StorageTest {"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"     * Tests if a sample TaskList loads correctly."},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"    void testStorage_sampleTaskList_loadsCorrectly() {"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"        Storage storage \u003d new Storage("},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"                System.getProperty(\"user.dir\")"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"                        + \"\\\\src\\\\test\\\\data\\\\testTaskListToLoad.txt\""},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"        );"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"            assertEquals(5, storage.load().size());"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"        } catch (DukeException e) {"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"            System.out.println(e);"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"            fail();"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"     * Tests if a sample TaskList stores correctly.."},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"    void testStorage_sampleTaskList_storesCorrectly() {"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"        TaskList sampleList \u003d new TaskList();"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"        sampleList.addTask(new Todo(\"Make tea tonight!\"));"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"        sampleList.addTask(new Event(\"Midterm Test\", \"Sep 30th 2020\"));"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"        sampleList.addTask(new Deadline(\"Submit tutorial\", \"tonight!\", true));"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"        Storage storage \u003d new Storage("},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"                System.getProperty(\"user.dir\")"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"                + \"/src/test/data/testTaskListToStore.txt\""},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"        );"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"            assertTrue(storage.store(sampleList));"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"        } catch (DukeException e) {"},{"lineNumber":54,"author":{"gitId":"khoongwk"},"content":"            System.out.println(\"Exception while testing if store() works: \" + e.toString());"},{"lineNumber":55,"author":{"gitId":"khoongwk"},"content":"            fail();"},{"lineNumber":56,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":59,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":59}},{"path":"src/test/java/duke/command/CommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"import duke.DukeException;"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"import duke.TaskList;"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":" * Test class for the command package."},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"public class CommandTest {"},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"    void testCommand_correctResponse() {"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"        Command command \u003d new InvalidCommand();"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"            command.executeWithResponse();"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"            fail();"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"        } catch (DukeException e) {"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"            assertEquals(\"I\u0027m sorry, but I don\u0027t know what that means :-(\", e.toString());"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"        String userInput \u003d \"event James\u0027 party /at 5pm tomorrow\";"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"            command \u003d new EventCommand(userInput, taskList);"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"            assertEquals("},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"                    \"Got it, I\u0027ve added this event: [E][X] James\u0027 party (at: 5pm tomorrow)\\n\""},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"                             + \"Now you have 1 tasks in the list.\","},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"                    command.executeWithResponse()"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"            );"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"        } catch (DukeException e) {"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"            System.out.println(\"Test for Event command failed.\");"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"            fail();"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"            command \u003d new DeleteCommand(\"delete 3\", taskList);"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"            command.executeWithResponse();"},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"            fail();"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"        } catch (DukeException e) {"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"            assertEquals(\"Hey! That number is not in the list!\", e.toString());"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":47}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":" * JUnit test class to test the Task class."},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":" */"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"class TaskTest {"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"khoongwk"},"content":"     * Tests if a sample to-do Task produces the right"},{"lineNumber":14,"author":{"gitId":"khoongwk"},"content":"     * description for both the Ui and the Database."},{"lineNumber":15,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"khoongwk"},"content":"    void testTodoCorrectDescription() {"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"        Todo todo \u003d new Todo(\"Deliver Parcel\", true);"},{"lineNumber":19,"author":{"gitId":"khoongwk"},"content":"        String todoText \u003d todo.toString();"},{"lineNumber":20,"author":{"gitId":"khoongwk"},"content":"        String todoDatabaseText \u003d todo.getDescriptionForDatabase();"},{"lineNumber":21,"author":{"gitId":"khoongwk"},"content":"        assertEquals(\"todo - 1 - Deliver Parcel\", todoDatabaseText);"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"        assertEquals(\"[T][✓] Deliver Parcel\", todoText);"},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"     * Tests if a sample Event produces the right"},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":"     * description for both the Ui and the Database."},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"khoongwk"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"khoongwk"},"content":"    void testEventCorrectDescription() {"},{"lineNumber":31,"author":{"gitId":"khoongwk"},"content":"        Event event \u003d new Event(\"Concert with Friends\", \"OCTOBER 20 2021 12:45 AM\", false);"},{"lineNumber":32,"author":{"gitId":"khoongwk"},"content":"        String eventDescription \u003d event.toString();"},{"lineNumber":33,"author":{"gitId":"khoongwk"},"content":"        String eventDatabaseDescription \u003d event.getDescriptionForDatabase();"},{"lineNumber":34,"author":{"gitId":"khoongwk"},"content":"        assertEquals(\"event - 0 - Concert with Friends - OCTOBER 20 2021 12:45 AM\", eventDatabaseDescription);"},{"lineNumber":35,"author":{"gitId":"khoongwk"},"content":"        assertEquals(\"[E][X] Concert with Friends (at: OCTOBER 20 2021 12:45 AM)\", eventDescription);"},{"lineNumber":36,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"khoongwk"},"content":""},{"lineNumber":38,"author":{"gitId":"khoongwk"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"khoongwk"},"content":"     * Tests if a sample Deadline Task produces the right"},{"lineNumber":40,"author":{"gitId":"khoongwk"},"content":"     * description for both the Ui and the Database."},{"lineNumber":41,"author":{"gitId":"khoongwk"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"khoongwk"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"khoongwk"},"content":"    void testDeadlineCorrectDescription() {"},{"lineNumber":44,"author":{"gitId":"khoongwk"},"content":"        Deadline deadline \u003d new Deadline("},{"lineNumber":45,"author":{"gitId":"khoongwk"},"content":"                \"Individual Project Week 5 Deliverables\","},{"lineNumber":46,"author":{"gitId":"khoongwk"},"content":"                \"ASAP!\","},{"lineNumber":47,"author":{"gitId":"khoongwk"},"content":"                false);"},{"lineNumber":48,"author":{"gitId":"khoongwk"},"content":"        String deadlineDescription \u003d deadline.toString();"},{"lineNumber":49,"author":{"gitId":"khoongwk"},"content":"        String deadlineDatabaseDescription \u003d deadline.getDescriptionForDatabase();"},{"lineNumber":50,"author":{"gitId":"khoongwk"},"content":"        assertEquals(\"deadline - 0 - Individual Project Week 5 Deliverables - ASAP!\", deadlineDatabaseDescription);"},{"lineNumber":51,"author":{"gitId":"khoongwk"},"content":"        assertEquals(\"[D][X] Individual Project Week 5 Deliverables (by: ASAP!)\", deadlineDescription);"},{"lineNumber":52,"author":{"gitId":"khoongwk"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"khoongwk"},"content":"}"}],"authorContributionMap":{"khoongwk":53}},{"path":"text-ui-test/data/taskList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"todo - 1 - make coffee"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":"event - 1 - go for tutorial - Thursday 2pm"},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"todo - 1 - eat dinner"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"event - 0 - presentation - 20th Sept 2pm"}],"authorContributionMap":{"khoongwk":4}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"khoongwk"},"content":"todo make coffee"},{"lineNumber":2,"author":{"gitId":"khoongwk"},"content":"event go for tutorial /at Thursday 2pm"},{"lineNumber":3,"author":{"gitId":"khoongwk"},"content":"deadline individual project stage 8 /by Saturday 4pm"},{"lineNumber":4,"author":{"gitId":"khoongwk"},"content":"done 1"},{"lineNumber":5,"author":{"gitId":"khoongwk"},"content":"done 2"},{"lineNumber":6,"author":{"gitId":"khoongwk"},"content":"todo eat dinner"},{"lineNumber":7,"author":{"gitId":"khoongwk"},"content":"delete 3"},{"lineNumber":8,"author":{"gitId":"khoongwk"},"content":"event presentation /at 20th Sept 2pm"},{"lineNumber":9,"author":{"gitId":"khoongwk"},"content":"event 4th event /at 20-10-2021 1245"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"list"},{"lineNumber":11,"author":{"gitId":"khoongwk"},"content":"find coffee"},{"lineNumber":12,"author":{"gitId":"khoongwk"},"content":"bye"}],"authorContributionMap":{"khoongwk":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"khoongwk"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"khoongwk"},"content":"java -cp ..\\bin\\ duke/Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":22,"author":{"gitId":"khoongwk"},"content":"IF %ERRORLEVEL% EQU 0 ("},{"lineNumber":23,"author":{"gitId":"khoongwk"},"content":"    echo Files are the same."},{"lineNumber":24,"author":{"gitId":"khoongwk"},"content":")"},{"lineNumber":25,"author":{"gitId":"khoongwk"},"content":"IF %ERRORLEVEL% EQU 1 ("},{"lineNumber":26,"author":{"gitId":"khoongwk"},"content":"    echo Files are different."},{"lineNumber":27,"author":{"gitId":"khoongwk"},"content":")"},{"lineNumber":28,"author":{"gitId":"khoongwk"},"content":""}],"authorContributionMap":{"khoongwk":9,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"khoongwk"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"khoongwk":1,"-":37}}]
