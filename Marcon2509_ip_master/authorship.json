[
  {
    "path": "src/main/java/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * enum Commands states constant keywords that are used to determine the command inputted by user"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    EXIT(\"bye\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    FIND(\"find\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    Commands(String keyword) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * compares keyword with the enum commands"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param keyword"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return Commands that corresponds to the keyword"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws DukeException if it is unable to match any of the enum commands"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static Commands findCommand(String keyword) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        for (Commands c : values()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            if (keyword.equals(c.keyword)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                return c;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        throw new DukeException(\"DukeException: â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 34
    }
  },
  {
    "path": "src/main/java/DateConverter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * class handles all formatting for dates in Deadline and Event objects"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class DateConverter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private static final List\u003cString\u003e ACCEPTED_FORMATS_WITH_TIME \u003d Arrays.asList(\"d MMM yyyy HH:mm\", \"d-M-yyyy HH:mm\", \"d/M/yyyy HHmm\", \"d/M/yyyy HH:mm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private static final List\u003cString\u003e ACCEPTED_FORMATS_DATE_ONLY \u003d Arrays.asList(\"d MMM yyyy\", \"d-M-yyyy\", \"d/M/yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private static final int HAS_TIME_INDICATOR \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private static final int NULL_TIME_INDICATOR \u003d 30;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * compares accepted date formats with the string input. If it matches, it will create the Date in the fomrat"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param input String containing date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return LoacalDateTime object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static LocalDateTime parseString(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            for (String format : ACCEPTED_FORMATS_WITH_TIME) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    return LocalDateTime.parse(input, DateTimeFormatter.ofPattern(format)).withSecond(HAS_TIME_INDICATOR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            for (String format : ACCEPTED_FORMATS_DATE_ONLY) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    // Since we do not support seconds for date and time based information, we use the second field to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    // differentiate between a LocalDateTime with no defined time and one with time defined at midnight."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    return LocalDate.parse(input, DateTimeFormatter.ofPattern(format)).atStartOfDay().withSecond(NULL_TIME_INDICATOR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new DukeException(\"Unable to find time\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return LocalDateTime.parse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * takes a LocalDateTime Object and converts it back into String"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param dateTime LocalDateTime object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return String form of dateTime"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static String parseLocalDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (dateTime.getSecond() \u003d\u003d 30) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return dateTime.format(DateTimeFormatter.ofPattern(ACCEPTED_FORMATS_DATE_ONLY.get(0)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return dateTime.format(DateTimeFormatter.ofPattern(ACCEPTED_FORMATS_WITH_TIME.get(0)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 61
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * Deadline class creates a type of Task called deadline which contains a date and description of the task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Deadline(String description, LocalDateTime date) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * creates a deadline a string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param str input form user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return Deadline object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static Deadline createDeadline(String str) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (str \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new DukeException(\"I need something to work with.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        String[] detailsArray \u003d str.split(\"/by\", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            String description \u003d detailsArray[0].trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            String dateTimeString \u003d detailsArray[1].trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            LocalDateTime dateTime \u003d DateConverter.parseString(dateTimeString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new DukeException(\"No date found\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * convertes a String into a condensed form"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return condesnsed form of inputted string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return String.format(\"D|%s|%s|%s\", super.isDone ? \"Y\" : \"N\", this.date, super.description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * unravels encoded Strings"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param code String that has been previously encoded()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return Deadline object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws DukeException in the event it is unable to decode the string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static Deadline decode(String code) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (code.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            String[] content \u003d code.split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            if (content.length !\u003d 4) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                throw new Error(\"data string is not equal to 4\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            Deadline newDeadline \u003d new Deadline(content[3], DateConverter.parseString(content[2]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            if (content[1].equals(\"Y\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                newDeadline.markAsDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return newDeadline;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new DukeException(\"Unable to decode Deadline\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * overrides Deadline String output to be formatted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return String of formatted Deadline"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by:\" + DateConverter.parseLocalDateTime(this.date) + \")\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 79
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * Main class which cretaes the application Duke that creates a checklist for tasks to do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        runDuke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * runs the program"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static void runDuke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        UI.introduction();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        Parser.parseCode(Storage.load(Storage.FILE_PATH), new UI(), false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 29,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * DukeException class handles exception unique to Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public DukeException(String errorMessage, Throwable err) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        super(errorMessage, err);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return \"____________________________________________________________\\n\" + super.toString() + \"\\n____________________________________________________________\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 18
    }
  },
  {
    "path": "src/main/java/Encodable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * public interface to use encode()"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * @param \u003cT\u003e T is a generic type"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public interface Encodable\u003cT\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    String encode();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 8
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * Event class creates a type of Task called event which contains a date and description of the task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Event(String description, LocalDateTime date) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * creates a Event from string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param details input from user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return Event object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static Event createEvent(String details) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (details \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new DukeException(\"I need something to work with.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        String[] detailsArray \u003d details.split(\"/at\", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            String description \u003d detailsArray[0].trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            String dateTimeString \u003d detailsArray[1].trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            LocalDateTime dateTime \u003d DateConverter.parseString(dateTimeString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return new Event(description, dateTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new DukeException(\"Out of Bounds Exceptions\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * convertes a String into a condensed form"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return condesnsed form of inputted string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return String.format(\"E|%s|%s|%s\", super.isDone ? \"Y\" : \"N\", this.date, super.description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * unravels encoded Strings"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param code String that has been previously encoded()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return Event object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws DukeException in the event it is unable to decode the string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static Event decode(String code) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (code.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            String[] content \u003d code.split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            if (content.length !\u003d 4) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                throw new Error(\"data string is not equal to 4\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            Event newEvent \u003d new Event(content[3], DateConverter.parseString(content[2]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            if (content[1].equals(\"Y\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                newEvent.markAsDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return newEvent;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new DukeException(\"Unable to decode event\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * overrides Event String output to be formatted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return String of formatted Event"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at:\" + DateConverter.parseLocalDateTime(this.date) + \")\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 70
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * Parser class handles userinput from UI class and parses throught it to create the Task List"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static final String line \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Takes all the necessary arguments to create the list of tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param taskList main list where all tasks are kept on"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param ui scanner that takes user inputs"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param flag boolean value that exits the program once true"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static void parseCode(TaskList taskList, UI ui, boolean flag) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        while (!flag) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            String echo \u003d ui.sc.nextLine();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                String split \u003d echo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                String arr[] \u003d split.split(\" \", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                String keyword \u003d arr[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                Commands command \u003d Commands.findCommand(keyword);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                switch (command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    case EXIT:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        Storage.save(taskList, Storage.FILE_PATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        System.out.println(line);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        System.out.println(line);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        flag \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    case LIST:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        ui.addLines(taskList.printOutList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    case DONE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            int index \u003d Integer.parseInt(arr[1]) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            ui.addLines(taskList.markCompleted(index));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            System.out.println(new DukeException(\"Integer not detected\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    case DEADLINE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            ui.addLines(taskList.add(Deadline.createDeadline(arr[1])));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            System.out.println(new DukeException(\"â˜¹ OOPS!!! The description of a deadline cannot be empty.\", e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    case TODO:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            ToDo item \u003d new ToDo(arr[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            ui.addLines(taskList.add(item));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            System.out.println(new DukeException(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\", e));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    case EVENT:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            ui.addLines(taskList.add(Event.createEvent(arr[1])));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            System.out.println(new DukeException(\"â˜¹ OOPS!!! The description of a event cannot be empty.\", e));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    case DELETE:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            int index2 \u003d Integer.parseInt(arr[1]) - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            ui.addLines(taskList.deleteTask(index2));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            System.out.println(new DukeException(\"â˜¹ OOPS!!! There is no task at that list number to delete!\", e));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    case FIND:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        String findWord \u003d arr[1];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        taskList.findTask(findWord);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        ui.addLines(taskList.printOutKeyWordList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 88
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * Storage class handles saving and loading of data from the hardrive"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static final String FILE_PATH \u003d \"duke/data/list.duke\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * saves the list of items in a hardcoded file called list.duke"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param list TaskList object to be saved"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param filePath path to save file at"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static void save(TaskList list, String filePath) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        String[] directories \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        Path path \u003d Paths.get(home, directories);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (!Files.exists(path.getParent())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            boolean directoriesCreated \u003d path.getParent().toFile().mkdirs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            if (!directoriesCreated) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                throw new DukeException(\"unable to create directory\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            FileWriter writer \u003d new FileWriter(path.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            for (Task item : list) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                writer.write(item.encode() + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new DukeException(\"IOexception detected\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * loads from list.duke form specified filePath"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param filePath filePath to search"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return TaskList containing all saved additions to the list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static TaskList load(String filePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            String[] directories \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            Path path \u003d Paths.get(home, directories);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            File history \u003d new File(path.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            Scanner sc \u003d new Scanner(history);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            TaskList loadStore \u003d new TaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                Task loadedTask \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                switch (line.charAt(0)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    case \u0027E\u0027:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        loadedTask \u003d Event.decode(line);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    case \u0027D\u0027:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        loadedTask \u003d Deadline.decode(line);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    case \u0027T\u0027:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        loadedTask \u003d ToDo.decode(line);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        throw new DukeException(\"Unable to find\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                loadStore.add(loadedTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return loadStore;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new DukeException(\"String Index out of bounds\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 85
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * Represents a task to do and creates a parent class with child classes Event, ToDo, Deadline"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public abstract class Task implements Encodable\u003cTask\u003e{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * obtains a tick or cross from a Task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return String [âœ“] or [âœ—]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * marks a task as completed by turning boolean isDone to true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * overrides Task String output to be formatted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return String of formatted Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        String s \u003d \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 46
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * TaskList manages the list of tasks and implements the iterable interface"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public ArrayList\u003cTask\u003e listOfItems;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public ArrayList\u003cTask\u003e ListOfItems;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public ArrayList\u003cTask\u003e ListOfKeyWordItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String line \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.listOfItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * adds a task to the list of items"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param item task that is being added"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return String output stating its has been added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String add(Task item) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.listOfItems.add(item);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return String.format(\"\\nGot it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in your list.\\n\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                item.toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                this.listOfItems.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * marks a task in the list with [âœ“] to state it is done"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param index position of the task to be marked in the list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return String output stating that the task has been marked completed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws DukeException if the number given is not on the list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String markCompleted(int index) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            Task item \u003d listOfItems.get(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            item.markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return String.format(\"\\nNice! I\u0027ve marked this task as done:\\n  %s\\n\", item.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new DukeException(\"List does not contain the number specified\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * removes a task form the list at the specified position"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return String output stating that the task has been removed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws DukeException if the number given is not on the list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String deleteTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            Task item \u003d listOfItems.remove(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return String.format(\"\\nNoted. I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in your list.\\n\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    item.toString(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    this.listOfItems.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new DukeException(\"List does not contain the number specified\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * prints out the entire list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return String output of the entire list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void findTask(String Keyword){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        ListOfKeyWordItems.clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "       for (Task item : ListOfItems) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "if (item.toString().indexOf(Keyword) !\u003d -1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    ListOfKeyWordItems.add(item);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "} else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "       }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String printOutKeyWordList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        String list \u003d \"\\nHere are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        for (int i \u003d 0; i \u003c ListOfKeyWordItems.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            list +\u003d String.format(\"%d.%s\\n\", i + 1, ListOfKeyWordItems.get(i).toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String printOutList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        String list \u003d \"\\nHere are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        for (int i \u003d 0; i \u003c this.listOfItems.size(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            list +\u003d String.format(\"%d.%s\\n\", i + 1, this.listOfItems.get(i).toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * iterates over the list of items"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return iterator with generic T as Task"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return this.listOfItems.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 115
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * ToDo class creates a type of Task called ToDo which contains a description of the task"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * convertes a String into a condensed form"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return condesnsed form of inputted string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return String.format(\"T|%s|%s\", super.isDone ? \"Y\" : \"N\", super.description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * unravels encoded Strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param code String that has been previously encoded()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return ToDo object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws DukeException in the event it is unable to decode the string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static ToDo decode(String code) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (code.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            String[] content \u003d code.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            if (content.length !\u003d 3) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                throw new Error(\"data string is not equal to 4\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            ToDo newToDo \u003d new ToDo(content[2]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            if (content[1].equals(\"Y\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                newToDo.markAsDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return newToDo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new DukeException(\"Unable to decode ToDo\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * overrides ToDo String output to be formatted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return String of formatted ToDo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 48
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * UI class handles the scanner object and UI elements seen by user"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static final String line \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Scanner sc;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    UI() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * adds the lines to make it look nice"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param content String item to be wrapped by two lines"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static void addLines(String content) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        System.out.print(line);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        System.out.print(content);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * introductory paragraph when Duke is first initialised"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static void introduction() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        String introduction \u003d \"Hello! I\u0027m Duke \\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        System.out.println(introduction);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 37
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void testEncode() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "String expectedOutput \u003d \"D|N|2019-12-02T18:00|return book\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Deadline toEncode \u003d Deadline.createDeadline(\"return book /by 2/12/2019 1800\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "String encoded \u003d toEncode.encode();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "assertEquals(expectedOutput, encoded);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 12
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 10
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void testEventCreator() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        Event eventToTest \u003d Event.createEvent(\"test /at 5/05/2019\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        String expectedOutcome \u003d \"[E][âœ˜] test(at:5 May 2019)\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        assertEquals(expectedOutcome, eventToTest.toString());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 10
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void testMarkCompleted() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        tl.listOfItems.add(Deadline.createDeadline(\"return book /by 2/12/2019 1800\"));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        String markedTask \u003d tl.markCompleted(0);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        String expectedOutput \u003d \"\\nNice! I\u0027ve marked this task as done:\\n  [D][âœ“] return book(by:2 Dec 2019 18:00)\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        assertEquals(expectedOutput ,markedTask);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 5
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "REM compare the output to the expected outputruntest"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 4,
      "-": 19
    }
  }
]
