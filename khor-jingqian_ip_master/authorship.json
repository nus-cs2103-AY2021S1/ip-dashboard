[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "# logic.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/logic.Duke.java` file, right-click it, and choose `Run logic.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "khor-jingqian": 2
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[T][✘] oranges"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[E][✘] kiwi (at: 18:00 Sep 9 2020)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[D][✘] ostrich (by: 19:00 Sep 9 2020)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[T][✘] one"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[E][✘] five (at: 18:00 Aug 31 2020)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[D][✘] six (by: 19:00 Aug 31 2020)"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 6
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Abstract class of all the commands that is created"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * after parsing the user\u0027s input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public final String input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Command(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 22
    }
  },
  {
    "path": "src/main/java/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Deadlines;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Adds the deadline entry that the user input to the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Arraylist of logic.Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DeadlineCommand extends Command{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DeadlineCommand(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Add deadline entry to the Arraylist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of tasks given."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui Handles the output to print."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Writes the save file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidDateTimeFormatException If input does not follow format specified."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidInputException If the input for the delete is incorrect."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue writing the save file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidDateTimeFormatException,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            InvalidInputException, InvalidSaveFileException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (super.input.length() \u003c\u003d 9) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"\\t☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String[] splitWord \u003d super.input.split(\"/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String desc \u003d splitWord[0].substring(9,splitWord[0].length()-1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String deadline \u003d splitWord[1].substring(3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Deadlines task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            task \u003d new Deadlines(desc, LocalDateTime.parse(deadline,dtf));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidDateTimeFormatException(\"\\tDeadline input must follow a certain format: yyyy-mm-dd HH:mm \" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    \"e.g. 2020-08-23 16:45\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ui.printOutput(\"\\tGot it. I\u0027ve added this task:\\n\" + \"\\t\" + task.toString() +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \"\\n\\tNow you have \" + tasks.getTasks().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Lets the main logic know that it cannot exit."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return False to prevent loop from exiting."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 66
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the command from the user when they want to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * delete a command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DeleteCommand(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Executes the delete on the task that the user specified."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of tasks given."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui Handles the output to print."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Writes the save file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidInputException If the input for the delete is incorrect."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue writing the save file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidInputException, InvalidSaveFileException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (super.input.length() \u003c\u003d 7) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"\\t☹ OOPS!!! The description of a delete operation cannot be empty / invalid index.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int index \u003d Integer.parseInt(super.input.substring(7));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (index \u003e\u003d tasks.getTasks().size() || index\u003c0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"\\t☹ OOPS!!! The description of a delete operation cannot be empty / invalid index.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Task task \u003d tasks.getTasks().get(index-1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        tasks.removeTask(index-1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ui.printOutput(\"\\tNoted. I\u0027ve removed this task:\\n\"+\"\\t\"+task.toString()+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \"\\n\\tNow you have \" + tasks.getTasks().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Lets main logic know that it cannot exit loop."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return False to prevent exiting."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 52
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the command from the user to complete an"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * existing task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DoneCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DoneCommand(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Completes the task that the user specified."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui logic.Ui Object that handles printing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Handles the rewriting of save file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidInputException If command is poorly written."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue writing the save file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidInputException, InvalidSaveFileException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if(super.input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"\\t☹ OOPS!!! Please specify which task you want to complete!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int completed \u003d Integer.parseInt(super.input.substring(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Task current \u003d tasks.getTasks().get(completed - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            current.completeTask();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            ui.printOutput(\"\\tNice! I\u0027ve marked this task as done:\\n\"+\"\\t\\t\" + current.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"\\tIndex out of bounds! Please try again.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Lets the main logic know to continue running."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return False to prevent loop exit."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 52
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Events;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Adds the event entry that the user input to the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Arraylist of logic.Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class EventCommand extends Command{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public EventCommand(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Add event entry to the Arraylist."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of tasks given."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui Handles the output to print."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Writes the save file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidDateTimeFormatException If input does not follow format specified."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidInputException If the input for the delete is incorrect."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue writing the save file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidDateTimeFormatException,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            InvalidInputException, InvalidSaveFileException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (super.input.length() \u003c\u003d 6) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"\\t☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String[] splitWord \u003d super.input.split(\"/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String desc \u003d splitWord[0].substring(6,splitWord[0].length()-1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String timing \u003d splitWord[1].substring(3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Events task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            task \u003d new Events(desc,LocalDateTime.parse(timing,dtf) );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch(DateTimeParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidDateTimeFormatException(\"\\tEvent timing input must follow a certain format: yyyy-mm-dd HH:mm \" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    \"e.g. 2020-08-23 16:45\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        System.out.println(\"\\tGot it. I\u0027ve added this task:\\n\" + \"\\t\"+task.toString() +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \"\\n\\tNow you have \" + tasks.getTasks().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Lets the main logic know that it can not exit."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return False to prevent loop from exiting."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 66
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the command to close logic.Duke"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ExitCommand(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Executes the command to save the files for closing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of tasks that logic.Duke is handling."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui Handles what the user reads."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Writes the save file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue writing the save file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidSaveFileException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ui.printOutput(\"\\tBye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Lets the main logic know to exit the loop"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return true to exiting the loop"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 38
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the command to find a certain task that"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * the user has input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public FindCommand(String fullCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (super.input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"\\tDescription of item to find cannot be empty! Please try again!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cTask\u003e foundTasks \u003d tasks.findTasks(super.input.substring(5));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if(foundTasks.size()\u003d\u003d0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            ui.printOutput(\"\\tThere is no item that matches your description!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            ui.printOutput(\"\\tHere are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for ( int x \u003d 0; x \u003c foundTasks.size(); x++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ui.printOutput(\"\\t\" + (x+1) + \".\" + foundTasks.get(x).toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 41
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * List all tasks that logic.Duke currently has."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ListCommand(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * List out all tasks that logic.Duke is currently handling."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of all tasks logic.Duke has."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui Handles the output that the user sees."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Writing of the save file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (tasks.getTasks().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            ui.printOutput(\"\\tList is empty! Start adding some tasks\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            System.out.println(\"\\t Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Task current \u003d tasks.getTasks().get(i - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ui.printOutput(\"\\t\" + i + \".\" + current.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Lets main logic know that it can not stop running."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return False to prevent loop from exiting."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 43
    }
  },
  {
    "path": "src/main/java/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.ToDos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Adds the todos entry into logic.Duke\u0027s list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ToDoCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Executes the command to add the todos entry."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of tasks given."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui Handles the output to print."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Writes the save file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidInputException If input of todos is wrong."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If writing the save file goes wrong."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidInputException, InvalidSaveFileException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (super.input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"\\t☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ToDos task \u003d new ToDos(super.input.substring(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        tasks.getTasks().add(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ui.printOutput(\"\\tGot it. I\u0027ve added this task:\\n\" + \"\\t\"+task.toString() +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \"\\n\\tNow you have \" + tasks.getTasks().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Lets the main logic know that it can not quit yet."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return False to prevent the loop for exiting."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 47
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Parent exception class of all exceptions that"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * logic.Duke is expected to experience"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 12
    }
  },
  {
    "path": "src/main/java/exception/InvalidDateTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class InvalidDateTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public InvalidDateTimeFormatException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 8
    }
  },
  {
    "path": "src/main/java/exception/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 8
    }
  },
  {
    "path": "src/main/java/exception/InvalidSaveFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class InvalidSaveFileException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public InvalidSaveFileException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 8
    }
  },
  {
    "path": "src/main/java/logic/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents a logic.Duke object. Handles all the logic running"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * of logic.Duke"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private String fileLocation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Duke(String fileLocation) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.fileLocation \u003d fileLocation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.storage \u003d new Storage(fileLocation);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            this.taskList \u003d new TaskList(this.storage.readFile());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (InvalidSaveFileException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Driving method of logic.Duke, handles all the running process"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ui.showGreeting();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "khor-jingqian": 54
    }
  },
  {
    "path": "src/main/java/logic/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Takes in the input from the user and tries to make sense of it."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Throws error if input is incorrect"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The method that parses the input from the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param fullCommand User input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Command object that will execute the corresponding command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidInputException If input is gibberish."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static Command parse(String fullCommand) throws InvalidInputException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (fullCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new ExitCommand(fullCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new ListCommand(fullCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new DoneCommand(fullCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new ToDoCommand(fullCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new DeadlineCommand(fullCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new EventCommand(fullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 39
    }
  },
  {
    "path": "src/main/java/logic/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Deadlines;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Events;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.ToDos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Handles saving of the list and reading it upon startup."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private String fileLocation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Storage(String fileLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.fileLocation \u003d fileLocation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Called upon startup. Reads save file if there is one, else creates"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * a blank save file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return A List populated by the tasks.Task from previous save file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue with creating the save file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public List\u003cTask\u003e readFile() throws InvalidSaveFileException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cTask\u003e toDoList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        File dir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!dir.exists()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            File file \u003d new File(fileLocation);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                while (s.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String entry \u003d s.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    DateTimeFormatter dtf2 \u003d DateTimeFormatter.ofPattern(\"HH:mm MMM d yyyy\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    if (entry.startsWith(\"[T]\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        ToDos t \u003d new ToDos(entry.substring(7));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        if (entry.contains(\"✓\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                            t.completeTask();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        toDoList.add(t);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    } else if (entry.startsWith(\"[D]\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        int index \u003d entry.indexOf(\"(\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        String datetime \u003d entry.substring(index + 5, entry.length() - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        LocalDateTime ldt \u003d LocalDateTime.parse(datetime, dtf2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        Deadlines d \u003d new Deadlines(entry.substring(7, index-1),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                                ldt);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        if (entry.contains(\"✓\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                            d.completeTask();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        toDoList.add(d);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        int index \u003d entry.indexOf(\"(\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        String datetime \u003d entry.substring(index + 5, entry.length() - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        LocalDateTime ldt \u003d LocalDateTime.parse(datetime, dtf2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        Events e \u003d new Events(entry.substring(7, index-1),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                                ldt);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        if (entry.contains(\"✓\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                            e.completeTask();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        toDoList.add(e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidSaveFileException(\"Hmmmm....there is something wrong with the previous save file! We \" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    \"will have to write a new one!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return toDoList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Called every time the list is updated or logic.Duke is closed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param toDoList The current tasks in logic.Duke."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue creating or writing the save file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void saveFile(List\u003cTask\u003e toDoList) throws InvalidSaveFileException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        File dir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!dir.exists()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            FileWriter fw \u003d new FileWriter(fileLocation);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (int i\u003d0; i\u003ctoDoList.size();i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Task interim \u003d toDoList.get(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                String desc \u003d interim.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                fw.write(desc+\"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidSaveFileException(\"\\t☹ OOPS!!! logic.Duke is experiencing IO errors when writing to save file!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 106
    }
  },
  {
    "path": "src/main/java/logic/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Handles what the user will be seeing when running logic.Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    Scanner sc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Show user the greeting message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void showGreeting() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        System.out.println(\"\\tHello! I\u0027m logic.Duke\\n\\tWhat can I do for you?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Show error message thrown."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param errorMsg Error message of thrown error."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void showError(String errorMsg) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        System.out.println(errorMsg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Reads in the next input line from user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return The next input from user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Print the message according to the input given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param input Output for the user to read."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void printOutput(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        System.out.println(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 59
    }
  },
  {
    "path": "src/main/java/tasks/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the deadlines that the user wants to remember."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Deadlines(String taskDesc, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(taskDesc);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \"+ deadline.format(DateTimeFormatter.ofPattern(\"HH:mm MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 22
    }
  },
  {
    "path": "src/main/java/tasks/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the events that the user inputs."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    protected LocalDateTime timing;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Events(String taskDesc, LocalDateTime timing) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(taskDesc);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                timing.format(DateTimeFormatter.ofPattern(\"HH:mm MMM d yyyy\"))+ \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 23
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Parent class of all tasks that logic.Duke can handle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    protected String taskDesc;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    protected boolean taskStatus \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Task(String taskDesc) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.taskDesc \u003d taskDesc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * set the status of this task to be completed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void completeTask() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        taskStatus \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Depending on taskStatus, return a tick if complete, else a cross"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return a tick or cross, depending on taskStatus"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return ( taskStatus ? \"\\u2713\" : \"\\u2718\" );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return \"[\"+this.getIcon()+\"] \" + this.taskDesc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 34
    }
  },
  {
    "path": "src/main/java/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the List of all the tasks that logic.Duke"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * is handling this iteration"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns this Arraylist"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return the Arraylist that the class has"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Removes tasks.Task at the given index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param index Represents the index of the item to be removed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.taskList.remove(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public List\u003cTask\u003e findTasks(String keyword) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for( int m \u003d 0; m \u003c taskList.size(); m++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if(taskList.get(m).taskDesc.contains(keyword)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                newList.add(taskList.get(m));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 53
    }
  },
  {
    "path": "src/main/java/tasks/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the todos of the user that he input"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * into logic.Duke"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ToDos (String taskDesc) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(taskDesc);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 16
    }
  },
  {
    "path": "src/test/java/DeadlinesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Deadlines;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DeadlinesTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    static DateTimeFormatter dtf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    static LocalDateTime ldt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    static void init() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ldt \u003d LocalDateTime.parse(\"2020-08-23 18:00\",dtf);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Deadlines events \u003d new Deadlines(\"kiwis\", ldt);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \"[D][\"+\"\\u2718\"+\"] kiwis (by: 18:00 Aug 23 2020)\",events.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void completionTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Deadlines events \u003d new Deadlines(\"kiwis\", ldt);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        events.completeTask();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(\"[D][\"+\"\\u2713\"+\"] kiwis (by: 18:00 Aug 23 2020)\",events.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 33
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Events;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    static DateTimeFormatter dtf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    static LocalDateTime ldt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    static void init() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ldt \u003d LocalDateTime.parse(\"2020-08-23 18:00\",dtf);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Events events \u003d new Events(\"kiwis\", ldt);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \"[E][\"+\"\\u2718\"+\"] kiwis (at: 18:00 Aug 23 2020)\",events.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void completionTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Events events \u003d new Events(\"kiwis\", ldt);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        events.completeTask();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(\"[E][\"+\"\\u2713\"+\"] kiwis (at: 18:00 Aug 23 2020)\",events.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 34
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void testParsing() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertTrue(Parser.parse(\"event kiwis /at 2020-08-30 18:00\") instanceof Command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void testError() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Parser.parse(\"kiwis /at 2020-08-40 18:00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\",e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 28
    }
  },
  {
    "path": "src/test/java/ToDosTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.ToDos;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ToDosTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ToDos events \u003d new ToDos(\"kiwis\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \"[T][\"+\"\\u2718\"+\"] kiwis\",events.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void completionTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ToDos events \u003d new ToDos(\"kiwis\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        events.completeTask();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(\"[T][\"+\"\\u2713\"+\"] kiwis\",events.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 20
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "event"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deadline return book /by 2020-08-40 13:56"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deadline return book /by 2020-08-23 13:56"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "event project meeting /at 2020-08-40 13:58"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "event project meeting /at 2020-08-26 13:58"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 23
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\tasks\\*.java ..\\src\\main\\java\\exception\\*.java ..\\src\\main\\java\\command\\*.java ..\\src\\main\\java\\logic\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "java -classpath ..\\bin logic.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "khor-jingqian": 7
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/logic.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "java -classpath ../bin logic.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "khor-jingqian": 2
    }
  }
]
