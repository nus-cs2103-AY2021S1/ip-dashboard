[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 1,
      "-": 45
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "- delete a task: delete"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "- add a todo: todo"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "- add a deadline: deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "- add an event: event"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "- mark task as done: done"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "- find a task: find"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "- display all tasks: list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "- sort all tasks: sort"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "- exit duke application: bye"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Add Tasks  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Adds a task into the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Command: `todo` "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Adds a todo into the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`todo homework`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`Got it I\u0027ve added this task:`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`[T][X] homework`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`Now you have 1 tasks in the list.`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Command: `deadline` "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Adds a deadline into the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`deadline assignment /by 2020-03-04`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`Got it I\u0027ve added this task:`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`[D][X] assignment (by: Mar 4 2020)`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`Now you have 2 tasks in the list.`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Command: `event` "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Adds an event into the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`event meeting /at 2020-01-01`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`Got it I\u0027ve added this task:`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`[E][X] meeting (at: Jan 1 2020)`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`Now you have 3 tasks in the list.`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Delete Tasks  "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Deletes a task from the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Command: `delete` "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`Noted. I\u0027ve removed this task:`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`[D][X] assignment (by: Mar 4 2020)`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`Now you have 2 tasks in the list.`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Find Tasks  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Finds the tasks from the list which match the user input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Command: `find` "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`find meeting`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`Here are the matching tasks in your list:`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`[E][X] meeting (at: Jan 1 2020)`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Sort Tasks  "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Sorts all the tasks in the list according to date."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Command: `sort` "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`sort`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`Your list is now sorted!`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`Here are the tasks in your list:`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`[E][X] meeting (at: Jan 1 2020)`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`[E][X] project pitch (at: Feb 2 2020)`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### List Tasks  "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "List all the tasks in the task list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Command: `list` "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`Here are the tasks in your list:`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`[T][X] homework`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`[E][X] meeting (at: Jan 1 2020)`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Mark Tasks As Done"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Marks a task in the task list as done."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Command: `done` "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`Nice! I\u0027ve marked this task as done:`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`[E][✓] meeting (at: Jan 1 2020)`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Exit Duke Application"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Exits the application."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "### Command: `bye` "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "`bye`"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 142,
      "-": 13
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates an add command with a task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Represents the task which will be added into the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Task task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Instantiates an AddCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param task the task to be added into the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Adds a task into the task list, updates the storage "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * with the new task and displays the ui for the added task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param tasks the task list which the task is to be added into."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param ui the ui used to display the added task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param storage the storage used to store the updated task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of the task to be added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when saving "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * the task list into the storage fails."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ui.showAddedTask(task, tasks.taskListLength());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 39
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates the Command object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Supports the functions execute and isExit."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 11
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a Deadline object."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Saves whether the task is done or not into storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"D\" + super.saveTask() + \" | \" + by;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 34
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a delete command with an index"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * which specifies the specific task to be deleted."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Represents the index of the task to be deleted."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Instantiates a DeleteCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param index the unique index of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Deletes the specified task, updates the task list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * in storage and displays the UI for the deleted task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param tasks the task list which the task is to be deleted from."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param ui the ui used to display the deleted task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param storage the storage used to store the updated task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of the task to be deleted."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * saving the task list into storage fails."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Task deletedTask \u003d tasks.deleteTask(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ui.showDeletedTask(deletedTask, tasks.taskListLength());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 40
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a DoneCommand with an index"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * which specifies the specific task as done."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Represents the index of the task to be marked as done."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Instantiates a DoneCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param index the index of the task to be marked as done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Marks the specified task as done, updates the "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * task list with the task that is marked as done "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * and displays the UI for the done task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param tasks the task list which the task is to be marked as done from."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param ui the ui used to display the done task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param storage the storage used to store the updated task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of the task to be marked as done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when saving"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * the task list into the storage fails."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Task task \u003d tasks.doneTask(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ui.showDone(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 41
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates the Duke object with a Storage object, "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * TaskList object, and Ui object. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Supports the method getResponse which takes in an"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * user input and returns a response."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Represents the storage object which loads and stores data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Represents the taskList object which maintains the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Represents the ui object which displays the response to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//        ui.showWelcome();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//        while (!isExit) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//            } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//            } finally {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                ui.showLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        new Duke(\"taskList.txt\").run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 51,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a DukeException object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 8
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates an Event object."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Saves whether the task is done or not into storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"E\" + super.saveTask() + \" | \" + at;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 33
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates an exit command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Saves all the tasks in the task list into the "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * storage and displays the ui for goodbye message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param tasks the current task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param ui the ui used to display the goodbye message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param storage the storage used to store the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of the goodbye message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when saving"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * the task list into the storage fails."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ui.showBye();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 26
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a find command with an input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Represents the input string used to find certain tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    String input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Instantiates a FindCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param input the input string used to find certain tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Finds the tasks in the task list which matches the input string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param tasks the task list to find the tasks from."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param ui the ui used to display the tasks which match the input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param storage the storage used to store the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of the tasks which match the input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String matches \u003d tasks.findTask(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ui.showTasksFound(matches);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 35
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a list command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Displays all the tasks in the taskList."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param tasks the task list with tasks to be displayed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param ui the ui used to display all the tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param storage the storage used to store the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of all the tasks in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ui.showList(tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 21
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javax.swing.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                DialogBox.getDukeDialog(duke.showWelcomeMessage(), userImage)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (duke.isFinished) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 59
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a parser object which scans user input."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns a command depending on the input string."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param s the string."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return Command which specifies the action taken."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException unidentified strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when the format is wrong."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static Command parse(String s) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assert s.length() \u003e 0 : \"input should not be empty\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.equals(\"list\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.equals(\"bye\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            int index \u003d parseDone(s);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            int index \u003d parseDelete(s);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            Todo todo \u003d parseTodo(s);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new AddCommand(todo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            Event event \u003d parseEvent(s);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new AddCommand(event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            Deadline deadline \u003d parseDeadline(s);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new AddCommand(deadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new FindCommand(parseFind(s));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.equals(\"sort\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns an integer specifying the index"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * of the task to be marked as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param s the string input starting with \"done\"."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return an integer which represents the index of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when the format is wrong."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static int parseDone(String s) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int DONE_WITH_SPACING \u003d 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final String ERROR_MESSAGE \u003d \"ERROR: wrong format for done command\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.startsWith(\"done \") \u0026\u0026 s.length() \u003e DONE_WITH_SPACING) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                int index \u003d Integer.parseInt(s.substring(DONE_WITH_SPACING));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                return index - 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns an integer representing the index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * of the task to be deleted from taskList."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param s the string input starting with \"delete\"."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return an integer."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when the format is wrong."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static int parseDelete(String s) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int DELETE_WITH_SPACING \u003d 7;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final String ERROR_MESSAGE \u003d \"ERROR: wrong format for delete command\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.startsWith(\"delete \") \u0026\u0026 s.length() \u003e DELETE_WITH_SPACING) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                int index \u003d Integer.parseInt(s.substring(DELETE_WITH_SPACING));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                return index - 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns the input string to be used to find matching tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param s the string input starting with \"find\"."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the user input string."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when the format is wrong."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static String parseFind(String s) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int FIND_WITH_SPACING \u003d 5;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.startsWith(\"find \") \u0026\u0026 s.length() \u003e FIND_WITH_SPACING) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return s.substring(FIND_WITH_SPACING);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final String ERROR_MESSAGE \u003d \"ERROR: wrong format for find command\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns a todo to be added into taskList."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param s the string input starting with \"todo\"."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a todo object."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when the format is wrong."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static Todo parseTodo(String s) throws DukeException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int TODO_WITH_SPACING \u003d 5;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.equals(TODO) || s.equals(TODO + \" \")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final String EMPTY_DESCRIPTION_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    \"ERROR: The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.startsWith(TODO + \" \") \u0026\u0026 s.length() \u003e TODO_WITH_SPACING) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new Todo(s.substring(TODO_WITH_SPACING));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final String ERROR_MESSAGE \u003d \"ERROR: wrong format for todo command\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns a deadline to be added into taskList."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param s the string input starting with \"deadline\"."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a deadline."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when the format is wrong."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static Deadline parseDeadline(String s) throws DukeException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int DEADLINE_WITH_SPACING \u003d 9;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final String EMPTY_DESCRIPTION_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                \"ERROR: The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.equals(DEADLINE) || s.equals(DEADLINE + \" \")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final String BY \u003d \" /by \";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.startsWith(DEADLINE + \" \") \u0026\u0026 s.length() \u003e DEADLINE_WITH_SPACING \u0026\u0026 s.contains(BY)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final String SLASH \u003d \"/\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            int index \u003d s.indexOf(SLASH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String trimmedDescription \u003d s.substring(DEADLINE_WITH_SPACING, index).trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            if (trimmedDescription.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(EMPTY_DESCRIPTION_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final int DEADLINE_DATE_INDEX \u003d index + 4;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            if (s.substring(DEADLINE_DATE_INDEX).equals(\"\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                final String DATE_ERROR_MESSAGE \u003d \"ERROR: deadline missing date.\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(DATE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String description \u003d s.substring(DEADLINE_WITH_SPACING, index - 1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String deadlineDate \u003d s.substring(DEADLINE_DATE_INDEX);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(deadlineDate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                return new Deadline(description, date);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                final String DATE_FORMAT_MESSAGE \u003d \"deadline date must be in the format YYYY-MM-DD\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(DATE_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final String ERROR_MESSAGE \u003d \"ERROR: wrong format for deadline command\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns an event to be added into taskList."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param s the string input starting with \"event\"."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return an event object."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when the format is wrong."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static Event parseEvent(String s) throws DukeException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int EVENT_WITH_SPACING \u003d 6;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final String EMPTY_DESCRIPTION_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                \"ERROR: The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.equals(EVENT) || s.equals(EVENT + \" \")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final String AT \u003d \" /at \";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.startsWith(EVENT + \" \") \u0026\u0026 s.length() \u003e EVENT_WITH_SPACING \u0026\u0026 s.contains(AT)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final String SLASH \u003d \"/\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            int index \u003d s.indexOf(SLASH);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String trimmedDescription \u003d s.substring(EVENT_WITH_SPACING, index).trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            if (trimmedDescription.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(EMPTY_DESCRIPTION_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final int EVENT_DATE_INDEX \u003d index + 4;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            if (s.substring(EVENT_DATE_INDEX).equals(\"\")) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                final String DATE_ERROR_MESSAGE \u003d \"ERROR: event missing date.\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(DATE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String description \u003d s.substring(EVENT_WITH_SPACING, index - 1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String eventDate \u003d s.substring(EVENT_DATE_INDEX);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(eventDate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                return new Event(description, date);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                final String DATE_FORMAT_MESSAGE \u003d \"event date must be in the format YYYY-MM-DD\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(DATE_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final String ERROR_MESSAGE \u003d \"ERROR: wrong format for event command\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 217
    }
  },
  {
    "path": "src/main/java/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a sort command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Sorts the tasks by date and displays the task list in chronological order."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param tasks the task list with tasks to be sorted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param ui the ui used to display the sorted task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param storage the storage used to store the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of the task list in sorted order."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        tasks.sortTasksByDate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ui.showSortedList(tasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 23
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.io.FilterOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a storage object with a file path."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Loads and saves data onto the hard disk."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Instantiates a storage object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param filePath the path in which the data is saved."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Loads the data from the hard disk."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the task list saved in the hard disk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when the file is not found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            File file \u003d new File(\"taskList.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            if (!file.createNewFile()) { // file already exists"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                Scanner fileScanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                while (fileScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    String data \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    Task newTask \u003d readFiles(data);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    list.add(newTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                fileScanner.close();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(\"ERROR: file not found.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Saves the updated task list onto the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param list the task list to be updated."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when the task list fails to be saved."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void save(TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(\"taskList.txt\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            for (Task task : list.taskList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                fileWriter.write(task.saveTask() + \"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final String ERROR_MESSAGE \u003d \"ERROR: failed to save changes.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Reads the data from the hard disk."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param data the data to be read from the hard disk."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the task read from the hard disk."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *                       when the format of the command is wrong."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Task readFiles(String data) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assert data.length() \u003e 0 : \"input should not be empty\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int IS_DONE_INDEX \u003d 4;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int START_OF_DESCRIPTION_INDEX \u003d 8;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (data.startsWith(\"T\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            task \u003d new Todo(data.substring(START_OF_DESCRIPTION_INDEX));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            int index \u003d data.lastIndexOf(\"|\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final int DATE_AND_TIME_INDEX \u003d index + 2;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String description \u003d data.substring(START_OF_DESCRIPTION_INDEX, index - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String dateString \u003d data.substring(DATE_AND_TIME_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                if (data.startsWith(\"E\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    task \u003d new Event(description, date);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                } else if (data.startsWith(\"D\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    task \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    final String ERROR_MESSAGE \u003d \"ERROR: unknown task\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                final String ERROR_MESSAGE \u003d \"Please key in the date in the format YYYY-MM-DD\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (data.charAt(IS_DONE_INDEX) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 110
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a Task object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Saves whether the task is done or not into storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String doneOrNot \u003d isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \" | \" + doneOrNot + \" | \" + description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 42
    }
  },
  {
    "path": "src/main/java/TaskComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Implements a comparator for tasks to compare the dates of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class TaskComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Compares the two tasks to determine which comes first."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * The basis of comparison is the task\u0027s date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param task1 one of the two tasks that is being compared."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param task2 the other task that is being compared."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return an integer -1, 0 or 1."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return task1.getDate().compareTo(task2.getDate());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 19
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a TaskList object with an arraylist of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public int taskListLength() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Adds a task to the task list and returns the added task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param task the task to be added to the task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the task to be added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Task addTask(Task task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Updates the task and returns the updated task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param index the index of the task to be updated."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param update the consumer to be applied to the task to be updated."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the task to be updated."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when the task index is out of range."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Task updateTask(int index, Consumer\u003cTask\u003e update) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assert index \u003e 0 : \"index cannot be zero or negative\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            Task task \u003d taskList.get(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            update.accept(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final String ERROR_MESSAGE \u003d \"ERROR: task index out of range\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Deletes the task from the task list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param index the index of the task to be deleted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the task to be deleted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when the task index is out of range."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Task deleteTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return updateTask(index, task -\u003e taskList.remove(task));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param index the index of the task to be marked as done."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the task to be marked as done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when the task index is out of range."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Task doneTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "       return updateTask(index, Task::markAsDone); "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Finds the tasks which matches the input in the task list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param display the user input."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of the tasks which matches the input."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String findTask(String display) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assert display.length() \u003e 0 : \"input cannot be empty\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        StringBuilder matches \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        for (Task value : taskList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            if (value.description.contains(display)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                matches.append(value.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return matches.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Sorts all the tasks in the task list by date."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void sortTasksByDate() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        TaskComparator taskComparator \u003d new TaskComparator();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        PriorityQueue\u003cTask\u003e priorityQueue \u003d new PriorityQueue\u003c\u003e(taskComparator);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        priorityQueue.addAll(taskList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        while (! priorityQueue.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            sortedTaskList.add(priorityQueue.poll());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        taskList \u003d sortedTaskList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 105
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a Todo object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return LocalDate.MIN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Saves whether the task is done or not into storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"T\" + super.saveTask();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 30
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates an Ui object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Displays messages according to the user input."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"ERROR: file does not exist.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showError(String msg) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"Welcome to Duke - your personal task organizer!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showBye() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showDeletedTask(Task task, int length) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assert length \u003e\u003d 0 : \"length must not be negative\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\" + task + \"\\n\" "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + \"Now you have \" + length + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showAddedTask(Task task, int length) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assert length \u003e\u003d 0 : \"length must not be negative\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\" + task + \"\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + \"Now you have \" + length + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showDone(Task task) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\" + task + \"\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showList(TaskList taskList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        StringBuilder display \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (taskList.taskListLength() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return \"You have no tasks!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            display.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.taskListLength(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                Task task \u003d taskList.getTaskList().get(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                display.append(i + 1).append(\". \").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return display.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    } "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showTasksFound(String s) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"Here are the matching tasks in your list:\\n\" + s;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showSortedList(TaskList taskList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"Your list is now sorted!\\n\" + showList(taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 64
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" minHeight\u003d\"-Infinity\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 22
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 19
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "// unable to import fail for fail()"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void stringToIntConversion_includeInteger_success() throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertEquals(1, Parser.parseDelete(\"delete 2\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertEquals(6, Parser.parseDelete(\"delete 7\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void stringToIntConversion_excludeInteger_exceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            assertEquals(1, Parser.parseDelete(\"delete\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            // fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            assertEquals(\"ERROR: Specify the task number which you want to delete.\", e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void stringToTodoConversion_includeDescription_success() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertEquals(\"[T][✘] read book\", Parser.parseTodo(\"todo read book\").toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertEquals(\"[T][✘] borrow book\", Parser.parseTodo(\"todo borrow book\").toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void stringToTodoConversion_excludeDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            assertEquals(new Todo(\"\"), Parser.parseTodo(\"todo\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            // fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a todo cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 38
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 8
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 2,
      "-": 37
    }
  }
]
