[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    mainClassName \u003d \"PandaBot\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    archiveBaseName \u003d \"PandaBot\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 11,
      "-": 44
    }
  },
  {
    "path": "src/main/java/pandabot/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents an add command which allows users to add tasks to the TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates an AddCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Executes the addition of tasks. The user will be notified through the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * printed messages by the ui and the current tasks are saved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param tasks the current TaskList object being used"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param ui the current Ui object being used"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param storage the current Storage object being used"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws PandaBotException If any errors occurs when executing the command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws PandaBotException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // add the task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // print"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        ui.printOnAddTask(task, tasks.size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // save"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        storage.write(tasks.getTaskList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 42
    }
  },
  {
    "path": "src/main/java/pandabot/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a bye command which allows users to exit the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Executes the bye command, where the program stops running and exits."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * The user will be notified through printed messages by the ui."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param tasks the current TaskList object being used"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param ui the current Ui object being used"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param storage the current Storage object being used"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        ui.printOnExit();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns true if the program should exit."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Otherwise, returns false if the program should continue to run."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return true as the program exits on bye command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 35
    }
  },
  {
    "path": "src/main/java/pandabot/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a Command, which is an abstract class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * The Command class is used to execute a command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Executes the command. The user will be notified through the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * printed messages by the ui and the current tasks are saved."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param tasks the current TaskList object being used"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param ui the current Ui object being used"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param storage the current Storage object being used"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws PandaBotException If any errors occurs when executing the command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws PandaBotException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns true if the program should exit."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Otherwise, returns false if the program should continue to run."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return false by default as the program is still running"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 34
    }
  },
  {
    "path": "src/main/java/pandabot/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a delete command which allows users to delete tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a DeleteCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param taskNum the task number to be deleted"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Executes the deletion of tasks. The user will be notified through the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * printed messages by the ui and the tasks remaining are saved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param tasks the current TaskList object being used"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param ui the current Ui object being used"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param storage the current Storage object being used"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws PandaBotException If any errors occurs when executing the command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws PandaBotException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // delete task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Task t \u003d tasks.getTaskAt(taskNum);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        tasks.deleteTask(taskNum);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // print"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        ui.printOnDelete(t, tasks.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // save"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        storage.write(tasks.getTaskList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 45
    }
  },
  {
    "path": "src/main/java/pandabot/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents the done command which allows users to mark a task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private int taskNum;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a DoneCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param taskNum the task number that is done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public DoneCommand(int taskNum) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Executes marking the task as done. The user will be notified through the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * printed messages by the ui and the tasks are saved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param tasks the current TaskList object being used"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param ui the current Ui object being used"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param storage the current Storage object being used"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws PandaBotException If any errors occurs when executing the command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws PandaBotException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // mark as done"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Task t \u003d tasks.getTaskAt(taskNum);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        t.markTaskDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // print"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        ui.printOnDone(tasks.getTaskAt(taskNum));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // save the changes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        storage.write(tasks.getTaskList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 46
    }
  },
  {
    "path": "src/main/java/pandabot/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a find command which allows users to search for tasks with description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * that matches the search word."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private String toMatch;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a FindCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param toMatch the word used in the search for tasks with matching descriptions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public FindCommand(String toMatch) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.toMatch \u003d toMatch;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Executes the finding of tasks. The user will be notified of the matching tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * through the printed messages by the ui."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param tasks the current TaskList object being used"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param ui the current Ui object being used"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param storage the current Storage object being used"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws PandaBotException If any errors occurs when executing the command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws PandaBotException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // find"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        TaskList matchingTasks \u003d tasks.findTask(toMatch);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // print"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        ui.printOnFind(matchingTasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 41
    }
  },
  {
    "path": "src/main/java/pandabot/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a list command which allows users to view the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * current list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Executes the list command, where the list of tasks will be printed by the ui."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param tasks the current TaskList object being used"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param ui the current Ui object being used"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param storage the current Storage object being used"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        ui.printOnList(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 25
    }
  },
  {
    "path": "src/main/java/pandabot/exceptions/PandaBotEmptyTaskDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a type of PandaBotException which is thrown when the task description is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class PandaBotEmptyTaskDescriptionException extends PandaBotException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a PandaBotEmptyTaskDescriptionException object which is used to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * show that the description of the task is empty."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param taskName the name of the task that has an empty description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public PandaBotEmptyTaskDescriptionException(String taskName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        super(String.format(\":c OOPS! The description of the %s cannot be empty.\", taskName));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 17
    }
  },
  {
    "path": "src/main/java/pandabot/exceptions/PandaBotException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " *  Represents a general exception thrown by PandaBot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class PandaBotException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a PandaBotException object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param msg the error message to show"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public PandaBotException(String msg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 16
    }
  },
  {
    "path": "src/main/java/pandabot/exceptions/PandaBotInsufficientArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a type of PandaBotException which is thrown when insufficient"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * number of arguments is passed into a method."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class PandaBotInsufficientArgumentException extends PandaBotException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a new PandaBotInsufficientArgumentException object which"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * is used to show that there is insufficient number of arguments passed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * into a method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public PandaBotInsufficientArgumentException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        super(\"OOPS! Insufficient arguments given. Make sure you give me all the details!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 17
    }
  },
  {
    "path": "src/main/java/pandabot/exceptions/PandaBotInvalidArgumentFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a type of PandaBotException which is thrown when an an invalid input"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * is passed as an argument into a method."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class PandaBotInvalidArgumentFormatException extends PandaBotException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a new PandaBotInvalidArgumentFormatException object which"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * is used to show that an invalid input is passed as an argument"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * into a method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public PandaBotInvalidArgumentFormatException(String msg) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        super(\"Invalid format given: \" + msg);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 17
    }
  },
  {
    "path": "src/main/java/pandabot/exceptions/PandaBotInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a type of PandaBotException which is thrown when the user passes in"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * an invalid command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class PandaBotInvalidCommandException extends PandaBotException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a new PandaBotInvalidCommandException object which"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * is used to show that the command passed cannot be recognised and is invalid."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public PandaBotInvalidCommandException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        super(\"OOPS! I\u0027m sorry, but I don\u0027t know what that means :c\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 16
    }
  },
  {
    "path": "src/main/java/pandabot/exceptions/PandaBotLoadingTasksErrorException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a type of PandaBotException which is thrown when there is an error in"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * loading a task from the save file."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class PandaBotLoadingTasksErrorException extends PandaBotException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a new PandaBotLoadingTasksErrorException object which"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * is used to show that there is an error with loading a task from the save file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public PandaBotLoadingTasksErrorException(String msg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        super(\"Error in loading the task: \" + msg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 16
    }
  },
  {
    "path": "src/main/java/pandabot/exceptions/PandaBotOutOfRangeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a type of PandaBotException which is thrown when a value is exceeds"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * the range of values available."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class PandaBotOutOfRangeException extends PandaBotException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a new PandaBotOutOfRangeException object which"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * is used to show that there a value exceeded the range available."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public PandaBotOutOfRangeException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        super(\"Task number given is not in range. Which task are you referring to?\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 16
    }
  },
  {
    "path": "src/main/java/pandabot/pandabot/PandaBot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.pandabot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents the main driver of the PandaBot program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class PandaBot {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a new PandaBot object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param fileName the file name of the save file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public PandaBot(String fileName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        storage \u003d new Storage(fileName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Runs the PandaBot program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        ui.printWelcome();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // runs the program"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                String fullCommand \u003d ui.readCmd();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                ui.printLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            } catch (PandaBotException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Executes the PandaBot program."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param args command line arguments"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        new PandaBot(\"PandaBot_Save.txt\").run();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 61
    }
  },
  {
    "path": "src/main/java/pandabot/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.commands.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotInsufficientArgumentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotInvalidArgumentFormatException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotInvalidCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.ToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a parser that is able to make sense of the user input commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Parses a String command into actual commands that PandaBot can perform."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param input the input command to be parsed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a Command that the program understands"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws PandaBotException If the input cannot be understood or is invalid"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static Command parse(String input) throws PandaBotException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String[] cmd \u003d input.split(\" \", 2); // obtain first word and the rest of the string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        switch(cmd[0]) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            verifyArguments(cmd, 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                int i \u003d Integer.parseInt(cmd[1]) - 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                return new DoneCommand(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                throw new PandaBotInvalidArgumentFormatException(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            verifyArguments(cmd, 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                int j \u003d Integer.parseInt(cmd[1]) - 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                return new DeleteCommand(j);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                throw new PandaBotInvalidArgumentFormatException(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            verifyArguments(cmd, 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return new AddCommand(new ToDo(cmd[1]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            verifyArguments(cmd, 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            String[] deadlineDes \u003d obtainDes(cmd[1], \"/by \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return new AddCommand(new Deadline(deadlineDes[0], deadlineDes[1]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            verifyArguments(cmd, 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            String[] eventDes \u003d obtainDes(cmd[1], \"/at \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return new AddCommand(new Event(eventDes[0], eventDes[1]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            verifyArguments(cmd, 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return new FindCommand(cmd[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new PandaBotInvalidCommandException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private static void verifyArguments(String[] cmd, int len) throws PandaBotInsufficientArgumentException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (cmd.length \u003c len) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new PandaBotInsufficientArgumentException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private static String[] obtainDes(String des, String separator) throws PandaBotInsufficientArgumentException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String[] res \u003d des.split(separator, 2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        verifyArguments(res, 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 84
    }
  },
  {
    "path": "src/main/java/pandabot/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotLoadingTasksErrorException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents the storage class, which is responsible for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * loading and saving tasks into the save file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private Path saveFilePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a Storage object, which is used to load and save tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * into a save file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param fileName the name of the save file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public Storage(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Path dirPath \u003d Paths.get(home, \"PandaBot\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        boolean directoryExists \u003d Files.exists(dirPath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // create a dir for save files to be saved in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (!directoryExists) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                java.nio.file.Files.createDirectory(dirPath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Path saveFilePath \u003d Paths.get(home, \"PandaBot\", fileName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        boolean saveFileExists \u003d Files.exists(saveFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // create a save file where the data will be written to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (!saveFileExists) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                Files.createFile(saveFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.saveFilePath \u003d saveFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Loads contents from the save file into an ArrayList of Task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a list of tasks as an ArrayList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            BufferedReader reader \u003d Files.newBufferedReader(saveFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            loadTask(tasks, reader);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            System.out.println(\"OOPS! :c There was an error in reading save file: \" + e.getMessage() + \"\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                                + \"I\u0027ll get you a new save file!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private void loadTask(ArrayList\u003cTask\u003e tasks, BufferedReader reader) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String task;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        while ((task \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            // convert the line read into a task"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                tasks.add(convertToTask(task));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            } catch (PandaBotException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private Task convertToTask(String input) throws PandaBotException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String[] tDes \u003d input.split(\" \\\\| \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        switch (tDes[0]) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            task \u003d new ToDo(tDes[2]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            task \u003d new Deadline(tDes[2], tDes[3]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            task \u003d new Event(tDes[2], tDes[3]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new PandaBotLoadingTasksErrorException(input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // update the done status"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String isDone \u003d tDes[1];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (isDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            task.markTaskDone();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Writes each task in the list of tasks into the save file."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param tasks the ArrayList of tasks to be written and saved"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void write(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            BufferedWriter writer \u003d Files.newBufferedWriter(saveFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            for (Task t : tasks) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                writer.write(t.saveAsText());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                writer.newLine();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            System.out.println(\"OOPS! :c There is an error in trying to write to the save file.\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                                + \"I can\u0027t save the entire list of tasks here.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 140
    }
  },
  {
    "path": "src/main/java/pandabot/tasks/DateAndTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Allows PandaBot to understand date and time in the format of dd/mm/yyyy hhmm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class DateAndTime {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a DateAndTime object by taking in an input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * of the format dd/mm/yyyy hhmm."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param date a String of the format dd/mm/yyyy"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param time a String of the format hhmm"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws DateTimeParseException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public DateAndTime (String date, String time) throws DateTimeParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.date \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.time \u003d LocalTime.parse(time, DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private String parseDate(LocalDate input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // Day of Month Counter"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String ending;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        int day \u003d date.getDayOfMonth();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        switch (day % 10) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            ending \u003d \"st\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            ending \u003d \"nd\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            ending \u003d \"rd\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            ending \u003d \"th\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return day + ending + \" of \" + date.format(DateTimeFormatter.ofPattern(\"MMMM yyyy\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private String parseTime(LocalTime input) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (input.getMinute() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return time.format(DateTimeFormatter.ofPattern(\"ha\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return time.format(DateTimeFormatter.ofPattern(\"h.mma\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns a String representation of the DateAndTime object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * in the format date of month year, hour.min AM/PM."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a String representation of the DateAndTime object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return parseDate(date) + \", \" + parseTime(time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 67
    }
  },
  {
    "path": "src/main/java/pandabot/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotInsufficientArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * The Deadline class represents a Deadline task which needs to be"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * done before a specific time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private String dueBy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a Deadline object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * It can accept both formatted and unformatted due dates."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Formatted due dates have to be in the format: dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param description the description of the Deadline task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param dueBy the due date and time of the Deadline task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws PandaBotException If the description or due date given is empty"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public Deadline(String description, String dueBy) throws PandaBotException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String input \u003d dueBy.strip();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new PandaBotInsufficientArgumentException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // check if a formatted date and time is given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String[] dT \u003d input.split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (dT.length \u003e 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                DateAndTime dateTime \u003d new DateAndTime(dT[0], dT[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                this.dueBy \u003d dateTime.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                // couldn\u0027t parse the input -\u003e unformatted deadline"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                this.dueBy \u003d dueBy;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            this.dueBy \u003d dueBy;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns a String representation of the task that is displayed to the user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a String Representation of the task that is displayed to the user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dueBy + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns a String representation of the task for saving to the save file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a String representation of the task for saving to the save file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String saveAsText() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return \"D | \" + super.saveAsText() + \" | \" + dueBy;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 66
    }
  },
  {
    "path": "src/main/java/pandabot/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotInsufficientArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents an event which is a type of task that starts at a specific time"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * and ends at a specific time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates an Event object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param description the description of the Event task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param duration the duration of the Event task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws PandaBotException If description or duration given is empty"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public Event(String description, String duration) throws PandaBotException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String d \u003d duration.strip();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // check if the duration is not empty"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (d.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new PandaBotInsufficientArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            this.duration \u003d d;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns a String representation of the task that is displayed to the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a String Representation of the task that is displayed to the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + duration + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns a String representation of the task for saving to the save file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a String representation of the task for saving to the save file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String saveAsText() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return \"E | \" + super.saveAsText() + \" | \" + duration;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 51
    }
  },
  {
    "path": "src/main/java/pandabot/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotEmptyTaskDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a Task, which is an abstract class that can be used to represent"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * different types of tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a Task object with the given description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws PandaBotEmptyTaskDescriptionException If the description given is empty"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public Task(String description) throws PandaBotEmptyTaskDescriptionException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.description \u003d description.strip();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (this.description.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new PandaBotEmptyTaskDescriptionException(this.getClass().getSimpleName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns a String that represents a status icon"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * which marks whether the task is done"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a String that represents a status icon which marks whether the task is done"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns a String representation of the task that is displayed to the user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a String Representation of the task that is displayed to the user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns a String representation of the task for saving to the save file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a String representation of the task for saving to the save file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String saveAsText() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return String.format(\"%d | %s\", (isDone ? 1 : 0), description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void markTaskDone() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 67
    }
  },
  {
    "path": "src/main/java/pandabot/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotOutOfRangeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " *  Represents Tasks in a TaskList object and stores the various Tasks in a TaskList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a TaskList object that stores the tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param taskList an ArrayList of tasks to be stored"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns the list of tasks stored."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return an ArrayList of tasks stored"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns the task in the list based on the index given."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param index the index of the task in the list of tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return the task requested"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws PandaBotOutOfRangeException If the index given is negative or"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * greater than the number of tasks stored"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public Task getTaskAt(int index) throws PandaBotOutOfRangeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return taskList.get(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new PandaBotOutOfRangeException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return the number of tasks in the list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Deletes the task from the list at the given index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param index the index of the task in the list of tasks"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws PandaBotOutOfRangeException If the index given is negative or"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * greater than the number of tasks stored"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void deleteTask(int index) throws PandaBotOutOfRangeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            taskList.remove(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new PandaBotOutOfRangeException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Adds a task to the list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Finds the tasks among the list of tasks, where their descriptions"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * contains the given input to match."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param toMatch the word used in the search for tasks with matching descriptions"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a TaskList containing the list of tasks with matching descriptions"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public TaskList findTask(String toMatch) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            if (t.getDescription().contains(toMatch)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                matchingTasks.add(t);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return new TaskList(matchingTasks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 98
    }
  },
  {
    "path": "src/main/java/pandabot/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotEmptyTaskDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents a ToDo task, which is a type of task without any date or time attached to it"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a ToDo object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param description the description of the ToDo task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws PandaBotEmptyTaskDescriptionException If the description given is empty"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public ToDo(String description) throws PandaBotEmptyTaskDescriptionException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns a String representation of the task that is displayed to the user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a String Representation of the task that is displayed to the user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns a String representation of the task for saving to the save file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a String representation of the task for saving to the save file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String saveAsText() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return \"T | \" + super.saveAsText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 39
    }
  },
  {
    "path": "src/main/java/pandabot/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package pandabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " *  Represents the user interface which prints messages to interact with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a Ui object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public Ui () {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Prints the welcome logo."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void printWelcome() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                \" ____                    _\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                        + \"|  _ \\\\                  | |\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                        + \"| |_| |___  _ _  __  ___| | ___  _\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                        + \"| ___/  _ \\\\| | |/  |/ _   |/ _ \\\\| |\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                        + \"| |  | |_|   |  _  | |_|  | |_|   |\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                        + \"|_|  \\\\____,__|_| |_|\\\\___,_|\\\\___,__|\" + \" bot\\n\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        System.out.println(logo + \"Hello! I\u0027m PandaBot.\\n\" + \"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Prints a horizontal line."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        System.out.println(\" ___________________________________________________\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns a String representation of the user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a String representation of the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String readCmd() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Prints an error message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param message the error message to be printed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void printError(String message) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Prints the bye message."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void printOnExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        System.out.println(\"Bye! Remember to finish the rest of your work! See you soon~\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Prints the entire list of tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param tasks the TaskList to be printed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void printOnList(TaskList tasks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        int len \u003d tasks.size();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (len \u003d\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            System.out.println(\"WOOTS! You don\u0027t have any tasks to do at the moment.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            System.out.println(\"These are the task(s) you have:\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            for (Task t : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                if (t !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                    System.out.println((i + 1) + \". \" + t.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Prints the done message."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param task the task that is done"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void printOnDone(Task task) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        System.out.println(\"Great! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Prints the delete message."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param task the Task to be deleted"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param numOfTasks the number of tasks in the list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void printOnDelete(Task task, int numOfTasks) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        System.out.println(\"Will do! I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        System.out.println(\"Now you have \" + numOfTasks + \" task(s) in this list.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Prints the add task message."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param task the Task to be printed"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param numOfTasks the number of tasks in the list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void printOnAddTask(Task task, int numOfTasks) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        System.out.println(\"Noted! I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        System.out.println(\"Now you have \" + numOfTasks + \" task(s) in this list.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Prints the tasks with matching description."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param tasks the TaskList which contains the tasks with matching description."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void printOnFind(TaskList tasks) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        System.out.println(\"Here are the matching tasks:\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        for (Task t : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            if (t !\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                System.out.println((i + 1) + \". \" + t.toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 144
    }
  },
  {
    "path": "src/test/java/DateAndTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.DateAndTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class DateAndTimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void dateTime_passedInCorrectInputFormat_correctStringFormat() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        //set up"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        DateAndTime dT \u003d new DateAndTime(\"26/08/2020\", \"2359\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String dTStr \u003d dT.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(\"26th of August 2020, 11.59PM\", dTStr);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void dateTime_passedInIncorrectInputFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Exception exception \u003d assertThrows(DateTimeParseException.class, () -\u003e new DateAndTime("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                \"26-08-2020\", \"2300\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String expected \u003d \"Text \u002726-08-2020\u0027 could not be parsed at index 2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String actual \u003d exception.getMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(actual.contains(expected));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 32
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotEmptyTaskDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.exceptions.PandaBotOutOfRangeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import pandabot.tasks.ToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void addTask_addThreeTasks_successful() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        //set up"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Task a \u003d new ToDo(\"a\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Task b \u003d new ToDo(\"b\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Task c \u003d new ToDo(\"c\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            //add"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            tasks.addTask(a);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            tasks.addTask(b);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            tasks.addTask(c);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } catch (PandaBotEmptyTaskDescriptionException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        //test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(3, tasks.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void deleteAndAddTask_deleteTwoTasksThenAddOneTask_successful() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        //set up"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Task a \u003d new ToDo(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Task b \u003d new ToDo(\"b\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Task c \u003d new ToDo(\"c\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            tasks.addTask(a);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            tasks.addTask(b);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            tasks.addTask(c);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            //delete and add"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            tasks.deleteTask(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            tasks.deleteTask(1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            tasks.addTask(new ToDo(\"d\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } catch (PandaBotEmptyTaskDescriptionException | PandaBotOutOfRangeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        //test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(2, tasks.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void deleteTask_taskOutOfRange_exceptionThrownAndNotDeleted() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        //set up"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Task a \u003d new ToDo(\"a\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Task b \u003d new ToDo(\"b\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            tasks.addTask(a);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            tasks.addTask(b);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            //delete"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            tasks.deleteTask(4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } catch (PandaBotEmptyTaskDescriptionException | PandaBotOutOfRangeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        //test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertNotEquals(1, tasks.size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 80
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "todo return book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "deadline cs2103t /by 26/08/2020 2359"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "todo buy bread"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "event project meeting /at sun 4pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "done 7"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "event /at today"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "deadline today"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "bbye"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 19
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "java -classpath ..\\bin PandaBot \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 4,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/PandaBot.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "java -classpath ../bin PandaBot \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 2,
      "-": 36
    }
  }
]
