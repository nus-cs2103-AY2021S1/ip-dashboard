[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "[T][✓] dshaoudhuas"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": "[E][✗] dhsoaudhuoa"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "[D][✗] dhsaoudhusao"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "[D][✓] dshaodhuas  @  Sep 09 1999"
      }
    ],
    "authorContributionMap": {
      "justacasul": 4
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static ui.Ui.echo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static ui.Ui.welcome;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Storage stores;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param filePath save file path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.stores \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            echo(\"Loading started\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.tasks \u003d new TaskList(stores);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            echo(\"Loading ended\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * prints a welcome message and scans for user input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        welcome();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Parser.accept(tasks, stores);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Storage getStores() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return stores;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * It\u0027s psvm, what do you want?"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param args Please it\u0027s just psvm"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (args.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            new Duke(\"./data/duke.txt\").run();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            // enter full save file path for jar file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            new Duke(args[0]).run();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 49,
      "-": 4
    }
  },
  {
    "path": "src/main/java/data/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private boolean completion;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    enum Type {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        TODO(\"todo\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        EVENT(\"event\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Type(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * creates a task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param type type of the task, like event, deadline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param name name of the task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Task(String type, String name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        int dateLocation \u003d containsDate(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (dateLocation \u003e\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                this.date \u003d LocalDate.parse(name.substring(dateLocation));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                // can\u0027t be parsed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                System.out.println(\"Date could not be parsed, task added without date.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.name \u003d name.substring(0, dateLocation - 5);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.completion \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.type \u003d Type.valueOf(type.toUpperCase());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * overloaded task creation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param type type of the task, like event, deadline"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param name name of the task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param completed whether the task is completed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param date date of the task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Task(String type, String name, Boolean completed, String date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this(type, name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.completion \u003d completed;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.date \u003d LocalDate.parse(date, dateFormat);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        completion \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String getCompletion() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (completion) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return \"[✓]\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return \"[✗]\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return \"[T]\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return \"[E]\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return \"[D]\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            // this should not happen?"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return \"something went wrong\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return date.format(dateFormat);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * checks whether the string contains an indicator for date"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param s the string to be checked"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @return index for when the date starts"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static int containsDate(String s) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        int eitherIndex \u003d Math.max(s.indexOf(\" /by \"), s.indexOf(\" /at \"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        int anyIndex \u003d Math.max(eitherIndex, s.indexOf(\"  @  \"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return anyIndex \u003d\u003d -1 ? -1 : anyIndex + 5;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean hasDate() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return date !\u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return getType() + getCompletion() + \" \" + getName() + \"  @  \" + getDate();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return getType() + getCompletion() + \" \" + getName();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 124
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static ui.Ui.echo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static ui.Ui.filterList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static ui.Ui.line;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static ui.Ui.listOut;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Parser() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // empty constructor"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * scans for user inputs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void accept(TaskList tl, Storage stores) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            String output \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            // special 1 word cases"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            // bye exits while"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (output.equals(\"bye\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                echo(\"Ciao!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else if (output.equals(\"list\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                listOut(tl.getStorage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                Scanner multiWord \u003d new Scanner(output);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                // can\u0027t use enums here, firstWord can be literally anything"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                String firstWord \u003d multiWord.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                // wow intelliJ is a better programmer than i\u0027ll ever be"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                switch (firstWord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case \"done\": {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    String index \u003d \"0\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        if (multiWord.hasNext()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            index \u003d multiWord.next();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            throw Ui.DukeException.empty(\"done\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    } catch (Ui.DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        echo(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    int intIndex \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        if (intIndex \u003c\u003d tl.getStorage().size() \u0026\u0026 intIndex \u003e 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            tl.markComplete(intIndex - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            // save to save file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            stores.save(tl.getStorage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            throw Ui.DukeException.outOfBounds(intIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    } catch (Ui.DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        echo(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case \"delete\": {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    String index \u003d multiWord.next();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    int intIndex \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        if (intIndex \u003c\u003d tl.getStorage().size() \u0026\u0026 intIndex \u003e 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            tl.delete(intIndex - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            // save to save file"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            stores.save(tl.getStorage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            throw Ui.DukeException.outOfBounds(intIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    } catch (Ui.DukeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        echo(e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case \"find\": {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        if (multiWord.hasNextLine()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            String remainingWords \u003d multiWord.nextLine().trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            filterList(remainingWords, tl.getStorage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            throw Ui.DukeException.empty(\"find\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    } catch (Ui.DukeException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        echo(e.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case \"due\": {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        LocalDate dueDate \u003d LocalDate.parse(multiWord.nextLine().trim());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        line();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        System.out.println(\"These tasks are due:\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        for (Task task: tl.getDateStorage().get(dueDate.format(dateFormat))) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            System.out.println(task);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        line();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        // time can\u0027t be parsed"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        echo(e.getMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                // it\u0027s a task"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        // whitespace in front of nextLine"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        if (multiWord.hasNextLine()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            String remainingWords \u003d multiWord.nextLine().trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            tl.store(firstWord, remainingWords);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            // save to save file"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            stores.save(tl.getStorage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            throw Ui.DukeException.empty(firstWord);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    } catch (Ui.DukeException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        echo(e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                // invalid order"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    // skip the try catch block"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    echo(Ui.DukeException.invalid(output).getMessage());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 139
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param path string path to save file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Storage storage \u003d (Storage) o;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Objects.equals(path, storage.path);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return path !\u003d null ? path.hashCode() : 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * saves stored tasks to a local file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param storage the place tasks are stored"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            FileWriter writer \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            for (Task task : storage) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                writer.write(task.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                writer.write(\"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            File folder \u003d new File(\"./data\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (folder.mkdir()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                save(storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                System.out.println(\"folder does not exist, while making folder failed\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Loads contents of storage text file into storage array"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void load(TaskList tl) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            File data \u003d new File(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Scanner dataScan \u003d new Scanner(data);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            while (dataScan.hasNextLine()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                tl.store(dataScan.nextLine());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            System.out.println(\"save file does not exist, nothing loaded\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 80
    }
  },
  {
    "path": "src/main/java/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static data.task.Task.containsDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static ui.Ui.echo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static ui.Ui.line;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static ui.Ui.taskAdded;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Task storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private ArrayList\u003cTask\u003e storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Date storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cTask\u003e\u003e dateStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * constructor for TaskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        storage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        dateStorage \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * overloaded constructor that accepts Storage and updates list of tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param stores class that handles the save file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public TaskList(Storage stores) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        storage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        dateStorage \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        stores.load(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ArrayList\u003cTask\u003e getStorage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cTask\u003e\u003e getDateStorage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return dateStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Marks a certain task as complete"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param taskNumber the index number of the task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void markComplete(int taskNumber) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Task currentTask \u003d storage.get(taskNumber);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        currentTask.complete();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(\"Marked task \" + (taskNumber + 1) + \" as complete.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(currentTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Adds a task to the task storage"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param type the type of task to be added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param name the name of the task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void store(String type, String name) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Task taskToAdd \u003d new Task(type, name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        storage.add(taskToAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (taskToAdd.hasDate()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (!dateStorage.containsKey(taskToAdd.getDate())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                dateStorage.put(taskToAdd.getDate(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            dateStorage.get(taskToAdd.getDate()).add(taskToAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        taskAdded(taskToAdd, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Overloaded store that reads from save file"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param wholeLine each line in the save file"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void store(String wholeLine) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        boolean completionStatus;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String date \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Scanner currentLine \u003d new Scanner(wholeLine);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            // something like [T][✓]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (currentLine.hasNext()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                String typeCompletion \u003d currentLine.next();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                switch (typeCompletion.charAt(1)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case (\u0027T\u0027):"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    type \u003d \"todo\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case (\u0027E\u0027):"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    type \u003d \"event\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case (\u0027D\u0027):"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    type \u003d \"deadline\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    // this shouldn\u0027t happen"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    type \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                completionStatus \u003d typeCompletion.charAt(4) \u003d\u003d \u0027✓\u0027;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                throw Ui.DukeException.fileError();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (currentLine.hasNext()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                name \u003d currentLine.nextLine().trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                throw Ui.DukeException.fileError();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            assert type !\u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            int dateLocation \u003d containsDate(name);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (dateLocation \u003e\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                date \u003d name.substring(dateLocation);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                name \u003d name.substring(0, dateLocation - 5);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Task taskToAdd \u003d new Task(type, name, completionStatus, date);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            storage.add(taskToAdd);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (taskToAdd.hasDate()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                if (!dateStorage.containsKey(taskToAdd.getDate())) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    dateStorage.put(taskToAdd.getDate(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                dateStorage.get(taskToAdd.getDate()).add(taskToAdd);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            taskAdded(taskToAdd, storage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (Ui.DukeException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            echo(e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Deletes a certain task"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param taskNumber the index number of the task"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void delete(int taskNumber) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Task currentTask \u003d storage.get(taskNumber);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(\"Deleted task:\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(currentTask);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        storage.remove(taskNumber);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(\"There are now \" + storage.size() + \" task(s) remaining.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 149
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // border line"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void line() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Pads a given String with 2 lines, top and bottom"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param output the String to pad"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void echo(String output) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Welcome message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void welcome() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String logo \u003d \" ____             _     \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        + \"|  _ \\\\           | |    \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        + \"| |_) |_ __ _   _| |__\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        + \"|  _ \u003c| \u0027__| | | | \u0027_ \\\\ \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        + \"| |_) | |  | |_| | | | |\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        + \"|____/|_|   \\\\__,_|_| |_|\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        echo(logo + \"What\u0027s up?\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Prints a message after adding a task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param task the task added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void taskAdded(Task task, List\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String toEcho \u003d \"Task added: \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                + task + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                + \"You now have \" + storage.size() + \" task(s).\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        echo(toEcho);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * lists out every task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param storage where the tasks are stored"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void listOut(ArrayList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(\"Here\u0027s your tasks\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (int i \u003d 0; i \u003c storage.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            // list starts from 1"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Task currentTask \u003d storage.get(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            System.out.println((i + 1) + \". \" + currentTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * only lists out tasks where it contains words"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param words the words to be searched"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param storage where the tasks are stored"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void filterList(String words, ArrayList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(\"Here\u0027s your matching tasks\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (int i \u003d 0; i \u003c storage.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            // list starts from 1"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Task currentTask \u003d storage.get(i);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (currentTask.toString().contains(words)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                System.out.println((i + 1) + \". \" + currentTask);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static class DukeException extends Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public DukeException(String message) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * error message for having a blank task name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * @param type deadline, event, etc"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * @return error message"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public static DukeException empty(String type) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            String message \u003d \"The description of \" + type + \" cannot be empty.\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new DukeException(message);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * error message for unsupported user input"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * @param order user input"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * @return error message"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public static DukeException invalid(String order) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            String message \u003d \"Sorry, \u0027\" + order + \"\u0027 is not a recognised order.\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new DukeException(message);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * error message for invalid task number"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * @param index task number"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * @return error message"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public static DukeException outOfBounds(int index) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            String message \u003d \"There is no task number \" + index + \".\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new DukeException(message);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * exception for having invalid line format"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * @return file error message"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public static DukeException fileError() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            String message \u003d \"Line in save file has invalid format\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new DukeException(message);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 130
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * tests whether storage path is correct"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void pathTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // directory is in test now"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // go up test -\u003e src -\u003e iP -\u003e data -\u003e duke.txt"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Duke testDuke \u003d new Duke(\"../../data/duke.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertEquals(testDuke.getStores(), new Storage(\"../../data/duke.txt\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 18
    }
  },
  {
    "path": "src/test/java/data/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void dateFinderTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertEquals(Task.containsDate(\"dhosadhaus /at 1999-09-09\"), 15);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * test for date parsing"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void dateConvertTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Task testTask \u003d new Task(\"todo\", \"duhsaodah /at 1999-09-09\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertEquals(testTask.getDate(), \"Sep 09 1999\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 22
    }
  },
  {
    "path": "src/test/java/ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * tests for error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void exceptionTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertEquals(Ui.DukeException.invalid(\"dshuadhoas\").getMessage(),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                new Ui.DukeException(\"Sorry, \u0027dshuadhoas\u0027 is not a recognised order.\").getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "justacasul": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "java -classpath ..\\bin Duke \u003c .\\input.txt \u003e .\\ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "-": 20
    }
  }
]
