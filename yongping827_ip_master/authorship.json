[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"yongping827"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yongping827":18,"-":43}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"![screenshot](Ui.png)"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"### Create deadline"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"Creates a deadline and adds it to the task list."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"Format: `deadline \u003cDESCRIPTION\u003e /by \u003cyyyy-mm-dd\u003e`"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"Example: `deadline cs2103 ip /by 2020-09-18` creates a deadline with description `cs2103 ip` and date `18 Sep 2020`"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"### Create event"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"Creates an event and adds it to the task list."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"Format: `event \u003cDESCRIPTION\u003e /at \u003cyyyy-mm-dd\u003e`"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"Example: `event cs2100 midterm /at 2020-10-10` creates an event with description `cs2100 midterm` and date `10 Oct 2020`"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"### Create todo"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"Creates a todo and adds it to the task list."},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"Format: `todo \u003cDESCRIPTION\u003e`"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"Example: `todo cs2103 tp` creates a todo with description `cs2103 tp`"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"### Delete tasks"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"Deletes a task, specified by its index, from the task list."},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"Format: `delete \u003cINDEX\u003e`"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"Example: `delete 3` deletes the 3rd task in the task list."},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"### Find tasks"},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"Find tasks in the task list that contain the specified keyword."},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"Format: `find \u003cKEYWORD\u003e`"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"Example: `find cs` finds all tasks that contain the keyword `cs`"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"### List tasks"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"Lists all tasks in the task list."},{"lineNumber":50,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":51,"author":{"gitId":"yongping827"},"content":"Format: `list`"},{"lineNumber":52,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":53,"author":{"gitId":"yongping827"},"content":"### Mark tasks as done"},{"lineNumber":54,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":55,"author":{"gitId":"yongping827"},"content":"Marks a task, specified by its index, in the task list as done."},{"lineNumber":56,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":57,"author":{"gitId":"yongping827"},"content":"Format: `done \u003cINDEX\u003e`"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"yongping827"},"content":"Example: `done 5` marks the 5th task in the task list as done. "},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"yongping827"},"content":"### Archive"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"yongping827"},"content":"Archives a task, specified by its index, in the task list."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"yongping827"},"content":"Format: `archive \u003cINDEX\u003e`"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"yongping827"},"content":"Example: `archive 4` archives the 4th task in the task list."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"yongping827"},"content":"Archives all tasks"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"yongping827"},"content":"Format: `archive all`"}],"authorContributionMap":{"yongping827":53,"-":18}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    private Label dialog;"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"    private ImageView displayPicture;"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"            fxmlLoader.load();"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"        dialog.setText(text);"},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"        displayPicture.setImage(img);"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"    private void flip() {"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":"        Collections.reverse(tmp);"},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":50,"author":{"gitId":"yongping827"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":51,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":53,"author":{"gitId":"yongping827"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":54,"author":{"gitId":"yongping827"},"content":"        return new DialogBox(text, img);"},{"lineNumber":55,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":57,"author":{"gitId":"yongping827"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":58,"author":{"gitId":"yongping827"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":59,"author":{"gitId":"yongping827"},"content":"        db.flip();"},{"lineNumber":60,"author":{"gitId":"yongping827"},"content":"        return db;"},{"lineNumber":61,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":62}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.command.ExitCommand;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":" * Main class of duke"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"    /** Pathname of the local main data file */"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"    final String MAIN_DATA_PATH_NAME \u003d \"./data/duke_data.csv\";"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"    /** Pathname of the local archive data file */"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"    final String ARCHIVE_DATA_PATH_NAME \u003d \"./data/duke_archive.csv\";"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"    /** Storage */"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"    Storage storage;"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    /** Task list*/"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    TaskList tasks;"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    /** Archive task list */"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"    TaskList archive;"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"    /** User Interface using command line */"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"    Ui ui;"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"    Duke() {"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"        storage \u003d new Storage(MAIN_DATA_PATH_NAME, ARCHIVE_DATA_PATH_NAME);"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"        tasks \u003d storage.loadTasksFromMainData();"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"        archive \u003d storage.loadTasksFromArchiveData();"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"        ui \u003d new Ui();"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"     * Main method of Duke."},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"     * @param args String arguments (not necessary)"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"    public static void main(String[] args) {"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":"        duke.runDukeOnCli();"},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":51,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"yongping827"},"content":"     * Runs Duke on the command line."},{"lineNumber":53,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"yongping827"},"content":"    public void runDukeOnCli() {"},{"lineNumber":55,"author":{"gitId":"yongping827"},"content":"        ui.printHello();"},{"lineNumber":56,"author":{"gitId":"yongping827"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":57,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":58,"author":{"gitId":"yongping827"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":59,"author":{"gitId":"yongping827"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":60,"author":{"gitId":"yongping827"},"content":"            Command command \u003d Parser.parse(input);"},{"lineNumber":61,"author":{"gitId":"yongping827"},"content":"            String[] outputStrings \u003d command.execute(storage, tasks, archive, ui);"},{"lineNumber":62,"author":{"gitId":"yongping827"},"content":"            ui.print(outputStrings);"},{"lineNumber":63,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":64,"author":{"gitId":"yongping827"},"content":"            if (command instanceof ExitCommand) {"},{"lineNumber":65,"author":{"gitId":"yongping827"},"content":"                break;"},{"lineNumber":66,"author":{"gitId":"yongping827"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":70,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"yongping827"},"content":"     * Gets the startup message as a string."},{"lineNumber":72,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"yongping827"},"content":"     * @return Startup message as a string."},{"lineNumber":74,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"yongping827"},"content":"    String getStartupMessage() {"},{"lineNumber":76,"author":{"gitId":"yongping827"},"content":"        String[] strings \u003d ui.getHelloStrings();"},{"lineNumber":77,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":78,"author":{"gitId":"yongping827"},"content":"        if (strings.length \u003d\u003d 0) {"},{"lineNumber":79,"author":{"gitId":"yongping827"},"content":"            return \"Hello!\";"},{"lineNumber":80,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":82,"author":{"gitId":"yongping827"},"content":"        StringBuilder output \u003d new StringBuilder(strings[0]);"},{"lineNumber":83,"author":{"gitId":"yongping827"},"content":"        for (int i \u003d 1; i \u003c strings.length; i++) {"},{"lineNumber":84,"author":{"gitId":"yongping827"},"content":"            output.append(\"\\n\");"},{"lineNumber":85,"author":{"gitId":"yongping827"},"content":"            output.append(strings[i]);"},{"lineNumber":86,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"yongping827"},"content":"        return output.toString();"},{"lineNumber":88,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":90,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"yongping827"},"content":"     * Retrieves the response from an input as a String."},{"lineNumber":92,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"yongping827"},"content":"     * @return Response"},{"lineNumber":94,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"yongping827"},"content":"    String getResponse(String input) {"},{"lineNumber":96,"author":{"gitId":"yongping827"},"content":"        Command command \u003d Parser.parse(input);"},{"lineNumber":97,"author":{"gitId":"yongping827"},"content":"        String[] strings \u003d command.execute(storage, tasks, archive, ui);"},{"lineNumber":98,"author":{"gitId":"yongping827"},"content":"        StringBuilder output;"},{"lineNumber":99,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":100,"author":{"gitId":"yongping827"},"content":"        if (strings.length \u003e\u003d 1) {"},{"lineNumber":101,"author":{"gitId":"yongping827"},"content":"            output \u003d new StringBuilder(strings[0]);"},{"lineNumber":102,"author":{"gitId":"yongping827"},"content":"            for (int i \u003d 1; i \u003c strings.length; i++) {"},{"lineNumber":103,"author":{"gitId":"yongping827"},"content":"                output.append(\"\\n\");"},{"lineNumber":104,"author":{"gitId":"yongping827"},"content":"                output.append(strings[i]);"},{"lineNumber":105,"author":{"gitId":"yongping827"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"yongping827"},"content":"            return output.toString();"},{"lineNumber":107,"author":{"gitId":"yongping827"},"content":"        } else {"},{"lineNumber":108,"author":{"gitId":"yongping827"},"content":"            return \"No response\";"},{"lineNumber":109,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yongping827":109,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setStage(stage);"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().handleStartUp();"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":33}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"import duke.command.Command;"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"import duke.command.ExitCommand;"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"import java.util.concurrent.TimeUnit;"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    private VBox dialogContainer;"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    private TextField userInput;"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"    private Button sendButton;"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"    private Duke duke;"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"    private Stage stage;"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"    private final Image USER_IMAGE \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"    private final Image DUKE_IMAGE \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"    public void initialize() {"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"    public void setStage(Stage s) {"},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"        stage \u003d s;"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":"        duke \u003d d;"},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":51,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"yongping827"},"content":"     * Closes the stage."},{"lineNumber":53,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"yongping827"},"content":"    void exitStage() {"},{"lineNumber":55,"author":{"gitId":"yongping827"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"yongping827"},"content":"            TimeUnit.SECONDS.sleep(1);"},{"lineNumber":57,"author":{"gitId":"yongping827"},"content":"        } catch (InterruptedException ignored) {"},{"lineNumber":58,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"yongping827"},"content":"        stage.close();"},{"lineNumber":60,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":62,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"yongping827"},"content":"     * Creates the initial dialog box displaying the start-up message."},{"lineNumber":64,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"yongping827"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitId":"yongping827"},"content":"    void handleStartUp() {"},{"lineNumber":67,"author":{"gitId":"yongping827"},"content":"        String startupMessage \u003d duke.getStartupMessage();"},{"lineNumber":68,"author":{"gitId":"yongping827"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(startupMessage, DUKE_IMAGE));"},{"lineNumber":69,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":71,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"yongping827"},"content":"     * Handles the user input. If the user input is parsed into an ExitCommand, the stage is exit. Otherwise, it is"},{"lineNumber":73,"author":{"gitId":"yongping827"},"content":"     * handled normally in the method handleGeneralUserInput."},{"lineNumber":74,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"yongping827"},"content":"    @FXML"},{"lineNumber":76,"author":{"gitId":"yongping827"},"content":"    private void handleUserInput() {"},{"lineNumber":77,"author":{"gitId":"yongping827"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":78,"author":{"gitId":"yongping827"},"content":"        Command command \u003d Parser.parse(input);"},{"lineNumber":79,"author":{"gitId":"yongping827"},"content":"        handleGeneralUserInput(input);"},{"lineNumber":80,"author":{"gitId":"yongping827"},"content":"        if (command instanceof ExitCommand) {"},{"lineNumber":81,"author":{"gitId":"yongping827"},"content":"            exitStage();"},{"lineNumber":82,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":85,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"yongping827"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":87,"author":{"gitId":"yongping827"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":88,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"yongping827"},"content":"    private void handleGeneralUserInput(String input) {"},{"lineNumber":90,"author":{"gitId":"yongping827"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":91,"author":{"gitId":"yongping827"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":92,"author":{"gitId":"yongping827"},"content":"                DialogBox.getUserDialog(input, USER_IMAGE),"},{"lineNumber":93,"author":{"gitId":"yongping827"},"content":"                DialogBox.getDukeDialog(response, DUKE_IMAGE)"},{"lineNumber":94,"author":{"gitId":"yongping827"},"content":"        );"},{"lineNumber":95,"author":{"gitId":"yongping827"},"content":"        userInput.clear();"},{"lineNumber":96,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":97}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.command.ArchiveAllTasksCommand;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.command.ArchiveTaskCommand;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"import duke.command.CompleteTaskCommand;"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"import duke.command.CreateDeadlineCommand;"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"import duke.command.CreateEventCommand;"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"import duke.command.CreateTodoCommand;"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"import duke.command.DeleteTaskCommand;"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"import duke.command.ExitCommand;"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"import duke.command.FindCommand;"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"import duke.command.InvalidCharacterCommand;"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"import duke.command.InvalidInputCommand;"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"import duke.command.ListTasksCommand;"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"import java.time.LocalDate;"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":" * Encapsulates a parser to read user inputs in duke and determine the subsequent actions"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"class Parser {"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"     * Symbol used to separate values in a date."},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"     * \"-\" is used by LocalDate.toString()"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"    private final static String DATE_SEPARATOR \u003d \"-\";"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"     * Parses the given input from the user."},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"     * @param input Input from user"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"     * @return Command corresponding to the input"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"    static Command parse(String input) {"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"        assert input !\u003d null;"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"        if (input.contains(Storage.DATA_SEPARATOR)) {"},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"            return parseInvalidCharacter(Storage.DATA_SEPARATOR);"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"        // Parses initial input into prefix and body"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"        String[] parsedCommand \u003d input.split(\" \", 2);"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"        String prefix \u003d parsedCommand[0];"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"        String body \u003d null;"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"        if (parsedCommand.length \u003d\u003d 2) {"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":"            body \u003d parsedCommand[1];"},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":51,"author":{"gitId":"yongping827"},"content":"        // Command determined by prefix"},{"lineNumber":52,"author":{"gitId":"yongping827"},"content":"        switch(prefix) {"},{"lineNumber":53,"author":{"gitId":"yongping827"},"content":"        case(\"archive\"):"},{"lineNumber":54,"author":{"gitId":"yongping827"},"content":"            return parseArchive(body);"},{"lineNumber":55,"author":{"gitId":"yongping827"},"content":"        case(\"bye\"):"},{"lineNumber":56,"author":{"gitId":"yongping827"},"content":"            return parseExit(body);"},{"lineNumber":57,"author":{"gitId":"yongping827"},"content":"        case(\"deadline\"):"},{"lineNumber":58,"author":{"gitId":"yongping827"},"content":"            return parseDeadline(body);"},{"lineNumber":59,"author":{"gitId":"yongping827"},"content":"        case(\"delete\"):"},{"lineNumber":60,"author":{"gitId":"yongping827"},"content":"            return parseDelete(body);"},{"lineNumber":61,"author":{"gitId":"yongping827"},"content":"        case(\"done\"):"},{"lineNumber":62,"author":{"gitId":"yongping827"},"content":"            return parseDone(body);"},{"lineNumber":63,"author":{"gitId":"yongping827"},"content":"        case(\"event\"):"},{"lineNumber":64,"author":{"gitId":"yongping827"},"content":"            return parseEvent(body);"},{"lineNumber":65,"author":{"gitId":"yongping827"},"content":"        case(\"find\"):"},{"lineNumber":66,"author":{"gitId":"yongping827"},"content":"            return parseFind(body);"},{"lineNumber":67,"author":{"gitId":"yongping827"},"content":"        case(\"list\"):"},{"lineNumber":68,"author":{"gitId":"yongping827"},"content":"            return parseList(body);"},{"lineNumber":69,"author":{"gitId":"yongping827"},"content":"        case(\"todo\"):"},{"lineNumber":70,"author":{"gitId":"yongping827"},"content":"            return parseTodo(body);"},{"lineNumber":71,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":73,"author":{"gitId":"yongping827"},"content":"        return parseInvalidInput();"},{"lineNumber":74,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":76,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"yongping827"},"content":"     * Converts a string representation of a date to a LocalDate."},{"lineNumber":78,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"yongping827"},"content":"     * @param input String representation of a date"},{"lineNumber":80,"author":{"gitId":"yongping827"},"content":"     * @return LocalDate of the date"},{"lineNumber":81,"author":{"gitId":"yongping827"},"content":"     * @throws NumberFormatException Exception thrown if the string cannot be parsed into integers"},{"lineNumber":82,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"yongping827"},"content":"    static LocalDate genDate(String input) throws NumberFormatException {"},{"lineNumber":84,"author":{"gitId":"yongping827"},"content":"        assert input !\u003d null;"},{"lineNumber":85,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":86,"author":{"gitId":"yongping827"},"content":"        String[] strings \u003d input.split(Parser.DATE_SEPARATOR, 3);"},{"lineNumber":87,"author":{"gitId":"yongping827"},"content":"        int[] ints \u003d new int[3];"},{"lineNumber":88,"author":{"gitId":"yongping827"},"content":"        for(int i \u003d 0; i \u003c 3; i++) {"},{"lineNumber":89,"author":{"gitId":"yongping827"},"content":"            ints[i] \u003d Integer.parseInt(strings[i]);"},{"lineNumber":90,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"yongping827"},"content":"        return LocalDate.of(ints[0], ints[1], ints[2]);"},{"lineNumber":92,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":94,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"yongping827"},"content":"     * Parses the given input into either an ArchiveAllTasksCommand or an ArchiveTaskCommand."},{"lineNumber":96,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"yongping827"},"content":"     * @param body"},{"lineNumber":98,"author":{"gitId":"yongping827"},"content":"     * @return ArchiveAllTasksCommand or ArchiveTaskCommand. If the input is invalid, it is parsed as invalid input."},{"lineNumber":99,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"yongping827"},"content":"    private static Command parseArchive(String body) {"},{"lineNumber":101,"author":{"gitId":"yongping827"},"content":"        if (body.equals(\"all\")) {"},{"lineNumber":102,"author":{"gitId":"yongping827"},"content":"            return new ArchiveAllTasksCommand();"},{"lineNumber":103,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":105,"author":{"gitId":"yongping827"},"content":"        try {"},{"lineNumber":106,"author":{"gitId":"yongping827"},"content":"            int taskIndex \u003d Integer.parseInt(body);"},{"lineNumber":107,"author":{"gitId":"yongping827"},"content":"            return new ArchiveTaskCommand(taskIndex - 1);"},{"lineNumber":108,"author":{"gitId":"yongping827"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":109,"author":{"gitId":"yongping827"},"content":"            return parseInvalidInput();"},{"lineNumber":110,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":113,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"yongping827"},"content":"     * Parses the given input into a CreateDeadlineCommand."},{"lineNumber":115,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"yongping827"},"content":"     * @param body"},{"lineNumber":117,"author":{"gitId":"yongping827"},"content":"     * @return CreateDeadlineCommand. If the input is invalid, it is parsed as invalid input."},{"lineNumber":118,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"yongping827"},"content":"    private static Command parseDeadline(String body) {"},{"lineNumber":120,"author":{"gitId":"yongping827"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"yongping827"},"content":"            String[] parsedDeadline \u003d body.split(\" /by \", 2);"},{"lineNumber":122,"author":{"gitId":"yongping827"},"content":"            LocalDate date \u003d Parser.genDate(parsedDeadline[1]);"},{"lineNumber":123,"author":{"gitId":"yongping827"},"content":"            return new CreateDeadlineCommand(parsedDeadline[0], false, date);"},{"lineNumber":124,"author":{"gitId":"yongping827"},"content":"        } catch (NullPointerException | NumberFormatException e) {"},{"lineNumber":125,"author":{"gitId":"yongping827"},"content":"            return parseInvalidInput();"},{"lineNumber":126,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":129,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"yongping827"},"content":"     * Parses the given input into a DeleteTaskCommand."},{"lineNumber":131,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"yongping827"},"content":"     * @param body"},{"lineNumber":133,"author":{"gitId":"yongping827"},"content":"     * @return DeleteTaskCommand. If the input is invalid, it is parsed as invalid input."},{"lineNumber":134,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"yongping827"},"content":"    private static Command parseDelete(String body) {"},{"lineNumber":136,"author":{"gitId":"yongping827"},"content":"        try {"},{"lineNumber":137,"author":{"gitId":"yongping827"},"content":"            int taskIndex \u003d Integer.parseInt(body);"},{"lineNumber":138,"author":{"gitId":"yongping827"},"content":"            return new DeleteTaskCommand(taskIndex - 1);"},{"lineNumber":139,"author":{"gitId":"yongping827"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":140,"author":{"gitId":"yongping827"},"content":"            return parseInvalidInput();"},{"lineNumber":141,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":144,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"yongping827"},"content":"     * Parses the given input into a CompleteTaskCommand."},{"lineNumber":146,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"yongping827"},"content":"     * @param body"},{"lineNumber":148,"author":{"gitId":"yongping827"},"content":"     * @return CompleteTaskCommand. If the input is invalid, it is parsed as invalid input."},{"lineNumber":149,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"yongping827"},"content":"    private static Command parseDone(String body) {"},{"lineNumber":151,"author":{"gitId":"yongping827"},"content":"        try {"},{"lineNumber":152,"author":{"gitId":"yongping827"},"content":"            int taskIndex \u003d Integer.parseInt(body);"},{"lineNumber":153,"author":{"gitId":"yongping827"},"content":"            return new CompleteTaskCommand(taskIndex - 1);"},{"lineNumber":154,"author":{"gitId":"yongping827"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":155,"author":{"gitId":"yongping827"},"content":"            return parseInvalidInput();"},{"lineNumber":156,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":159,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"yongping827"},"content":"     * Parses the given input into a CreateEventCommand."},{"lineNumber":161,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":162,"author":{"gitId":"yongping827"},"content":"     * @param body"},{"lineNumber":163,"author":{"gitId":"yongping827"},"content":"     * @return CreateEventCommand. If the input is invalid, it is parsed as invalid input."},{"lineNumber":164,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"yongping827"},"content":"    private static Command parseEvent(String body) {"},{"lineNumber":166,"author":{"gitId":"yongping827"},"content":"        try {"},{"lineNumber":167,"author":{"gitId":"yongping827"},"content":"            String[] parsedEvent \u003d body.split(\" /at \", 2);"},{"lineNumber":168,"author":{"gitId":"yongping827"},"content":"            LocalDate date \u003d Parser.genDate(parsedEvent[1]);"},{"lineNumber":169,"author":{"gitId":"yongping827"},"content":"            return new CreateEventCommand(parsedEvent[0], false, date);"},{"lineNumber":170,"author":{"gitId":"yongping827"},"content":"        } catch (NullPointerException | NumberFormatException e) {"},{"lineNumber":171,"author":{"gitId":"yongping827"},"content":"            return parseInvalidInput();"},{"lineNumber":172,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":175,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"yongping827"},"content":"     * Parses the given input into an ExitCommand."},{"lineNumber":177,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":178,"author":{"gitId":"yongping827"},"content":"     * @param body"},{"lineNumber":179,"author":{"gitId":"yongping827"},"content":"     * @return ExitCommand"},{"lineNumber":180,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"yongping827"},"content":"    private static ExitCommand parseExit(String body) {"},{"lineNumber":182,"author":{"gitId":"yongping827"},"content":"        return new ExitCommand();"},{"lineNumber":183,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":185,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"yongping827"},"content":"     * Parses the given input into a FindCommand."},{"lineNumber":187,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":188,"author":{"gitId":"yongping827"},"content":"     * @param body"},{"lineNumber":189,"author":{"gitId":"yongping827"},"content":"     * @return FindCommand"},{"lineNumber":190,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"yongping827"},"content":"    private static FindCommand parseFind(String body) {"},{"lineNumber":192,"author":{"gitId":"yongping827"},"content":"        return new FindCommand(body);"},{"lineNumber":193,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":195,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"yongping827"},"content":"     * Parses the given input into a ListTasksCommand."},{"lineNumber":197,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":198,"author":{"gitId":"yongping827"},"content":"     * @param body"},{"lineNumber":199,"author":{"gitId":"yongping827"},"content":"     * @return ListTasksCommand"},{"lineNumber":200,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"yongping827"},"content":"    private static ListTasksCommand parseList(String body) {"},{"lineNumber":202,"author":{"gitId":"yongping827"},"content":"        return new ListTasksCommand();"},{"lineNumber":203,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":205,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"yongping827"},"content":"     * Parses the invalid input."},{"lineNumber":207,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":208,"author":{"gitId":"yongping827"},"content":"     * @return InvalidInputCommand"},{"lineNumber":209,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"yongping827"},"content":"    private static InvalidInputCommand parseInvalidInput() {"},{"lineNumber":211,"author":{"gitId":"yongping827"},"content":"        return new InvalidInputCommand();"},{"lineNumber":212,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":214,"author":{"gitId":"yongping827"},"content":"    private static InvalidCharacterCommand parseInvalidCharacter(String invalidChar) {"},{"lineNumber":215,"author":{"gitId":"yongping827"},"content":"        return new InvalidCharacterCommand(invalidChar);"},{"lineNumber":216,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":218,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":219,"author":{"gitId":"yongping827"},"content":"     * Parses the given input into a CreateTodoCommand."},{"lineNumber":220,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":221,"author":{"gitId":"yongping827"},"content":"     * @param body"},{"lineNumber":222,"author":{"gitId":"yongping827"},"content":"     * @return CreateTodoCommand"},{"lineNumber":223,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":224,"author":{"gitId":"yongping827"},"content":"    private static CreateTodoCommand parseTodo(String body) {"},{"lineNumber":225,"author":{"gitId":"yongping827"},"content":"        return new CreateTodoCommand(body, false);"},{"lineNumber":226,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":227}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":" * Encapsulates the storage of data from duke to a file in the local hard drive"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"    /** Data separator to separate different data in the same entry */"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"    static final String DATA_SEPARATOR \u003d \",\";"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"    /** File representation of the main data file specified by the pathname */"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"    private final File MAIN_DATA_FILE;"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"    /** Pathname of the main data file. Note that loading and saving is done on the same file. */"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"    private final String MAIN_DATA_PATH_NAME;"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    /** Pathname of the archive data file. Note that loading and saving is done on the same file. */"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"    private final String ARCHIVE_DATA_PATH_NAME;"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"    /** File representation of the archive data file specified by the pathname */"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"    private final File ARCHIVE_DATA_FILE;"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"     * @param mainDataPathName pathname of the main data file"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"     * @param archiveDataPathName pathname of the archive data file"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"    Storage(String mainDataPathName, String archiveDataPathName) {"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"        MAIN_DATA_PATH_NAME \u003d mainDataPathName;"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"        MAIN_DATA_FILE \u003d new File(MAIN_DATA_PATH_NAME);"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"        ARCHIVE_DATA_PATH_NAME \u003d archiveDataPathName;"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"        ARCHIVE_DATA_FILE \u003d new File(ARCHIVE_DATA_PATH_NAME);"},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"     * Creates new tasks based on the input strings read from the file and adds these tasks to the task list."},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"     * @param tasks Current task list"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"     * @param strings Input strings read from the file"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":"    void addTaskFromData(TaskList tasks, String[] strings) {"},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"        assert tasks !\u003d null;"},{"lineNumber":50,"author":{"gitId":"yongping827"},"content":"        assert strings !\u003d null;"},{"lineNumber":51,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":52,"author":{"gitId":"yongping827"},"content":"        if (strings.length \u003d\u003d 0) {"},{"lineNumber":53,"author":{"gitId":"yongping827"},"content":"            return;"},{"lineNumber":54,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":56,"author":{"gitId":"yongping827"},"content":"        String taskType \u003d strings[0];"},{"lineNumber":57,"author":{"gitId":"yongping827"},"content":"        if (taskType.equals(\"todo\") \u0026\u0026 strings.length \u003d\u003d 3) {"},{"lineNumber":58,"author":{"gitId":"yongping827"},"content":"            tasks.addTodo(strings[2], Boolean.parseBoolean(strings[1]));"},{"lineNumber":59,"author":{"gitId":"yongping827"},"content":"        } else if (taskType.equals(\"deadline\") \u0026\u0026 strings.length \u003d\u003d 4) {"},{"lineNumber":60,"author":{"gitId":"yongping827"},"content":"            tasks.addDeadline(strings[2], Boolean.parseBoolean(strings[1]), Parser.genDate(strings[3]));"},{"lineNumber":61,"author":{"gitId":"yongping827"},"content":"        } else if (taskType.equals(\"event\") \u0026\u0026 strings.length \u003d\u003d 4) {"},{"lineNumber":62,"author":{"gitId":"yongping827"},"content":"            tasks.addEvent(strings[2], Boolean.parseBoolean(strings[1]), Parser.genDate(strings[3]));"},{"lineNumber":63,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":66,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"yongping827"},"content":"     * Loads data from specified file."},{"lineNumber":68,"author":{"gitId":"yongping827"},"content":"     * Task list is empty if loading of data was unsuccessful."},{"lineNumber":69,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"yongping827"},"content":"     * @return TaskList represented by the data in the file specified by pathName."},{"lineNumber":71,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"yongping827"},"content":"    private TaskList loadTasks(File file) {"},{"lineNumber":73,"author":{"gitId":"yongping827"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":74,"author":{"gitId":"yongping827"},"content":"        if (file.exists()) {"},{"lineNumber":75,"author":{"gitId":"yongping827"},"content":"            try {"},{"lineNumber":76,"author":{"gitId":"yongping827"},"content":"                BufferedReader csvReader \u003d new BufferedReader(new FileReader(file));"},{"lineNumber":77,"author":{"gitId":"yongping827"},"content":"                String eachDataEntry;"},{"lineNumber":78,"author":{"gitId":"yongping827"},"content":"                while ((eachDataEntry \u003d csvReader.readLine()) !\u003d null) {"},{"lineNumber":79,"author":{"gitId":"yongping827"},"content":"                    String[] strings \u003d eachDataEntry.split(DATA_SEPARATOR);"},{"lineNumber":80,"author":{"gitId":"yongping827"},"content":"                    addTaskFromData(tasks, strings);"},{"lineNumber":81,"author":{"gitId":"yongping827"},"content":"                }"},{"lineNumber":82,"author":{"gitId":"yongping827"},"content":"            } catch (IOException ignored) {"},{"lineNumber":83,"author":{"gitId":"yongping827"},"content":"                // If file fails to load, empty task list is returned"},{"lineNumber":84,"author":{"gitId":"yongping827"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"yongping827"},"content":"        return tasks;"},{"lineNumber":87,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":89,"author":{"gitId":"yongping827"},"content":"    TaskList loadTasksFromMainData() {"},{"lineNumber":90,"author":{"gitId":"yongping827"},"content":"        return loadTasks(MAIN_DATA_FILE);"},{"lineNumber":91,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":93,"author":{"gitId":"yongping827"},"content":"    TaskList loadTasksFromArchiveData() {"},{"lineNumber":94,"author":{"gitId":"yongping827"},"content":"        return loadTasks(ARCHIVE_DATA_FILE);"},{"lineNumber":95,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":97,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"yongping827"},"content":"     * Clears all the contents in the main data file."},{"lineNumber":99,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"yongping827"},"content":"    public void resetMainDataFile() {"},{"lineNumber":101,"author":{"gitId":"yongping827"},"content":"        resetFile(MAIN_DATA_FILE);"},{"lineNumber":102,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":104,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"yongping827"},"content":"     * Clears all the contents in the archive data file."},{"lineNumber":106,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"yongping827"},"content":"    public void resetArchiveDataFile() {"},{"lineNumber":108,"author":{"gitId":"yongping827"},"content":"        resetFile(ARCHIVE_DATA_FILE);"},{"lineNumber":109,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":111,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"yongping827"},"content":"     * Clears all the contents in the file."},{"lineNumber":113,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"yongping827"},"content":"    public void resetFile(File file) {"},{"lineNumber":115,"author":{"gitId":"yongping827"},"content":"        try {"},{"lineNumber":116,"author":{"gitId":"yongping827"},"content":"            file.delete();"},{"lineNumber":117,"author":{"gitId":"yongping827"},"content":"            file.createNewFile();"},{"lineNumber":118,"author":{"gitId":"yongping827"},"content":"        } catch (IOException ignored) {"},{"lineNumber":119,"author":{"gitId":"yongping827"},"content":"            // If the file fails to reset, no further action"},{"lineNumber":120,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":123,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"yongping827"},"content":"     * Saves data in specified task list into archive data file."},{"lineNumber":125,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"yongping827"},"content":"     * @param tasks Task list to be saved"},{"lineNumber":127,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"yongping827"},"content":"    public void saveArchive(TaskList tasks) {"},{"lineNumber":129,"author":{"gitId":"yongping827"},"content":"        saveTasks(tasks, ARCHIVE_DATA_FILE);"},{"lineNumber":130,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":132,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"yongping827"},"content":"     * Saves data in specified task list into main data file."},{"lineNumber":134,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"yongping827"},"content":"     * @param tasks Task list to be saved"},{"lineNumber":136,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"yongping827"},"content":"    public void saveMainTaskList(TaskList tasks) {"},{"lineNumber":138,"author":{"gitId":"yongping827"},"content":"        saveTasks(tasks, MAIN_DATA_FILE);"},{"lineNumber":139,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":141,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"yongping827"},"content":"     * Saves data in current task list into file specified by pathName."},{"lineNumber":143,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"yongping827"},"content":"     * @param tasks Task list to be saved"},{"lineNumber":145,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"yongping827"},"content":"    private void saveTasks(TaskList tasks, File file) {"},{"lineNumber":147,"author":{"gitId":"yongping827"},"content":"        assert tasks !\u003d null;"},{"lineNumber":148,"author":{"gitId":"yongping827"},"content":"        try {"},{"lineNumber":149,"author":{"gitId":"yongping827"},"content":"            FileWriter csvWriter \u003d new FileWriter(file);"},{"lineNumber":150,"author":{"gitId":"yongping827"},"content":"            for (int i \u003d 0; i \u003c tasks.getNumOfTasks(); i++) {"},{"lineNumber":151,"author":{"gitId":"yongping827"},"content":"                String[] dataStringArray \u003d tasks.getTaskAt(i).getDataStrings();"},{"lineNumber":152,"author":{"gitId":"yongping827"},"content":"                for (String s : dataStringArray) {"},{"lineNumber":153,"author":{"gitId":"yongping827"},"content":"                    csvWriter.append(s);"},{"lineNumber":154,"author":{"gitId":"yongping827"},"content":"                    csvWriter.append(DATA_SEPARATOR);"},{"lineNumber":155,"author":{"gitId":"yongping827"},"content":"                }"},{"lineNumber":156,"author":{"gitId":"yongping827"},"content":"                csvWriter.append(\"\\n\");"},{"lineNumber":157,"author":{"gitId":"yongping827"},"content":"            }"},{"lineNumber":158,"author":{"gitId":"yongping827"},"content":"            csvWriter.flush();"},{"lineNumber":159,"author":{"gitId":"yongping827"},"content":"            csvWriter.close();"},{"lineNumber":160,"author":{"gitId":"yongping827"},"content":"        } catch (IOException e) {"},{"lineNumber":161,"author":{"gitId":"yongping827"},"content":"            // If the task list fails to save, no further action"},{"lineNumber":162,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":164}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"import duke.task.ToDo;"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":" * Encapsulates a task list"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"public class TaskList {"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"    /** Task list */"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"    private final ArrayList\u003cTask\u003e taskArrayList;"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    TaskList() {"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"        this.taskArrayList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"     * Creates a new deadline and adds it to the task list."},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"     * @param description Description of the deadline"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"     * @param isComplete Initial completion status of the deadline"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"     * @param date Date of the deadline"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"     * @return Created deadline"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"    public Deadline addDeadline(String description, boolean isComplete, LocalDate date) {"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"        assert description !\u003d null;"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"        assert date !\u003d null;"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"        Deadline deadline \u003d new Deadline(description, isComplete, date);"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"        taskArrayList.add(deadline);"},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"        return deadline;"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"     * Creates a new event and adds it to the task list."},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"     * @param description Description of the event"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"     * @param isComplete Initial completion status of the event"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":"     * @param date Date of the event"},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"yongping827"},"content":"    public Event addEvent(String description, boolean isComplete, LocalDate date) {"},{"lineNumber":51,"author":{"gitId":"yongping827"},"content":"        assert description !\u003d null;"},{"lineNumber":52,"author":{"gitId":"yongping827"},"content":"        assert date !\u003d null;"},{"lineNumber":53,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":54,"author":{"gitId":"yongping827"},"content":"        Event event \u003d new Event(description, isComplete, date);"},{"lineNumber":55,"author":{"gitId":"yongping827"},"content":"        taskArrayList.add(event);"},{"lineNumber":56,"author":{"gitId":"yongping827"},"content":"        return event;"},{"lineNumber":57,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":59,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"yongping827"},"content":"     * Adds the task to the task list."},{"lineNumber":61,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"yongping827"},"content":"     * @param task"},{"lineNumber":63,"author":{"gitId":"yongping827"},"content":"     * @return Task"},{"lineNumber":64,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"yongping827"},"content":"    public Task addTask(Task task) {"},{"lineNumber":66,"author":{"gitId":"yongping827"},"content":"        taskArrayList.add(task);"},{"lineNumber":67,"author":{"gitId":"yongping827"},"content":"        return task;"},{"lineNumber":68,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":70,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"yongping827"},"content":"     * Adds all tasks in another task list to this task list."},{"lineNumber":72,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"yongping827"},"content":"     * @param tasks"},{"lineNumber":74,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"yongping827"},"content":"    public void addTasks(TaskList tasks) {"},{"lineNumber":76,"author":{"gitId":"yongping827"},"content":"        for (int i \u003d 0; i \u003c tasks.getNumOfTasks(); i++) {"},{"lineNumber":77,"author":{"gitId":"yongping827"},"content":"            addTask(tasks.getTaskAt(i));"},{"lineNumber":78,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":81,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"yongping827"},"content":"     * Creates a new todo and adds it to the task list."},{"lineNumber":83,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"yongping827"},"content":"     * @param description Description of the todo"},{"lineNumber":85,"author":{"gitId":"yongping827"},"content":"     * @param isComplete Initial completion status of the todo"},{"lineNumber":86,"author":{"gitId":"yongping827"},"content":"     * @return Created todo"},{"lineNumber":87,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"yongping827"},"content":"    public ToDo addTodo(String description, boolean isComplete) {"},{"lineNumber":89,"author":{"gitId":"yongping827"},"content":"        assert description !\u003d null;"},{"lineNumber":90,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":91,"author":{"gitId":"yongping827"},"content":"        ToDo todo \u003d new ToDo(description, isComplete);"},{"lineNumber":92,"author":{"gitId":"yongping827"},"content":"        taskArrayList.add(todo);"},{"lineNumber":93,"author":{"gitId":"yongping827"},"content":"        return todo;"},{"lineNumber":94,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":96,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"yongping827"},"content":"     * Marks the task with index specified by taskIndex as complete."},{"lineNumber":98,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"yongping827"},"content":"     * @param taskIndex current index of the task"},{"lineNumber":100,"author":{"gitId":"yongping827"},"content":"     * @return Completed task if completion is successful, null otherwise"},{"lineNumber":101,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"yongping827"},"content":"    public Task completeTaskAt(int taskIndex) {"},{"lineNumber":103,"author":{"gitId":"yongping827"},"content":"        if (isOutOfRange(taskIndex)) {"},{"lineNumber":104,"author":{"gitId":"yongping827"},"content":"            return null;"},{"lineNumber":105,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"yongping827"},"content":"        Task task \u003d taskArrayList.get(taskIndex);"},{"lineNumber":107,"author":{"gitId":"yongping827"},"content":"        task.setComplete();"},{"lineNumber":108,"author":{"gitId":"yongping827"},"content":"        return task;"},{"lineNumber":109,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":111,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"yongping827"},"content":"     * Deletes all tasks in the task list."},{"lineNumber":113,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"yongping827"},"content":"    public void deleteAllTasks() {"},{"lineNumber":115,"author":{"gitId":"yongping827"},"content":"        taskArrayList.clear();"},{"lineNumber":116,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":118,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"yongping827"},"content":"     * Deletes the task with index specified by taskIndex."},{"lineNumber":120,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"yongping827"},"content":"     * @param taskIndex current index of the task"},{"lineNumber":122,"author":{"gitId":"yongping827"},"content":"     * @return Deleted task if deletion is successful, null otherwise"},{"lineNumber":123,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"yongping827"},"content":"    public Task deleteTaskAt(int taskIndex) {"},{"lineNumber":125,"author":{"gitId":"yongping827"},"content":"        if (isOutOfRange(taskIndex)) {"},{"lineNumber":126,"author":{"gitId":"yongping827"},"content":"            return null;"},{"lineNumber":127,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"yongping827"},"content":"        Task task \u003d getTaskAt(taskIndex);"},{"lineNumber":129,"author":{"gitId":"yongping827"},"content":"        taskArrayList.remove(taskIndex);"},{"lineNumber":130,"author":{"gitId":"yongping827"},"content":"        return task;"},{"lineNumber":131,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":133,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"yongping827"},"content":"     * Gets the number of tasks in the current task list."},{"lineNumber":135,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"yongping827"},"content":"     * @return Number of tasks in the current task list"},{"lineNumber":137,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"yongping827"},"content":"    int getNumOfTasks() {"},{"lineNumber":139,"author":{"gitId":"yongping827"},"content":"        return taskArrayList.size();"},{"lineNumber":140,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":142,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"yongping827"},"content":"     * Gets the task specified by its index in the task list."},{"lineNumber":144,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"yongping827"},"content":"     * @param taskIndex Current index of the task"},{"lineNumber":146,"author":{"gitId":"yongping827"},"content":"     * @return Task at specified index if it exists, null otherwise"},{"lineNumber":147,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"yongping827"},"content":"    Task getTaskAt(int taskIndex) {"},{"lineNumber":149,"author":{"gitId":"yongping827"},"content":"        if (isOutOfRange(taskIndex)) {"},{"lineNumber":150,"author":{"gitId":"yongping827"},"content":"            return null;"},{"lineNumber":151,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"yongping827"},"content":"        return taskArrayList.get(taskIndex);"},{"lineNumber":153,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":155,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"yongping827"},"content":"     * Checks if the task list is empty."},{"lineNumber":157,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"yongping827"},"content":"     * @return true if the task list is empty, false otherwise"},{"lineNumber":159,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"yongping827"},"content":"    boolean isEmpty() {"},{"lineNumber":161,"author":{"gitId":"yongping827"},"content":"        return taskArrayList.size() \u003d\u003d 0;"},{"lineNumber":162,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":164,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"yongping827"},"content":"     * Retrieves a sublist of tasks whose descriptions contain the specified keyword."},{"lineNumber":166,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"yongping827"},"content":"     * @param keyword Keyword"},{"lineNumber":168,"author":{"gitId":"yongping827"},"content":"     * @return Sublist of tasks"},{"lineNumber":169,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"yongping827"},"content":"    public Task[] getSublistContainingKeyword(String keyword) {"},{"lineNumber":171,"author":{"gitId":"yongping827"},"content":"        assert keyword !\u003d null;"},{"lineNumber":172,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":173,"author":{"gitId":"yongping827"},"content":"        ArrayList\u003cTask\u003e tasksContainingKeyword \u003d new ArrayList\u003c\u003e();"},{"lineNumber":174,"author":{"gitId":"yongping827"},"content":"        for (Task task : taskArrayList) {"},{"lineNumber":175,"author":{"gitId":"yongping827"},"content":"            if (task.hasKeyword(keyword)) {"},{"lineNumber":176,"author":{"gitId":"yongping827"},"content":"                tasksContainingKeyword.add(task);"},{"lineNumber":177,"author":{"gitId":"yongping827"},"content":"            }"},{"lineNumber":178,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"yongping827"},"content":"        return tasksContainingKeyword.toArray(new Task[0]);"},{"lineNumber":180,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":182,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"yongping827"},"content":"     * Checks if the task index is within valid range."},{"lineNumber":184,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":185,"author":{"gitId":"yongping827"},"content":"     * @param taskIndex"},{"lineNumber":186,"author":{"gitId":"yongping827"},"content":"     * @return true if the task index is within valid range, false otherwise"},{"lineNumber":187,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"yongping827"},"content":"    private boolean isOutOfRange(int taskIndex) {"},{"lineNumber":189,"author":{"gitId":"yongping827"},"content":"        return taskIndex \u003c 0 || taskIndex \u003e\u003d taskArrayList.size();"},{"lineNumber":190,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":191}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":" * Encapsulates the user interface of duke"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"    /** String to print upon adding a new task to the task list */"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"    private final String ADD_TASK_MESSAGE \u003d \"Got it. I\u0027ve added this task:\";"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"    /** String to print upon archiving all tasks */"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"    private final String ARCHIVE_ALL_TASKS_MESSAGE \u003d \"Noted. All tasks have been archived.\";"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"    /** String to print upon archiving of a task */"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"    private final String ARCHIVE_TASK_MESSAGE \u003d \"Noted. I\u0027ve archived this task:\";"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"    /** String to print upon completion of a task */"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"    private final String COMPLETE_TASK_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\";"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    /** String to print upon deletion of a task */"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    private final String DELETE_TASK_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\";"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    /** String to print on exit */"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"    private final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"    /** String to print at the start of a sublist of matched tasks */"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"    private final String FOUND_TASKS_MESSAGE \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"    /** String to print if no matched tasks were found */"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"    private final String FOUND_ZERO_TASK_MESSAGE \u003d \"I\u0027m sorry, but none of the tasks match the keyword\";"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"    /** Strings to print on start-up */"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"    private final String[] STARTUP_MESSAGE \u003d new String[] {\"Hello! I\u0027m Duke\", \"What can I do for you?\"};"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"    /** Horizontal line */"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"    private final String HORIZONTAL_LINE \u003d \"    ____________________________________________________________\";"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"    /** String to print upon detecting an invalid character */"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"    private final String INVALID_CHARACTER_MESSAGE \u003d \"You have entered an invalid character \\\"%s\\\"\";"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"    /** String to print when an invalid input is detected */"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"    private final String INVALID_SYNTAX_MESSAGE \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :(\";"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"    /** String to print when an invalid task index is detected */"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"    private final String INVALID_TASK_INDEX_MESSAGE \u003d \"Please enter a valid task index\";"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"    /** String to print as a header preceding the task list */"},{"lineNumber":50,"author":{"gitId":"yongping827"},"content":"    private final String LIST_TASKS_MESSAGE \u003d \"Here are the tasks in your list:\";"},{"lineNumber":51,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":52,"author":{"gitId":"yongping827"},"content":"    /** String to print to reflect the number of tasks in the current task list */"},{"lineNumber":53,"author":{"gitId":"yongping827"},"content":"    private final String NUM_OF_TASKS_MESSAGE \u003d \"Now you have %d tasks in the list\";"},{"lineNumber":54,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":55,"author":{"gitId":"yongping827"},"content":"    /** Text indentation */"},{"lineNumber":56,"author":{"gitId":"yongping827"},"content":"    private final String TEXT_INDENTATION \u003d \"     \";"},{"lineNumber":57,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":58,"author":{"gitId":"yongping827"},"content":"    /** String to print when the task list is empty */"},{"lineNumber":59,"author":{"gitId":"yongping827"},"content":"    private final String ZERO_TASK_MESSAGE \u003d \"Your task list is currently empty. YAY!!! :D\";"},{"lineNumber":60,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":61,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"yongping827"},"content":"     * Gets output strings upon archiving all tasks."},{"lineNumber":63,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"yongping827"},"content":"     * @return Output strings upon archiving all tasks"},{"lineNumber":65,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"yongping827"},"content":"    public String[] getArchiveAllTasksStrings() {"},{"lineNumber":67,"author":{"gitId":"yongping827"},"content":"        String[] strings \u003d new String[] {ARCHIVE_ALL_TASKS_MESSAGE, ZERO_TASK_MESSAGE};"},{"lineNumber":68,"author":{"gitId":"yongping827"},"content":"        return strings;"},{"lineNumber":69,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":71,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"yongping827"},"content":"     * Gets output strings upon archiving a task."},{"lineNumber":73,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"yongping827"},"content":"     * @param tasks"},{"lineNumber":75,"author":{"gitId":"yongping827"},"content":"     * @param task"},{"lineNumber":76,"author":{"gitId":"yongping827"},"content":"     * @return Output strings upon archiving a task"},{"lineNumber":77,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"yongping827"},"content":"    public String[] getArchiveTaskStrings(TaskList tasks, Task task) {"},{"lineNumber":79,"author":{"gitId":"yongping827"},"content":"        assert tasks !\u003d null;"},{"lineNumber":80,"author":{"gitId":"yongping827"},"content":"        assert task !\u003d null;"},{"lineNumber":81,"author":{"gitId":"yongping827"},"content":"        String[] strings \u003d new String[] {ARCHIVE_TASK_MESSAGE, task.toString(),getNumOfTasksString(tasks)};"},{"lineNumber":82,"author":{"gitId":"yongping827"},"content":"        return strings;"},{"lineNumber":83,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":85,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"yongping827"},"content":"     * Gets the string to print to reflect the number of tasks in the current task list."},{"lineNumber":87,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"yongping827"},"content":"     * @param tasks Task list"},{"lineNumber":89,"author":{"gitId":"yongping827"},"content":"     * @return zeroTaskMessage if the task list is empty, numOfTasksMessage formatted with the number of"},{"lineNumber":90,"author":{"gitId":"yongping827"},"content":"     * tasks if the list is not empty"},{"lineNumber":91,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"yongping827"},"content":"    private String getNumOfTasksString(TaskList tasks) {"},{"lineNumber":93,"author":{"gitId":"yongping827"},"content":"        assert tasks !\u003d null;"},{"lineNumber":94,"author":{"gitId":"yongping827"},"content":"        int numOfTasks \u003d tasks.getNumOfTasks();"},{"lineNumber":95,"author":{"gitId":"yongping827"},"content":"        if (numOfTasks \u003d\u003d 0) {"},{"lineNumber":96,"author":{"gitId":"yongping827"},"content":"            return ZERO_TASK_MESSAGE;"},{"lineNumber":97,"author":{"gitId":"yongping827"},"content":"        } else {"},{"lineNumber":98,"author":{"gitId":"yongping827"},"content":"            return String.format(NUM_OF_TASKS_MESSAGE, numOfTasks);"},{"lineNumber":99,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":102,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"yongping827"},"content":"     * Gets output strings upon completing a task."},{"lineNumber":104,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"yongping827"},"content":"     * @param task Completed task"},{"lineNumber":106,"author":{"gitId":"yongping827"},"content":"     * @return Output strings upon completing a task"},{"lineNumber":107,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"yongping827"},"content":"    public String[] getCompleteTaskStrings(Task task) {"},{"lineNumber":109,"author":{"gitId":"yongping827"},"content":"        assert task !\u003d null;"},{"lineNumber":110,"author":{"gitId":"yongping827"},"content":"        String[] strings \u003d new String[] {COMPLETE_TASK_MESSAGE, task.toString()};"},{"lineNumber":111,"author":{"gitId":"yongping827"},"content":"        return strings;"},{"lineNumber":112,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":114,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"yongping827"},"content":"     * Gets output strings upon creating a new task."},{"lineNumber":116,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"yongping827"},"content":"     * @param tasks Current task list"},{"lineNumber":118,"author":{"gitId":"yongping827"},"content":"     * @param task Created task"},{"lineNumber":119,"author":{"gitId":"yongping827"},"content":"     * @return Output strings upon creating a new task"},{"lineNumber":120,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"yongping827"},"content":"    public String[] getCreateTaskStrings(TaskList tasks, Task task) {"},{"lineNumber":122,"author":{"gitId":"yongping827"},"content":"        assert tasks !\u003d null;"},{"lineNumber":123,"author":{"gitId":"yongping827"},"content":"        assert task !\u003d null;"},{"lineNumber":124,"author":{"gitId":"yongping827"},"content":"        String[] strings \u003d new String[] {ADD_TASK_MESSAGE, task.toString(), getNumOfTasksString(tasks)};"},{"lineNumber":125,"author":{"gitId":"yongping827"},"content":"        return strings;"},{"lineNumber":126,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":128,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"yongping827"},"content":"     * Gets strings upon deleting a task."},{"lineNumber":130,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"yongping827"},"content":"     * @param tasks Current task list"},{"lineNumber":132,"author":{"gitId":"yongping827"},"content":"     * @param task Deleted task"},{"lineNumber":133,"author":{"gitId":"yongping827"},"content":"     * @return Output strings upon deleting a task"},{"lineNumber":134,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"yongping827"},"content":"    public String[] getDeleteTaskStrings(TaskList tasks, Task task) {"},{"lineNumber":136,"author":{"gitId":"yongping827"},"content":"        assert tasks !\u003d null;"},{"lineNumber":137,"author":{"gitId":"yongping827"},"content":"        assert task !\u003d null;"},{"lineNumber":138,"author":{"gitId":"yongping827"},"content":"        String[] strings \u003d new String[] {DELETE_TASK_MESSAGE, task.toString(),getNumOfTasksString(tasks)};"},{"lineNumber":139,"author":{"gitId":"yongping827"},"content":"        return strings;"},{"lineNumber":140,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":142,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"yongping827"},"content":"     * Gets strings upon exit."},{"lineNumber":144,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"yongping827"},"content":"     * @return Output strings upon exit"},{"lineNumber":146,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"yongping827"},"content":"    public String[] getExitStrings() {"},{"lineNumber":148,"author":{"gitId":"yongping827"},"content":"        String[] strings \u003d new String[] {EXIT_MESSAGE};"},{"lineNumber":149,"author":{"gitId":"yongping827"},"content":"        return strings;"},{"lineNumber":150,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":152,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"yongping827"},"content":"     * Prints strings upon start-up."},{"lineNumber":154,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"yongping827"},"content":"    void printHello() {"},{"lineNumber":156,"author":{"gitId":"yongping827"},"content":"        print(STARTUP_MESSAGE);"},{"lineNumber":157,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":159,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"yongping827"},"content":"     * Gets strings upon start-up."},{"lineNumber":161,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":162,"author":{"gitId":"yongping827"},"content":"     * @return Output strings upon start-up"},{"lineNumber":163,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"yongping827"},"content":"    String[] getHelloStrings() {"},{"lineNumber":165,"author":{"gitId":"yongping827"},"content":"        return STARTUP_MESSAGE;"},{"lineNumber":166,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":168,"author":{"gitId":"yongping827"},"content":"    public String[] getInvalidCharacterStrings(String invalidChar) {"},{"lineNumber":169,"author":{"gitId":"yongping827"},"content":"        String[] strings \u003d new String[] {String.format(INVALID_CHARACTER_MESSAGE, invalidChar)};"},{"lineNumber":170,"author":{"gitId":"yongping827"},"content":"        return strings;"},{"lineNumber":171,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":173,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"yongping827"},"content":"     * Gets strings upon handling an invalid input."},{"lineNumber":175,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":176,"author":{"gitId":"yongping827"},"content":"     * @return Output strings upon handling an invalid input"},{"lineNumber":177,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"yongping827"},"content":"    public String[] getInvalidInputStrings() {"},{"lineNumber":179,"author":{"gitId":"yongping827"},"content":"        String[] strings \u003d new String[] {INVALID_SYNTAX_MESSAGE};"},{"lineNumber":180,"author":{"gitId":"yongping827"},"content":"        return strings;"},{"lineNumber":181,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":183,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"yongping827"},"content":"     * Gets strings upon receiving an invalid task index."},{"lineNumber":185,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":186,"author":{"gitId":"yongping827"},"content":"     * @return Output strings upon receiving an invalid task index"},{"lineNumber":187,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"yongping827"},"content":"    public String[] getInvalidTaskIndexStrings() {"},{"lineNumber":189,"author":{"gitId":"yongping827"},"content":"        String[] strings \u003d new String[] {INVALID_TASK_INDEX_MESSAGE};"},{"lineNumber":190,"author":{"gitId":"yongping827"},"content":"        return strings;"},{"lineNumber":191,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":193,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"yongping827"},"content":"     * Gets string representation of all tasks."},{"lineNumber":195,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":196,"author":{"gitId":"yongping827"},"content":"     * @param tasks Current task list"},{"lineNumber":197,"author":{"gitId":"yongping827"},"content":"     * @return Output string representation of all tasks"},{"lineNumber":198,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"yongping827"},"content":"    public String[] getTaskListStrings(TaskList tasks) {"},{"lineNumber":200,"author":{"gitId":"yongping827"},"content":"        assert tasks !\u003d null;"},{"lineNumber":201,"author":{"gitId":"yongping827"},"content":"        if (tasks.isEmpty()) {"},{"lineNumber":202,"author":{"gitId":"yongping827"},"content":"            return new String[] {ZERO_TASK_MESSAGE};"},{"lineNumber":203,"author":{"gitId":"yongping827"},"content":"        } else {"},{"lineNumber":204,"author":{"gitId":"yongping827"},"content":"            String[] strings \u003d new String[tasks.getNumOfTasks() + 1];"},{"lineNumber":205,"author":{"gitId":"yongping827"},"content":"            strings[0] \u003d LIST_TASKS_MESSAGE;"},{"lineNumber":206,"author":{"gitId":"yongping827"},"content":"            for (int i \u003d 1; i \u003c strings.length; i++) {"},{"lineNumber":207,"author":{"gitId":"yongping827"},"content":"                strings[i] \u003d tasks.getTaskAt(i - 1).toString();"},{"lineNumber":208,"author":{"gitId":"yongping827"},"content":"            }"},{"lineNumber":209,"author":{"gitId":"yongping827"},"content":"            return strings;"},{"lineNumber":210,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":211,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":213,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":214,"author":{"gitId":"yongping827"},"content":"     * Gets strings upon finding matching tasks."},{"lineNumber":215,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":216,"author":{"gitId":"yongping827"},"content":"     * @param tasks Sublist of tasks"},{"lineNumber":217,"author":{"gitId":"yongping827"},"content":"     * @return Output strings upon finding matching tasks"},{"lineNumber":218,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":219,"author":{"gitId":"yongping827"},"content":"    public String[] getTasksWithKeywordStrings(Task[] tasks) {"},{"lineNumber":220,"author":{"gitId":"yongping827"},"content":"        assert tasks !\u003d null;"},{"lineNumber":221,"author":{"gitId":"yongping827"},"content":"        String[] strings \u003d new String[tasks.length + 1];"},{"lineNumber":222,"author":{"gitId":"yongping827"},"content":"        if (tasks.length \u003d\u003d 0) {"},{"lineNumber":223,"author":{"gitId":"yongping827"},"content":"            strings[0] \u003d FOUND_ZERO_TASK_MESSAGE;"},{"lineNumber":224,"author":{"gitId":"yongping827"},"content":"        } else {"},{"lineNumber":225,"author":{"gitId":"yongping827"},"content":"            strings[0] \u003d FOUND_TASKS_MESSAGE;"},{"lineNumber":226,"author":{"gitId":"yongping827"},"content":"            for (int i \u003d 1; i \u003c strings.length; i++) {"},{"lineNumber":227,"author":{"gitId":"yongping827"},"content":"                strings[i] \u003d tasks[i - 1].toString();"},{"lineNumber":228,"author":{"gitId":"yongping827"},"content":"            }"},{"lineNumber":229,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"yongping827"},"content":"        return strings;"},{"lineNumber":231,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":233,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":234,"author":{"gitId":"yongping827"},"content":"     * Prints the strings with top and bottom horizontal lines and indentation."},{"lineNumber":235,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":236,"author":{"gitId":"yongping827"},"content":"     * @param strings Array of strings to be printed"},{"lineNumber":237,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":238,"author":{"gitId":"yongping827"},"content":"    public void print(String[] strings) {"},{"lineNumber":239,"author":{"gitId":"yongping827"},"content":"        assert strings !\u003d null;"},{"lineNumber":240,"author":{"gitId":"yongping827"},"content":"        System.out.println(HORIZONTAL_LINE);"},{"lineNumber":241,"author":{"gitId":"yongping827"},"content":"        for(String string : strings) {"},{"lineNumber":242,"author":{"gitId":"yongping827"},"content":"            System.out.print(TEXT_INDENTATION);"},{"lineNumber":243,"author":{"gitId":"yongping827"},"content":"            System.out.println(string);"},{"lineNumber":244,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":245,"author":{"gitId":"yongping827"},"content":"        System.out.println(HORIZONTAL_LINE);"},{"lineNumber":246,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":247}},{"path":"src/main/java/duke/command/ArchiveAllTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"public class ArchiveAllTasksCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"     * Executes the command to archive all tasks."},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"     * @param storage Storage"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"     * @param taskList Task list"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"     * @param archive Archive"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"     * @param ui Ui"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"     * @return Output strings displayed in the UI showing task archiving"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"    public String[] execute(Storage storage, TaskList taskList, TaskList archive, Ui ui) {"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"        assert taskList !\u003d null;"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"        assert archive !\u003d null;"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"        assert ui !\u003d null;"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"        archive.addTasks(taskList);"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"        taskList.deleteAllTasks();"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"        return ui.getArchiveAllTasksStrings();"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":28}},{"path":"src/main/java/duke/command/ArchiveTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"public class ArchiveTaskCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"    /** Index of the task in the main task list to be archived */"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"    private final int taskIndex;"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"     * @param taskIndex Index of the task in the main task list"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"    public ArchiveTaskCommand(int taskIndex) {"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"     * Executes the command to archive the task."},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"     * @param storage Storage"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"     * @param taskList Task list"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"     * @param archive Archive"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"     * @param ui Ui"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"     * @return Output strings displayed in the UI showing task archiving"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"    public String[] execute(Storage storage, TaskList taskList, TaskList archive, Ui ui) {"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"        assert taskList !\u003d null;"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"        assert archive !\u003d null;"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"        assert ui !\u003d null;"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"        Task task \u003d taskList.deleteTaskAt(taskIndex);"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"        if (task \u003d\u003d null) {"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"            return ui.getInvalidTaskIndexStrings();"},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"        archive.addTask(task);"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"        return ui.getArchiveTaskStrings(taskList, task);"},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":44}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":" * Encapsulates a command."},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":" * All command types must extend from this class."},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"     * Executes the command."},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"     * @param storage Storage"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"     * @param taskList Task list"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"     * @param archive"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"     * @param ui Ui"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"     * @return Output strings displayed in the UI"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    public abstract String[] execute(Storage storage, TaskList taskList, TaskList archive, Ui ui);"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":23}},{"path":"src/main/java/duke/command/CompleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":" * Encapsulates a command to complete a task."},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"public class CompleteTaskCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"    /** Index of the task to complete in the current task list */"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"    private final int taskIndex;"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"     * @param taskIndex Index of the task"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"    public CompleteTaskCommand(int taskIndex) {"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"     * Executes the command to complete the task."},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"     * @param storage Storage"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"     * @param taskList Task list"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"     * @param archive Archive"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"     * @param ui Ui"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"     * @return Output strings displayed in the UI showing task completion"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"    public String[] execute(Storage storage, TaskList taskList, TaskList archive, Ui ui) {"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"        assert storage !\u003d null;"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"        assert taskList !\u003d null;"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"        assert ui !\u003d null;"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"        Task task \u003d taskList.completeTaskAt(taskIndex);"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"        if (task \u003d\u003d null) {"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"            return ui.getInvalidTaskIndexStrings();"},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"        return ui.getCompleteTaskStrings(task);"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":46}},{"path":"src/main/java/duke/command/CreateDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":" * Encapsulates a command to create a deadline"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"public class CreateDeadlineCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"    /** Date of the deadline */"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"    private final LocalDate date;"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"    /** Description of the deadline */"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"    private final String description;"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    /** Initial completion status of the deadline */"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    private final boolean isComplete;"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"     * @param description Description of the deadline"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"     * @param isComplete Initial completion status of the deadline"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"     * @param date Date of the deadline"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"    public CreateDeadlineCommand(String description, boolean isComplete, LocalDate date) {"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"        this.date \u003d date;"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"        this.description \u003d description;"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"        this.isComplete \u003d isComplete;"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"     * Executes the command to create a deadline."},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"     * @param storage Storage"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"     * @param taskList Task list"},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"     * @param archive Archive"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"     * @param ui Ui"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"     * @return Output strings displayed in the UI showing deadline creation"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":"    public String[] execute(Storage storage, TaskList taskList, TaskList archive, Ui ui) {"},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"        assert storage !\u003d null;"},{"lineNumber":50,"author":{"gitId":"yongping827"},"content":"        assert taskList !\u003d null;"},{"lineNumber":51,"author":{"gitId":"yongping827"},"content":"        assert ui !\u003d null;"},{"lineNumber":52,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":53,"author":{"gitId":"yongping827"},"content":"        Deadline newDeadline \u003d taskList.addDeadline(description, isComplete, date);"},{"lineNumber":54,"author":{"gitId":"yongping827"},"content":"        return ui.getCreateTaskStrings(taskList, newDeadline);"},{"lineNumber":55,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":56}},{"path":"src/main/java/duke/command/CreateEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":" * Encapsulates a command to create an event"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"public class CreateEventCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"    /** Date of the event */"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"    private final LocalDate date;"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"    /** Description of the event */"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"    private final String description;"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    /** Initial completion status of the event */"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    private final boolean isComplete;"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"     * @param description Description of the event"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"     * @param isComplete Initial completion status of the event"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"     * @param date Date of the event"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"    public CreateEventCommand(String description, boolean isComplete, LocalDate date) {"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"        this.date \u003d date;"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"        this.description \u003d description;"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"        this.isComplete \u003d isComplete;"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"     * Executes the command to create an event."},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"     * @param storage Storage"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"     * @param taskList Task list"},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"     * @param archive Archive"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"     * @param ui Ui"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"     * @return Output strings displayed on the UI showing event creation"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":"    public String[] execute(Storage storage, TaskList taskList, TaskList archive, Ui ui) {"},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"        assert storage !\u003d null;"},{"lineNumber":50,"author":{"gitId":"yongping827"},"content":"        assert taskList !\u003d null;"},{"lineNumber":51,"author":{"gitId":"yongping827"},"content":"        assert ui !\u003d null;"},{"lineNumber":52,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":53,"author":{"gitId":"yongping827"},"content":"        Event newEvent \u003d taskList.addEvent(description, isComplete, date);"},{"lineNumber":54,"author":{"gitId":"yongping827"},"content":"        return ui.getCreateTaskStrings(taskList, newEvent);"},{"lineNumber":55,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":56}},{"path":"src/main/java/duke/command/CreateTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.task.ToDo;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":" * Encapsulates a command to create a todo"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"public class CreateTodoCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"    /** Description of the todo */"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"    private final String description;"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"    /** Initial completion status of the todo */"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"    private final boolean isComplete;"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"     * @param description Description of the todo"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"     * @param isComplete Initial completion status of the todo"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    public CreateTodoCommand(String description, boolean isComplete) {"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"        this.description \u003d description;"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"        this.isComplete \u003d isComplete;"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"     * Executes the command to create a todo"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"     * @param storage Storage"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"     * @param taskList Task list"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"     * @param archive Archive"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"     * @param ui Ui"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"     * @return Output strings displayed on the UI showing todo creation"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"    public String[] execute(Storage storage, TaskList taskList, TaskList archive, Ui ui) {"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"        assert storage !\u003d null;"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"        assert taskList !\u003d null;"},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"        assert ui !\u003d null;"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"        ToDo newTodo \u003d taskList.addTodo(description, isComplete);"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"        return ui.getCreateTaskStrings(taskList, newTodo);"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":48}},{"path":"src/main/java/duke/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":" * Encapsulates a command to delete a task"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"public class DeleteTaskCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"    /** Index of the task to be deleted in the current task list */"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"    final int taskIndex;"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"     * @param taskIndex Index of the task"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    public DeleteTaskCommand(int taskIndex) {"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"     * Executes the command to delete the task."},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"     * @param storage Storage"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"     * @param taskList Task list"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"     * @param archive Archive"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"     * @param ui Ui"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"     * @return Output strings displayed on the UI showing task deletion"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"    public String[] execute(Storage storage, TaskList taskList, TaskList archive, Ui ui) {"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"        assert taskList !\u003d null;"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"        assert ui !\u003d null;"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"        Task task \u003d taskList.deleteTaskAt(taskIndex);"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"        if (task \u003d\u003d null) {"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"            return ui.getInvalidTaskIndexStrings();"},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"        return ui.getDeleteTaskStrings(taskList, task);"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":46}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":" * Encapsulates a command to exit duke"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"     * Executes the command to exit duke."},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"     * @param storage Storage"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"     * @param taskList Task list"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"     * @param archive"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"     * @param ui Ui"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"     * @return Output strings displayed on the UI showing exit"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    public String[] execute(Storage storage, TaskList taskList, TaskList archive, Ui ui) {"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"        assert storage !\u003d null;"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"        assert taskList !\u003d null;"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"        assert ui !\u003d null;"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"        storage.resetMainDataFile();"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"        storage.resetArchiveDataFile();"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"        storage.saveMainTaskList(taskList);"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"        storage.saveArchive(archive);"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"        return ui.getExitStrings();"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":33}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":" * Encapsulates a command to find tasks that match a given keyword"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"    /** Keyword to find */"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"    final private String keyword;"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"     * @param keyword Keyword"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"     * Execute the command to find matching tasks."},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"     * @param storage Storage"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"     * @param taskList Task list"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"     * @param archive"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"     * @param ui Ui"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"     * @return Output strings displayed on the UI showing sublist of tasks containing the specified keyword"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"    public String[] execute(Storage storage, TaskList taskList, TaskList archive, Ui ui) {"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"        assert taskList !\u003d null;"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"        assert ui !\u003d null;"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"        Task[] sublist \u003d taskList.getSublistContainingKeyword(keyword);"},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"        return ui.getTasksWithKeywordStrings(sublist);"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":42}},{"path":"src/main/java/duke/command/InvalidCharacterCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"public class InvalidCharacterCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"    private final String invalidChar;"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"    public InvalidCharacterCommand(String invalidChar) {"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"        this.invalidChar \u003d invalidChar;"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"    public String[] execute(Storage storage, TaskList taskList, TaskList archive, Ui ui) {"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"        return ui.getInvalidCharacterStrings(invalidChar);"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":19}},{"path":"src/main/java/duke/command/InvalidInputCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":" * Encapsulates a command to handle an invalid input"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"public class InvalidInputCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"     * Executes the command to handle an invalid input."},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"     * @param storage Storage"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"     * @param taskList Task list"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"     * @param archive"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"     * @param ui Ui"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"     * @return Output strings displayed on the UI signifying invalid input"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    public String[] execute(Storage storage, TaskList taskList, TaskList archive, Ui ui) {"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"        assert ui !\u003d null;"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"        return ui.getInvalidInputStrings();"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":27}},{"path":"src/main/java/duke/command/ListTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":" * Encapsulates a command to list the tasks in the current task list"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"public class ListTasksCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"     * Executes the command to list the tasks in the current task list."},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"     * @param storage Storage"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"     * @param taskList Task list"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"     * @param archive"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"     * @param ui Ui"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"     * @return Output strings displayed on the UI showing current task list"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    public String[] execute(Storage storage, TaskList taskList, TaskList archive, Ui ui) {"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"        assert taskList !\u003d null;"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"        assert ui !\u003d null;"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"        return ui.getTaskListStrings(taskList);"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":28}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":" * Encapsulates a deadline"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"    private final int NUM_OF_DATA_STRINGS \u003d 4;"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"    private final String TASK_TYPE_STRING \u003d \"deadline\";"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"    private final String PRINTING_STRING \u003d \"[D][%s] %s (by: %s)\";"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"     * @param description Description of the deadline"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"     * @param isComplete Completion status of the task"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"     * @param date Date of the deadline"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"    public Deadline(String description, boolean isComplete, LocalDate date) {"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"        super(description, isComplete, date);"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"     * Gets the string representation of the deadline to be written into the file upon exit."},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"     * @return String representation of the deadline in the file"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"    public String[] getDataStrings() {"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"        String[] dataStrings \u003d new String[NUM_OF_DATA_STRINGS];"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"        dataStrings[0] \u003d TASK_TYPE_STRING;"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"        dataStrings[1] \u003d String.valueOf(isComplete);"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"        dataStrings[2] \u003d description;"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"        dataStrings[3] \u003d date.toString();"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"        return dataStrings;"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"     * Gets the string representation of the deadline to be printed in the UI."},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"     * @return String representation of the deadline displayed on the UI"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"        return String.format(PRINTING_STRING, getStatusIcon(), description, getDateString());"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":49}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":" * Encapsulates an event"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"    private final int NUM_OF_DATA_STRINGS \u003d 4;"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"    private final String TASK_TYPE_STRING \u003d \"event\";"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"    private final String PRINTING_STRING \u003d \"[E][%s] %s (at: %s)\";"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"     * @param description Description of the event"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"     * @param isComplete Completion status of the event"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"     * @param date Date of the event"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"    public Event(String description, boolean isComplete, LocalDate date) {"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"        super(description, isComplete, date);"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"     * Gets the string representation of the event to be written into the file upon exit"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"     * @return String representation of the event in the file"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"    public String[] getDataStrings() {"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"        String[] dataStrings \u003d new String[NUM_OF_DATA_STRINGS];"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"        dataStrings[0] \u003d TASK_TYPE_STRING;"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"        dataStrings[1] \u003d String.valueOf(isComplete);"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"        dataStrings[2] \u003d description;"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"        dataStrings[3] \u003d date.toString();"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"        return dataStrings;"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"     * Gets the string representation of the event to be printed in the UI."},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"     * @return String representation of the event displayed on the UI"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"        return String.format(PRINTING_STRING, getStatusIcon(), description, getDateString());"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":49}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"import java.time.format.TextStyle;"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":" * Encapsulates a task"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":" * All types of task must extend from this class"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"public abstract class Task {"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"    private final int NUM_OF_DATA_STRINGS \u003d 3;"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"    private final String TASK_TYPE_STRING \u003d \"task\";"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"    private final String PRINTING_STRING \u003d \"[%s] %s\";"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"    /** Date of the task, null if date is not associated with the task */"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"    final LocalDate date;"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"    /** Description of the task */"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"    final String description;"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    /** Completion status of the task */"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"    boolean isComplete;"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"     * @param description Description of the task"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"     * @param isCompleted Completion status of the task"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"     * @param date Date of the task, null if date is not associated with the task"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"    protected Task(String description, boolean isCompleted, LocalDate date) {"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"        this.date \u003d date;"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"        this.description \u003d description;"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"        this.isComplete \u003d isCompleted;"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"     * Gets the string representation of the task to be written into the file upon exit"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"     * @return String representation of the task in the file"},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"    public String[] getDataStrings() {"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"        String[] dataStrings \u003d new String[NUM_OF_DATA_STRINGS];"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"        dataStrings[0] \u003d TASK_TYPE_STRING;"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"        dataStrings[1] \u003d String.valueOf(isComplete);"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":"        dataStrings[2] \u003d description;"},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"        return dataStrings;"},{"lineNumber":50,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":52,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"yongping827"},"content":"     * Gets the string representation of the date of the task to be printed in the UI"},{"lineNumber":54,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"yongping827"},"content":"     * @return String representation of the date of the task in the UI"},{"lineNumber":56,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"yongping827"},"content":"    String getDateString() {"},{"lineNumber":58,"author":{"gitId":"yongping827"},"content":"        if (date \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitId":"yongping827"},"content":"            return null;"},{"lineNumber":60,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"yongping827"},"content":"        return date.getYear() + \" \" +"},{"lineNumber":62,"author":{"gitId":"yongping827"},"content":"                date.getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH) + \" \" +"},{"lineNumber":63,"author":{"gitId":"yongping827"},"content":"                date.getDayOfMonth();"},{"lineNumber":64,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":66,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"yongping827"},"content":"     * Gets the status icon reflecting the completion status of the task."},{"lineNumber":68,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"yongping827"},"content":"     * @return Status icon"},{"lineNumber":70,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"yongping827"},"content":"    String getStatusIcon() {"},{"lineNumber":72,"author":{"gitId":"yongping827"},"content":"        if (isComplete) {"},{"lineNumber":73,"author":{"gitId":"yongping827"},"content":"            return \"\\u2713\";"},{"lineNumber":74,"author":{"gitId":"yongping827"},"content":"        } else {"},{"lineNumber":75,"author":{"gitId":"yongping827"},"content":"            return \"\\u2718\";"},{"lineNumber":76,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":79,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"yongping827"},"content":"     * Marks the task as complete"},{"lineNumber":81,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"yongping827"},"content":"    public void setComplete() {"},{"lineNumber":83,"author":{"gitId":"yongping827"},"content":"        isComplete \u003d true;"},{"lineNumber":84,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":86,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"yongping827"},"content":"     * Gets the string representation of the task to be printed in the UI"},{"lineNumber":88,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"yongping827"},"content":"     * @return String representation of the task in the UI"},{"lineNumber":90,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"yongping827"},"content":"    public String toString() {"},{"lineNumber":93,"author":{"gitId":"yongping827"},"content":"        return String.format(PRINTING_STRING, getStatusIcon(), description);"},{"lineNumber":94,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":96,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"yongping827"},"content":"     * Checks if the description contains specified keyword"},{"lineNumber":98,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"yongping827"},"content":"     * @param keyword Keyword"},{"lineNumber":100,"author":{"gitId":"yongping827"},"content":"     * @return True if keyword is found in description, false otherwise"},{"lineNumber":101,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"yongping827"},"content":"    public boolean hasKeyword(String keyword) {"},{"lineNumber":103,"author":{"gitId":"yongping827"},"content":"        return description.contains(keyword);"},{"lineNumber":104,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":105}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":" * Encapsulates a todo"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":" */"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"    private final int NUM_OF_DATA_STRINGS \u003d 3;"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"    private final String TASK_TYPE_STRING \u003d \"todo\";"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"    private final String PRINTING_STRING \u003d \"[T][%s] %s\";"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"     * Constructor"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"     * @param description Description of the todo"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"     * @param isComplete Completion status of the todo"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"    public ToDo(String description, boolean isComplete) {"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"        super(description, isComplete, null);"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"     * Gets the string representation of the todo to be written into the file upon exit"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"     * @return String representation of the todo in the file"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"    public String[] getDataStrings() {"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"        String[] dataStrings \u003d new String[NUM_OF_DATA_STRINGS];"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"        dataStrings[0] \u003d TASK_TYPE_STRING;"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":"        dataStrings[1] \u003d String.valueOf(isComplete);"},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"        dataStrings[2] \u003d description;"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"        return dataStrings;"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"     * Gets the string representation of the todo to be printed in the UI."},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"     * @return String representation of the todo displayed on the UI"},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"        return String.format(PRINTING_STRING, getStatusIcon(), description);"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":45}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"yongping827":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"1000.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"958.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"958.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"957.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"952.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"yongping827":19}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"public class TaskListTest {"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"    void addDeadline_normalInput_deadlineAdded() {"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"        taskList.addDeadline(\"deadline_desc\", false, LocalDate.of(2021, 12, 31));"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"        assertEquals(taskList.getNumOfTasks(), 1);"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"    void addEvent_normalInput_eventAdded() {"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"        taskList.addEvent(\"event_desc\", false, LocalDate.of(2021, 12, 31));"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"        assertEquals(taskList.getNumOfTasks(), 1);"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"    void addTodo_normalInput_todoAdded() {"},{"lineNumber":27,"author":{"gitId":"yongping827"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":28,"author":{"gitId":"yongping827"},"content":"        taskList.addTodo(\"todo_desc\", false);"},{"lineNumber":29,"author":{"gitId":"yongping827"},"content":"        assertEquals(taskList.getNumOfTasks(), 1);"},{"lineNumber":30,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":32,"author":{"gitId":"yongping827"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"yongping827"},"content":"    void deleteAllTasks_noInput_allTasksDeleted() {"},{"lineNumber":34,"author":{"gitId":"yongping827"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":35,"author":{"gitId":"yongping827"},"content":"        taskList.addDeadline(\"deadline_desc\", false, LocalDate.of(2021, 12, 31));"},{"lineNumber":36,"author":{"gitId":"yongping827"},"content":"        taskList.addEvent(\"event_desc\", false, LocalDate.of(2021, 12, 31));"},{"lineNumber":37,"author":{"gitId":"yongping827"},"content":"        taskList.addTodo(\"todo_desc\", false);"},{"lineNumber":38,"author":{"gitId":"yongping827"},"content":"        taskList.deleteAllTasks();"},{"lineNumber":39,"author":{"gitId":"yongping827"},"content":"        assertTrue(taskList.isEmpty());"},{"lineNumber":40,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":42,"author":{"gitId":"yongping827"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"yongping827"},"content":"    void deleteTaskAt_normalInput_taskDeleted() {"},{"lineNumber":44,"author":{"gitId":"yongping827"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":45,"author":{"gitId":"yongping827"},"content":"        taskList.addDeadline(\"deadline_desc\", false, LocalDate.of(2021, 12, 31));"},{"lineNumber":46,"author":{"gitId":"yongping827"},"content":"        taskList.addEvent(\"event_desc\", false, LocalDate.of(2021, 12, 31));"},{"lineNumber":47,"author":{"gitId":"yongping827"},"content":"        taskList.addTodo(\"todo_desc\", false);"},{"lineNumber":48,"author":{"gitId":"yongping827"},"content":"        taskList.deleteTaskAt(2);"},{"lineNumber":49,"author":{"gitId":"yongping827"},"content":"        assertEquals(taskList.getNumOfTasks(), 2);"},{"lineNumber":50,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":52,"author":{"gitId":"yongping827"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"yongping827"},"content":"    void deleteTaskAt_invalidIndex_noTasksDeleted() {"},{"lineNumber":54,"author":{"gitId":"yongping827"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":55,"author":{"gitId":"yongping827"},"content":"        taskList.addDeadline(\"deadline_desc\", false, LocalDate.of(2021, 12, 31));"},{"lineNumber":56,"author":{"gitId":"yongping827"},"content":"        taskList.addEvent(\"event_desc\", false, LocalDate.of(2021, 12, 31));"},{"lineNumber":57,"author":{"gitId":"yongping827"},"content":"        taskList.addTodo(\"todo_desc\", false);"},{"lineNumber":58,"author":{"gitId":"yongping827"},"content":"        taskList.deleteTaskAt(5);"},{"lineNumber":59,"author":{"gitId":"yongping827"},"content":"        assertEquals(taskList.getNumOfTasks(), 3);"},{"lineNumber":60,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":61}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"public class DeadlineTest {"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"    void toString_normalInput_correctOutput() {"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"        Deadline deadline \u003d new Deadline(\"deadline1\", false, LocalDate.of(2021, 12, 31));"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"        assertEquals(\"[D][\\u2718] deadline1 (by: 2021 Dec 31)\", deadline.toString());"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"    void getDataString_noInput_correctOutput() {"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"        Deadline deadline \u003d new Deadline(\"deadline1\", false, LocalDate.of(2021, 12, 31));"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"        String[] expected \u003d new String[] {\"deadline\", \"false\", \"deadline1\", \"2021-12-31\"};"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"        String[] actual \u003d deadline.getDataStrings();"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"        assertEquals(expected.length, actual.length);"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"            assertEquals(expected[i], actual[i]);"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":26}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"public class EventTest {"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"    void toString_normalInput_correctOutput() {"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"        Event event \u003d new Event(\"event1\", false, LocalDate.of(2021, 12, 31));"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"        assertEquals(\"[E][\\u2718] event1 (at: 2021 Dec 31)\", event.toString());"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"    void getDataString_noInput_correctOutput() {"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"        Event event \u003d new Event(\"event1\", false, LocalDate.of(2021, 12, 31));"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"        String[] expected \u003d new String[] {\"event\", \"false\", \"event1\", \"2021-12-31\"};"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"        String[] actual \u003d event.getDataStrings();"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"        assertEquals(expected.length, actual.length);"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"            assertEquals(expected[i], actual[i]);"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":26}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"public class ToDoTest {"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"    void toString_normalInput_correctOutput() {"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"        ToDo todo \u003d new ToDo(\"todo1\", false);"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"        assertEquals(\"[T][\\u2718] todo1\", todo.toString());"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":""},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"    void getDataString_noInput_correctOutput() {"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"        ToDo todo \u003d new ToDo(\"todo1\", false);"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"        String[] expected \u003d new String[] {\"todo\", \"false\", \"todo1\"};"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"        String[] actual \u003d todo.getDataStrings();"},{"lineNumber":19,"author":{"gitId":"yongping827"},"content":"        assertEquals(expected.length, actual.length);"},{"lineNumber":20,"author":{"gitId":"yongping827"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {"},{"lineNumber":21,"author":{"gitId":"yongping827"},"content":"            assertEquals(expected[i], actual[i]);"},{"lineNumber":22,"author":{"gitId":"yongping827"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"yongping827"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yongping827"},"content":"}"}],"authorContributionMap":{"yongping827":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yongping827"},"content":"invalidinput"},{"lineNumber":2,"author":{"gitId":"yongping827"},"content":"list"},{"lineNumber":3,"author":{"gitId":"yongping827"},"content":"todo todo1"},{"lineNumber":4,"author":{"gitId":"yongping827"},"content":"deadline deadline1 /by datetime1"},{"lineNumber":5,"author":{"gitId":"yongping827"},"content":"event event1 /at datetime2"},{"lineNumber":6,"author":{"gitId":"yongping827"},"content":"list"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"yongping827"},"content":"done 2"},{"lineNumber":9,"author":{"gitId":"yongping827"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"done3"},{"lineNumber":11,"author":{"gitId":"yongping827"},"content":"done invalid"},{"lineNumber":12,"author":{"gitId":"yongping827"},"content":"list"},{"lineNumber":13,"author":{"gitId":"yongping827"},"content":"todo"},{"lineNumber":14,"author":{"gitId":"yongping827"},"content":"deadline deadline2without/by"},{"lineNumber":15,"author":{"gitId":"yongping827"},"content":"deadline deadline3 /by baddatetime1 /by baddatetime2"},{"lineNumber":16,"author":{"gitId":"yongping827"},"content":"event event2without/at"},{"lineNumber":17,"author":{"gitId":"yongping827"},"content":"event event 3 /at baddatetime3 /at baddatetime4"},{"lineNumber":18,"author":{"gitId":"yongping827"},"content":"bye"}],"authorContributionMap":{"yongping827":18}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"yongping827"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"yongping827"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"yongping827":2,"-":19}}]
