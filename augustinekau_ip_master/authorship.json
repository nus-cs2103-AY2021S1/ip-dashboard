[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "augustinekau": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "augustinekau": 17
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * \u003ch\u003eduke.Deadline duke.Task Type\u003c/h\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * This is a type of tasks that need to be done before a specific date/time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructor for the deadline task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param description Name of the task input by user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param by Date of the task is due."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String[] str \u003d by.split(\" \", 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.date \u003d LocalDate.parse(str[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.time \u003d LocalTime.parse(str[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Getter for the date of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return LocalDate Date of the deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Getter for the time of the deadline."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return LocalTime Time of the deadline that is due."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Overridden toString method to output name, type and status of task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String This returns a string."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + getDate().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \", \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + getTime().format(DateTimeFormatter.ofPattern(\"hh:mm a\")) + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 54
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        dialog.setStyle(\"-fx-border-color: #F6F6F6;\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        + \"-fx-border-width: 1;\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        + \"-fx-border-style: solid;\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        + \"-fx-padding: 5 5 5 5;\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        + \"-fx-background-color: #F6F6F6;\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        + \"-fx-background-radius: 5;\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        + \"-fx-border-radius: 5;\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 68
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * \u003ch1\u003eduke.Duke!\u003c/h1\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * The duke.Duke program implements an application that"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * helps you keep track of your tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * @author Augustine Kau"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * @since 2020-08-18"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final TaskList ls;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructor for duke.Duke"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param filePath For file todolist.txt."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @throws IOException On input error."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Duke(String filePath) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ls \u003d new TaskList(storage.loadFile());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Command that user can input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    enum Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        BYE, LIST, DONE, TODO, DEADLINE, EVENT, DELETE, CHECK, FIND"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the response of Duke given the input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param str String User input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Duke\u0027s response."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @throws IOException Exception."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String getResponse(String str) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String[] arr \u003d str.split(\" \", 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String upperCaseCmd \u003d Parser.parseCmd(arr[0]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Command cmd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            cmd \u003d Command.valueOf(upperCaseCmd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return ui.outputInvalidInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        switch (cmd) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            // rewrite the file to update latest changes"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            Storage.saveFile(this.storage.getFile(), ls);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return ui.outputBye();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            if (ls.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                return ui.outputListNoTask();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                return ui.outputListTask(ls);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                int numToBeMarkedAsDone \u003d Parser.parseInt(str);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                Task tsk \u003d ls.get(numToBeMarkedAsDone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                tsk.markAsDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                ls.set(numToBeMarkedAsDone, tsk);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                return ui.outputDoneMsg(tsk);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                return ui.outputDoneError();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                Task newTask \u003d new Todo(arr[1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                ls.add(newTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                return ui.outputTodoMsg(ls, newTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                return ui.outputTodoError();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                String[] arrOfStr \u003d Parser.parse(arr, 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    Task newTask \u003d new Deadline(arrOfStr[0], arrOfStr[1]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    ls.add(newTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    return ui.outputDeadlineEventMsg(ls, newTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                } catch (Exception ex) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    return ui.outputDeadlineFormatError();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                return ui.outputDeadlineError();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                String[] arrOfStr \u003d Parser.parse(arr, 2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    Task newTask \u003d new Event(arrOfStr[0], arrOfStr[1]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    ls.add(newTask);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    return ui.outputDeadlineEventMsg(ls, newTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                } catch (Exception ex) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    return ui.outputEventFormatError();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                return ui.outputEventError();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                int numToBeDeleted \u003d Parser.parseInt(str);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                Task tsk \u003d ls.get(numToBeDeleted);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                ls.remove(numToBeDeleted);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                return ui.outputDeleteMsg(ls, tsk);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                return ui.outputDeleteError();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case CHECK:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                String checkDate \u003d arr[1];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(checkDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                if (ls.isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    return ui.outputCheckNoTask();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    return ui.outputCheckTask(ls, date);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                return ui.outputCheckError();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                String keyword \u003d arr[1];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                if (ls.isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    return ui.outputCheckNoTask();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    return ui.outputFindTask(ls, keyword);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                return ui.outputFindError();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return ui.outputInvalidInput();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "augustinekau": 146
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 7
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * \u003ch\u003eduke.Event duke.Task Type\u003c/h\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * This is a type of tasks that start at a specific time and ends at a specific time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructor of duke.Event class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param description Name of the task input by user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param at Time of the task input by user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.at \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Getter for the time of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return LocalDate Date of the time of the duke.Event task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public LocalDate getAt() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Overridden toString method to output name, type and status of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String This returns a string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getAt().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 39
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * This is the main method to launch JavaFX."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param args Unused."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 16
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final Duke duke \u003d new Duke(Storage.getFilePath());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Main() throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Overrides start method to set up stage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param stage Stage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            stage.getIcons().add(new Image(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 41
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Initialises the main window."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                DialogBox.getDukeDialog(Ui.outputWelcome(), dukeImage)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        userInput.setPromptText(\"   Message\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        userInput.getParent().requestFocus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private void handleUserInput() throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (Parser.parseCmd(input).equals(\"BYE\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 66
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * \u003ch\u003eduke.Parser\u003c/h\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Deals with making sense of the user command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructor for duke.Parser."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Converts the string to upper case."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param s String String to be converted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Upper-cased string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static String parseCmd(String s) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return s.toUpperCase().trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Get the last digit of the string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param str String The string to extract last digit from."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return int The int at the back of the string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static int parseInt(String str) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String[] strArray \u003d str.split(\" \", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return Integer.parseInt(strArray[1]) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * This method returns a array of string being split by regex depending on task type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param arr String[] The inout array."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param i int The type of the regex."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String[] The split string in array."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static String[] parse(String[] arr, int i) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String secondStr \u003d arr[1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            // For duke.Deadline"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return secondStr.split(\" /by \", 2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            // For duke.Event"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return secondStr.split(\" /at \", 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 50
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * \u003ch\u003eduke.Storage\u003c/h\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructor for duke.Storage class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param filePath The path of the file todolist.txt."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @throws IOException On input error."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Storage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        boolean exists \u003d file.exists();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (!exists) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Getter to get the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return File The file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public File getFile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Get the path of the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String the absolute path of the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static String getFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String filePath \u003d new File(\"\").getAbsolutePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        filePath +\u003d \"\\\\todolist.txt\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Loads the file from todolist.txt."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return An arraylist of task that was stored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @throws FileNotFoundException When the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    protected ArrayList\u003cTask\u003e loadFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        try (Scanner s \u003d new Scanner(new FileReader(getFile()))) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                result.add(s.nextLine());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        for (int i \u003d 0; i \u003c result.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            String str \u003d result.get(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            String[] arr \u003d str.split(\" \u003e\u003e \", -1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            switch (arr[0]) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                // It is a to-do task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    if (Integer.valueOf(arr[1]).equals(0)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        // Incomplete task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        Task task \u003d new Todo(arr[2]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        taskList.add(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    } else if (Integer.valueOf(arr[1]).equals(1)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        // Completed task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        Task task \u003d new Todo(arr[2]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        task.markAsDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        taskList.add(task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        // Not recognised format"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        Ui.printFormatError(i);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                } catch (Exception ex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    Ui.printFormatError(i);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                // It is a deadline task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    if (Integer.valueOf(arr[1]).equals(0)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        // Incomplete task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        Task task \u003d new Deadline(arr[2], arr[3]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        taskList.add(task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    } else if (Integer.valueOf(arr[1]).equals(1)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        // Completed task"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        Task task \u003d new Deadline(arr[2], arr[3]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        task.markAsDone();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        taskList.add(task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        // Not recognised format"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        Ui.printFormatError(i);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                } catch (Exception ex) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    Ui.printFormatError(i);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                // It is an duke.Event task"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    if (Integer.valueOf(arr[1]).equals(0)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        // Incomplete task"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        Task task \u003d new Event(arr[2], arr[3]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        taskList.add(task);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    } else if (Integer.valueOf(arr[1]).equals(1)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        // Completed task"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        Task task \u003d new Event(arr[2], arr[3]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        task.markAsDone();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        taskList.add(task);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        // Not recognised format"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        Ui.printFormatError(i);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                } catch (Exception ex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    Ui.printFormatError(i);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                // No such type"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                Ui.printFormatError(i);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Save and write the file into todolist.txt."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param f File The file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param ls duke.TaskList the list of the tasks to be written."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @throws IOException On input error."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    protected static void saveFile(File f, TaskList ls) throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String link \u003d \" \u003e\u003e \";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        FileWriter fw \u003d new FileWriter(f.getAbsolutePath());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (ls.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            fw.write(\"\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            for (int i \u003d 0; i \u003c ls.size(); i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                Task task \u003d ls.get(i);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                if (task instanceof Todo) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    String str;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    if (!task.isDone()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        str \u003d \"T\" + link + \"0\" + link + task.getDescription();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        str \u003d \"T\" + link + \"1\" + link + task.getDescription();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    arrayList.add(str);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    String str;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    if (!task.isDone()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        str \u003d \"E\" + link + \"0\" + link + task.getDescription() + link"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                                + ((Event) task).getAt().toString();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        str \u003d \"E\" + link + \"1\" + link + task.getDescription() + link"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                                + ((Event) task).getAt().toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    arrayList.add(str);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    String str;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    if (!task.isDone()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        str \u003d \"D\" + link + \"0\" + link + task.getDescription() + link"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                                + ((Deadline) task).getDate().toString() + \" \" + ((Deadline) task).getTime().toString();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        str \u003d \"D\" + link + \"1\" + link + task.getDescription() + link"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                                + ((Deadline) task).getDate().toString() + \" \" + ((Deadline) task).getTime().toString();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    arrayList.add(str);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    System.out.println(\"One of your task is neither a Todo, Event or Deadline\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            for (String str : arrayList) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                fw.write(str + System.lineSeparator());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 194
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * \u003ch1\u003eduke.Task\u003c/h1\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * General task for the multiple types of task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * To-do, duke.Deadline and duke.Event classes inherit from this class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructor for duke.Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param description Name of the task input by user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * This method is used to check if the task is done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String This returns \u0027O\u0027 if done and \u0027X\u0027 if not done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        //return (isDone ? \"O\" : \"X\"); //return tick or X symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Checks if task is done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return boolean True if task is done, false otherwise."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Getter for description of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String This returns the name of the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Setter for task to mark task as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Overridden toString method to output name, type and status of task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String This returns a string."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 61
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * \u003ch\u003eduke.TaskList\u003c/h\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Contains the task list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final ArrayList\u003cTask\u003e ls;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructor of duke.TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param ls The array list of task to be converted."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e ls) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.ls \u003d ls;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Getter for the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return An array list of task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ArrayList\u003cTask\u003e getLs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return ls;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Check if the list is empty."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return Boolean If the list is empty."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return getLs().isEmpty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Get the size of the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return int The number of task in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return getLs().size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Get the task at position i."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param i int The position to be retrieved from."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return duke.Task The task that is queried."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Task get(int i) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return getLs().get(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Set the task at position to be marked as done."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param numToBeMarkedAsDone int Position of the task to be marked."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param task The task to be marked."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void set(int numToBeMarkedAsDone, Task task) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        getLs().set(numToBeMarkedAsDone, task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Add a task to the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        getLs().add(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Delete the task from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param numToBeDeleted int The task at the position to be deleted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void remove(int numToBeDeleted) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        getLs().remove(numToBeDeleted);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 77
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * \u003ch\u003eTo-do duke.Task Type\u003c/h\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * This class is a type of tasks without any date/time attached to it."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructor of to-do class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param description Name of the task input by user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Overridden toString method to output name, type and status of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String This returns a string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 24
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * \u003ch\u003eduke.Ui\u003c/h\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Deals with interactions with the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructor of duke.Ui class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Prints an error when there is format issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param i The position where the formatting has error."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    protected static void printFormatError(int i) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        System.out.println(\"There is a format error in your saved file!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (i \u003e\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            System.out.println(\"The line on \" + (i + 1) + \" will be ignored\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the welcome message with GUI is initialized."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Welcome message."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static String outputWelcome() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Hello! I\u0027m Dude\\n\" + \"What can I do for you today?\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns a error message on an invalid input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Invalid input message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputInvalidInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Sorry! But I don\u0027t know what that means!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns exit message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Exit message."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputBye() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Bye! Hope to see you again soon!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns an error message that it cannot be marked as done."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Done error message."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputDoneError() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Sorry! The number does not exist in the list!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the message that marks as done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param task Task to be marked as done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Message to say that it is done."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputDoneMsg(Task task) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\" + task.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns message that there is no task in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String No task message."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputListNoTask() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Congratulations! You have currently no task.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the list of all the task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param ls List Current list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String All the current task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputListTask(TaskList ls) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        StringBuilder str \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        for (int i \u003d 0; i \u003c ls.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            Task task \u003d ls.get(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            int num \u003d i + 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            str.append(num).append(\". \").append(task.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns a confirmation message that the user have added a to-do task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param ls The current task list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param newTask The to-do task to be added in."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String To-do message."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputTodoMsg(TaskList ls, Task newTask) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String str \u003d \"Got it. I\u0027ve added this task: \\n\" + newTask.toString() + \"\\n\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (ls.size() \u003e 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            str +\u003d \"Now you have \" + ls.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            str +\u003d \"Now you have \" + ls.size() + \" task in the list.\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the error message of to-do."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String To-do error message."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputTodoError() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Sorry! The description of todo cannot be empty!!\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + \"Here\u0027s an example: todo Homework\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns a confirmation message that the user has added the deadline task."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param ls TaskList"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param newTask Task The new task to be added."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String A confirmation message for deadline task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputDeadlineEventMsg(TaskList ls, Task newTask) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String str \u003d \"Got it. I\u0027ve added this task: \\n\" + newTask.toString() + \"\\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (ls.size() \u003e 1) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            str +\u003d \"Now you have \" + ls.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            str +\u003d \"Now you have \" + ls.size() + \" task in the list.\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns an error message that the user input for deadline task is wrong."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Error message of deadline."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputDeadlineFormatError() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Sorry! Please enter a date for the deadline using the command \u0027/by\u0027!\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + \"Here\u0027s an example: deadline CS2103T project /by 2020-08-26 23:59\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns a warning message to show there is not description for the task."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String An error message for deadline with an example."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputDeadlineError() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Sorry! The description of deadline cannot be empty!\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + \"Here\u0027s an example: deadline CS2103T project /by 2020-08-26 23:59\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns a error message that there is a format error for the event task by the user."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String An error message for event task with an example of input."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputEventFormatError() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Sorry! Please enter a duration for the event using the command \u0027/at\u0027!\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + \"Here\u0027s an example: event welcome tea /at 2020-08-29\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns a error message that warns the description of event task cannot be empty."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Error message for event task."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputEventError() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Sorry! The description of event cannot be empty!\\n\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + \"Here\u0027s an example: event welcome tea /at 2020-08-29\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the confirmation that the task has been deleted."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param ls TaskList"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param tsk Task Task to be deleted."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Confirmation message."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputDeleteMsg(TaskList ls, Task tsk) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String str \u003d \"Successfully deleted this task:\\n\" + tsk.toString() + \"\\n\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (ls.size() \u003e 1) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            str +\u003d \"Now you have \" + ls.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            str +\u003d \"Now you have \" + ls.size() + \" task in the list.\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns an error message stating the deletion cannot occur."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String An error message."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputDeleteError() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Sorry! The number to be deleted does not exist in the list!\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns message when there is no task for all days."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Message of no task."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputCheckNoTask() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"You have currently no task on all days!\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the number of task for the date that the user checked."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param ls TaskList Current list of task."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param date LocalDate Date to be checked."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Show the result of the check."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputCheckTask(TaskList ls, LocalDate date) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        for (int i \u003d 0; i \u003c ls.size(); i++) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            Task task \u003d ls.get(i);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                if (((Event) task).getAt().equals(date) \u0026\u0026 !task.isDone()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    counter +\u003d 1;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    str.append(counter).append(\". \").append(task.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            } else if (task instanceof Deadline \u0026\u0026 !task.isDone()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                if (((Deadline) task).getDate().equals(date)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    counter +\u003d 1;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    str.append(counter).append(\". \").append(task.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (counter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            str.append(\"You have currently no incomplete task on \")"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    .append(date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } else if (counter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            str.append(\"You have a total of \").append(counter)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    .append(\" incomplete task on \").append(date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            str.append(\"You have a total of \").append(counter)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    .append(\" incomplete tasks on \").append(date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the error saying your format of input for checking date is wrong."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Error Message."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputCheckError() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Sorry! Seems like the format of your input is wrong :o\\n\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + \"Here\u0027s an example: check 2020-08-08\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the description of finding the task."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param ls TaskList The current list of task."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param keyword String The keyword."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Description of finding the task."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputFindTask(TaskList ls, String keyword) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        for (int i \u003d 0; i \u003c ls.size(); i++) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            Task task \u003d ls.get(i);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                str.append(counter).append(\". \").append(task.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (counter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            str.append(\"Looks like there is no task matching that keyword: \").append(keyword);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } else if (counter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            str.append(\"^ Only the above task matched the keyword: \u0027\").append(keyword)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    .append(\"\u0027 from your list.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            str.append(\"^ The above are matching tasks with keyword: \u0027\").append(keyword)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    .append(\"\u0027 from your list.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns an error when there is no keyword by user."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return String Error message."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String outputFindError() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return \"Key in something for me to find!\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 284
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003cfx:root"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        alignment\u003d\"TOP_RIGHT\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    \u003cLabel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            fx:id\u003d\"dialog\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            text\u003d\"Label\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            wrapText\u003d\"true\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            style\u003d\" -fx-border-color: #3D8DF3;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    -fx-border-width: 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    -fx-border-style: solid;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    -fx-padding: 5 5 5 5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    -fx-background-color: #3D8DF3;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    -fx-background-radius: 15;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    -fx-border-radius: 15;\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    \u003cImageView"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            fx:id\u003d\"displayPicture\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            fitHeight\u003d\"70.0\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            fitWidth\u003d\"70.0\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    \u003cInsets"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            bottom\u003d\"15.0\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            left\u003d\"5.0\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            right\u003d\"5.0\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 42
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003cAnchorPane"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        maxHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        maxWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        style\u003d\"-fx-focus-color: white;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                   -fx-faint-focus-color: white;\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    \u003cTextField"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            fx:id\u003d\"userInput\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            layoutY\u003d\"558.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            prefHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            prefWidth\u003d\"350.0\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            style\u003d\"-fx-border-color: white;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                   -fx-focus-color: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                   -fx-faint-focus-color: white;\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    \u003cButton"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            fx:id\u003d\"sendButton\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            layoutX\u003d\"350.0\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            layoutY\u003d\"558.0\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            prefHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            prefWidth\u003d\"50.0\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            style\u003d\"-fx-background-color: white;\" text\u003d\"»\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "              \u003cFont size\u003d\"19.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    \u003c/Button\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    \u003cScrollPane"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            fx:id\u003d\"scrollPane\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            prefHeight\u003d\"557.0\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            style\u003d\"-fx-background: white\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        \u003cVBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                fx:id\u003d\"dialogContainer\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 61
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import duke.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import duke.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import duke.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final Task todoEg \u003d new Todo(\"Housework\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final Task deadlineEg \u003d new Deadline(\"Phone Bills\", \"2020-08-08 13:00\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final Task eventEg \u003d new Event(\"Meeting\", \"2020-08-08\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void todoTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(\"Housework\", todoEg.getDescription());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(todoEg.isDone());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void deadlineTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(\"Phone Bills\", deadlineEg.getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(todoEg.isDone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(\"2020-08-08\", ((Deadline) deadlineEg).getDate().toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(\"13:00\", ((Deadline) deadlineEg).getTime().toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void eventTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(\"Meeting\", eventEg.getDescription());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(todoEg.isDone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(\"2020-08-08\", ((Event) eventEg).getAt().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void markAsDoneTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        todoEg.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(todoEg.isDone());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void parserDeadlineTest() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String str \u003d \"deadline Phone Bills /by 2020-08-08 13:00\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String[] arr \u003d str.split(\" \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(\"Phone Bills\", Parser.parse(arr, 1)[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void parserEventTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String str \u003d \"event Meeting /at 2020-08-08\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String[] arr \u003d str.split(\" \", 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(\"Meeting\", Parser.parse(arr, 2)[0]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 60
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "augustinekau": 2
    }
  }
]
