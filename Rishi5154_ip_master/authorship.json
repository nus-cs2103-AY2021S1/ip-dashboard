[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    mainClassName \u003d \"duke.classes.Duke\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 14,
      "-": 45
    }
  },
  {
    "path": "src/main/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "D---1---return book---/by 2017-10-10 05:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "E---0---project meeting---/at 2017-12-11 13:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "T---1---join sports club"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "T---0---buy things"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "D---0---submit work---/by 2017-12-11 13:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "D---1---do a run---/by 2020-10-14 17:00"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "E---1---interview at Google---/by 2021-01-31 21:00"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 7
    }
  },
  {
    "path": "src/main/java/duke/classes/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Enum class for categorising the commands given to the scanner."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    FIND {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"find\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    LIST {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"todo\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    },"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    DEADLINE {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"deadline\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    },"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    EVENT {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"event\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    },"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    DELETE {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"delete\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    },"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    BLAH {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"blah\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    },"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    TASK {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"task\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    },"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    DONE {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"done\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    },"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    BYE {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"bye\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 68
    }
  },
  {
    "path": "src/main/java/duke/classes/Data.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.exceptions.DukeInvalidTimeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.TaskType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Data class that handles the storage and loading of the tasks stored"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * on the list by writing its contents onto local disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class Data {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    final Path path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Constructor that reads file from the path directory, else it creates a file on the directory instead."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param path File path for the data stored"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws IOException For missing files"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Data(String path) throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        //System.out.println(\"Path being located\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.path \u003d Paths.get(\"src/main/data/duke.txt\").toAbsolutePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (Files.notExists(this.path)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            new File(String.valueOf(path)).createNewFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Constructor that creates file and directory, if directory is not found."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws IOException For missing files"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    Data() throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.path \u003d Path.of(\"src/main/data/duke.txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        new File(\"src/main/data\").mkdirs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        new File(this.path.toString()).createNewFile();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Method to read the data stored on local disk."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return List of tasks saved"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws FileNotFoundException For missing files"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws DukeInvalidTimeException For invalid times saved for event/deadline events"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException For incorrectly typed descriptions for deadline/event tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public List\u003cTask\u003e loadData() throws FileNotFoundException, DukeInvalidTimeException,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        List\u003cTask\u003e todoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Scanner scanner \u003d new Scanner(path.toFile());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        for (int i \u003d 1; scanner.hasNextLine(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            Task currTask \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            String[] curr \u003d scanner.nextLine().split(\"---\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            String task \u003d curr[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            boolean isDone \u003d Integer.parseInt(curr[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            String activity \u003d curr[2];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            String description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            switch (task) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                currTask \u003d new Todo(activity, i, isDone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                description \u003d activity + \" \" + curr[3];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                currTask \u003d new Deadline(description, i, isDone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                description \u003d activity + \" \" + curr[3];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                currTask \u003d new Event(description, i, isDone);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            todoList.add(currTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return todoList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Method that overrides the host file with data of the latest content in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws IOException Missing file to write into"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void save(List\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        FileWriter writer \u003d new FileWriter(this.path.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            String line \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            int done \u003d task.hasDone() ? 1 : 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            switch (task.getType()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                line \u003d String.format(\"T---%d---%s\", done, description);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                int idx \u003d description.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                String activity \u003d description.substring(0, idx - 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                String timing \u003d description.substring(idx);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                line \u003d String.format(\"%s---%d---%s---%s\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        task.getType() \u003d\u003d TaskType.DEADLINE ? \"D\" : \"E\", done, activity, timing);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            writer.write(line + \"\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 130
    }
  },
  {
    "path": "src/main/java/duke/classes/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        final Circle clip \u003d new Circle(45, 45, 45);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 61
    }
  },
  {
    "path": "src/main/java/duke/classes/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.exceptions.BlahException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.exceptions.DukeInvalidTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.exceptions.EmptyDukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * The Duke class implements the DukeChatBot that is wired to store, display, update and delete"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * a variety of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * @author Rishi Ravikumar"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Data data;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Constructor whereby the duke class loads data from a given path on the hard disk."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param path File path for local data"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Duke(String path) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            data \u003d new Data(path);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            this.taskList \u003d new TaskList(data.loadData());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (IOException | DukeInvalidTimeException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            System.out.println(\"FAILURE: Unable to load data from local drive.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                data \u003d new Data();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                this.taskList \u003d new TaskList(data.loadData());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            } catch (IOException | ArrayIndexOutOfBoundsException | DukeInvalidTimeException err) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                System.out.println(\"FAILURE: Unable to create any file for saving data\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /** Constructor whereby the duke class loads data from a given path on the hard disk */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            data \u003d new Data(\"data/duke.txt\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            this.taskList \u003d new TaskList(data.loadData());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (IOException | DukeInvalidTimeException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            System.out.println(\"FAILURE: Unable to load data from local drive.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                data \u003d new Data();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                this.taskList \u003d new TaskList(data.loadData());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            } catch (IOException | ArrayIndexOutOfBoundsException | DukeInvalidTimeException err) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                System.out.println(\"FAILURE: Unable to create any file for saving data\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Main method whereby the Duke chatbot runs."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param args Command to run program"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        new Duke().run(); // new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Void method that abstracts away most the logic behind running the Duke chatbot."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String word \u003d this.parser.scan.nextLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        while (!word.equals(\"bye\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            Commands currentCommand \u003d this.parser.analyse(word);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            assign(currentCommand, word);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            word \u003d this.parser.scan.nextLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.ui.endDuke();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        localSave();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Abstracts the process of saving latest changes to disk."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void localSave() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            data.save(this.taskList.todoList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            System.out.println(\"FAILURE: Could not save data to main/data directory.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Void method that carries the logic behind assigning an action based on the command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param command Type of command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param task Actual task"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String assign(Commands command, String task) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String completedString \u003d \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            completedString \u003d this.ui.displayList(this.taskList.todoList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                completedString \u003d this.ui.displayList(this.taskList.find(task));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            } catch (DukeInvalidTimeException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                completedString \u003d this.ui.printError(e.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            completedString \u003d decideTaskType(command, task);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            Task todo \u003d this.taskList.markDone(task);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            completedString \u003d this.ui.completeTask(todo);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            Task deletedTask \u003d this.taskList.delete(task);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            completedString \u003d this.ui.deleteTask(deletedTask, this.taskList.todoList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        case BLAH:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            completedString \u003d assignOtherTasks(task);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            completedString \u003d ui.endDuke();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        System.out.println(completedString);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return completedString;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Void method that carries the logic behind assigning the unconventional tasks."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * tasks like normal tasks and blah."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param task Actual task"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String assignOtherTasks(String task) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            this.taskList.storeTask(task);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return this.ui.addOtherTask(task);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (BlahException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return this.ui.printError(e.toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Void method that abstracts away the logic behind assigning a method based on task type."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param commands Commands of TODO, DEADLINE \u0026 EVENT"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param task Actual activity"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String decideTaskType(Commands commands, String task) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Task todo \u003d null;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            switch (commands) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                todo \u003d taskList.storeTodo(task);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                todo \u003d taskList.storeDeadline(task);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                todo \u003d taskList.storeEvent(task);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return this.ui.addTask(todo, this.taskList.todoList);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (EmptyDukeException | DukeInvalidTimeException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return this.ui.printError(e.toString());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Generates a response to user input."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param input the task/command given to Duke"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String message from Duke"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Commands currentCommand \u003d this.parser.analyse(input);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String response \u003d assign(currentCommand, input);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return \"Duke says: \\n\" + response;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 198,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/classes/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 9
    }
  },
  {
    "path": "src/main/java/duke/classes/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 30
    }
  },
  {
    "path": "src/main/java/duke/classes/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        getWelcome();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Outputs the welcome string onto the GUI."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private void getWelcome() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        dialogContainer.getChildren()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .addAll(DialogBox.getDukeDialog(new Ui().welcome(), dukeImage));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        System.out.println(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        System.out.println(response);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // terminate program"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            duke.localSave();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 67
    }
  },
  {
    "path": "src/main/java/duke/classes/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Class for taking in commands and analysing the type of command given to the chatbot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    protected Scanner scan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Method to determine the type of command given to the chatbot."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param command   Command given to the chatbot."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return Commands from the Commands ENUM class"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Commands analyse(String command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (command.startsWith(\"list\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return Commands.LIST;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else if (command.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return Commands.FIND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else if (command.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return Commands.TODO;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else if (command.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return Commands.DEADLINE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else if (command.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return Commands.EVENT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else if (command.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return Commands.DELETE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else if (command.startsWith(\"blah\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return Commands.BLAH;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else if (command.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return Commands.DONE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else if (command.startsWith(\"bye\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return Commands.BYE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return Commands.TASK;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 47
    }
  },
  {
    "path": "src/main/java/duke/classes/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.exceptions.BlahException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.exceptions.DukeInvalidTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.exceptions.EmptyDukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.TaskType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Class that carries the data structure for storing tasks and supports operations for the tasklist."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    protected List\u003cTask\u003e todoList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * No-arguments constructor for new tasklist."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.todoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Class constructor for pre-existing lists that have data already saved onto local hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param list Currently saved list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.todoList \u003d list;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Stores a regular task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param item           Task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws BlahException Thrown for \u0027blah\u0027 commands"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void storeTask(String item) throws BlahException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int count \u003d todoList.size() + 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (count \u003e 100) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            System.out.println(\"You have far too many pending tasks!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else if (item.equals(\"blah\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new BlahException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            this.todoList.add(new Task(item, count));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Creates, stores and returns a Todo task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param                     todo Task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return                    Todo Task object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws EmptyDukeException For incomplete command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Todo storeTodo(String todo) throws EmptyDukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int count \u003d todoList.size() + 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (count \u003e 100) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            System.out.println(\"You have far too many pending tasks!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else if (todo.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new EmptyDukeException(\"The description of your todo is empty.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            Todo curr \u003d new Todo(todo.substring(5), count, false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            todoList.add(curr);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return curr;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Creates, stores and returns a deadline task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param deadline                  Deadline task"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return                          Deadline task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws EmptyDukeException       For incomplete command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws DukeInvalidTimeException For incorrect dates"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Deadline storeDeadline(String deadline) throws EmptyDukeException, DukeInvalidTimeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int count \u003d todoList.size() + 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (count \u003e 100) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            System.out.println(\"You have far too many pending tasks!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else if (deadline.length() \u003c\u003d 8) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new EmptyDukeException(\"The description of your deadline is empty.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            Deadline curr \u003d new Deadline(deadline.substring(9), count, false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            todoList.add(curr);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return curr;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Creates, stores and returns an event task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param event                     Event task"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return                          Event task"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws EmptyDukeException       For incomplete command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws DukeInvalidTimeException For incorrect dates"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Event storeEvent(String event) throws EmptyDukeException, DukeInvalidTimeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int count \u003d todoList.size() + 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (count \u003e 100) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            System.out.println(\"You have far too many pending tasks!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else if (event.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new EmptyDukeException(\"The description of your event is empty.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            Event curr \u003d new Event(event.substring(6), count, false);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            todoList.add(curr);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return curr;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Marks a task as done and returns the task."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param command   Carries the \u0027done (integer)\u0027 command"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return          completed Task"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Task markDone(String command) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int taskNo \u003d Character.getNumericValue(command.charAt(5)) - 1;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Task task \u003d todoList.get(taskNo);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Takes in the current list and command, before proceeding to"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * remove a task in the list based on number in the command."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param command   Carries the \u0027delete (integer)\u0027 command"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return          Task deleted"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Task delete(String command) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int taskNo \u003d Character.getNumericValue(command.charAt(7)) - 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Task task \u003d todoList.remove(taskNo);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        for (int i \u003d taskNo; i \u003c todoList.size(); i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            todoList.get(i).setIndex(todoList.get(i).getIndex() - 1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Finds the tasks that contain words that match the given word"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * and then returns it in a list format."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param query Key phrase to be found in task"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return List of matching tasks"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws DukeInvalidTimeException Error thrown for deadline/event tasks with invalid dates."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public List\u003cTask\u003e find(String query) throws DukeInvalidTimeException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        query \u003d query.substring(5);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        List\u003cTask\u003e queriedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        for (Task task : this.todoList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            String[] keywords;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            switch (task.getType()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                keywords \u003d description.split(\"\\\\s\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                for (String keyword : keywords) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    if (keyword.equals(query)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        queriedList.add(new Todo(description, queriedList.size() + 1, task.hasDone()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                // to retrieve just the activity"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                keywords \u003d description.substring(0, description.indexOf(\"/\") - 1).split(\"\\\\s\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                for (String keyword : keywords) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    if (keyword.equals(query)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        queriedList.add(task.getType() \u003d\u003d TaskType.DEADLINE"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                                ? new Deadline(description, queriedList.size() + 1, task.hasDone())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                                : new Event(description, queriedList.size() + 1, task.hasDone()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return queriedList;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 202
    }
  },
  {
    "path": "src/main/java/duke/classes/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Class that handles the interactions between chatbot and users."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    protected String line \u003d \"---------------------------------------------------\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Default constructor with welcome message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String welcome \u003d line + \"\\nHello! I\u0027m Duke!\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + \"What can I do for you?\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        System.out.println(welcome);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns welcome message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String welcome message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String welcome() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return \"\\nHello! I\u0027m Duke!\\n\" + \"What can I do for you?\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Iterates the todolist and prints out its objects."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param list Todo List"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String message of all tasks in list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String displayList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        //System.out.println(line);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"Sorry. No matches found!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            //System.out.println(\"Sorry. No matches found!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            StringBuilder tasklist \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                tasklist.append(task.getStatusWithIndex()).append(\"\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                System.out.println(task.getStatusWithIndex());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return tasklist.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Prints out the text after addition of the main types of tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param task Task added"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param list Todo List used for storage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String message"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String addTask(Task task, List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return task \u003d\u003d null ? \"Failed\" : \"\\nGot it. I\u0027ve added this task:\\n   \" + task.toString()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "//        System.out.println(task \u003d\u003d null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "//                ? \"Failed!\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "//                : line + \"\\nGot it. I\u0027ve added this task:\\n   \" + task.toString()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "//                    + \"\\nNow you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns out the text after addition of a normal task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param task Task added"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String message after task addition"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String addOtherTask(String task) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        //System.out.println(line + \"\\nadded: \" + task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return \"\\nadded: \" + task;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns out the string status of a task once it is checked as complete."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param task Task completed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String Task completion message"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String completeTask(Task task) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        System.out.println(line + \"\\nNice! I have marked this task as done: \\n  \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + task.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return \"\\nNice! I have marked this task as done: \\n  \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + task.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns the string message after deletion of a task from the current todolist."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param task Task to be removed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param list Todo List to remove tasks from"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String message after deleting task."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String deleteTask(Task task, List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        System.out.println(line + \"\\nNoted. I\u0027ve removed this task:\\n  \" + task.toString()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return \"\\nNoted. I\u0027ve removed this task:\\n  \" + task.toString()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns out the complete message after ending program successfully."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return goodbye message"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String endDuke() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        System.out.println(line + \"\\nBye. Hope to see you again soon!\\n\" + line);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return \"\\nBye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns out all error messages from exceptions."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param error Error message derived from exceptions"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String error message"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String printError(String error) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return error.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 133
    }
  },
  {
    "path": "src/main/java/duke/exceptions/BlahException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Exception class to represent exceptions thrown for \u0027blah\u0027 commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class BlahException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public BlahException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super(\"You\u0027re talking gibberish. Cannot make sense of what you just said.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Basic exception class specially written for the Duke Chatbot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param message Error message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Default toString() method."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String representing the error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return \"\\nFAILURE: \" + super.getMessage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 27
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Exception to represent exceptions thrown for invalid dates in tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class DukeInvalidTimeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public DukeInvalidTimeException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super(\"Your command has to be in a proper format like \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + \"the one here \\n\\t \u003ccommand\u003e \u003cactivity\u003e \u003cby/at\u003e \u003cYear-Month-Day Hour:Minute\u003e.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EmptyDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Exception class to represent exception for invalid commands with no descriptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class EmptyDukeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public EmptyDukeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 17
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.exceptions.DukeInvalidTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Deadline class which carries tasks of type Deadline and extends of the base Task class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    protected LocalDateTime time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Constructor for tasks of deadline type."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param description               Description of the activity"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param index                     Numbers for the indexing process of the tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param isDone                    Task completion status"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws DukeInvalidTimeException Wrong definition for the task timing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Deadline(String description, int index, boolean isDone) throws DukeInvalidTimeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super(description, index, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super.type \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int idx \u003d this.description.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            this.time \u003d LocalDateTime.parse(this.description.substring(idx + 4, idx + 20),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new DukeInvalidTimeException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns the text version of task with index \u0026 date formatted to MMM d yyyy h:mm a."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String representation for event objects with indexing and date conversion."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String getStatusWithIndex() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int idx \u003d this.description.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String task \u003d this.description.substring(0, idx);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String end \u003d String.format(\"by: %s\", this.time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy, h:mm a\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return String.format(\"%s. %s%s%s(%s)\", index, super.type, isDone ? super.done : super.start, task, end);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Default toString() definition for Deadline tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String representation of deadline objects."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int idx \u003d this.description.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String task \u003d this.description.substring(0, idx);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String end \u003d new StringBuilder(this.description.substring(idx + 1)).insert(2, \u0027:\u0027).toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return String.format(\"%s%s%s(%s)\", super.type, isDone ? super.done : super.start, task, end);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 63
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.exceptions.DukeInvalidTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Event class which carries tasks of type Event and extends of the base Task class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    protected LocalDateTime time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Constructor for tasks of event type."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param description               Description of the activity"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param index                     Numbers for the indexing process of the tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param isDone                    Task completion status"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws DukeInvalidTimeException Wrong definition for the task timing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Event(String description, int index, boolean isDone) throws DukeInvalidTimeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super(description, index, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super.type \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int idx \u003d this.description.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            this.time \u003d LocalDateTime.parse(this.description.substring(idx + 4, idx + 20),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new DukeInvalidTimeException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns the text version of task with index \u0026 date formatted to MMM d yyyy h:mm a."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String representation for event objects with indexing and date conversion."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String getStatusWithIndex() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int idx \u003d this.description.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String task \u003d this.description.substring(0, idx);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String end \u003d String.format(\"at: %s\", this.time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy, h:mm a\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return String.format(\"%s. %s%s%s(%s)\", index, super.type, isDone ? super.done : super.start, task, end);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Default toString() definition for Event tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String representation of event objects."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int idx \u003d this.description.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String task \u003d this.description.substring(0, idx);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String end \u003d new StringBuilder(this.description.substring(idx + 1)).insert(2, \u0027:\u0027).toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return String.format(\"%s%s%s(%s)\", super.type, isDone ? super.done : super.start, task, end);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 63
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Base class for tasks in the chatbot and utilised by the main types of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    protected final String done \u003d \"[\\u2713] \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    protected final String start \u003d \"[\\u2718] \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    protected TaskType type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Constructor for a new Task, the task is set to incomplete by default."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param description   Activity"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param index         Index of task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Task(String description, int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Constructor for a new Task, with additional customisation for completion status."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param description   Activity"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param index         Index of task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param isOver        Completion status of task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Task(String description, int index, boolean isOver) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.isDone \u003d isOver;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean hasDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setIndex(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public TaskType getType() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns the text version of task with index."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String representation of tasks with indexing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String getStatusWithIndex() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return String.format(\"%s. %s\", index, toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Default toString() method for tasks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String representation of tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return String.format(\"%s%s\", isDone ? this.done : this.start, this.description);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 89
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Basic Enum class for string label representation for the main tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"[T]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    DEADLINE {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"[D]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    EVENT {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"[E]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 25
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Todo class which carries tasks of type Todo and extends of the base Task class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Constructor for tasks of todo type."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param description   Description of the activity"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param index         Numbers for the indexing process of the tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param isDone        Task completion status"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Todo(String description, int index, boolean isDone) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super(description, index, isDone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super.type \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns the text version of task with index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String representation for todo objects with indexing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String getStatusWithIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return String.format(\"%s. %s\", index, toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Default toString() definition for Todo tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return String representation for todo objects."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return String.format(\"%s%s%s\", super.type, isDone ? super.done : super.start, this.description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 40
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"350.0\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.classes.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textFill\u003d\"#3b0de4c9\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 26
    }
  },
  {
    "path": "src/test/java/duke/duke/classes/TasklistTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.duke.classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.classes.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.exceptions.DukeInvalidTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.exceptions.EmptyDukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class TasklistTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    protected TaskList tasklist \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    protected Todo todo \u003d new Todo(\"buy books\", 1, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void todo_addition_success() throws EmptyDukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(todo.toString(), tasklist.storeTodo(\"todo buy books\").toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void todo_addition_failure() throws EmptyDukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            assertEquals(todo.toString(), tasklist.storeTodo(\"todo\").toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (EmptyDukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            assertEquals(\"The description of your todo is empty.\", e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void deadline_addition_success() throws EmptyDukeException, DukeInvalidTimeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book /by 2017-10-10 05:00\", 2, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(deadline.toString(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                 tasklist.storeDeadline(\"deadline return book /by 2017-10-10 05:00\").toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void deadline_invalidDate_exceptionThrown() throws DukeInvalidTimeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book /by 2017-10-10 05:00\", 2, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            assertEquals(deadline.toString(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                     tasklist.storeDeadline(\"deadline return book /by 2017-10-10 1234:00\").toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            assertEquals(\"Your command has to be in a proper format like the one here \\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                     + \"\\t \u003ccommand\u003e \u003cactivity\u003e \u003cby/at\u003e \u003cYear-Month-Day Hour:Minute\u003e.\", e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void deadline_invalidCommand_exceptionThrown() throws DukeInvalidTimeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book /by 2017-10-10 05:00\", 2, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            assertEquals(deadline.toString(), tasklist.storeDeadline(\"deadline\").toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            assertEquals(\"The description of your deadline is empty.\", e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void event_addition_success() throws EmptyDukeException, DukeInvalidTimeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Event event \u003d new Event(\"attend interview /by 2020-11-06 18:00\", 3, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(event.toString(), tasklist.storeEvent(\"event attend interview /by 2020-11-06 18:00\").toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void event_invalidDate_exceptionThrown() throws DukeInvalidTimeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"attend interview /by 2020-11-06 05:00\", 3, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            assertEquals(deadline.toString(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                     tasklist.storeDeadline(\"event attend interview /by 2020-11-06 13245\").toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            assertEquals(\"Your command has to be in a proper format like the one here \\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    + \"\\t \u003ccommand\u003e \u003cactivity\u003e \u003cby/at\u003e \u003cYear-Month-Day Hour:Minute\u003e.\", e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void event_invalidCommand_exceptionThrown() throws DukeInvalidTimeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Event event \u003d new Event(\"attend interview /by 2020-11-06 05:00\", 4, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            assertEquals(event.toString(), tasklist.storeEvent(\"event\").toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            assertEquals(\"The description of your event is empty.\", e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 91
    }
  },
  {
    "path": "src/test/java/duke/duke/tasks/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package duke.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private void assertEquals(int i, int i1) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void todoToStringTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Todo task \u003d new Todo(\"borrow book\", 1, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert task.toString().equals(\"[T][✘] borrow book\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void todoStatusTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Todo task \u003d new Todo(\"borrow book\", 1, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert task.getStatusWithIndex().equals(\"1. [T][✘] borrow book\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 28
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deadline return book /by 2019-10-15 18:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "event interview at Google /by 2021-01-31 21:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "event"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "workout"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "event interview at Amazon /by 4325243523452345243"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "todo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "blah"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 17
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/tasks/*.java ../src/main/java/duke/classes/*.java ../src/main/java/duke/exceptions/*.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "#if ! ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "#    find ../src/main/java -name \"*.java\" \u003e sources.txt"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "#    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "#  )"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "diff -u --ignore-space-change --strip-trailing-cr --ignore-blank-lines ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 6,
      "-": 35
    }
  }
]
