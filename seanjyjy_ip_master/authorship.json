[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "seanjyjy": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    mainClassName \u003d \u0027duke.Launcher\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\" "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "seanjyjy": 17
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 11
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# User Guide for Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "_Lum Jian Yang Sean | A0199758Y_"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg width\u003d\"100%\" src\u003d\"Ui.png\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Welcome to Duke, a task manager app to track your todos, deadlines and events."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Table Of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * [About](#about) "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * [Getting Started](#getting-started)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* [Usage](#usage)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * [Todo](#todo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * [Deadline](#deadline)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * [Event](#event)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * [List](#list)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * [Done](#done)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * [Delete](#delete)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * [Find](#find)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * [Remind](#remind)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * [Help](#help)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    * [Bye](#bye)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* [FAQ]()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* [Credits](#credits)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "A JavaFX-Powered Task Manager App"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### About"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "This is a java project created for CS2103T Software Engineering for AY2020/2021 Semester 1."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Author: Lum Jian Yang Sean \u003cbr/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Version: 0.1.4 \u003cbr/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Release Date: 14 Sepetember 2020 \u003cbr/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Github: \u003ca href\u003d\"http://github.com/seanjyjy\"\u003ehttps://github.com/seanjyjy\u003c/a\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### Getting Started"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Java JDK 11 \u003cbr /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Download and install jdk 11 from: \u003ca href\u003d\"https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Mac / Linux / Windows \u003cbr/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Double click the jar file to run or `java -jar Duke-0.1.4.jar` in the path where you have the jar file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Add different types of task _e.g._ `todo`, `deadline`, `event`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Display the list of tasks _e.g._ `list`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Marks a task as done _e.g._ `done`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Delete tasks _e.g._ `delete`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Find tasks using a keyword _e.g._ `find`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Set a reminder on a task _e.g._ `remind`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Exit and save the data _e.g._ `bye`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Case-insensitive commands allowed _e.g._ `TODO`, `EveNT`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* Platform compatibility with Windows, MacOS, Linux"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### Notes about the command command format:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "   * Words in `UPPER_CASE` are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     e.g. `todo DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `todo task1`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "   "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "   "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### `deadline`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Deadline is a task with description, a completion status, a reminder status and a date. Note that the date format must follow either `dd/MM/yy HH:mm` or `dd/MM/yy`. By default reminder status is set to false and could only be activated/deactivated using the `remind` command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`deadline DESCRIPTION /by DATE`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`deadline Project Duke submission /by 2020-12-11 2312`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[D][✘] Project Duke submission (by: Friday, 11 Dec 2020, 11:12pm)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Now you have \u003cInt\u003e tasks in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### `event`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Event is a task with description, a completion status, a reminder status and a date. Note that the date format must follow either `dd/MM/yy HH:mm` or `dd/MM/yy`. By default reminder status is set to false and could only be activated/deactivated using the `remind` command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`event DESCRIPTION /at DATE`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`event Project Duke meeting /at 2020-12-11 2312`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[E][✘] Project Duke meeting (at: Friday, 11 Dec 2020, 11:12pm)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Now you have \u003cInt\u003e tasks in the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### `todo`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Todo is a task with a description, a completion status and a reminder status. By default reminder status is set to false and could only be activated/deactivated using the `remind` command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`todo DESCRIPTION`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`todo Project Duke`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[T][✘] Project Duke"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Now you have \u003cInt\u003e tasks in the list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### `list`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Your tasks will be displayed out for you."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1.  [D][✘] Project Duke submission (by: Friday, 11 Dec 2020, 11:12pm)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "2.  [E][✘] Project Duke meeting (at: Friday, 11 Dec 2020, 11:12pm)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "3.  [T][✘] Project Duke"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### `done`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "The task to be marked is indicated by the index after the `done` command, you can view the index of the task by typing `list`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`done INTEGER`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[D][✓] Project Duke submission (by: Friday, 11 Dec 2020, 11:12pm)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### `delete`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "The task to be deleted is indicated by the index after the `done` command, you can view the index of the task by typing `list`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`delete INTEGER`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[D][✓] Project Duke submission (by: Friday, 11 Dec 2020, 11:12pm)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Now you have \u003cInt\u003e tasks in the list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### `find`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Find tasks thats contains the keyword, note that only 1 keyword is allowed currently."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`find KEYWORD`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`find duke`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[E][✘] Project Duke meeting (at: Friday, 11 Dec 2020, 11:12pm)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "[T][✘] Project Duke"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### `remind`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "The task to be reminded is indicated by the index after the `remind` command, you can view the index of the task by typing `list`. Also, state whether to activate or deactivate the reminder using `y` for yes, `n` for no after the `remind` command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`remind INTEGER Y/N`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`remind 1 y`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "The reminder of this task Project Duke, has been activated"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### `help`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "The list of commands available in duke will be displayed as well as its usage."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Here are the list of commands available:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. list"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "2. bye"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "3. todo \u0027task name\u0027 (e.g. todo task 1)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "4. delete ___ (e.g. delete 1) *Note that it should be a value more than 0*"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "5. done ___ (e.g. done 1) *Note that it should be a value more than 0*"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "6. find ___ (e.g. find book) *Note that only 1 keyword is allowed*"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "7. remind _ _ (e.g.remind 1 y)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "   *Sets reminder on task 1 in task list, y or n represents yes or no respectively*"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "8. deadline \u0027task name\u0027 /by \u0027any date format\u0027"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "   (e.g. deadline project /by YYYY-MM-DD HHMM or YYYY-MM-DD)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "9. event \u0027event name\u0027 /at \u0027any date format\u0027"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "   (e.g. event project /at YYYY-MM-DD HHMM or YYYY-MM-DD)   "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### `bye`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "A message will be displayed and after a 1.5s delay, the program will close."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Bye ^.^, Hope to see you again soon!!!"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "**Where does duke store its task?** \u003cbr/\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Duke stores its tasks in a csv file. The path for the text file can be found in `./duke.Duke/todoList.csv`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "**What happens if I do not have `./duke.Duke` directory in my computer?** \u003cbr/\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Duke will automatically generate this directory for you."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "**What happens if I accidentally deleted the `.csv`file?** \u003cbr/\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Duke will automatically generate this todoList.csv for you. However, once deleted, the data is not recoverable"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "**Duke windows too small** \u003cbr/\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Duke allows interactive resizing!"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "**Am I able to customized the colors of Duke?** \u003cbr/\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "Unfortunately we did not include any customized feature."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "## Credits"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### External Packages Used"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* [JUnit by JUnit Team](https://github.com/junit-team/junit5/) - For testing Duke."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* [JavaFX by OpenJDK](https://github.com/openjdk/jfx) - For creating the graphical user interface."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "### Images Used"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* [User image](https://www.freepik.com/premium-vector/cute-cartoon-character-doctor-style_4424223.htm)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* [Duke image](https://www.pngitem.com/middle/hmJbxbb_love-stitch-cute-hearts-disney-stitch-cute-whit/)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "* [Welcome image](https://www.hotpng.com/free-png-clipart-gnkqq)"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "seanjyjy": 243
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Duke is the name of this program. It acts as a CLI app that reads and save"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * the user inputs. You can use it to record down tasks and marking the progress"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * of it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the Duke object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        storage.retrieve(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //@@ Oleg Mikhailov"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //Reused https://stackoverflow.com/questions/26311470/what-is-the-equivalent-of-javascript-settimeout-in-java"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void setTimeout(Runnable runnable, int delay) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        new Thread(() -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                Thread.sleep(delay);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                runnable.run();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }).start();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return duke\u0027s response to user\u0027s input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Duke\u0027s response to user\u0027s input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String reply \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (reply.equals(ui.goodBye())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setTimeout(()-\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    Platform.exit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                }, 1000);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return reply;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return the list of tasks."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return The list of tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public TaskList retrieveTaskList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "seanjyjy": 74
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 13
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.visualui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the GUI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param stage The display of the GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            MainWindow mainWindow \u003d new MainWindow();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setRoot(mainWindow);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Scene scene \u003d new Scene(mainWindow);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            scene.getStylesheets().add(\"view/MainWindow.css\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke, stage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 39
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.DateFormatter.formatDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkDeadlineFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkEmptyText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkEventFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_ADD_NOTIFICATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DEADLINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DEADLINE_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_EVENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_EVENT_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_TODO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.DuplicateException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.EmptyTextException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDateException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDeadlineException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatEventException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the add command of the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Mainly: event, deadline, todo."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize an AddCommand object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public AddCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidFormatDeadlineException,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            InvalidFormatEventException, InvalidFormatDateException, DuplicateException, EmptyTextException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        checkEmptyText(inputArr);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return addTask(inputArr[0], inputArr[1], ui, tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Add the given task into the task list. Expected format for the date in message is YYYY-MM-DD HHMM or"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * YYYY-MM-DD HHMM. If type is of todo, date can be omitted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type Type of task that is being entered (todo, event, deadline)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param message Details of the task that the user entered."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A string message showing the information of the task that has been added."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatDeadlineException Throws an exception when the format of \u0027message\u0027 is wrong."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatEventException Throws an exception when the format of \u0027message\u0027 is wrong."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatDateException Throws an exception when the format of \u0027message\u0027 is wrong."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws DuplicateException Throws an exception when there is a duplicate task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String addTask(String type, String message, Ui ui, TaskList tasks) throws InvalidFormatDeadlineException,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            InvalidFormatEventException, InvalidFormatDateException, DuplicateException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] descriptionAndDateTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_TODO:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            task \u003d new ToDo(message);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_DEADLINE:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            descriptionAndDateTime \u003d message.split(KEYWORD_DEADLINE_FORMAT, 2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            checkDeadlineFormat(descriptionAndDateTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            task \u003d new Deadline(descriptionAndDateTime[0], formatDateTime(descriptionAndDateTime[1]));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_EVENT:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            descriptionAndDateTime \u003d message.split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            checkEventFormat(descriptionAndDateTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            task \u003d new Event(descriptionAndDateTime[0], formatDateTime(descriptionAndDateTime[1]));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false : \"Invalid task\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return addTask(tasks, task, ui);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check for any duplicate in the task list before adding the task into it."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A string representing the addition of the task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws DuplicateException Throws an exception when there is a duplicate task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String addTask(TaskList tasks, Task task, Ui ui) throws DuplicateException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (checkDuplicates(tasks, task)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new DuplicateException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(KEYWORD_ADD_NOTIFICATION, task.toString(), printNumTask(tasks));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if task list contains this exact task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskList the list of tasks."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param task the task that user is trying to add."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return True if list contains that task, else false."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private boolean checkDuplicates(TaskList taskList, Task task) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return taskList.checkExistBefore(task);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 121
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkByeFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatByeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the bye command of the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize an ByeCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ByeCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidFormatByeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        checkByeFormat(inputArr);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return endProgram(tasks, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Save and store the relevant information into local storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param storage Object that contains the saved list of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A String message that informs the user that the program will be ending."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String endProgram(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String bye \u003d ui.goodBye();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        storage.record(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return bye;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 48
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_COMMAND_ERR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the command of the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected String[] inputArr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a Command object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Command(String[] inputArr) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.inputArr \u003d inputArr;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Print the error message when duke crashes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void printErr() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        System.out.println(KEYWORD_COMMAND_ERR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Display out the number of task in the user\u0027s list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks the task object containing the list of task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String printNumTask(TaskList tasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\"Now you have %d tasks in the list.\\n\", tasks.size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Executes the given command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param storage Object that deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 52
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkDeleteFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.IntegerChecker.isNumber;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DELETE_NOTIFICATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDeleteException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the delete command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a DeleteCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public DeleteCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidFormatDeleteException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        checkDeleteFormat(tasks, inputArr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return deleteTask(parseInt(inputArr[1]), ui, tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Delete the task at that index in the list. If the index \u0027pos\u0027 is less than or equals to 0 or greater than"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * the size of the list, a message will printed, notifying the user of the invalid input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param pos Index of the task to be deleted in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return If index is valid, a string message will be displayed notifying which task has been deleted, else there"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * will be a message notifying about the invalid input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String deleteTask(int pos, Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert isNumber(Integer.toString(pos)) : \"pos is not a number\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Task task \u003d tasks.get(pos - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tasks.remove(pos - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return ui.messageFormatter(KEYWORD_DELETE_NOTIFICATION, task.toString(), printNumTask(tasks));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 55
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkDoneFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.IntegerChecker.isNumber;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDoneException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the done command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * InitializeCreates a DoneCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public DoneCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidFormatDoneException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        checkDoneFormat(tasks, inputArr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return mark(parseInt(inputArr[1]), ui, tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Mark the task at that index \u0027pos\u0027 of the list. If the index \u0027pos\u0027 is less than or equals to 0 or greater than"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * the size of the list, a message will printed, notifying the user of the invalid input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param pos Index of the task to be marked in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return If index is valid, a String message will be displayed notifying which task has been marked, else there"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * will be a message notifying about the invalid input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String mark(int pos, Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert isNumber(Integer.toString(pos)) : \"pos is not a number\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Task task \u003d tasks.get(pos - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return ui.messageFormatter(task.markAsDone());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 53
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkFindFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_EMPTY_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_FIND_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatFindException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the find command of the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a FindCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public FindCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidFormatFindException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        checkFindFormat(inputArr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return findTasks(tasks, inputArr[1], ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Find and display the list of task that contains the user\u0027s input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object that contains the list of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param keyword The task that the user is looking for."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A String message stating all the tasks that contains the particular keyword that"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * the user has keyed in."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String findTasks(TaskList tasks, String keyword, Ui ui) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        StringBuilder finalMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        finalMessage \u003d buildString(finalMessage, tasks, keyword);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return getResult(finalMessage, ui, keyword);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Construct the list of task based on the user\u0027s input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param finalMessage Empty message."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object that contains the list of tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param keyword The task that the user is looking for."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return list of task based on the use\u0027s input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private StringBuilder buildString(StringBuilder finalMessage, TaskList tasks, String keyword) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String description \u003d task.getDescription().toLowerCase();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (description.contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                finalMessage.append(task.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return finalMessage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if the Stringbuilder contains an empty string."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param finalMessage Stringbuilder containing the result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return True if Stringbuilder does not contain an empty string, else false."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private boolean checkEmptyMessage(StringBuilder finalMessage) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return finalMessage.toString().equals(KEYWORD_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return the list of tasks that matches the user\u0027s input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param finalMessage result of finding any list of tasks that match the user\u0027s input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param keyword The task that the user is looking for."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return If finalMessage is not an empty string, return the result of finalMessage, else return an empty string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * message."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String getResult(StringBuilder finalMessage, Ui ui, String keyword) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (checkEmptyMessage(finalMessage)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String noTask \u003d String.format(\"No available task matches %s\\n\", keyword);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(noTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert finalMessage.toString().length() \u003e 0 : \"Message is empty\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(KEYWORD_FIND_SUCCESS, finalMessage.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 100
    }
  },
  {
    "path": "src/main/java/duke/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkHelpFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_HELP_BYE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_HELP_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_HELP_DELETE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_HELP_DISPLAY_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_HELP_DONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_HELP_EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_HELP_FIND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_HELP_LIST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_HELP_REMIND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_HELP_TODO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatHelpException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the help command of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a HelpCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public HelpCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidFormatHelpException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        checkHelpFormat(inputArr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return getListOfCommands();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Generate the list of commands available in Duke"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A list of commands available in Duke"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String getListOfCommands() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return KEYWORD_HELP_DISPLAY_MESSAGE + KEYWORD_HELP_LIST + KEYWORD_HELP_BYE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                + KEYWORD_HELP_TODO + KEYWORD_HELP_DELETE + KEYWORD_HELP_DONE + KEYWORD_HELP_FIND"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                + KEYWORD_HELP_REMIND + KEYWORD_HELP_DEADLINE + KEYWORD_HELP_EVENT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 55
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkListFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_LIST_EMPTY_MSG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_LIST_SHOW_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatListException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the add command of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize an ListCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ListCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidFormatListException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        checkListFormat(inputArr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return showListTasks(tasks, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Print out all the task in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A string representing the information of the list of tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String showListTasks(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(KEYWORD_LIST_EMPTY_MSG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert tasks.size() \u003e 0 : \"Invalid task list, giving a negative size\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            StringBuffer finalMessage \u003d new StringBuffer(KEYWORD_LIST_SHOW_TASK).append(\"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            IntStream.range(1, tasks.size() + 1).forEach(num -\u003e finalMessage.append(num).append(\". \")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    .append(tasks.get(num - 1)).append(\"\\n\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(finalMessage.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 57
    }
  },
  {
    "path": "src/main/java/duke/commands/ReminderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkReminderFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.IntegerChecker.isNumber;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_NO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_ONE_SPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_YES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatReminderException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the remind command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize an ReminderCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ReminderCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidFormatReminderException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        checkReminderFormat(tasks, inputArr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return setReminder(inputArr[1], tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Set a task on reminder. It will appear on the left hand corner of the GUI."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command Representing the target task and its reminder option."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A string message confirm the task to be reminded"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String setReminder(String command, TaskList tasks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] result \u003d command.split(KEYWORD_ONE_SPACE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert result[1].equals(KEYWORD_YES) || result[1].equals(KEYWORD_NO);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert isNumber(result[0]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Task task \u003d tasks.get(Integer.parseInt(result[0]) - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return task.setReminder(result[1].equals(KEYWORD_YES));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 54
    }
  },
  {
    "path": "src/main/java/duke/commands/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates an unknown command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize an UnknownCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of containing user\u0027s input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public UnknownCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws UnknownCommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        throw new UnknownCommandException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 29
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Parent exception class for this program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the DukeException Object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param message Message to be displayed to the user when an invalid input is keyed in."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DuplicateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DUPLICATE_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Thrown when user is trying to add a task when it exist in the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DuplicateException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the DuplicateException Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public DuplicateException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(KEYWORD_DUPLICATE_EXCEPTION);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTextException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_EMPTY_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Thrown when user did not key in anything after their command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class EmptyTextException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the EmptyTextException Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param text The command that is throwing the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public EmptyTextException(String text) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(String.format(KEYWORD_EMPTY_EXCEPTION, text));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatByeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_BYE_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Thrown when the user type an invalid bye format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatByeException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the InvalidFormatByeException Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatByeException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(KEYWORD_BYE_EXCEPTION);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DATE_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Thrown when user key in an invalid date format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatDateException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the InvalidFormatDateException Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatDateException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(KEYWORD_DATE_EXCEPTION);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DEADLINE_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Thrown when user key in an invalid deadline format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the InvalidFormatDeadlineException Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatDeadlineException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(KEYWORD_DEADLINE_EXCEPTION);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatDeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DELETE_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Thrown when user key in an invalid delete format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatDeleteException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the InvalidFormatDeleteException Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatDeleteException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(KEYWORD_DELETE_EXCEPTION);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DONE_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Thrown when user key in an invalid done format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatDoneException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the InvalidFormatDoneException Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatDoneException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(KEYWORD_DONE_EXCEPTION);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_EVENT_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Thrown when user key in an invalid event format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatEventException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the InvalidFormatEventException Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatEventException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(KEYWORD_EVENT_EXCEPTION);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_FIND_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Thrown when user key in an invalid find format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatFindException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the InvalidFormatFindException Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatFindException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(KEYWORD_FIND_EXCEPTION);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatHelpException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_HELP_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Thrown when user key in an invalid help format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatHelpException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the InvalidFormatHelpException Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatHelpException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(KEYWORD_HELP_EXCEPTION);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_LIST_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Thrown when user key in an invalid list format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatListException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the InvalidFormatListException Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatListException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(KEYWORD_LIST_EXCEPTION);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatReminderException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_REMINDER_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Thrown when user key in an invalid reminder format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatReminderException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the InvalidFormatReminderException Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatReminderException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(KEYWORD_REMINDER_EXCEPTION);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_UNKNOWN_COMMAND_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Thrown when user key in an unknown command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the UnknownCommandException Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(KEYWORD_UNKNOWN_COMMAND_EXCEPTION);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 15
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_BYE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DELETE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_FIND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_HELP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_MULTIPLE_SPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_ONE_SPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_REMIND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_TODO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.ReminderCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.UnknownCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates reading the user\u0027s input and making sense of it."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Make sense of the user\u0027s input and execute the correct command based on the user\u0027s input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static Command parse(String message) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert message !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] inputArr \u003d getInputArray(message);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        inputArr[0] \u003d inputArr[0].toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch(inputArr[0]) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_BYE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ByeCommand(inputArr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_LIST:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ListCommand(inputArr);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_HELP:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new HelpCommand(inputArr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_DONE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new DoneCommand(inputArr);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_DELETE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new DeleteCommand(inputArr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_FIND:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new FindCommand(inputArr);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_REMIND:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ReminderCommand(inputArr);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_EVENT:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_DEADLINE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_TODO:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new AddCommand(inputArr);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new UnknownCommand(inputArr);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Format the user\u0027s input. Replacing multiple white spaces with single white space and splitting the string"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * based on the white spaces."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param message User\u0027s input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A string array containing the user\u0027s input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static String[] getInputArray(String message) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return message.trim().replaceAll(KEYWORD_MULTIPLE_SPACE, KEYWORD_ONE_SPACE).split(KEYWORD_ONE_SPACE, 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 75
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DEADLINE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_STRING_ZERO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_TODO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the storing and retrieving of information into the hard-disk"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if a particular task is completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param s A string encoding whether a task is completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Returns true if the task is completed, false otherwise."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private boolean isTaskDone(String s) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return !s.equals(KEYWORD_STRING_ZERO);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if a particular task has reminder on."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param s A string encoding whether a task has reminder on."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Returns true if the task has reminder on, false otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private boolean isReminderOn(String s) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return !s.equals(KEYWORD_STRING_ZERO);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Create a file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param path The directory that to be created."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void createFilePath(Path path) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert path !\u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Files.createDirectories(path);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Create a CSV file for the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param file The CSV file to be created."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void createCsv(File file) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert file !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Record down the list of tasks that the user have during this session."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param file The CSV file to record down the information."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void savingFileInfo(File file, TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert file !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert tasks !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            bufferedWriter.write(tasks.get(i).formatStyling());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        bufferedWriter.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Record the data back into the user\u0027s file when user exits the program/"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void record(TaskList tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert tasks !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String dir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Path path \u003d Paths.get(dir, \"duke.Duke\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                createFilePath(path);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Path filePath \u003d Paths.get(dir, \"duke.Duke\", \"todoList.csv\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            File file \u003d filePath.toFile();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                createCsv(file);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            savingFileInfo(file, tasks);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Command.printErr();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieve the user\u0027s data and load into the system."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void retrieve(TaskList tasks) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String dir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Path path \u003d Paths.get(dir, \"duke.Duke\", \"todoList.csv\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (path.toFile().exists()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            getData(path, tasks);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Read the data that is stored inside the file"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param path File path."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void getData(Path path, TaskList tasks) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            BufferedReader bufferedReader \u003d Files.newBufferedReader(path);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] info \u003d line.split(\",\", 5);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                switch (info[0]) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                case KEYWORD_TODO:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    tasks.add(new ToDo(info[1], isTaskDone(info[2]), isReminderOn(info[3])));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                case KEYWORD_EVENT:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    tasks.add(new Event(info[2], info[1], isTaskDone(info[3]), isReminderOn(info[4])));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                case KEYWORD_DEADLINE:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    tasks.add(new Deadline(info[2], info[1], isTaskDone(info[3]), isReminderOn(info[4])));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    throw new UnknownCommandException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException | UnknownCommandException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Command.printErr();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 157
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.DateFormatter.FORMAT_DATE_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the deadline task that user has inputted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a deadline object the containing details of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskDeadline LocalDateTime format of the date and time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Deadline(String description, LocalDateTime taskDeadline) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, 0, taskDeadline);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a deadline object the containing details of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskDeadline String format of the time. Either YYYY-MM-DD HHMM or"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                     YYYY-MM-DD(Will be reformatted with 2359 as HHMM)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isReminderOn Boolean value of whether this task needs a reminder."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Deadline(String description, String taskDeadline, boolean isDone, boolean isReminderOn) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, isDone, isReminderOn, 0, LocalDateTime.parse(taskDeadline));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return a proper styling to be recorded into CSV."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A formatted string to be recorded into CSV."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String formatStyling() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\"deadline,%s%s\", getDueDate(), super.formatStyling());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A String representation of the deadline object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A String representation of the deadline object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + getDueDate().format(FORMAT_DATE_TIME) + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 53
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.DateFormatter.FORMAT_DATE_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the event task that user has inputted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a event object the containing details of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param eventTime LocalDateTime format of the date and time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Event(String description, LocalDateTime eventTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, 0, eventTime);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a event object the containing details of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param eventTime String format of the time. Either YYYY-MM-DD HHMM or"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                  YYYY-MM-DD(Will be reformatted with 2359 as HHMM)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isReminderOn Boolean value of whether this task needs a reminder"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Event(String description, String eventTime, boolean isDone, boolean isReminderOn) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, isDone, isReminderOn, 0, LocalDateTime.parse(eventTime));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return a proper styling to be recorded into CSV."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A formatted string to be recorded into CSV."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String formatStyling() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\"event,%s%s\", getDueDate(), super.formatStyling());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A String representation of the event object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A String representation of the event object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getDueDate().format(FORMAT_DATE_TIME) + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 53
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_CROSS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_TASK_MARKED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_TASK_MARKED_BEFORE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_TASK_REMINDER_OFF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_TASK_REMINDER_ON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_TICK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the task that user has inputted."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected boolean isReminderOn;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected LocalDateTime dueDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a task object the containing details of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isReminderOn \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a task object the containing details of the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value representing whether a task is completed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isReminderOn \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a task object the containing details of the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param priority Integer value denoting the priority of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task(String description, int priority) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isReminderOn \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a task object the containing details of the task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param priority Integer value denoting the priority of the task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param dueDate LocalDateTime object denoting the due date of the task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task(String description, int priority, LocalDateTime dueDate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a task object the containing details of the task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isReminderOn Boolean value of whether this task needs a reminder."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param priority Integer value denoting the priority of the task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task(String description, boolean isDone, boolean isReminderOn, int priority) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isReminderOn \u003d isReminderOn;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a task object the containing details of the task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isReminderOn Boolean value of whether this task needs a reminder."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param priority Integer value denoting the priority of the task."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param dueDate LocalDateTime object denoting the due date of the task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task(String description, boolean isDone, boolean isReminderOn, int priority, LocalDateTime dueDate) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isReminderOn \u003d isReminderOn;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Display a cross if task is not done, a tick otherwise."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Byte encoding strings of the symbols tick or X."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return (isDone ? KEYWORD_TICK : KEYWORD_CROSS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Mark the task as completed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String markAsDone() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return KEYWORD_TASK_MARKED_BEFORE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return KEYWORD_TASK_MARKED + \"\\n\" + this.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Set the status of reminder option."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param status boolean value denote the status of reminder option."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String setReminder(boolean status) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        isReminderOn \u003d status;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (status) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return String.format(KEYWORD_TASK_REMINDER_ON, description);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return String.format(KEYWORD_TASK_REMINDER_OFF, description);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return a proper styling to be recorded into CSV."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A formatted string to be recorded into CSV."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String formatStyling() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\",%s,%d,%d\\n\", description, getTaskStatus(), getReminderStatus());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * If a task has a reminder on, return 1 else 0."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return An integer coded for the reminder status of the task."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public int getReminderStatus() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isReminderOn ? 1 : 0;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * If a task is completed, return 1 else 0."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return An integer coded for the completed status of the task."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public int getTaskStatus() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isDone ? 1 : 0;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieve the details of the task."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A string representing the details of the task."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieve the priority of the task."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Integer representing the priority of the task."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieve the due date of the task."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A LocalDateTime object representing the due date."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public LocalDateTime getDueDate() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A String representation of the task object."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A String representation of the task object."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 202
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the todo task that user has inputted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a todo object the containing details of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, 1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize a todo object the containing details of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ToDo(String description, boolean isDone, boolean isReminderOn) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, isDone, isReminderOn, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return a proper styling to be recorded into CSV."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A formatted string to be recorded into CSV."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String formatStyling() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\"todo%s\", super.formatStyling());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * A String representation of the todo object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A String representation of the todo object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 46
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates containing all the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ArrayList\u003cTask\u003e listTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return the number of tasks in the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Integer value of the size of the list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return listTasks.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieve the task at that index \u0027index\u0027 of the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param index Integer value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A task at that index \u0027index\u0027."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return listTasks.get(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Add the tasks into the list of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listTasks.add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Remove the task at that index \u0027index\u0027 of the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param index Integer value."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listTasks.remove(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Set the task at that index \u0027n\u0027 of the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param index Integer value."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param task Task to be inserted."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void set(int index, Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listTasks.set(index, task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Compare the task priority for reminder *Todo takes the highest priority*."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param task1 First task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param task2 Second task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return True if task1 is more important in terms of type and deadline than task2."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private boolean compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (task1.getPriority() \u003e task2.getPriority()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // implies task1 is of todo and task2 is event/deadline"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (task1.getPriority() \u003c task2.getPriority()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // implies task2 is of todo and task1 is event/deadline"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else { // same type"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (task1.getPriority() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                // both task are of task todo"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                // both task are of event/deadline"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                return task1.getDueDate().isBefore(task2.getDueDate());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sort the task in the list according to due dates *Todo takes the highest priority*."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void sortByDueDate() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        sort(this, 0, this.size() - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sort the task in the list according to due dates *Todo takes the highest priority*."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param left Index pointing to the left of array."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param right Index pointing to the right of array."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void sort(TaskList taskList, int left, int right) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (left \u003c right) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int mid \u003d (left + right) / 2;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            sort(taskList, left, mid);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            sort(taskList, mid + 1, right);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            merge(taskList, left, mid, mid + 1, right);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sort the task in the list according to due dates *Todo takes the highest priority*."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param left1 Index pointing to the left of the first half of the array."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param right1 Index pointing to the right of the first half of the array."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param left2 Index pointing to the left of the second half of the array."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param right2 Index pointing to the right of the second half of the array."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void merge(TaskList taskList, int left1, int right1, int left2, int right2) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int left \u003d left1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int right \u003d left2;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int tempIdx \u003d 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Task[] temp \u003d new Task[right2 - left1 + 1];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        while (left \u003c\u003d right1 \u0026\u0026 right \u003c\u003d right2) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (compare(taskList.get(left), (taskList.get(right)))) { // implement comparator"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                temp[tempIdx++] \u003d taskList.get(left++);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                temp[tempIdx++] \u003d taskList.get(right++);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        while (right \u003c\u003d right2) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            temp[tempIdx++] \u003d taskList.get(right++);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        while (left \u003c\u003d right1) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            temp[tempIdx++] \u003d taskList.get(left++);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c temp.length; i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            taskList.set(i + left1, temp[i]);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if a task already exist in the list of tasks."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param task The new to be added task."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Boolean value representing whether the task exist in the list of tasks."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean checkExistBefore(Task task) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c listTasks.size(); i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (listTasks.get(i).toString().substring(7).equals(task.toString().substring(7))) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 162
    }
  },
  {
    "path": "src/main/java/duke/ui/textui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui.textui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_UI_GOODBYE_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_UI_HELLO_DUKE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the reaction of duke to the user\u0027s input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Greet the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String greetings() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return messageFormatter(KEYWORD_UI_HELLO_DUKE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Say goodbye to user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String goodBye() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return messageFormatter(KEYWORD_UI_GOODBYE_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Print the error \u0027message\u0027."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param message Error message to be printed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String printException(String message) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return messageFormatter(message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Formatter to format any message. Easily customizable"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param messageList messages to be wrapped around the formatter."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String messageFormatter(String... messageList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        StringBuffer finalMessage \u003d new StringBuffer();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Stream.of(messageList).forEachOrdered(message -\u003e finalMessage.append(message).append(\"\\n\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return finalMessage.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 44
    }
  },
  {
    "path": "src/main/java/duke/ui/visualui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui.visualui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DUKE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_USER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String USER_SPEECH_BUBBLE \u003d \"-fx-background-radius: 12 12 0 12;\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DUKE_SPEECH_BUBBLE \u003d \"-fx-background-radius: 12 12 12 0;\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int IMAGE_SIZE \u003d 80;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox speechBubble;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Open the dialog box in the GUI."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param text text Text to output."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param image Image of DialogBox (either Duke or User)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param user Duke or User."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private DialogBox(String text, Image image, String user) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setProperties(text, image, user);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Flip the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Display the user\u0027s dialog."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param text Input text from user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param image User\u0027s icon."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Display of user dialog."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image image) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new DialogBox(text, image, KEYWORD_USER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Display Duke\u0027s response."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param text Output text from Duke."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param image Duke\u0027s image."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Display of Duke\u0027s response."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image image) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        var db \u003d new DialogBox(text, image, KEYWORD_DUKE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Set the design of the speech bubble."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param text The message that is being displayed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param image The person image."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param user The name of the user."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setProperties(String text, Image image, String user) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        dialog.getStylesheets().add(\"view/DialogBox.css\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setSpeechBubbleStyle(user);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        speechBubble.getStylesheets().add(\"view/DialogBox.css\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Rectangle clip \u003d new Rectangle(displayPicture.getFitWidth(), displayPicture.getFitHeight());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        clip.setArcWidth(IMAGE_SIZE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        clip.setArcHeight(IMAGE_SIZE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Display the speech bubble orientated to the right if the message is from the user, else display the speech"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * bubble orientated to the left if the message is from duke."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param user The person speaking."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setSpeechBubbleStyle(String user) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (user.equals(KEYWORD_USER)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            speechBubble.setStyle(USER_SPEECH_BUBBLE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            speechBubble.setStyle(DUKE_SPEECH_BUBBLE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 125
    }
  },
  {
    "path": "src/main/java/duke/ui/visualui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui.visualui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.ReminderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ScrollPane userScreen;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ScrollPane reminderScreen;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox reminderSection;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Image stitch \u003d new Image(this.getClass().getResourceAsStream(\"/images/stitch.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Image welcomeStitch \u003d new Image(this.getClass().getResourceAsStream(\"/images/welcomestitch.png\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Bind the height of the reminder and the chat portion."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        userScreen.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        reminderScreen.vvalueProperty().bind(reminderSection.heightProperty());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize duke."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param duke Duke application."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param stage Screen of the GUI."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setDuke(Duke duke, Stage stage) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String greet \u003d ui.greetings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        dialogContainer.getChildren().addAll(OpeningBox.getOpeningMessage(greet, welcomeStitch));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        userScreen.prefWidthProperty().bind(stage.widthProperty());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        loadReminderList(duke.retrieveTaskList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Create two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        handleAddReminder(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                DialogBox.getUserDialog(input, user),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                DialogBox.getDukeDialog(response, stitch)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check the list of task to see which is marked as reminders and display to the users these tasks in a sorted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * order by time."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void loadReminderList(TaskList taskList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        reminderSection.getChildren().clear();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TaskList reminderList \u003d new TaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (taskList.get(i).getReminderStatus() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                reminderList.add(taskList.get(i));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        reminderList.sortByDueDate();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c reminderList.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            reminderSection.getChildren().addAll(ReminderDisplay.getReminderDisplay(reminderList.get(i)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Update the ui instantly if user adds a new reminder."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void handleAddReminder(String input) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (command instanceof ReminderCommand) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            TaskList taskList \u003d duke.retrieveTaskList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            loadReminderList(taskList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 114
    }
  },
  {
    "path": "src/main/java/duke/ui/visualui/OpeningBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui.visualui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * UI design that shows Duke logo at the start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class OpeningBox extends VBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Label greetingMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Open the welcome message in the GUI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param greetingText The greeting message that is generated from the Duke application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param image Duke\u0027s icon."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private OpeningBox(String greetingText, Image image) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/OpeningBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setProperties(greetingText, image);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Display duke\u0027s welcome message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param greetingText Duke\u0027s welcome message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param image Duke\u0027s image."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Display of duke\u0027s welcome message"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static OpeningBox getOpeningMessage(String greetingText, Image image) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new OpeningBox(greetingText, image);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Set the design of the welcome message display."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param greetingText Duke\u0027s welcome message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param image Duke\u0027s image."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setProperties(String greetingText, Image image) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        greetingMessage.setText(greetingText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        greetingMessage.getStylesheets().add(\"view/OpeningBox.css\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 63
    }
  },
  {
    "path": "src/main/java/duke/ui/visualui/ReminderDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui.visualui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.DateFormatter.FORMAT_DATE_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_CROSS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_TICK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_TODO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Displays all the task that users have set on reminder."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ReminderDisplay extends VBox {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final Insets INSETS \u003d new Insets(10, 10, 0, 10);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int TEXT_SPACE__HEIGHT \u003d 40;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int TEXT_CENTERING \u003d 7;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_DATE \u003d \"Date: \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_TIME \u003d \"Time: \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_EMPTY \u003d \"-\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_COMPLETED \u003d \"Completed: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_COLON \u003d \": \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_COMMA \u003d \", \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TODO_BACKGROUND \u003d \"-fx-background-color: #648DFC;\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String EVENT_BACKGROUND \u003d \"-fx-background-color: #072AC8;\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DEADLINE_BACKGROUND \u003d \"-fx-background-color: #8FADFD\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DISPLAY_FONT \u003d \"Helvetica\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int DISPLAY_SIZE \u003d 12;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TITLE_COLOR \u003d \"#363f80\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DESCRIPTION_COLOR \u003d \"#8E8FB5\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow isDone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox bar;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow time;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Open the reminder section in the GUI."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskDetails The list of tasks that is set on reminder."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ReminderDisplay(String ... taskDetails) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/ReminderDisplay.fxml\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            this.getStylesheets().add(\"view/reminderText.css\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        createReminderList(taskDetails);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return a display of the task that was set on reminder."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param task Task that is set on reminder."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A display of the task that was set on reminder."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static ReminderDisplay getReminderDisplay(Task task) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String isDone \u003d Integer.toString(task.getTaskStatus());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ReminderDisplay(description, isDone, \"Todo\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ReminderDisplay(description, isDone, \"Event\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    task.getDueDate().format(FORMAT_DATE_TIME));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ReminderDisplay(description, isDone, \"Deadline\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    task.getDueDate().format(FORMAT_DATE_TIME));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false : \"invalid task type\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Create a text array that constitute the text header of a specific color and text description of a"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * specific color"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param title The type of event."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A text array that contains the text header of a specific color and a text description of"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * a specific color."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Text[] createText(String title, String description) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text text1 \u003d new Text(title);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text1.setFill(Color.web(TITLE_COLOR));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text1.setFont(Font.font(DISPLAY_FONT, FontWeight.BOLD, DISPLAY_SIZE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text text2 \u003d new Text(description);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text2.setFill(Color.web(DESCRIPTION_COLOR));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text2.setFont(Font.font(DISPLAY_FONT, FontWeight.BOLD, DISPLAY_SIZE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new Text[]{text1, text2};"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Set the padding for the display of the reminder."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setPadding() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        time.setPadding(INSETS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        date.setPadding(INSETS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        description.setPadding(INSETS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        isDone.setPadding(INSETS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Set the height for the display of the reminder."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setHeight() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        description.setPrefHeight(TEXT_SPACE__HEIGHT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        isDone.setPrefHeight(TEXT_SPACE__HEIGHT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        date.setPrefHeight(TEXT_SPACE__HEIGHT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        time.setPrefHeight(TEXT_SPACE__HEIGHT);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        description.translateYProperty().setValue(TEXT_CENTERING);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        isDone.translateYProperty().setValue(TEXT_CENTERING);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        date.translateYProperty().setValue(TEXT_CENTERING);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        time.translateYProperty().setValue(TEXT_CENTERING);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Set the color code for the display of the reminder. Depends on the type of task."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param task The task that is set on reminder."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void setBarColor(String task) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (task.toLowerCase()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_TODO:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            bar.setStyle(TODO_BACKGROUND);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_EVENT:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            bar.setStyle(EVENT_BACKGROUND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_DEADLINE:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            bar.setStyle(DEADLINE_BACKGROUND);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false : \"Invalid task\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Create the display for the list of tasks that is set on reminder."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskDetails A list of details regarding the task."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void createReminderList(String ... taskDetails) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        System.out.println(Arrays.deepToString(taskDetails));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text[] dateText \u003d getDateText(taskDetails);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text[] timeText \u003d getTimeText(taskDetails);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text[] descriptionText \u003d createText(taskDetails[2] + TEXT_COLON, taskDetails[0]);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text[] isDoneText \u003d createText(TEXT_COMPLETED, taskDetails[1].equals(\"1\") ? KEYWORD_TICK : KEYWORD_CROSS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setHeight();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setPadding();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        date.getChildren().addAll(dateText[0], dateText[1]);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        time.getChildren().addAll(timeText[0], timeText[1]);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        description.getChildren().addAll(descriptionText[0], descriptionText[1]);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        isDone.getChildren().addAll(isDoneText[0], isDoneText[1]);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setBarColor(taskDetails[2]);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return a text array that determines the date format."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskDetails A list of details regarding the task."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A text array that determines the date format."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Text[] getDateText(String ... taskDetails) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text[] dateText;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (taskDetails.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] dateTimeArray \u003d taskDetails[3].split(TEXT_COMMA);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String newTextDate \u003d shortenTextDate(dateTimeArray[0]);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            dateText \u003d createText(TEXT_DATE, newTextDate + TEXT_COMMA + dateTimeArray[1]);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            dateText \u003d createText(TEXT_DATE, TEXT_EMPTY);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return dateText;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return a text array that determines the time format."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskDetails A list of details regarding the task."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Returns a text array that determines the time format."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Text[] getTimeText(String ... taskDetails) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text[] timeText;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (taskDetails.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] dateTimeArray \u003d taskDetails[3].split(TEXT_COMMA);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            timeText \u003d createText(TEXT_TIME, dateTimeArray[2]);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            timeText \u003d createText(TEXT_TIME, TEXT_EMPTY);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return timeText;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return a shorten name for the day."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param textDate the day of the task."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A shorten common abbreviation name for the day."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String shortenTextDate(String textDate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String newTextDate;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch(textDate.toLowerCase()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case \"monday\":"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            newTextDate \u003d \"Mon\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case \"tuesday\":"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            newTextDate \u003d \"Tues\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case \"wednesday\":"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            newTextDate \u003d \"Wed\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case \"thursday\":"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            newTextDate \u003d \"Thur\";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case \"friday\":"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            newTextDate \u003d \"Fri\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case \"saturday\":"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            newTextDate \u003d \"Sat\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case \"sunday\":"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            newTextDate \u003d \"Sun\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return newTextDate;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 256
    }
  },
  {
    "path": "src/main/java/duke/util/DateFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_ONE_SPACE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDateException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that helps to format the date of the user\u0027s input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DateFormatter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATE_TIME \u003d DateTimeFormatter.ofPattern(\"EEEE, dd MMM yyyy, h:mma\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Format the user\u0027s input date and time into a LocalDateTime object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param dateAndTime The user\u0027s input of date and time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A LocalDateTime object that contains the information of the timing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatDateException If the inputted user\u0027s timing is not of the correct format:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * YYYY-MM-DD HHMM or YYYY-MM-DD, an exception will be thrown to notify the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static LocalDateTime formatDateTime(String dateAndTime) throws InvalidFormatDateException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert dateAndTime !\u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] dateFormat \u003d dateAndTime.split(KEYWORD_ONE_SPACE, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] date \u003d dateFormat[0].split(\"-\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (dateFormat.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            time \u003d \"2359\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (date.length !\u003d 3) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatDateException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            time \u003d dateFormat[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (date.length !\u003d 3 || time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatDateException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert date !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert time !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int year \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int day \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int minute \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (DateTimeException | NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatDateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 55
    }
  },
  {
    "path": "src/main/java/duke/util/FormatChecker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.IntegerChecker.isNumber;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_NO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_ONE_SPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_YES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.EmptyTextException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatByeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDeadlineException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDeleteException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDoneException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatEventException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatFindException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatHelpException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatListException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatReminderException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class the deals with checking the format of the user\u0027s input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class FormatChecker {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if the event command has a description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command String array representing the command the user keyed in."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatEventException When description is missing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void checkEventFormat(String ... command) throws InvalidFormatEventException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!checkLengthEqualsTwo(command)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatEventException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if the deadline command has a description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command String array representing the command the user keyed in."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatDeadlineException When description is missing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void checkDeadlineFormat(String ... command) throws InvalidFormatDeadlineException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (checkLengthEqualsOne(command)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatDeadlineException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if there is description in the command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command String array representing the command the user keyed in."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws EmptyTextException"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void checkEmptyText(String ... command) throws EmptyTextException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (checkLengthEqualsOne(command)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new EmptyTextException(command[0]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if the bye command has a description."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command String array representing the command the user keyed in."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatByeException When there are extra words behind bye."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void checkByeFormat(String ... command) throws InvalidFormatByeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!checkLengthEqualsOne(command)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatByeException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if the bye command has a description."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command String array representing the command the user keyed in."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatDeleteException When there are missing numbers or Not a number behind delete."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void checkDeleteFormat(TaskList tasks, String ... command) throws InvalidFormatDeleteException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (checkLengthEqualsOne(command) || !isNumber(command[1])) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatDeleteException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        boolean indexLessThanOrEqualsZero \u003d parseInt(command[1]) \u003c\u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        boolean indexGreaterThanSizeOfList \u003d parseInt(command[1]) \u003e tasks.size();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (indexLessThanOrEqualsZero || indexGreaterThanSizeOfList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatDeleteException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if the done command has a description."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command String array representing the command the user keyed in."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatDoneException When there are missing numbers or Not a number behind delete."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void checkDoneFormat(TaskList tasks, String ... command) throws InvalidFormatDoneException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (checkLengthEqualsOne(command) || !isNumber(command[1])) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatDoneException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        boolean indexLessThanOrEqualsZero \u003d parseInt(command[1]) \u003c\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        boolean indexGreaterThanSizeOfList \u003d parseInt(command[1]) \u003e tasks.size();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (indexLessThanOrEqualsZero || indexGreaterThanSizeOfList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatDoneException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if the find command has a description."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command String array representing the command the user keyed in."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatFindException When there are missing description or user tried to key in more than"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * one keyword."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void checkFindFormat(String ... command) throws InvalidFormatFindException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (checkLengthEqualsOne(command)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatFindException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] findDescription \u003d command[1].split(KEYWORD_ONE_SPACE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (findDescription.length \u003e 1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatFindException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if the help command has a description."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command String array representing the command the user keyed in."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatHelpException When there are extra command behind help."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void checkHelpFormat(String ... command) throws InvalidFormatHelpException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!checkLengthEqualsOne(command)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatHelpException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if the list command has a description."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command String array representing the command the user keyed in."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatListException When there are extra command behind list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void checkListFormat(String ... command) throws InvalidFormatListException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!checkLengthEqualsOne(command)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatListException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if the remind command has a description."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command String array representing the command the user keyed in."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatReminderException When there are missing description or if user key in more than the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * required format."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void checkReminderFormat(TaskList tasks, String ... command) throws InvalidFormatReminderException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (checkLengthEqualsOne(command)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatReminderException();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] reminderDescription \u003d command[1].split(KEYWORD_ONE_SPACE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!checkLengthEqualsTwo(reminderDescription)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatReminderException();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        boolean isYesCommand \u003d reminderDescription[1].toLowerCase().equals(KEYWORD_YES);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        boolean isNoCommand \u003d reminderDescription[1].toLowerCase().equals(KEYWORD_NO);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!isYesCommand \u0026\u0026 !isNoCommand) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatReminderException();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (!isNumber(reminderDescription[0])) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatReminderException();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        boolean indexLessThanOrEqualsZero \u003d parseInt(reminderDescription[0]) \u003c\u003d 0;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        boolean indexGreaterThanSizeOfList \u003d parseInt(reminderDescription[0]) \u003e tasks.size();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (indexLessThanOrEqualsZero || indexGreaterThanSizeOfList) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatReminderException();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns true if length of command is 1 else false."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command String array representing the command the user keyed in."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return True if length of command is 1 else false."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static boolean checkLengthEqualsOne(String ... command) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return command.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns true if length of command is 2 else false."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command String array representing the command the user keyed in."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return True if length of command is 2 else false."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static boolean checkLengthEqualsTwo(String ... command) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return command.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 206
    }
  },
  {
    "path": "src/main/java/duke/util/IntegerChecker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that checks is the user\u0027s input is an integer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class IntegerChecker {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Check if the user\u0027s string input is a number."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param string the inputted user\u0027s index for tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return boolean value of true if user\u0027s string input is a number, false otherwise."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static boolean isNumber(String string) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int number \u003d parseInt(string);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 24
    }
  },
  {
    "path": "src/main/java/duke/util/Keyword.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that contains all the magic strings."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Keyword {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Miscellaneous"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_TICK \u003d \"\\u2714\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_CROSS \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_EXTRA_SPACE \u003d \"    \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_ONE_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_MULTIPLE_SPACE \u003d \"  +\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_DEADLINE_FORMAT \u003d \" /by \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_EVENT_FORMAT \u003d \" /at \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_USER \u003d \"user\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_DUKE \u003d \"duke\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_EMPTY_MESSAGE \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_YES \u003d \"y\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_NO \u003d \"n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_STRING_ZERO \u003d \"0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Task message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_TASK_MARKED_BEFORE \u003d \"This task has already been marked!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_TASK_MARKED \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_TASK_REMINDER_ON \u003d \"The reminder of this task %s, has been activated\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_TASK_REMINDER_OFF \u003d \"The reminder of this task %s, has been deactivated\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // UI message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_UI_GOODBYE_MESSAGE \u003d \"Bye ^.^, Hope to see you again soon!!!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_UI_HELLO_DUKE \u003d \"Welcome back\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_REMIND \u003d \"remind\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Notification message"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_ADD_NOTIFICATION \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_COMMAND_ERR \u003d \"Sorry something went wrong. Duke crashed X.X\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_DELETE_NOTIFICATION \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_FIND_SUCCESS \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_HELP_DISPLAY_MESSAGE \u003d \"Here are the list of commands available:\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_HELP_LIST \u003d \"1. list\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_HELP_BYE \u003d \"2. bye\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_HELP_TODO \u003d \"3. todo \\\u0027task name\\\u0027 (e.g. todo task 1)\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_HELP_DELETE \u003d \"4. delete ___ (e.g. delete 1) \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \" *Note that it should be a value more than 0*\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_HELP_DONE \u003d \"5. done ___ (e.g. done 1)  \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"*Note that it should be a value more than 0*\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_HELP_FIND \u003d \"6. find ___ (e.g. find book) \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"*Note that only 1 keyword is allowed*\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_HELP_REMIND \u003d \"7. remind _ _ (e.g.remind 1 y)\" + \"\\n\" + KEYWORD_EXTRA_SPACE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \" *Sets reminder on task 1 in task list, y or n represents yes or no respectively*\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_HELP_DEADLINE \u003d \"8. deadline \\\u0027task name\\\u0027 /by \\\u0027any date format\\\u0027 \" + \"\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + KEYWORD_EXTRA_SPACE + \"(e.g. deadline project /by YYYY-MM-DD HHMM or YYYY-MM-DD)\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_HELP_EVENT \u003d \"9. event \\\u0027event name\\\u0027 /at \\\u0027any date format\\\u0027 \" + \"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + KEYWORD_EXTRA_SPACE + \"(e.g. event project /at YYYY-MM-DD HHMM or YYYY-MM-DD)\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_LIST_EMPTY_MSG \u003d \"Your list is empty!!!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_LIST_SHOW_TASK \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // Exception messages"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_DUPLICATE_EXCEPTION \u003d \" ☹ OOPS! This specific task exist before!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_EMPTY_EXCEPTION \u003d \" ☹ OOPS! You must fill in the text for %s\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_BYE_EXCEPTION \u003d \" ☹ OOPS! Did you mean bye? \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"(Note: There should not be anything behind bye)\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_DATE_EXCEPTION \u003d \" ☹ OOPS! A proper date format would be YYYY-MM-DD HHMM \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"(e.g. 2019-10-15 1600) or YYYY-MM-DD (e.g. 2019-10-15)\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_DEADLINE_EXCEPTION \u003d \" ☹ OOPS! A proper deadline format would be like, \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"e.g. deadline \\\u0027task name\\\u0027 /by \\\u0027YYYY-MM-DD HHMM or YYYY-MM-DD\\\u0027\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_DELETE_EXCEPTION \u003d \" ☹ OOPS! A proper delete format would be like e.g. delete \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"\\\u0027an integer that is between 1(if list is not empty) to the number of items in the list\\\u0027\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_DONE_EXCEPTION \u003d \" ☹ OOPS! A proper done format would be like  e.g. done \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"\\\u0027an integer that is between 1(if list is not empty) to the number of items in the list\\\u0027\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_EVENT_EXCEPTION \u003d \" ☹ OOPS! A proper event format would be like, \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"e.g. event \\\u0027event name\\\u0027 /at \\\u0027YYYY-MM-DD HHMM or YYYY-MM-DD\\\u0027\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_FIND_EXCEPTION \u003d \" ☹ OOPS! A proper find format would be like, \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"e.g. find \\\u0027keyword\\\u0027 \" + \"(Note that only 1 keyword is allowed.)\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_HELP_EXCEPTION \u003d \" ☹ OOPS! Did you mean help? \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"(Note: There should not be anything behind help)\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_LIST_EXCEPTION \u003d \" ☹ OOPS! Did you mean list? \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"(Note: There should not be anything behind list)\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_REMINDER_EXCEPTION \u003d \" ☹ OOPS! A proper remind format would be like, \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"e.g. remind \\\u0027index in task list\\\u0027 \\\u0027y or n\\\u0027 \";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_UNKNOWN_COMMAND_EXCEPTION \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"that means :-( Type \\\"help\\\" to view the list of commands available\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 94
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root fx:id\u003d\"interaction\" "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         alignment\u003d\"TOP_RIGHT\" "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         maxHeight\u003d\"Infinity\" "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox translateY\u003d\"10\" "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              fx:id\u003d\"speechBubble\" "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              styleClass\u003d\"speechBubble\" "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              alignment\u003d\"TOP_RIGHT\" "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              maxHeight\u003d\"-Infinity\" "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              spacing\u003d\"5.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       styleClass\u003d\"textStyling\" "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       text\u003d\"Label\" "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       wrapText\u003d\"true\" "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       minWidth\u003d\"20\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       maxWidth\u003d\"600\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       lineSpacing\u003d\"2\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox translateY\u003d\"40\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              alignment\u003d\"BOTTOM_CENTER\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cImageView fx:id\u003d\"displayPicture\" "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       fitHeight\u003d\"80.0\" "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       fitWidth\u003d\"80.0\" "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 44
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.AnchorPane\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         minWidth\u003d\"1100\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         prefWidth\u003d\"1100\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         fx:controller\u003d\"duke.ui.visualui.MainWindow\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cGridPane fx:id\u003d\"GridPane\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  AnchorPane.topAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cRowConstraints vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cScrollPane"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        minWidth\u003d\"210\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.columnIndex\u003d\"0\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.columnSpan\u003d\"1\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.rowIndex\u003d\"0\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.rowSpan\u003d\"4\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        vbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        pannable\u003d\"true\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        vvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        fx:id\u003d\"reminderScreen\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        fitToWidth\u003d\"true\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        style\u003d\"-fx-background: #e8effa;-fx-border-color: #e8effa\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        translateX\u003d\"-2\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        translateY\u003d\"-2\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cVBox"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        fx:id\u003d\"reminderSection\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        styleClass\u003d\"reminderSectionStyling\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        minWidth\u003d\"200\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cTextField styleClass\u003d\"textFieldStyling\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           fx:id\u003d\"userInput\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           minHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           AnchorPane.bottomAnchor\u003d\"1.0\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           GridPane.rowIndex\u003d\"3\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           GridPane.valignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           promptText\u003d\"Enter your command here...\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           focusTraversable\u003d\"false\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           prefWidth\u003d\"1500\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cButton fx:id\u003d\"sendButton\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        minHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        minWidth\u003d\"76.0\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        text\u003d\"\u003e\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.columnIndex\u003d\"3\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.rowIndex\u003d\"3\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.valignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        styleClass\u003d\"buttonStyling\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        AnchorPane.bottomAnchor\u003d\"12.0\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        AnchorPane.rightAnchor\u003d\"8.0\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cScrollPane  fx:id\u003d\"userScreen\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             fitToWidth\u003d\"true\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             vvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             GridPane.rowIndex\u003d\"0\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             GridPane.columnSpan\u003d\"4\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             styleClass\u003d\"userScreenStyling\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        \u003cVBox styleClass\u003d\"mainBodyStyling\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                              fx:id\u003d\"dialogContainer\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                              minHeight\u003d\"559\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                              maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                              minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        \u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                                \u003cInsets bottom\u003d\"45.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 117
    }
  },
  {
    "path": "src/main/resources/view/OpeningBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         type\u003d\"javafx.scene.layout.VBox\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cImageView fx:id\u003d\"displayPicture\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           fitHeight\u003d\"100.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           fitWidth\u003d\"100.0\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cLabel styleClass\u003d\"textStyling\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "               alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "               maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "               fx:id\u003d\"greetingMessage\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "               text\u003d\"Label\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "               wrapText\u003d\"true\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "               maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 32
    }
  },
  {
    "path": "src/main/resources/view/ReminderDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         type\u003d\"javafx.scene.layout.VBox\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cHBox maxHeight\u003d\"120\" prefWidth\u003d\"190\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cVBox prefWidth\u003d\"10\" "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  maxHeight\u003d\"120\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  prefHeight\u003d\"120\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  fx:id\u003d\"bar\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  translateX\u003d\"-1\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  translateY\u003d\"-1\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cVBox prefWidth\u003d\"180\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  prefHeight\u003d\"100\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  maxHeight\u003d\"100\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cTextFlow fx:id\u003d\"description\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          prefWidth\u003d\"180\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          styleClass\u003d\"descriptionStyling\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cTextFlow fx:id\u003d\"isDone\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          prefWidth\u003d\"180\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          styleClass\u003d\"isDoneStyling\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cTextFlow fx:id\u003d\"date\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          prefWidth\u003d\"180\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          styleClass\u003d\"dateStyling\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cTextFlow fx:id\u003d\"time\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          prefWidth\u003d\"180\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          styleClass\u003d\"timeStyling\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 45
    }
  },
  {
    "path": "src/test/java/duke/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.DateFormatter.formatDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DEADLINE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_EVENT_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.lang.reflect.Method;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDateException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "// Reused from https://www.youtube.com/watch?v\u003dHjvEkexsrWk\u0026ab_channel\u003dSivaReddy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Method method;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            method \u003d AddCommand.class.getDeclaredMethod(\"addTask\", String.class, String.class, Ui.class,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    TaskList.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Valid format for add task (event)\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkValidAddTaskForEvent() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String type \u003d \"event\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String descriptionAndDateTime \u003d \"project /at 2020-12-11\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] descriptionAndDateTimeArray \u003d descriptionAndDateTime.split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d new Event(descriptionAndDateTimeArray[0], formatDateTime(descriptionAndDateTimeArray[1]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String expected \u003d \"Got it. I\u0027ve added this task:\" + \"\\n\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    + \"Now you have 1 tasks in the list.\" + \"\\n\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            AddCommand command \u003d new AddCommand(new String[]{type, descriptionAndDateTime});"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String dukeReply \u003d (String) method.invoke(command, type, descriptionAndDateTime, ui, tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertEquals(dukeReply, expected);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (InvocationTargetException | IllegalAccessException | InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Valid format for add task (deadline)\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkValidAddTaskForDeadline() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String type \u003d \"deadline\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String descriptionAndDateTime \u003d \"project /by 2020-12-11\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] descriptionAndDateTimeArray \u003d descriptionAndDateTime.split(KEYWORD_DEADLINE_FORMAT, 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d new Deadline(descriptionAndDateTimeArray[0], formatDateTime(descriptionAndDateTimeArray[1]));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String expected \u003d \"Got it. I\u0027ve added this task:\" + \"\\n\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    + \"Now you have 1 tasks in the list.\" + \"\\n\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            AddCommand command \u003d new AddCommand(new String[]{type, descriptionAndDateTime});"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String dukeReply \u003d (String) method.invoke(command, type, descriptionAndDateTime, ui, tasks);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertEquals(dukeReply, expected);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (InvocationTargetException | IllegalAccessException | InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Valid format for add task (todo)\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkValidAddTaskForToDo() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String type \u003d \"todo\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String description \u003d \"task 1\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d new ToDo(description);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String expected \u003d \"Got it. I\u0027ve added this task:\" + \"\\n\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    + \"Now you have 1 tasks in the list.\" + \"\\n\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            AddCommand command \u003d new AddCommand(new String[]{type, description});"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String dukeReply \u003d (String) method.invoke(command, type, description, ui, tasks);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertEquals(dukeReply, expected);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (InvocationTargetException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 95
    }
  },
  {
    "path": "src/test/java/duke/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.lang.reflect.Method;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Method method;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            method \u003d DeleteCommand.class.getDeclaredMethod(\"deleteTask\", int.class, Ui.class, TaskList.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Valid format for delete (delete 1)\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkValidDeleteCommandVersionOneTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tasks.add(new ToDo(\"hello world\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String type \u003d \"delete\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String description \u003d \"1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            DeleteCommand command \u003d new DeleteCommand(new String[]{type, description});"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String dukeReply \u003d (String) method.invoke(command, parseInt(description), ui, tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String expected \u003d \"Noted. I\u0027ve removed this task:\" + \"\\n\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    + \"Now you have 0 tasks in the list.\" + \"\\n\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertEquals(dukeReply, expected);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (InvocationTargetException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Valid format for delete (delete 5)\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkValidDeleteCommandVersionTwoTest() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new ToDo(\"hello world\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String type \u003d \"delete\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String description \u003d \"5\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            DeleteCommand command \u003d new DeleteCommand(new String[]{type, description});"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String dukeReply \u003d (String) method.invoke(command, parseInt(description), ui, tasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String expected \u003d \"Noted. I\u0027ve removed this task:\" + \"\\n\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    + \"Now you have 4 tasks in the list.\" + \"\\n\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertEquals(dukeReply, expected);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (InvocationTargetException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 73
    }
  },
  {
    "path": "src/test/java/duke/commands/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.lang.reflect.Method;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Method method;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            method \u003d DoneCommand.class.getDeclaredMethod(\"mark\", int.class, Ui.class, TaskList.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Valid format for done (done 1)\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkValidDoneCommandVersionOneTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tasks.add(new ToDo(\"hello world\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String type \u003d \"done\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String description \u003d \"1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            DoneCommand command \u003d new DoneCommand(new String[]{type, description});"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String dukeReply \u003d (String) method.invoke(command, parseInt(description), ui, tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String expected \u003d \"Nice! I\u0027ve marked this task as done:\" + \"\\n\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertEquals(dukeReply, expected);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (InvocationTargetException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Valid format for done (done 5)\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkValidDoneCommandVersionTwoTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new ToDo(\"hello world\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String type \u003d \"done\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String description \u003d \"5\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            DoneCommand command \u003d new DoneCommand(new String[]{type, description});"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String dukeReply \u003d (String) method.invoke(command, parseInt(description), ui, tasks);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String expected \u003d \"Nice! I\u0027ve marked this task as done:\" + \"\\n\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertEquals(dukeReply, expected);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (InvocationTargetException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 71
    }
  },
  {
    "path": "src/test/java/duke/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.lang.reflect.Method;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Method method;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            method \u003d FindCommand.class.getDeclaredMethod(\"findTasks\", TaskList.class, String.class, Ui.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Valid format for find (find duke)\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkValidFindCommandVersionOneTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tasks.add(new ToDo(\"hello world\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String type \u003d \"done\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String description \u003d \"duke\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FindCommand command \u003d new FindCommand(new String[]{type, description});"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String dukeReply \u003d (String) method.invoke(command, tasks, description, ui);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String expected \u003d \"No available task matches duke\" + \"\\n\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertEquals(dukeReply, expected);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (InvocationTargetException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Valid format for find (find 4)\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkValidFindCommandVersionTwoTest() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new ToDo(\"hello world \" + i));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String type \u003d \"done\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String description \u003d \"4\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FindCommand command \u003d new FindCommand(new String[]{type, description});"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String dukeReply \u003d (String) method.invoke(command, tasks, description, ui);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String expected \u003d \"Here are the matching tasks in your list:\" + \"\\n\" + task.toString() + \"\\n\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertEquals(dukeReply, expected);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (InvocationTargetException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 69
    }
  },
  {
    "path": "src/test/java/duke/commands/ReminderCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.lang.reflect.Method;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Method method;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            method \u003d ReminderCommand.class.getDeclaredMethod(\"setReminder\", String.class, TaskList.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Valid format for remind (remind 1 y)\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkValidRemindCommandVersionOneTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tasks.add(new ToDo(\"hello world\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String type \u003d \"remind\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String description \u003d \"1 y\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ReminderCommand command \u003d new ReminderCommand(new String[]{type, description});"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String dukeReply \u003d (String) method.invoke(command, description, tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String expected \u003d String.format(\"The reminder of this task %s, has been activated\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    task.getDescription());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertEquals(expected, dukeReply);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (InvocationTargetException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Valid format for remind (remind 4 n)\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkValidRemindCommandVersionTwoTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new ToDo(\"hello world \" + i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String type \u003d \"remind\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String description \u003d \"4 n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ReminderCommand command \u003d new ReminderCommand(new String[]{type, description});"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String dukeReply \u003d (String) method.invoke(command, description, tasks);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String expected \u003d String.format(\"The reminder of this task %s, has been deactivated\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    task.getDescription());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertEquals(expected, dukeReply);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (InvocationTargetException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 72
    }
  },
  {
    "path": "src/test/java/duke/commands/UnknownCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class UnknownCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Invalid command (hello world)\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkInvalidCommandVersionOneTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String type \u003d \"hello world\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        UnknownCommand command \u003d new UnknownCommand(new String[]{type});"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(UnknownCommandException.class, () -\u003e command.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Invalid command (blah)\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkInvalidCommandVersionTwoTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String type \u003d \"blah\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        UnknownCommand command \u003d new UnknownCommand(new String[]{type});"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(UnknownCommandException.class, () -\u003e command.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 43
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Testing unknown command\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void writeUnknownCommandTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(UnknownCommandException.class, () -\u003e parser.parse(\"abcdefg\").execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 31
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        task \u003d new Task(\"hello world\", false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testMarkAsDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String taskCompletedMessage \u003d task.markAsDone();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String str \u003d \"Nice! I\u0027ve marked this task as done:\\n[\\u2714] hello world\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(str, taskCompletedMessage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void formatStyling() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String str \u003d \",hello world,0,0\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(str, task.formatStyling());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 28
    }
  },
  {
    "path": "src/test/java/duke/tasklist/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TaskList task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        task \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            task.add(new Task(\"hello world \" + i));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testSize() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(3, task.size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testGet() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(\"[\" + \"\\u2718\" + \"] hello world 2\", task.get(2).toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testAdd() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // add again to test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        task.add(new Task(\"hello world 3\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(4, 4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testRemove() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        task.remove(2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 44
    }
  },
  {
    "path": "src/test/java/duke/ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String HELLO_DUKE \u003d \"Welcome back\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String GOODBYE_MSG \u003d \"Bye ^.^, Hope to see you again soon!!!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"formatter for input message\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testMessageFormatter() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String messageFormatterMessage \u003d ui.messageFormatter(\"hello world\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String str \u003d \"hello world\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(str, messageFormatterMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"user\u0027s login greetings\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testGreetings() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String greetingMessage \u003d ui.greetings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String str \u003d HELLO_DUKE + \"\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(str, greetingMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"user\u0027s logout message\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testGoodBye() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String goodbyeMessage \u003d ui.goodBye();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String str \u003d GOODBYE_MSG + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(str, goodbyeMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"error message\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testPrintException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String errorMessage \u003d ui.printException(\"ERROR\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String str \u003d \"ERROR\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(str, errorMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 53
    }
  },
  {
    "path": "src/test/java/duke/util/DateFormatterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDateException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DateFormatterTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private DateFormatter dateFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        dateFormatter \u003d new DateFormatter();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Check invalid date format (2020/10/13 2700)\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void writeInvalidTimeExceptionTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(InvalidFormatDateException.class, () -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                dateFormatter.formatDateTime(\"2020/10/13 2700\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Check impossible dates (2020-30-30 1600)\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void writeInvalidDateExceptionTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertThrows(InvalidFormatDateException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                dateFormatter.formatDateTime(\"2020-30-30 1600\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Check valid date without time(2020-12-12)\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void writeValidDateTest() throws InvalidFormatDateException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.of(2020, 12, 12, 23, 59);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(localDateTime, dateFormatter.formatDateTime(\"2020-12-12\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Check valid date with time(2020-12-12 1600)\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void writeValidDateAndTimeTest() throws InvalidFormatDateException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.of(2020, 12, 12, 16, 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(localDateTime, dateFormatter.formatDateTime(\"2020-12-12 1600\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 51
    }
  },
  {
    "path": "src/test/java/duke/util/FormatCheckerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.DateFormatter.formatDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkByeFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkDeadlineFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkDeleteFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkDoneFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkEmptyText;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkEventFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkFindFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkHelpFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkListFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.FormatChecker.checkReminderFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DEADLINE_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_EVENT_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_MULTIPLE_SPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_ONE_SPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.EmptyTextException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatByeException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDateException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDeadlineException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDeleteException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDoneException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatEventException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatFindException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatHelpException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatListException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatReminderException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class FormatCheckerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private FormatChecker formatChecker;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static String[] getInputArray(String message) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return message.trim().replaceAll(KEYWORD_MULTIPLE_SPACE, KEYWORD_ONE_SPACE).split(KEYWORD_ONE_SPACE, 2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        formatChecker \u003d new FormatChecker();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class EventFormatTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing /at for event\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkMissingAtForEventTest() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"event project 2020-12-12\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] messageArr \u003d inputArr[1].split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatEventException.class, () -\u003e checkEventFormat(messageArr));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing date for event\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkMissingDateForEventTest() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"event project /at\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            inputArr[0] \u003d inputArr[0].toLowerCase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] messageArr \u003d inputArr[1].split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatEventException.class, () -\u003e checkEventFormat(messageArr));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing description for event\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkMissingDescriptionForEventTest() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"event /at 2020-12-12\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            inputArr[0] \u003d inputArr[0].toLowerCase();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] messageArr \u003d inputArr[1].split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatEventException.class, () -\u003e checkEventFormat(messageArr));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Valid format for event\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkValidFormatForEventTest() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"event project /at 2020-12-12\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            inputArr[0] \u003d inputArr[0].toLowerCase();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] messageArr \u003d inputArr[1].split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertDoesNotThrow(() -\u003e checkEventFormat(messageArr));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class DeadlineFormatTest {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing /by for deadline\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkMissingByForDeadlineTest() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"deadline project 2020-12-11\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] messageArr \u003d inputArr[1].split(KEYWORD_DEADLINE_FORMAT, 2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDeadlineException.class, () -\u003e checkDeadlineFormat(messageArr));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing date for deadline\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkMissingDateForDeadlineTest() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"deadline project /by\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] messageArr \u003d inputArr[1].split(KEYWORD_DEADLINE_FORMAT, 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDeadlineException.class, () -\u003e checkDeadlineFormat(messageArr));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing description for deadline\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkMissingDescriptionForDeadlineTest() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"deadline /by 2020-11-11\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] messageArr \u003d inputArr[1].split(KEYWORD_DEADLINE_FORMAT, 2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDeadlineException.class, () -\u003e checkDeadlineFormat(messageArr));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Valid format for deadline\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkValidFormatForDeadlineTest() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"deadline project /by 2020-11-11\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] messageArr \u003d inputArr[1].split(KEYWORD_DEADLINE_FORMAT, 2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertDoesNotThrow(() -\u003e checkDeadlineFormat(messageArr));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class EmptyTextFormatTest {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing commands after event\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkSingleWordCommandForEventTest() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"event\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(EmptyTextException.class, () -\u003e checkEmptyText(inputArr));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing commands after deadline\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkSingleWordCommandForDeadlineTest() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"deadline\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(EmptyTextException.class, () -\u003e checkEmptyText(inputArr));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing commands after todo\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkSingleWordCommandForToDo() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"todo\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(EmptyTextException.class, () -\u003e checkEmptyText(inputArr));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class ByeFormatTest {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Extra commands after bye (check for extra words)\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkExtraWordsAfterByeTest() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"bye me\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatByeException.class, () -\u003e checkByeFormat(inputArr));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Extra commands after bye (check for extra numbers)\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkExtraNumbersAfterByeTest() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"bye 2\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatByeException.class, () -\u003e checkByeFormat(inputArr));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Valid format for bye\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkByeFormatTest() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"bye\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertDoesNotThrow(() -\u003e checkByeFormat(inputArr));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class DeleteFormatTest {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing index for delete\")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkMissingIndexAfterDeleteTest() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"delete\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDeleteException.class, () -\u003e checkDeleteFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"0 index being used for delete\")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkZeroIndexAfterDeleteTest() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"delete 0\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDeleteException.class, () -\u003e checkDeleteFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Negative index being used for delete\")"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkNegativeIndexAfterDeleteTest() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"delete -1\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDeleteException.class, () -\u003e checkDeleteFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Valid format for delete\")"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkValidDeleteFormat() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] inputArr \u003d getInputArray(\"delete 1\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] dateTime \u003d \"event project /at 2020-11-11\".split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new Event(dateTime[0], formatDateTime(dateTime[1])));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                assertDoesNotThrow(() -\u003e checkDeleteFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class DoneFormatTest {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing index for done\")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkMissingIndexAfterDoneTest() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"done\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDoneException.class, () -\u003e checkDoneFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"0 index being used for done\")"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkZeroIndexAfterDoneTest() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"done 0\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDoneException.class, () -\u003e checkDoneFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Negative index being used for done\")"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkNegativeIndexAfterDoneTest() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"done -1\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDoneException.class, () -\u003e checkDoneFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Valid format for done\")"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkValidDoneFormat() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] inputArr \u003d getInputArray(\"done 1\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] dateTime \u003d \"event project /at 2020-11-11\".split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new Event(dateTime[0], formatDateTime(dateTime[1])));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                assertDoesNotThrow(() -\u003e checkDoneFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class FindFormatTest {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing Keyword for find\")"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkMissingKeywordForFind() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"find\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatFindException.class, () -\u003e checkFindFormat(inputArr));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Too many keywords for find\")"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkMultipleKeywordsForFind() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"find me too\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatFindException.class, () -\u003e checkFindFormat(inputArr));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Valid format for find\")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkValidFindFormatTest() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"find duke\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertDoesNotThrow(() -\u003e checkFindFormat(inputArr));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class HelpFormatTest {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Extra numbers after help\")"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkExtraNumberAfterHelpTest() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"help 2\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatHelpException.class, () -\u003e checkHelpFormat(inputArr));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Extra words after help\")"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkExtraWordsAfterHelpTest() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"help me\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatHelpException.class, () -\u003e checkHelpFormat(inputArr));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Valid format for help\")"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkValidHelpFormatTest() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"help\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertDoesNotThrow(() -\u003e checkHelpFormat(inputArr));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class ListFormatTest {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Extra words after list\")"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkExtraWordsAfterListTest() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"list me\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatListException.class, () -\u003e checkListFormat(inputArr));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Extra numbers after list\")"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkExtraNumberAfterListTest() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"list 2\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatListException.class, () -\u003e checkListFormat(inputArr));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Valid format for list\")"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkValidListFormatTest() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr \u003d getInputArray(\"list\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertDoesNotThrow(() -\u003e checkListFormat(inputArr));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class RemindFormatTest {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing index and command for remind\")"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkMissingIndexAndCommandForRemindTest() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] inputArr \u003d getInputArray(\"remind\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] dateTime \u003d \"event project /at 2020-11-11\".split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new Event(dateTime[0], formatDateTime(dateTime[1])));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                assertThrows(InvalidFormatReminderException.class, () -\u003e checkReminderFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Negative index being used for remind\")"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkNegativeIndexForRemindTest() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] inputArr \u003d getInputArray(\"remind -1 y\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] dateTime \u003d \"event project /at 2020-11-11\".split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new Event(dateTime[0], formatDateTime(dateTime[1])));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                assertThrows(InvalidFormatReminderException.class, () -\u003e checkReminderFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"0 index being used for remind\")"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkZeroIndexForRemindTest() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] inputArr \u003d getInputArray(\"remind 0 y\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] dateTime \u003d \"event project /at 2020-11-11\".split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new Event(dateTime[0], formatDateTime(dateTime[1])));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                assertThrows(InvalidFormatReminderException.class, () -\u003e checkReminderFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing Index for remind\")"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkMissingIndexForRemindTest() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] inputArr \u003d getInputArray(\"remind y\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] dateTime \u003d \"event project /at 2020-11-11\".split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new Event(dateTime[0], formatDateTime(dateTime[1])));"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                assertThrows(InvalidFormatReminderException.class, () -\u003e checkReminderFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Missing command for remind\")"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkMissingCommandForRemindTest() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] inputArr \u003d getInputArray(\"remind 1\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] dateTime \u003d \"event project /at 2020-11-11\".split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new Event(dateTime[0], formatDateTime(dateTime[1])));"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                assertThrows(InvalidFormatReminderException.class, () -\u003e checkReminderFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Invalid command for remind\")"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkInvalidCommandForRemindTest() {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] inputArr \u003d getInputArray(\"remind 1 b\");"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] dateTime \u003d \"event project /at 2020-11-11\".split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new Event(dateTime[0], formatDateTime(dateTime[1])));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                assertThrows(InvalidFormatReminderException.class, () -\u003e checkReminderFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Invalid input at index for remind\")"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkInvalidInputAtIndexForRemindTest() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] inputArr \u003d getInputArray(\"remind b y\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] dateTime \u003d \"event project /at 2020-11-11\".split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new Event(dateTime[0], formatDateTime(dateTime[1])));"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                assertThrows(InvalidFormatReminderException.class, () -\u003e checkReminderFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Invalid input at command for remind\")"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkInvalidInputAtCommandForRemindTest() {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] inputArr \u003d getInputArray(\"remind 1 2\");"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] dateTime \u003d \"event project /at 2020-11-11\".split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new Event(dateTime[0], formatDateTime(dateTime[1])));"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                assertThrows(InvalidFormatReminderException.class, () -\u003e checkReminderFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Valid format for remind\")"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void checkValidRemindFormatTest() {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] inputArr \u003d getInputArray(\"remind 1 y\");"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String[] dateTime \u003d \"event project /at 2020-11-11\".split(KEYWORD_EVENT_FORMAT, 2);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                tasks.add(new Event(dateTime[0], formatDateTime(dateTime[1])));"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                assertDoesNotThrow(() -\u003e checkReminderFormat(tasks, inputArr));"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 469
    }
  },
  {
    "path": "src/test/java/duke/util/IntegerCheckerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class IntegerCheckerTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Check if value is not a number\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkIfNotANumberTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        IntegerChecker integerChecker \u003d new IntegerChecker();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(false, integerChecker.isNumber(\"b\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"Check if value is a number\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void checkIfNumberTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        IntegerChecker integerChecker \u003d new IntegerChecker();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(true, integerChecker.isNumber(\"2\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 23
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "blah"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "todo duke.task 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "toDo duke.task 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline duke.task 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline finish project Duke /by today 2:00am"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline finish project Alpha /by 2020-08-23 0400"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline finish project Beta/by 2020-08-23"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline finish project2 Charlie/at today 2:01am"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event duke.task 4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event project meeting Donkey/at Mon 2-4pm"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event finish project Eerie/at 2020-08-23 0400"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event finish project Faster/at 2020-08-23"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event project meeting Delta/by Wednesday 3-4pm"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "find project"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "list 2"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "bye 2"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "blah"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 32
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "REM run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "seanjyjy": 3
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "java -classpath ../bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "seanjyjy": 8
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/ui/Ui.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/OpeningBox.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/parser/Parser.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/storage/Storage.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/tasklist/TaskList.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/DialogBox.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/Main.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/task/Event.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/task/Task.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/task/Deadline.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/task/ToDo.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/ByeCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/DeleteCommand.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/ListCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/UnknownCommand.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/Command.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/AddCommand.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/FindCommand.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/DoneCommand.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/MainWindow.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/Launcher.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatListException.java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatFindException.java"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatByeException.java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/EmptyTextException.java"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatDoneException.java"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatDeleteException.java"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatDeadlineException.java"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatEventException.java"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatDateException.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/UnknownCommandException.java"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/DukeException.java"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 33
    }
  }
]
