[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "khenghun": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    mainClassName \u003d \"duke.javafx.Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    configFile \u003d file(\"${rootDir}/config/checkstyle/checkstyle.xml\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "compileJava {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    options.encoding \u003d \"UTF-8\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "run {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "khenghun": 22
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "khenghun": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "khenghun": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "khenghun": 26
    }
  },
  {
    "path": "config/travis/deploy_github_pages.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": "# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "set -o errexit # exit with nonzero exit code if any line fails"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "if [ -z \"$GITHUB_TOKEN\" ]; then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "fi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "set -o nounset # exit if variable is unset"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "cd build/docs/html5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "git init"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "git config user.name \u0027Deployment Bot (Travis)\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "git config user.email \u0027deploy@travis-ci.org\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "git config credential.helper \u0027store --file\u003d.git/credentials\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "if git ls-remote --exit-code --heads upstream gh-pages; then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    git fetch --depth\u003d1 upstream gh-pages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    git reset upstream/gh-pages"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    git checkout --orphan gh-pages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "else # error occurred"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    exit $?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "fi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "# Exit if there are no changes to gh-pages files."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    echo \u0027No changes to GitHub Pages files; exiting.\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "git add -A ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "git push --quiet upstream HEAD:gh-pages"
      }
    ],
    "authorContributionMap": {
      "khenghun": 42
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "khenghun": 11
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### Create, Read, Complete, Delete Tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "There are three types of tasks: ToDo, Deadline and Event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "You will be able to create tasks, view the current list of tasks, complete or delete specific or multiple tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### Find tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "You may search for tasks which contains any string of your choice."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### Local Data Storage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Your task list will be saved locally and loaded in whenever you open the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "The application is user-friendly and easy to use as it runs on a GUI. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### Syntax:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "`[parameter]` denotes a parameter. Parameters are required."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "`(arguments)` denotes optional arguments. The command will run "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "with or without this part of the input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### `todo [task description]` - Add a To-do type task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Adds a ToDo type task with a description to your task list. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Example usage: "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "`todo test`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e Task has been added:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e [T][✘] test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e You now have 1 tasks in the list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### `deadline [task description] /by [deadline] (time) ` - Add a Deadline type task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Adds a Deadline type task with a description and deadline to your task list. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Deadline may be a date of the form YYYY-MM-DD, and may include a time in 24 hour format of HH:MM."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Example usage: "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "`deadline project /by 2020-09-29 18:00`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e Task has been added:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e [D][✘] project (by: Sep 29 2020 6:00 PM)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e You now have 2 tasks in the list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### `event [task description] /by [event date] (time)` - Add an Event type task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Adds an Event type task with a description and event date to your task list. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Event time may be a date of the form YYYY-MM-DD, and may include a time in 24 hour format of HH:MM."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Example usage: "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "`event concert /at 2020-10-10`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e Task has been added:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e [E][✘] concert (at: Oct 10 2020)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e You now have 3 tasks in the list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### `done [task number]` - Marks a task as done."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Indicates that the corresponding task in the list is completed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Example usage: "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khenghun"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e Task completed: [D][✓] project (by: Sep 29 2020 6:00 PM)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### `delete [task number]` - Deletes a task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Removes the corresponding task number from the task list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Example usage: "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khenghun"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e Task has been removed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e [T][✘] test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e You now have 2 tasks in the list"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### `list` - Displays your current Task List."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Displays all tasks, along with their type, date and completion status."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e Here are the tasks in your list:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e 1.[D][✓] project (by: Sep 29 2020 6:00 PM)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e 2.[E][✘] concert (at: Oct 10 2020) "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### `find [key string]` - Finds tasks."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Displays all tasks which contain the key string in the task description."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Example usage: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khenghun"
        },
        "content": "`find project`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e 1.[D][✘] project (by: Sep 29 2020 6:00 PM)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e 2.[T][✓] group project"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### `clear` - Resets your current Task List."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Remove all tasks from your current task list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003e\u003e Task List has been cleared."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khenghun"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khenghun"
        },
        "content": "### `bye` - Exits duke."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khenghun"
        },
        "content": "Closes duke, and saves your task list to the hard drive. It will be automatically loaded the next time Duke is opened."
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "khenghun": 128
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * The main program of Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        new Alert(Alert.AlertType.NONE, ui.welcome(), ButtonType.OK).showAndWait();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Starts the main Duke program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Receive and process user input until user keys \"bye\"."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        System.out.println(ui.welcome());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String str \u003d sc.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        while (!str.equals(\"bye\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            ui.displayLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                System.out.println(parser.command(str.trim(), tasks));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            ui.displayLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            str \u003d sc.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        System.out.println(ui.exit());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Returns Duke\u0027s response to display in the GUI."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param input user input in the dialog box."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return Duke\u0027s reply to the user input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return ui.exit();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                return parser.command(input.trim(), tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                return e.getMessage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khenghun": 76,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Processes the user\u0027s commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Takes in a line of user input and passes it to the TaskList to handle."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param str   user\u0027s input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param tasks current list of tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @throws DukeException when user input is not a valid command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String command(String str, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assert (!str.equals(\"bye\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (str.equals(\"list\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return tasks.displayTasks();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else if (str.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return tasks.find(str);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else if (str.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return tasks.completeTask(str);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else if (str.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return tasks.deleteTask(str);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else if (str.startsWith(\"todo\") | str.startsWith(\"event\") | str.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return tasks.addTask(str);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else if (str.equals(\"clear\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            assert tasks.getTasks().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return tasks.clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khenghun": 39
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Stores the location of the saved TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Creates a new storage with the specified directory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param filepath directory to save to and load from"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Loads the previously saved tasks into an arraylist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * If there is no saved directory or file, create a new folder and arraylist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(filepath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            reader.lines().forEach(line -\u003e loadTask(line, tasks));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            System.out.println(\"Starting a new task list\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            new File(\"./data\").mkdir();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Saves the current list of tasks into the directory."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param tasks Current list of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void save(TaskList tasks) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            FileWriter writer \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            for (Task t : tasks.getTasks()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                writer.write(t.store() + \"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            System.out.println(\"error in saving\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private void loadTask(String str, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (str.startsWith(\"T\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.add(ToDo.load(str));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else if (str.startsWith(\"E\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.add(Event.load(str));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else if (str.startsWith(\"D\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.add(Deadline.load(str));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 75
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.exceptions.EmptyCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.exceptions.EmptyFindException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.exceptions.MissingTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.exceptions.TaskCompletionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.exceptions.TaskDeletionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Stores the current list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Prints all the tasks line by line to the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return All tasks in order."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String displayTasks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            result.append(\"\\n\").append(i).append(\".\").append(t.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Adds a task to the list based on user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param str User input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return A string to indicate task has been added."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @throws InvalidCommandException If command is not valid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @throws EmptyCommandException   If task is missing description."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @throws MissingTimeException    If task is missing time."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String addTask(String str) throws InvalidCommandException, EmptyCommandException, MissingTimeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (str.equals(\"todo\") || str.equals(\"deadline\") || str.equals(\"event\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new EmptyCommandException(str);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (str.contains(\" \")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            String[] arr \u003d str.split(\" \", 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            String type \u003d arr[0];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            String content \u003d arr[1];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                return addToDo(content);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                return addDeadline(content);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                return addEvent(content);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private String addToDo(String content) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ToDo td \u003d new ToDo(content);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return insert(td);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private String addDeadline(String content) throws MissingTimeException, EmptyCommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (!content.contains(\"/by\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new MissingTimeException(\"deadline\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String[] arr \u003d content.split(\"/by\", 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (arr[0].isBlank()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new EmptyCommandException(\"deadline\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (arr[1].isBlank()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new MissingTimeException(\"deadline\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return insert(new Deadline(arr[0], arr[1].trim()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private String addEvent(String content) throws MissingTimeException, EmptyCommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (!content.contains(\"/at\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new MissingTimeException(\"event\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String[] arr \u003d content.split(\"/at\", 2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (arr[0].isBlank()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new EmptyCommandException(\"event\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (arr[1].isBlank()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new MissingTimeException(\"event\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return insert(new Event(arr[0], arr[1].trim()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Finds and displays tasks containing the relevant keyword"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param str The keyword the user is searching for."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return The tasks which contain the keyword."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @throws EmptyFindException      If there is no keyword given."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @throws InvalidCommandException If command is not valid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String find(String str) throws EmptyFindException, InvalidCommandException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (str.equals(\"find\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new EmptyFindException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (str.startsWith(\"find \")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            int startIndex \u003d \"find\".length() + 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            String keyword \u003d str.substring(startIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            boolean isFound \u003d false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            //search if there are any matching tasks"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            for (Task t : tasks) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                if (t.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    isFound \u003d true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            if (isFound) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                StringBuilder result \u003d new StringBuilder(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                int i \u003d 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                for (Task t : tasks) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    if (t.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                        result.append(\"\\n\").append(i).append(\".\").append(t);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                        i++;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                return result.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                return \"No matching task has been found\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Completes the task at the position in the list which the user specifies."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * May also complete all tasks of a type or containing a keyword."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param str User input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return A string indicating completion of the task."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @throws TaskCompletionException If the number is out of range of the list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String completeTask(String str) throws TaskCompletionException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (!str.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new TaskCompletionException(tasks.size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        int startIndex \u003d \"done\".length() + 1;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String val \u003d str.substring(startIndex);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (isInteger(val)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            int i \u003d Integer.parseInt(val);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            //Check that task is in range"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            if (i \u003e 0 \u0026\u0026 i \u003c\u003d tasks.size()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                if (tasks.get(i - 1).complete()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    return \"Task is already completed.\\n\" + tasks.get(i - 1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    return \"Task completed: \" + tasks.get(i - 1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                throw new TaskCompletionException(tasks.size());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return completeMultiple(val.trim());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private String completeMultiple(String keyword) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            completeIf(task -\u003e task instanceof Deadline);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return \"All deadlines have been completed.\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            completeIf(task -\u003e task instanceof Event);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return \"All events have been completed.\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            completeIf(task -\u003e task instanceof ToDo);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return \"All todos have been completed.\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            completeIf(task -\u003e task.getDescription().contains(keyword));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return \"All tasks related to \" + keyword + \" have been completed.\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private void completeIf(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            if (predicate.test(task)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                task.complete();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Deletes the task at the position in the list which the user specifies."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * May also delete all tasks of a type or containing a keyword."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param str User input"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return A string indicating deletion of the task."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @throws TaskDeletionException If the number is out of range of the list."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String deleteTask(String str) throws TaskDeletionException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (!str.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new TaskDeletionException(tasks.size());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        int startIndex \u003d \"delete\".length() + 1;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String val \u003d str.substring(startIndex);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (!isInteger(val)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return deleteMultiple(val.trim());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            int i \u003d Integer.parseInt(val);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            if (i \u003e 0 \u0026\u0026 i \u003c\u003d tasks.size()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                int temp \u003d tasks.size();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                String res \u003d \"Task has been removed.\\n\" + tasks.get(i - 1);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                tasks.remove(i - 1);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                res +\u003d \"\\nYou now have \" + tasks.size() + \" tasks in the list\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                assert temp - tasks.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                return res;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                throw new TaskDeletionException(tasks.size());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private String deleteMultiple(String type) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.removeIf(task -\u003e task instanceof Deadline);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.removeIf(task -\u003e task instanceof Event);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.removeIf(task -\u003e task instanceof ToDo);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.removeIf(Task::isDone);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case \"pending\":"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.removeIf(task -\u003e !task.isDone());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.removeIf(task -\u003e task.getDescription().contains(type));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"All \" + type + \" tasks have been removed.\\nYou now have \" + tasks.size() + \" tasks in the list\";"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Deletes all items in the current list."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return A string indicating tasks have been cleared."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String clear() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"Task List has been cleared.\";"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private String insert(Task task) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"Task has been added:\\n\" + task + \"\\nYou now have \" + tasks.size() + \" tasks in the list\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    //helper function to check if part of user input is an integer"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private static boolean isInteger(String str) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            Integer.parseInt(str);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 290
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates the User Interface."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Handles the user interactions which are not relevant to the main program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Greets the user when Duke is opened."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return A string to greet the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String welcome() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"Hello! I\u0027m duke. What can I do for you?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Used to wrap around the output."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void displayLine() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        for (int i \u003d 0; i \u003c 75; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            System.out.print(\"\\u2500\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Greets the user upon exiting Duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return A string to greet the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String exit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 35
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates all possible exceptions which occur when Duke is runnning."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"Duke has encountered an error.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khenghun": 13
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EmptyCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates an exception where the user tries to create a task without description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class EmptyCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private String cmd;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public EmptyCommandException (String cmd) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.cmd \u003d cmd;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"Sorry, the description of a \" + cmd + \" cannot be empty.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khenghun": 17
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EmptyFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class EmptyFindException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"Please key in a keyword to find\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates the exception where the user keys in an invalid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"Your command cannot be processed. Please key in a valid command.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khenghun": 14
    }
  },
  {
    "path": "src/main/java/duke/exceptions/MissingTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates the exception where the user tries to create a timed task without the time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class MissingTimeException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private String cmd;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public MissingTimeException(String cmd) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.cmd \u003d cmd;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"Please indicate the time for the \" + cmd + \".\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khenghun": 18
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskCompletionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates the exception where a task out of range of the list is selected for completion."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class TaskCompletionException extends TaskRangeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public TaskCompletionException(int size) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        super(size);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return super.getMessage() + \" for completion.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khenghun": 17
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskDeletionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates the exception where a task out of range of the list is selected for deletion."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class TaskDeletionException extends TaskRangeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public TaskDeletionException(int size) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        super(size);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return super.getMessage() + \" for deletion.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khenghun": 17
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskRangeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates the exception where a task out of range of the list is selected."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class TaskRangeException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    protected int size;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public TaskRangeException(int size) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"Please select a task from 1 to \" + size;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 18
    }
  },
  {
    "path": "src/main/java/duke/javafx/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // Solution below adapted from github-aqcd."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // Extends the dialog box so that all output is displayed correctly"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String[] textPortions \u003d text.split(\"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        int units \u003d textPortions.length;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        for (String s : textPortions) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            units +\u003d Math.max(0, s.length() / 20 - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        dialog.setMinHeight(units * 15 + 75);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        BackgroundFill fill \u003d new BackgroundFill(Color.SILVER, CornerRadii.EMPTY, Insets.EMPTY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        db.setBackground(new Background(fill));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        BackgroundFill fill \u003d new BackgroundFill(Color.LIGHTSKYBLUE, CornerRadii.EMPTY, Insets.EMPTY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        db.setBackground(new Background(fill));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 79
    }
  },
  {
    "path": "src/main/java/duke/javafx/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khenghun": 13
    }
  },
  {
    "path": "src/main/java/duke/javafx/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            duke.start();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khenghun": 35
    }
  },
  {
    "path": "src/main/java/duke/javafx/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Controller for duke.javafx.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/rabbit.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/quokka.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private void handleUserInput() throws InterruptedException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // terminates application if user keys in \"bye\", closes 2 seconds after ok is pressed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            new Alert(Alert.AlertType.NONE, \"Bye!\", ButtonType.OK).showAndWait();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            Thread.sleep(2000);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 62
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates a Deadline with a certain due date and time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class Deadline extends TimedTask {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        super(description, by);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.connecting \u003d \" (by: \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.firstLetter \u003d \"[D]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Loads a Deadline from its stored form."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param str String representing the task in the storage file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return The corresponding Deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static Deadline load(String str) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String[] arr \u003d str.split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Deadline dl \u003d new Deadline(arr[2], arr[3]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assert (arr[0].equals(\"D\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (arr[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            dl.isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return dl;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String store() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"D|\" + super.store() + \"|\" + this.dateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates an Event which occurs at a certain time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class Event extends TimedTask {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        super(description, at);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.connecting \u003d \" (at: \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.firstLetter \u003d \"[E]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Loads an Event from its stored form."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param str String representing the task in the storage file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return The corresponding Event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static Event load(String str) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String[] arr \u003d str.split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Event ev \u003d new Event(arr[2], arr[3]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assert (arr[0].equals(\"E\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (arr[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            ev.isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return ev;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String store() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"E|\" + super.store() + \"|\" + this.dateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khenghun": 37
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates a Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * May be a ToDo, Event, or Deadline."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Creates a new task based on the description and marks it as not done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return Indicator if the task is already completed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public boolean complete() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Expresses the task as a string which is used for storage purposes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return A string representing the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String store() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return this.isDone + \"|\" + this.description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 61
    }
  },
  {
    "path": "src/main/java/duke/task/TimedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates a task with possible date and time assigned to it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public abstract class TimedTask extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    protected String dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    protected Date time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    protected String time2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    protected boolean hasDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    protected boolean hasTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    protected String firstLetter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    protected String connecting;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Creates a new Timed Task with the description and the date and time, if any."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param dateTime Date and time of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public TimedTask(String description, String dateTime) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.dateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.hasDate \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            String[] arr \u003d this.dateTime.split(\" \", 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            this.date \u003d LocalDate.parse(arr[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            this.hasDate \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            if (!this.dateTime.contains(\" \")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                this.hasTime \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                time2 \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    this.time \u003d new SimpleDateFormat(\"hh:mm\").parse(arr[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    this.hasTime \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    this.time2 \u003d \" \" + arr[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    this.hasTime \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            this.hasTime \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            this.hasDate \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Expresses the timed task as a String."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * If there is date and/or time, it is reformatted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return A string representation of the timed task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (hasDate) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            if (hasTime) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                SimpleDateFormat dfFormat \u003d new SimpleDateFormat(\"h:mm a\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                return firstLetter + super.toString() + connecting"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                        + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" \" + dfFormat.format(time) + \")\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                //has date but not time"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                return firstLetter + super.toString() + connecting"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                        + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + time2 + \")\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            //no date and no time"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return firstLetter + super.toString() + connecting + dateTime + \")\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 78
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates a ToDo event which does not have a date and time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Loads a ToDo from its stored form."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param str String representing the task in the storage file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return The corresponding ToDo."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static ToDo load(String str) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String[] arr \u003d str.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ToDo td \u003d new ToDo(arr[2]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assert (arr[0].equals(\"T\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (arr[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            td.isDone \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return td;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String store() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"T|\" + super.store();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 36
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"75.0\" fitWidth\u003d\"75.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "khenghun": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.javafx.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" style\u003d\"-fx-border-color: gold;\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: pink;\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: blue;\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "khenghun": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void testCommand() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        parser.command(\"todo 1\", taskList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(1, taskList.getTasks().size());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void command_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            parser.command(\"project\", taskList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 29
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void testAddTask() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.addTask(\"todo project\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(\"[T][\\u2718] project\", tasks.getTasks().get(0).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void testCompleteTask() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.addTask(\"todo project\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.completeTask(\"done 1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(\"\\u2713\", tasks.getTasks().get(0).getStatusIcon());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void testCompleteMultipleTasks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.addTask(\"todo 1\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.addTask(\"todo 2\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.completeTask(\"done todo\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(tasks.getTasks().get(0).getStatusIcon().equals(\"\\u2713\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                \u0026\u0026 tasks.getTasks().get(1).getStatusIcon().equals(\"\\u2713\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void completeTask_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.addTask(\"todo project\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.completeTask(\"done 2\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            assertEquals(\"Please select a task from 1 to 1 for completion.\", e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void testDeleteTask() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.addTask(\"todo project\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.deleteTask(\"delete 1\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(0, tasks.getTasks().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void testDeleteMultipleTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.addTask(\"todo 1\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.addTask(\"todo 2\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.deleteTask(\"delete todo\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(0, tasks.getTasks().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void deleteTask_exceptionThrown() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.addTask(\"todo project\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.deleteTask(\"delete 2\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            assertEquals(\"Please select a task from 1 to 1 for deletion.\", e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void findTask_exceptionThrown() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.addTask(\"todo project\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            tasks.find(\"find\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            assertEquals(\"Please key in a keyword to find\", e.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 108
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Deadline dl \u003d new Deadline(\"test\", \"2019-02-11 14:00\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(\"[D][\\u2718] test (by: Feb 11 2019 2:00 PM)\", dl.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 14
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Event ev \u003d new Event(\"test\", \"2020-03-12 18:00\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(\"[E][\\u2718] test (at: Mar 12 2020 6:00 PM)\", ev.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 14
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Task task \u003d new ToDo(\"t\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void testComplete() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        task.complete();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(task.isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String str \u003d task.store();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(\"T|false|t\", str);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 24
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private ToDo td \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(\"[T][\\u2718] test\", td.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 14
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "deadline homework /by 2020-03-19 18:30"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": "event meeting /at 2021-02-24 05:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "todo project meeting"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "deadline lunch /by noon"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "done 7"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "khenghun": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\exceptions\\*.java ..\\src\\main\\java\\duke\\task\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "khenghun": 2
    }
  }
]
