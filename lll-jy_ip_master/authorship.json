[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.6\u0027"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    String javaFxVersion \u003d \u002711.0.1\u0027"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"tasks.withType(Test){"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"    scanForTestClasses \u003d false"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"    include \"**/*Test.class\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"    toolVersion \u003d \u00278.35\u0027"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"    enableAssertions \u003d true"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":46,"lll-jy":23}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":"# Checks that all text files end with a newline."},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"ret\u003d0"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"IFS\u003d\u0027"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"\u0027"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"        ret\u003d1"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    fi"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"done"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"exit $ret"}],"authorContributionMap":{"lll-jy":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":"# Checks for prohibited line endings."},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"# Prohibited line endings: \\r\\n"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"awk \u0027"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"    BEGIN {"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"        FS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"        OFS \u003d \":\""},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"        ret \u003d 0"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"        ret \u003d 1"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    END {"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"        exit ret"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"\u0027"}],"authorContributionMap":{"lll-jy":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":"# Checks for trailing whitespace"},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"awk \u0027"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"    BEGIN {"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"        FS \u003d \":\""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"        OFS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"        ret \u003d 0"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"        # which do not properly handle trailing whitespace."},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"        # (e.g. GitHub web editor)"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"        if ($1 ~ /\\.md$/) {"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"            severity \u003d \"WARN\""},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"            severity \u003d \"ERROR\""},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"            ret \u003d 1"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"        print severity, $1, $2, \" trailing whitespace.\""},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    END {"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"        exit ret"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"\u0027"}],"authorContributionMap":{"lll-jy":26}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"        ret\u003d1"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"    fi"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"done"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"exit $ret"}],"authorContributionMap":{"lll-jy":11}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"T \u0026\u0026\u0026 0 \u0026\u0026\u0026 borrow books"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":"D \u0026\u0026\u0026 1 \u0026\u0026\u0026 cs2102 tutorial 1 \u0026\u0026\u0026 2020-09-04 \u0026\u0026\u0026 1 \u0026\u0026\u0026 2020-09-06"},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"T \u0026\u0026\u0026 1 \u0026\u0026\u0026 return books"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"D \u0026\u0026\u0026 0 \u0026\u0026\u0026 cs2101 email \u0026\u0026\u0026 2020-09-14 \u0026\u0026\u0026 0"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"E \u0026\u0026\u0026 0 \u0026\u0026\u0026 cs2103 project meeting \u0026\u0026\u0026 2020-09-30 12:00/2020-10-01 12:00"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"E \u0026\u0026\u0026 1 \u0026\u0026\u0026 cs2102 project meeting \u0026\u0026\u0026 2020-10-01 19:00 \u0026\u0026\u0026 3 \u0026\u0026\u0026 2020-10-07"}],"authorContributionMap":{"lll-jy":6}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"### Archive "},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"* Archive information of tasks locally in resource file"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"### User interaction"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"* Key in command and send to the application"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"* See application response in the app"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"* See tips when the input command is invalid"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"* Exit the app using command"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"### View"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"* View the entire list of all tasks"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"* View tasks happening on a designated time"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"* View tasks containing certain keywords"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"### Task management"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"* Create"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"* Mark as done"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"* Reschedule and recur"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"* Delete"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"### `list` - List Command"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"List out all the tasks with their index, type, status (done or not), description, and time."},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"Example of usage: "},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"`list`"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"Expected outcome:"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"Here are the tasks in your list:"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"1.[T][✘] borrow books"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"2.[D][✓] cs2102 tutorial 1 (by: Sep 4 2020 repeat every 1 days)"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"3.[T][✓] return books"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"4.[D][✘] cs2101 email (by: Sep 14 2020)"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"5.[E][✘] cs2103 project meeting (at: 2020-09-30 12:00/2020-10-01 12:00)"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"6.[E][✓] cs2102 project meeting (at: 07:00 PM   Oct 1 2020 repeat every 3 days)"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"### `bye` - Bye Command"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"Exit the app."},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"Example of usage: "},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"`bye`"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"### `todo` - Add todo Command"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"Add a todo task with given description."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"Format:"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"`todo \u003cdescription\u003e`"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"Example of usage: "},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"`todo sample task`"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"Expected outcome:"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"[T][✘] sample task"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"Now your have 7 tasks in the list."},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"### `deadline` - Add deadline Command"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"Add a deadline task with given description and date."},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"Format:"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"`deadline \u003cdescription\u003e /by \u003cyyyy-MM-dd\u003e`"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"`deadline sample deadline /by 2020-09-30`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"[D][✘] sample deadline (by: Sep 30 2020)"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":"Now your have 8 tasks in the list."},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"### `event` - Add event Command"},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"Add an event task with given description and date time."},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"Multiple tentative slots can be added to the event."},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"Format:"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"`event \u003cdescription\u003e /at \u003cyyyy-MM-dd HH:mm\u003e[/other tentative slots/...]`"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":"Example of usage 1: "},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"`event sample event /at 2020-10-01 12:00`"},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":"Expected outcome 1:"},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":"[E][✘] sample event (at: 12:00 PM   Oct 1 2020)"},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":"Now your have 9 tasks in the list."},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":117,"author":{"gitId":"lll-jy"},"content":"Example of usage 2: "},{"lineNumber":118,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":119,"author":{"gitId":"lll-jy"},"content":"`event sample event 2 /at 2020-10-01 12:00/2020-10-02 13:00`"},{"lineNumber":120,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":121,"author":{"gitId":"lll-jy"},"content":"Expected outcome 2:"},{"lineNumber":122,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":123,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":124,"author":{"gitId":"lll-jy"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":125,"author":{"gitId":"lll-jy"},"content":"[E][✘] sample event 2 (at: 2020-10-01 12:00/2020-10-02 13:00)"},{"lineNumber":126,"author":{"gitId":"lll-jy"},"content":"Now your have 10 tasks in the list."},{"lineNumber":127,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":128,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":129,"author":{"gitId":"lll-jy"},"content":"### `delete` - Delete Command"},{"lineNumber":130,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":131,"author":{"gitId":"lll-jy"},"content":"Delete the task of the given index."},{"lineNumber":132,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":133,"author":{"gitId":"lll-jy"},"content":"Format:"},{"lineNumber":134,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":135,"author":{"gitId":"lll-jy"},"content":"`delete \u003cindex\u003e`"},{"lineNumber":136,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":137,"author":{"gitId":"lll-jy"},"content":"Example of usage: "},{"lineNumber":138,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":139,"author":{"gitId":"lll-jy"},"content":"`delete 7`"},{"lineNumber":140,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":141,"author":{"gitId":"lll-jy"},"content":"Expected outcome:"},{"lineNumber":142,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":143,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":144,"author":{"gitId":"lll-jy"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":145,"author":{"gitId":"lll-jy"},"content":"[T][✘] sample task"},{"lineNumber":146,"author":{"gitId":"lll-jy"},"content":"Now your have 9 tasks."},{"lineNumber":147,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":148,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":149,"author":{"gitId":"lll-jy"},"content":"### `done` - Done Command"},{"lineNumber":150,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":151,"author":{"gitId":"lll-jy"},"content":"Mark the task of the given index as done."},{"lineNumber":152,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":153,"author":{"gitId":"lll-jy"},"content":"Format:"},{"lineNumber":154,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":155,"author":{"gitId":"lll-jy"},"content":"`done \u003cindex\u003e`"},{"lineNumber":156,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":157,"author":{"gitId":"lll-jy"},"content":"Example of usage: "},{"lineNumber":158,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":159,"author":{"gitId":"lll-jy"},"content":"`done 7`"},{"lineNumber":160,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":161,"author":{"gitId":"lll-jy"},"content":"Expected outcome:"},{"lineNumber":162,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":163,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":164,"author":{"gitId":"lll-jy"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":165,"author":{"gitId":"lll-jy"},"content":"[D][✓] sample deadline (by Sep 30 2020)"},{"lineNumber":166,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":167,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":168,"author":{"gitId":"lll-jy"},"content":"### `happen on/before/after` - Happen Date Filter Command"},{"lineNumber":169,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":170,"author":{"gitId":"lll-jy"},"content":"Filter tasks according to the happening time (todo tasks are always excluded)."},{"lineNumber":171,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":172,"author":{"gitId":"lll-jy"},"content":"Format:"},{"lineNumber":173,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":174,"author":{"gitId":"lll-jy"},"content":"`happen \u003con/before/after\u003e \u003ctoday or yyyy-MM-dd\u003e`"},{"lineNumber":175,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":176,"author":{"gitId":"lll-jy"},"content":"Example of usage 1: "},{"lineNumber":177,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":178,"author":{"gitId":"lll-jy"},"content":"`happen on 2020-09-30`"},{"lineNumber":179,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":180,"author":{"gitId":"lll-jy"},"content":"Expected outcome 1:"},{"lineNumber":181,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":182,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":183,"author":{"gitId":"lll-jy"},"content":"Here are the tasks happening on Sep 30 2020 in your list:"},{"lineNumber":184,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":185,"author":{"gitId":"lll-jy"},"content":"2.[D][✓] cs2102 tutorial 1 (by: Sep 4 2020 repeat every 1 days)"},{"lineNumber":186,"author":{"gitId":"lll-jy"},"content":"7.[D][✓] sample deadline (by Sep 30 2020)"},{"lineNumber":187,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":188,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":189,"author":{"gitId":"lll-jy"},"content":"Example of usage 2:"},{"lineNumber":190,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":191,"author":{"gitId":"lll-jy"},"content":"`happen before today`"},{"lineNumber":192,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":193,"author":{"gitId":"lll-jy"},"content":"Expected outcome 2:"},{"lineNumber":194,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":195,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":196,"author":{"gitId":"lll-jy"},"content":"Here are the tasks happening before today in your list:"},{"lineNumber":197,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":198,"author":{"gitId":"lll-jy"},"content":"2.[D][✓] cs2102 tutorial 1 (by: Sep 4 2020 repeat every 1 days)"},{"lineNumber":199,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":200,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":201,"author":{"gitId":"lll-jy"},"content":"### `happen in` - Happen In Filter Command"},{"lineNumber":202,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":203,"author":{"gitId":"lll-jy"},"content":"Filter tasks that are happening within n days."},{"lineNumber":204,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":205,"author":{"gitId":"lll-jy"},"content":"Format:"},{"lineNumber":206,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":207,"author":{"gitId":"lll-jy"},"content":"`happen in \u003cn\u003e days`"},{"lineNumber":208,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":209,"author":{"gitId":"lll-jy"},"content":"Example of usage: "},{"lineNumber":210,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":211,"author":{"gitId":"lll-jy"},"content":"`happen in 5 days`"},{"lineNumber":212,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":213,"author":{"gitId":"lll-jy"},"content":"Expected outcome:"},{"lineNumber":214,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":215,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":216,"author":{"gitId":"lll-jy"},"content":"Here are the tasks happening in 5 days in your list:"},{"lineNumber":217,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":218,"author":{"gitId":"lll-jy"},"content":"2.[D][✓] cs2102 tutorial 1 (by: Sep 4 2020 repeat every 1 days)"},{"lineNumber":219,"author":{"gitId":"lll-jy"},"content":"4.[D][✘] cs2101 email (by: Sep 14 2020)"},{"lineNumber":220,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":221,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":222,"author":{"gitId":"lll-jy"},"content":"### `happen between` - Happen Between Filter Command"},{"lineNumber":223,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":224,"author":{"gitId":"lll-jy"},"content":"Filter tasks that are happening between two dates."},{"lineNumber":225,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":226,"author":{"gitId":"lll-jy"},"content":"Format:"},{"lineNumber":227,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":228,"author":{"gitId":"lll-jy"},"content":"`happen between \u003cstart date yyyy-MM-dd\u003e \u003cend date yyyy-MM-dd\u003e`"},{"lineNumber":229,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":230,"author":{"gitId":"lll-jy"},"content":"Example of usage: "},{"lineNumber":231,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":232,"author":{"gitId":"lll-jy"},"content":"`happen between 2020-09-02 2020-09-18`"},{"lineNumber":233,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":234,"author":{"gitId":"lll-jy"},"content":"Expected outcome:"},{"lineNumber":235,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":236,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":237,"author":{"gitId":"lll-jy"},"content":"Here are the tasks happening between Sep 2 2020 and Sep 18 2020  in your list:"},{"lineNumber":238,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":239,"author":{"gitId":"lll-jy"},"content":"2.[D][✓] cs2102 tutorial 1 (by: Sep 4 2020 repeat every 1 days)"},{"lineNumber":240,"author":{"gitId":"lll-jy"},"content":"4.[D][✘] cs2101 email (by: Sep 14 2020)"},{"lineNumber":241,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":242,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":243,"author":{"gitId":"lll-jy"},"content":"### `find` - Find Filter Command"},{"lineNumber":244,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":245,"author":{"gitId":"lll-jy"},"content":"Filter tasks that contains the given substring."},{"lineNumber":246,"author":{"gitId":"lll-jy"},"content":"The end date should not occur before the start date."},{"lineNumber":247,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":248,"author":{"gitId":"lll-jy"},"content":"Format:"},{"lineNumber":249,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":250,"author":{"gitId":"lll-jy"},"content":"`find \u003csubstring\u003e`"},{"lineNumber":251,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":252,"author":{"gitId":"lll-jy"},"content":"Example of usage: "},{"lineNumber":253,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":254,"author":{"gitId":"lll-jy"},"content":"`find cs`"},{"lineNumber":255,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":256,"author":{"gitId":"lll-jy"},"content":"Expected outcome:"},{"lineNumber":257,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":258,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":259,"author":{"gitId":"lll-jy"},"content":"Here are the tasks containing \u0027cs\u0027 in your list:"},{"lineNumber":260,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":261,"author":{"gitId":"lll-jy"},"content":"2.[D][✓] cs2102 tutorial 1 (by: Sep 4 2020 repeat every 1 days)"},{"lineNumber":262,"author":{"gitId":"lll-jy"},"content":"4.[D][✘] cs2101 email (by: Sep 14 2020)"},{"lineNumber":263,"author":{"gitId":"lll-jy"},"content":"5.[E][✘] cs2103 project meeting (at: 2020-09-30 12:00/2020-10-01 12:00)"},{"lineNumber":264,"author":{"gitId":"lll-jy"},"content":"6.[E][✓] cs2102 project meeting (at: 07:00 PM   Oct 1 2020 repeat every 3 days)"},{"lineNumber":265,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":266,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":267,"author":{"gitId":"lll-jy"},"content":"### `fix` - Fix Slot Command"},{"lineNumber":268,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":269,"author":{"gitId":"lll-jy"},"content":"Fix a slot for events that have tentative slots. "},{"lineNumber":270,"author":{"gitId":"lll-jy"},"content":"The date time to fix should be one of the tentative slots."},{"lineNumber":271,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":272,"author":{"gitId":"lll-jy"},"content":"Format:"},{"lineNumber":273,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":274,"author":{"gitId":"lll-jy"},"content":"`fix \u003ctask index\u003e \u003cthe date time to fix\u003e`"},{"lineNumber":275,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":276,"author":{"gitId":"lll-jy"},"content":"Example of usage: "},{"lineNumber":277,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":278,"author":{"gitId":"lll-jy"},"content":"`fix 9 2020-10-02 13:00`"},{"lineNumber":279,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":280,"author":{"gitId":"lll-jy"},"content":"Expected outcome:"},{"lineNumber":281,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":282,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":283,"author":{"gitId":"lll-jy"},"content":"Nice! I\u0027ve fixed the slot for the event:"},{"lineNumber":284,"author":{"gitId":"lll-jy"},"content":"[E][✘] sample event 2 (at: 01:00 PM   Oct 2 2020)"},{"lineNumber":285,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":286,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":287,"author":{"gitId":"lll-jy"},"content":"### `snooze` - Snooze Command"},{"lineNumber":288,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":289,"author":{"gitId":"lll-jy"},"content":"Snooze a task to a later time."},{"lineNumber":290,"author":{"gitId":"lll-jy"},"content":"The time should be later than the original, and unfixed events are not allowed to snooze."},{"lineNumber":291,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":292,"author":{"gitId":"lll-jy"},"content":"Format:"},{"lineNumber":293,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":294,"author":{"gitId":"lll-jy"},"content":"`snooze \u003ctask index\u003e to \u003cthe new date time or date\u003e`"},{"lineNumber":295,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":296,"author":{"gitId":"lll-jy"},"content":"Example of usage: "},{"lineNumber":297,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":298,"author":{"gitId":"lll-jy"},"content":"`snooze 7 to 2020-10-03`"},{"lineNumber":299,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":300,"author":{"gitId":"lll-jy"},"content":"Expected outcome:"},{"lineNumber":301,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":302,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":303,"author":{"gitId":"lll-jy"},"content":"Noted. I\u0027ve postponed this task:"},{"lineNumber":304,"author":{"gitId":"lll-jy"},"content":"7.[D][✓] sample deadline (by Oct 3 2020)"},{"lineNumber":305,"author":{"gitId":"lll-jy"},"content":"from 2020-09-30 to 2020-10-03"},{"lineNumber":306,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":307,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":308,"author":{"gitId":"lll-jy"},"content":"### `repeat` - Repeat Command"},{"lineNumber":309,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":310,"author":{"gitId":"lll-jy"},"content":"Repeat a task regularly."},{"lineNumber":311,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":312,"author":{"gitId":"lll-jy"},"content":"Format:"},{"lineNumber":313,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":314,"author":{"gitId":"lll-jy"},"content":"`repeat \u003ctask index\u003e \u003cdaily/weekly/every n days\u003e`"},{"lineNumber":315,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":316,"author":{"gitId":"lll-jy"},"content":"Example of usage 1: "},{"lineNumber":317,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":318,"author":{"gitId":"lll-jy"},"content":"`repeat 7 weekly`"},{"lineNumber":319,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":320,"author":{"gitId":"lll-jy"},"content":"Expected outcome 1:"},{"lineNumber":321,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":322,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":323,"author":{"gitId":"lll-jy"},"content":"Noted. I\u0027ve set this task to repeat every 7 days:"},{"lineNumber":324,"author":{"gitId":"lll-jy"},"content":"7.[D][✓] sample deadline (by Oct 3 2020 repeat every 7 days)"},{"lineNumber":325,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":326,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":327,"author":{"gitId":"lll-jy"},"content":"Example of usage 2: "},{"lineNumber":328,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":329,"author":{"gitId":"lll-jy"},"content":"`repeat 7 every 3 days`"},{"lineNumber":330,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":331,"author":{"gitId":"lll-jy"},"content":"Expected outcome 2:"},{"lineNumber":332,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":333,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":334,"author":{"gitId":"lll-jy"},"content":"Noted. I\u0027ve set this task to repeat every 3 days:"},{"lineNumber":335,"author":{"gitId":"lll-jy"},"content":"7.[D][✓] sample deadline (by Oct 3 2020 repeat every 3 days)"},{"lineNumber":336,"author":{"gitId":"lll-jy"},"content":"```"},{"lineNumber":337,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":338,"author":{"gitId":"lll-jy"},"content":"## Trouble shooting"},{"lineNumber":339,"author":{"gitId":"lll-jy"},"content":"If you are sure that you have some tasks in your list but they don\u0027t show up,"},{"lineNumber":340,"author":{"gitId":"lll-jy"},"content":"please check the resource file located at src/main/resources/tasks.txt to see if the input format of tasks are correct."}],"authorContributionMap":{"-":14,"lll-jy":326}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":":init"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"@rem Slurp the command line arguments."},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"@rem Setup the command line"},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"@rem Execute Gradle"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":":end"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":":fail"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"exit /b 1"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":":mainEnd"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":":omega"}],"authorContributionMap":{"lll-jy":103}},{"path":"src/main/java/App.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"// Solution below are adapted from https://se-education.org/guides/tutorials/javaFx.html"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":"import duke.Duke;"},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.command.InvalidCommandException;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.control.Button;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"import javafx.stage.Stage;"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"public class App extends Application {"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"    private VBox dialogContainer;"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"    private Scene scene;"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    private Duke runningDuke \u003d new Duke(this.getClass().getResource(\"tasks.txt\").getPath(), false);"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    public void start(Stage stage) {"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"        AnchorPane mainLayout \u003d createContainer(stage);"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"        formatWindow(stage, mainLayout);"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"            handleUserInput();"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"        });"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"            handleUserInput();"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        });"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"    private void formatWindow(Stage stage, AnchorPane mainLayout) {"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"        stage.setTitle(\"Duke\");"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"        stage.setResizable(false);"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"        stage.setMinHeight(600.0);"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"        stage.setMinWidth(400.0);"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"        mainLayout.setPrefSize(400.0, 600.0);"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"        scrollPane.setPrefSize(385, 535);"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"        userInput.setPrefWidth(325.0);"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"        sendButton.setPrefWidth(55.0);"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"    private AnchorPane createContainer(Stage stage) {"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"        scrollPane \u003d new ScrollPane();"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"        dialogContainer \u003d new VBox();"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"        scrollPane.setContent(dialogContainer);"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"        userInput \u003d new TextField();"},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"        sendButton \u003d new Button(\"Send\");"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"        scene \u003d new Scene(mainLayout);"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"        stage.setScene(scene);"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"        stage.show();"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":"                DialogBox.getDukeDialog(new Label(runningDuke.getUi().greeting()), new ImageView(duke))"},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"        );"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":"        return mainLayout;"},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":"    private void handleUserInput() {"},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"        Label userText \u003d new Label(userInput.getText());"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":"        Label dukeText \u003d getResponse(userInput.getText());"},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":"                DialogBox.getUserDialog(userText, new ImageView(user)),"},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":"        );"},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":"        userInput.clear();"},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":"     * Replace this stub with your completed method."},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"     * @param input the user input to deal with"},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":"     * @return the label of the response to the input"},{"lineNumber":117,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"lll-jy"},"content":"    public Label getResponse(String input) {"},{"lineNumber":119,"author":{"gitId":"lll-jy"},"content":"        Command c \u003d Parser.parse(input);"},{"lineNumber":120,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"lll-jy"},"content":"            String executionOutput \u003d c.execute(runningDuke.getUi(), runningDuke.getList(), runningDuke.getStorage());"},{"lineNumber":122,"author":{"gitId":"lll-jy"},"content":"            if (c.isExit()) {"},{"lineNumber":123,"author":{"gitId":"lll-jy"},"content":"                System.exit(0);"},{"lineNumber":124,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"lll-jy"},"content":"            return new Label(executionOutput);"},{"lineNumber":126,"author":{"gitId":"lll-jy"},"content":"        } catch (InvalidCommandException e) {"},{"lineNumber":127,"author":{"gitId":"lll-jy"},"content":"            return new Label(e.getMessage());"},{"lineNumber":128,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":130}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"// Solution below are adapted from https://se-education.org/guides/tutorials/javaFx.html"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.command.InvalidCommandException;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import javafx.geometry.Insets;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.Node;"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.Border;"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.BorderStroke;"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.BorderStrokeStyle;"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.BorderWidths;"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.shape.Polygon;"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.text.Font;"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":" * An example of a custom control using FXML."},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":" * containing text from the speaker."},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"public class DialogBox extends HBox {"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"    private Label dialog;"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"    private ImageView displayPicture;"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"    private Polygon triangle;"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"     * Creates a dialog box component with the given label and image."},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"     * @param l the label with the text for the dialog box"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"     * @param iv the imageview of the image of the speaker of the dialog box"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"    public DialogBox(Label l, ImageView iv, boolean isUserDialog) {"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"            fxmlLoader.load();"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"        } catch (IOException e) {"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"            e.printStackTrace();"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"        dialog.setText(l.getText());"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"        displayPicture.setImage(iv.getImage());"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"        dialog.setFont(Font.font(\"Ayuthaya\", 13));"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"        if (isUserDialog) {"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"            styleUserDialog();"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"            styleIfException();"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"        dialog \u003d l;"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"        displayPicture \u003d iv;"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"        dialog.setWrapText(true);"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"        displayPicture.setFitWidth(100.0);"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"        displayPicture.setFitHeight(100.0);"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"        this.setAlignment(Pos.TOP_RIGHT);"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"        this.setBorder(new Border(new BorderStroke(Color.TRANSPARENT,"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"                BorderStrokeStyle.SOLID, CornerRadii.EMPTY, BorderWidths.DEFAULT)));"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"        this.setPadding(new Insets(10, 10, 10, 10));"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"        setProperHeight(l);"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"    private void styleUserDialog() {"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"        dialog.setStyle(\"-fx-background-color: #001935; -fx-text-fill: #e6fbff; -fx-label-padding:5;\""},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"                + \" -fx-border-radius: 5; -fx-background-radius: 5;\");"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"        triangle.getPoints().setAll("},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"                10.0, 44.0,"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"                10.0, 53.0,"},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"                20.0, 49.0"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"        );"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"        triangle.setTranslateY(10);"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"        triangle.setLayoutY(30);"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"    private void styleIfException() {"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"        if (dialog.getText().startsWith(InvalidCommandException.INVALID_COMMAND_EXCEPTION_PREFIX)) {"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"            dialog.setTextFill(Color.rgb(140, 10, 10));"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"    private void setProperHeight(Label l) {"},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":"        int count \u003d l.getText().endsWith(\"\\n\") ? 1 : 0;"},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"        String[] ss \u003d l.getText().split(\"\\n\");"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"        count +\u003d ss.length + 1;"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"        for (String s : ss) {"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"            count +\u003d s.length() / 32;"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"        this.setMinHeight(count * 15 + 30);"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":"    private void flip() {"},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":"        Collections.reverse(tmp);"},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":"        setBackground(new Background(new BackgroundFill(Color.ALICEBLUE, CornerRadii.EMPTY, Insets.EMPTY)));"},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"        if (dialog.getText().startsWith(InvalidCommandException.INVALID_COMMAND_EXCEPTION_PREFIX)) {"},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":"            setBackground(new Background(new BackgroundFill(Color.rgb(246, 217, 217, 0.3),"},{"lineNumber":117,"author":{"gitId":"lll-jy"},"content":"                    CornerRadii.EMPTY, Insets.EMPTY)));"},{"lineNumber":118,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":121,"author":{"gitId":"lll-jy"},"content":"    public static DialogBox getUserDialog(Label l, ImageView iv) {"},{"lineNumber":122,"author":{"gitId":"lll-jy"},"content":"        DialogBox res \u003d new DialogBox(l, iv, true);"},{"lineNumber":123,"author":{"gitId":"lll-jy"},"content":"        res.dialog.setBackground(new Background(new BackgroundFill(Color.rgb(246, 217, 217),"},{"lineNumber":124,"author":{"gitId":"lll-jy"},"content":"                CornerRadii.EMPTY, Insets.EMPTY)));"},{"lineNumber":125,"author":{"gitId":"lll-jy"},"content":"        return res;"},{"lineNumber":126,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":128,"author":{"gitId":"lll-jy"},"content":"    public static DialogBox getDukeDialog(Label l, ImageView iv) {"},{"lineNumber":129,"author":{"gitId":"lll-jy"},"content":"        var db \u003d new DialogBox(l, iv, false);"},{"lineNumber":130,"author":{"gitId":"lll-jy"},"content":"        db.flip();"},{"lineNumber":131,"author":{"gitId":"lll-jy"},"content":"        return db;"},{"lineNumber":132,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":133}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"// Solution below are adapted from https://se-education.org/guides/tutorials/javaFx.html"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":" * A GUI for App using FXML."},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"public class Main extends Application {"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    private App app \u003d new App();"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    public void start(Stage stage) {"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"            stage.setScene(scene);"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(app);"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":30}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"// Solution below are adapted from https://se-education.org/guides/tutorials/javaFx.html"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.Cursor;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    public static final String STYLE_BORDER \u003d \"-fx-border-radius: 20; -fx-background-radius: 20\";"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    public static final String TEXT_LIGHT_COLOR \u003d \"-fx-text-fill: aliceblue;\";"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"    public static final String NORMAL_BUTTON_COLOR \u003d \" -fx-background-color: darkslategrey; \";"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"    public static final String HOVER_BUTTON_COLOR \u003d \"-fx-background-color: #107c85;\";"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    private VBox dialogContainer;"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    private TextField userInput;"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"    private Button sendButton;"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"    private App app;"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"     * Initializes the GUI."},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"    public void initialize() {"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"        userInput.setStyle(STYLE_BORDER);"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"        sendButton.setStyle(TEXT_LIGHT_COLOR + NORMAL_BUTTON_COLOR"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"                + STYLE_BORDER);"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"        sendButton.setOnMouseEntered(e -\u003e {"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"            sendButton.setStyle(TEXT_LIGHT_COLOR + HOVER_BUTTON_COLOR"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"                    + STYLE_BORDER);"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"            sendButton.setCursor(Cursor.HAND);"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"        });"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"        sendButton.setOnMouseExited(e -\u003e {"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"            sendButton.setStyle(TEXT_LIGHT_COLOR + NORMAL_BUTTON_COLOR"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"                    + STYLE_BORDER);"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"            sendButton.setCursor(Cursor.DEFAULT);"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"        });"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"                DialogBox.getDukeDialog(new Label(Ui.GREETING), new ImageView(dukeImage))"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"        );"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"    public void setDuke(App d) {"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"        app \u003d d;"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"    private void handleUserInput() {"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"        Label response \u003d app.getResponse(input);"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"                DialogBox.getUserDialog(new Label(input), new ImageView(userImage)),"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"                DialogBox.getDukeDialog(response, new ImageView(dukeImage))"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"        );"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"        userInput.clear();"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":78}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.command.InvalidCommandException;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.component.ActualStorage;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.component.CliUi;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import duke.component.FxmlUi;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":" * Is the Main class of this program."},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    private final Storage storage;"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    private final TaskList list;"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    private final Ui ui;"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"     * Creates a running Duke, initialize the list with data in the input file, if input file is not found,"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"     * initialize the list with an empty list."},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"     * @param filePath The file path of the data file holding all existing tasks."},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"     * @param isCliApp true if the app is CLI app, and false if it uses javafx."},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    public Duke(String filePath, boolean isCliApp) {"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"        if (isCliApp) {"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"            ui \u003d new CliUi();"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"            ui \u003d new FxmlUi();"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"        storage \u003d new ActualStorage(filePath);"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"        list \u003d storage.getList();"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"     * Runs the Duke program."},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"    public void run() {"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        boolean flag \u003d true;"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"        ui.greeting();"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"        while (flag) {"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"            try {"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"                String input \u003d ui.readInput();"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"                Command c \u003d Parser.parse(input);"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"                c.execute(ui, list, storage);"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"                flag \u003d !c.isExit();"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"            } catch (InvalidCommandException e) {"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"                ui.output(e.getMessage());"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"        ui.close();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"     * Gets the Ui of the running Duke."},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"     * @return the ui of this object"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"    public Ui getUi() {"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"        return ui;"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"     * Gets the list of tasks in the running Duke."},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"     * @return the task list of this object"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"    public TaskList getList() {"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"        return list;"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"     * Gets the storage handling object of this running Duke."},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"     * @return the storage handling object of this object"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"    public Storage getStorage() {"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"        return storage;"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"     * The running main method of the application that uses data/tasks.txt as the file for storage.\""},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"     * @param args nothing input"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"    public static void main(String[] args) {"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"        String home \u003d System.getProperty(\"user.home\");"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"        java.nio.file.Path path \u003d java.nio.file.Paths.get(home, \"Desktop\", \"cs2103\", \"ip\", \"data\");"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"        new Duke(path.toString(), true).run();"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"lll-jy":86}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":" * Represents a command for adding tasks."},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"public class AddCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"     * Creates a command for adding tasks."},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"     * @param input the input command classified as AddCommand"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    public AddCommand(String input) {"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"        super(input);"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"     * Executes the command, prints the result on ui and writes to source data file."},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"     * @param ui the user interface object that is currently running"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"     * @param list the current list of tasks"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"     * @param storage the storage-writing object that is currently running"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"     * @return the string that is to be printed on ui if the adding is successful"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input command doesn\u0027t make sense and states why"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"    public String execute(Ui ui, TaskList list, Storage storage) throws InvalidCommandException {"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"        int count \u003d list.size();"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"        Task task \u003d Parser.parseAddTask(input);"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"        list.add(count, task);"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"        storage.addToList(task);"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"        return getOutput(ui, count, task);"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"    private String getOutput(Ui ui, int count, Task task) {"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"        String tasks \u003d Parser.getTaskPlural(count + 1);"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        String res \u003d String.format(Ui.ADD_TASK_OUTPUT_FORMAT, task.toString(), count + 1, tasks);"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"        ui.output(res);"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"        return res;"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"     * Checks whether a command equals this one."},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"     * @param obj the Object to compare"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"     * @return true if obj is a AddCommand and it has the same input as this one"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"            return true;"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"        } else if (obj instanceof AddCommand) {"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"            return input.equals(((AddCommand) obj).input);"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"            return false;"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":61}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":" * Represents a command for exiting the app."},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"public class ByeCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"     * Creates a command for exiting."},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"     * @param input the input command \"bye\""},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    public ByeCommand(String input) {"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"        super(input);"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"     * Tells whether this command is aiming for exiting."},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"     * @return true"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"    public boolean isExit() {"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"        return true;"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"    private String printEntireList(Ui ui, TaskList list) {"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"        return ui.printList(list, t -\u003e true, \"\");"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"     * Executes the command, prints the current list on ui."},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"     * @param ui the user interface object that is currently running"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"     * @param list the current list of tasks"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"     * @param storage the storage-writing object that is currently running"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"     * @return the string \"bye\""},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"    public String execute(Ui ui, TaskList list, Storage storage) {"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        assert input.equals(\"bye\") : \"Exit command is not \u0027bye\u0027\";"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"        return printEntireList(ui, list);"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"     * Checks whether a command equals this one."},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"     * @param obj the Object to compare"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"     * @return true if obj is a ByeCommand"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"        return obj instanceof ByeCommand;"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":54}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":" * Represents a command that is input by the user."},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"    protected final String input;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"     * Creates a command with the given input."},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"     * @param input the input command"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    public Command(String input) {"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"        this.input \u003d input;"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"     * Tells whether this command is aiming for exiting."},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"     * @return true if this is a ByeCommand, this is to be overridden in ByeCommand"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    public boolean isExit() {"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"        return false;"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"     * Executes the command, prints the result on ui and writes to source data file if necessary."},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"     * @param ui the user interface object that is currently running"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"     * @param list the current list of tasks"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"     * @param storage the storage-writing object that is currently running"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"     * @return the string for test cases"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input command doesn\u0027t make sense and states why"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"    public abstract String execute(Ui ui, TaskList list, Storage storage) throws InvalidCommandException;"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"            return true;"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"        } else if (obj instanceof Command) {"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"            return input.equals(((Command) obj).input);"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"            return false;"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":49}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":" * Represents a command for deleting a task."},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"     * Creates a command for deleting tasks."},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"     * @param input the input command classified as DeleteCommand, starting with \"delete \""},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    public DeleteCommand(String input) {"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"        super(input);"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"     * Executes the command, prints the result on ui and re-writes the source data file."},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"     * @param ui the user interface object that is currently running"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"     * @param list the current list of tasks"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"     * @param storage the storage-writing object that is currently running"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"     * @return the string that is to be printed on ui if the deleting is successful"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input index for deleting is invalid"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    public String execute(Ui ui, TaskList list, Storage storage) throws InvalidCommandException {"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"        assert input.startsWith(\"delete \") : \"Delete command does not start with \u0027delete \u0027\";"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"        int count \u003d list.size();"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"        int m \u003d Parser.getDeleteTaskIndex(input, count) - 1;"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"        Task toDelete \u003d getTaskToDelete(list, storage, m);"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"        return getUiOutput(ui, list, count, toDelete);"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"    private String getUiOutput(Ui ui, TaskList list, int count, Task toDelete) {"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"        String tasks \u003d Parser.getTaskPlural(count - 1);"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"        String str \u003d String.format(Ui.DELETE_TASK_OUTPUT_FORMAT, toDelete.toString(), list.size(), tasks);"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        ui.output(str);"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"        return str;"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"    private Task getTaskToDelete(TaskList list, Storage storage, int m) throws InvalidCommandException {"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"        Task toDelete \u003d list.get(m);"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"        list.remove(m);"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"        storage.reWrite(list);"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"        return toDelete;"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"     * Checks whether a command equals this one."},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"     * @param obj the Object to compare"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"     * @return true if obj is a DeleteCommand and it has the same input as this one"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"            return true;"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"        } else if (obj instanceof DeleteCommand) {"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"            return input.equals(((DeleteCommand) obj).input);"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"            return false;"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":67}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":" * Represents a command for marking a task as done."},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"public class DoneCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"     * Creates a command for marking tasks as done."},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"     * @param input the input command classified as DoneCommand, starting with \"done \""},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    public DoneCommand(String input) {"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"        super(input);"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"     * Executes the command, prints the result on ui and re-writes the source data file."},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"     * @param ui the user interface object that is currently running"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"     * @param list the current list of tasks"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"     * @param storage the storage-writing object that is currently running"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"     * @return the string that is to be printed on ui if the marking is successful"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input index for marking as done is invalid"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"    public String execute(Ui ui, TaskList list, Storage storage) throws InvalidCommandException {"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"        assert input.startsWith(\"done \") : \"Done command does not start with \u0027done \u0027\";"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"        int n \u003d Parser.getDoneTaskIndex(input, list.size()) - 1;"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"        list.get(n).markAsDone();"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"        storage.reWrite(list);"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"        String str \u003d String.format(Ui.DONE_TASK_OUTPUT_FORMAT, list.get(n));"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"        ui.output(str);"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"        return str;"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"     * Checks whether a command equals this one."},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"     * @param obj the Object to compare"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"     * @return true if obj is a DoneCommand and it has the same input as this one"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"            return true;"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"        } else if (obj instanceof DoneCommand) {"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"            return input.equals(((DoneCommand) obj).input);"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"            return false;"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":54}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":" * Represents a command for finding tasks with a designated substring."},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"     * Creates a find command."},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"     * @param input the input command"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    public FindCommand(String input) {"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"        super(input);"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"     * Executes the find command and prints the list of tasks where the given substring can be found"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"     * @param ui the user interface object that is currently running"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"     * @param list the current list of tasks"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"     * @param storage the storage-writing object that is currently running"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"     * @return the string description of the filtered table and the number of elements in the table"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"    public String execute(Ui ui, TaskList list, Storage storage) {"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"        assert input.startsWith(Parser.FIND_COMMAND_PREFIX) : \"Find command does not start with \u0027find \u0027\";"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"        String toFind \u003d input.substring(Parser.FIND_COMMAND_PREFIX.length());"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"        return ui.printList(list, t -\u003e t.finds(toFind), String.format(Ui.FIND_LIST_NOTE_FORMAT, toFind));"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the given command equals this one."},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"     * @param obj the object to compare"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"     * @return true if obj is a FindCommand and command input is the same"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"            return true;"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"        } else if (obj instanceof FindCommand) {"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"            return input.equals(((FindCommand) obj).input);"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"            return false;"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":49}},{"path":"src/main/java/duke/command/FixCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":" * Represents a command for fixing events with tentative slots to one slot."},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"public class FixCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    public static final int FIX_COMMAND_VALID_LENGTH \u003d 4;"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"     * Creates a fix command."},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"     * @param input the input command"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"    public FixCommand(String input) {"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"        super(input);"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"     * Executes the fix command."},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"     * @param ui the user interface object that is currently running"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"     * @param list the current list of tasks"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"     * @param storage the storage-writing object that is currently running"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"     * @return the string telling the user about the result of the fix command"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input task index is invalid or the slot want to fix is not in the"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"     * tentative slots"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"    public String execute(Ui ui, TaskList list, Storage storage) throws InvalidCommandException {"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"        assert input.startsWith(Parser.FIX_COMMAND_PREFIX) : \"Fix command does not start with \u0027fix \u0027\";"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"        String[] inputs \u003d input.split(Parser.SPACE_STRING);"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"        if (inputs.length !\u003d FIX_COMMAND_VALID_LENGTH) {"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.FIX_COMMAND_FORMAT_EXCEPTION);"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"            int n \u003d Parser.getTaskIndex(list, inputs[1]);"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"            Task t \u003d list.get(n);"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"            if (!(t instanceof Event)) {"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"                throw new InvalidCommandException(Parser.INVALID_TASK_TYPE_INDEX_EXCEPTION);"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"            } else {"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"                Event e \u003d (Event) t;"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"                String output \u003d e.fixSlot(inputs[2] + Parser.SPACE_STRING + inputs[3]);"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"                storage.reWrite(list);"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"                return output;"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.NONNUMERIC_TASK_INDEX_EXCEPTION);"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the given command equals this one."},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"     * @param obj the object to compare"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"     * @return true if obj is a FindCommand and command input is the same"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"            return true;"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"        } else if (obj instanceof FixCommand) {"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"            return input.equals(((FixCommand) obj).input);"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"            return false;"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":72}},{"path":"src/main/java/duke/command/HappenCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":" * Represents a command for finding tasks with the given time constraint."},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"public class HappenCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    public static final int HAPPEN_COMMAND_COMPONENTS \u003d 2;"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    public static final int LONG_HAPPEN_COMMAND_COMPONENTS \u003d 3;"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"     * Creates a command for filtering tasks on when it happens."},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"     * @param input the input command classified as HappenCommand, starting with \"happen \""},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    public HappenCommand(String input) {"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"        super(input);"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"     * Executes the command, prints the filtered result on ui."},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"     * @param ui the user interface object that is currently running"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"     * @param list the current list of tasks"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"     * @param storage the storage-writing object that is currently running"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"     * @return the string of the input time constrain with a number representing the size of the resulting task list"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input cannot be processed correctly or does not make sense"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"    public String execute(Ui ui, TaskList list, Storage storage) throws InvalidCommandException {"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"        assert input.startsWith(\"happen \") : \"Happen command does not start with \u0027happen \u0027\";"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"        String description \u003d input.substring(Parser.HAPPEN_COMMAND_PREFIX.length());"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        String[] detail \u003d description.split(Parser.SPACE_STRING);"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"        DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"            if (detail[0].equals(Parser.ON) \u0026\u0026 detail.length \u003d\u003d HAPPEN_COMMAND_COMPONENTS) {"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"                return getHappenOnList(ui, list, detail, inputFormat, outputFormat);"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"            } else if (detail[0].equals(Parser.BEFORE) \u0026\u0026 detail.length \u003d\u003d HAPPEN_COMMAND_COMPONENTS) {"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"                return getHappenBeforeList(ui, list, detail, inputFormat, outputFormat);"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"            } else if (detail[0].equals(Parser.AFTER) \u0026\u0026 detail.length \u003d\u003d HAPPEN_COMMAND_COMPONENTS) {"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"                return getHappenAfterList(ui, list, detail, inputFormat, outputFormat);"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"            } else if (detail.length \u003d\u003d LONG_HAPPEN_COMMAND_COMPONENTS"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"                    \u0026\u0026 detail[0].equals(Parser.IN) \u0026\u0026 detail[2].equals(Parser.DAYS)) {"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"                return getHappenInList(ui, list, detail[1]);"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"            } else if (detail[0].equals(Parser.BETWEEN) \u0026\u0026 detail.length \u003d\u003d LONG_HAPPEN_COMMAND_COMPONENTS) {"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"                return getHappenBetweenList(ui, list, detail, inputFormat, outputFormat);"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"            } else {"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"                throw new InvalidCommandException(Parser.UNRECOGNIZED_HAPPEN_COMMAND_EXCEPTION);"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"        } catch (InvalidCommandException e) {"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"            throw e;"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.INVALID_DATE_FORMAT_EXCEPTION);"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"    private String getHappenBetweenList(Ui ui, TaskList list, String[] detail, DateTimeFormatter inputFormat,"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"                                        DateTimeFormatter outputFormat) throws InvalidCommandException {"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"        LocalDate date1 \u003d LocalDate.parse(detail[1], inputFormat);"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"        LocalDate date2 \u003d LocalDate.parse(detail[2], inputFormat);"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"        if (!date1.isBefore(date2)) {"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.HAPPEN_BETWEEN_EMPTY_PERIOD_EXCEPTION);"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"        return ui.printList(list, t -\u003e t.isHappeningBetween(date1, date2),"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"                String.format(Ui.HAPPEN_LIST_NOTE_FORMAT, Parser.BETWEEN, date1.format(outputFormat)"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"                        + \" and \" + date2.format(outputFormat) + Parser.SPACE_STRING));"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"    private String getHappenInList(Ui ui, TaskList list, String s) throws InvalidCommandException {"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"            int n \u003d Integer.parseInt(s);"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"            if (n \u003c\u003d 0) {"},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"                throw new InvalidCommandException(Parser.NEGATIVE_DAYS_EXCEPTION);"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"            return ui.printList(list, t -\u003e t.willHappenInDays(n), String.format(Ui.HAPPEN_LIST_NOTE_FORMAT,"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"                    Parser.IN, n + Parser.SPACE_STRING + Parser.DAYS));"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.NONNUMERIC_NUMBER_OF_DAYS_EXCEPTION);"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"    private String getHappenAfterList(Ui ui, TaskList list, String[] detail,"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"                                      DateTimeFormatter inputFormat, DateTimeFormatter outputFormat) {"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":"        if (detail[1].equals(Parser.TODAY)) {"},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"            return ui.printList(list, Task::isHappeningAfterToday,"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":"                    String.format(Ui.HAPPEN_LIST_NOTE_FORMAT, Parser.AFTER, Parser.TODAY));"},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":"            LocalDate date \u003d LocalDate.parse(detail[1], inputFormat);"},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"            return ui.printList(list, t -\u003e t.isHappeningAfter(date),"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"                    String.format(Ui.HAPPEN_LIST_NOTE_FORMAT, Parser.AFTER, date.format(outputFormat)));"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"    private String getHappenBeforeList(Ui ui, TaskList list, String[] detail,"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":"                                       DateTimeFormatter inputFormat, DateTimeFormatter outputFormat) {"},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":"        if (detail[1].equals(Parser.TODAY)) {"},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":"            return ui.printList(list, Task::hasHappenedBeforeToday,"},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"                    String.format(Ui.HAPPEN_LIST_NOTE_FORMAT, Parser.BEFORE, Parser.TODAY));"},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":"            LocalDate date \u003d LocalDate.parse(detail[1], inputFormat);"},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":"            return ui.printList(list, t -\u003e t.hasHappenedBefore(date),"},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":"                    String.format(Ui.HAPPEN_LIST_NOTE_FORMAT, Parser.BEFORE, date.format(outputFormat)));"},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"    private String getHappenOnList(Ui ui, TaskList list, String[] detail,"},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":"                                   DateTimeFormatter inputFormat, DateTimeFormatter outputFormat) {"},{"lineNumber":117,"author":{"gitId":"lll-jy"},"content":"        if (detail[1].equals(Parser.TODAY)) {"},{"lineNumber":118,"author":{"gitId":"lll-jy"},"content":"            return ui.printList(list, Task::isHappeningToday,"},{"lineNumber":119,"author":{"gitId":"lll-jy"},"content":"                    String.format(Ui.HAPPEN_LIST_NOTE_FORMAT, Parser.ON, Parser.TODAY));"},{"lineNumber":120,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":121,"author":{"gitId":"lll-jy"},"content":"            LocalDate date \u003d LocalDate.parse(detail[1], inputFormat);"},{"lineNumber":122,"author":{"gitId":"lll-jy"},"content":"            return ui.printList(list, t -\u003e t.isHappeningOn(date),"},{"lineNumber":123,"author":{"gitId":"lll-jy"},"content":"                    String.format(Ui.HAPPEN_LIST_NOTE_FORMAT, Parser.ON, date.format(outputFormat)));"},{"lineNumber":124,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":127,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"lll-jy"},"content":"     * Checks whether a command equals this one."},{"lineNumber":129,"author":{"gitId":"lll-jy"},"content":"     * @param obj the Object to compare"},{"lineNumber":130,"author":{"gitId":"lll-jy"},"content":"     * @return true if obj is a HappenCommand and it has the same input as this one"},{"lineNumber":131,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":134,"author":{"gitId":"lll-jy"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitId":"lll-jy"},"content":"            return true;"},{"lineNumber":136,"author":{"gitId":"lll-jy"},"content":"        } else if (obj instanceof HappenCommand) {"},{"lineNumber":137,"author":{"gitId":"lll-jy"},"content":"            return input.equals(((HappenCommand) obj).input);"},{"lineNumber":138,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":139,"author":{"gitId":"lll-jy"},"content":"            return false;"},{"lineNumber":140,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":142}},{"path":"src/main/java/duke/command/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":" * Throws when the user input of command cannot be parsed correctly."},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"public class InvalidCommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"    public static final String INVALID_COMMAND_EXCEPTION_PREFIX \u003d \"\\u2639 OOPS!!! \";"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"    public InvalidCommandException(String msg) {"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"        super(INVALID_COMMAND_EXCEPTION_PREFIX + msg);"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":13}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":" * Represents a command for listing all existing tasks."},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"     * Creates a command for getting the current entire list."},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"     * @param input the input command \"list\""},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    public ListCommand(String input) {"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"        super(input);"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"     * Executes the command, prints the current list on ui."},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"     * @param ui the user interface object that is currently running"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"     * @param list the current list of tasks"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"     * @param storage the storage-writing object that is currently running"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"     * @return the string \"list\""},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    public String execute(Ui ui, TaskList list, Storage storage) {"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"        assert input.equals(\"list\") : \"List command is not \u0027list\u0027\";"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"        return ui.printList(list, t -\u003e true, \"\");"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"     * Checks whether a command equals this one."},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"     * @param obj the Object to compare"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"     * @return true if obj is a ListCommand"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"        return obj instanceof ListCommand;"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":41}},{"path":"src/main/java/duke/command/RepeatCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import duke.task.TimedTask;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":" * Represents a command for recurring tasks."},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"public class RepeatCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    public static final int REPEAT_COMMAND_CUSTOMIZED_LENGTH \u003d 5;"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    public static final int REPEAT_COMMAND_SHORTCUT_LENGTH \u003d 3;"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"     * Creates a repeat command."},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"     * @param input the input command"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    public RepeatCommand(String input) {"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"        super(input);"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"     * Executes the snooze command."},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"     * @param ui the user interface object that is currently running"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"     * @param list the current list of tasks"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"     * @param storage the storage-writing object that is currently running"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"     * @return the string telling the user about the result of the snoozing command"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input task index is invalid or the time input is invalid"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"    public String execute(Ui ui, TaskList list, Storage storage) throws InvalidCommandException {"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"        assert input.startsWith(Parser.REPEAT_COMMAND_PREFIX) : \"Repeat command does not start with \u0027repeat \u0027\";"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"        String[] inputs \u003d input.split(Parser.SPACE_STRING);"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"        if (inputs.length \u003e REPEAT_COMMAND_CUSTOMIZED_LENGTH || inputs.length \u003c REPEAT_COMMAND_SHORTCUT_LENGTH) {"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.REPEAT_COMMAND_FORMAT_EXCEPTION);"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"            int n \u003d Parser.getTaskIndex(list, inputs[1]);"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"            Task t \u003d list.get(n);"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"            if (!(t instanceof TimedTask)) {"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"                throw new InvalidCommandException(Parser.INVALID_TASK_TYPE_INDEX_EXCEPTION);"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"            } else {"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"                TimedTask tt \u003d (TimedTask) t;"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"                int days \u003d getNumberOfDays(inputs);"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"                String output \u003d tt.repeat(days);"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"                storage.reWrite(list);"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"                return output;"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.NONNUMERIC_TASK_INDEX_EXCEPTION);"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"    private int getNumberOfDays(String[] input) throws InvalidCommandException {"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"        if (input.length \u003d\u003d RepeatCommand.REPEAT_COMMAND_SHORTCUT_LENGTH) {"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"            return handleShortCutRepeat(input[2]);"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"        } else if (input.length \u003d\u003d REPEAT_COMMAND_CUSTOMIZED_LENGTH"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"                \u0026\u0026 input[2].equals(Parser.EVERY) \u0026\u0026 input[4].equals(Parser.DAYS)) {"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"            return handleCustomizedRepeat(input[3]);"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.REPEAT_COMMAND_FORMAT_EXCEPTION);"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"    private int handleCustomizedRepeat(String s) throws InvalidCommandException {"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"            int n \u003d Integer.parseInt(s);"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"            if (n \u003c 0) {"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"                throw new InvalidCommandException(Parser.NEGATIVE_DAYS_EXCEPTION);"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"            return n;"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.NONNUMERIC_NUMBER_OF_DAYS_EXCEPTION);"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"    private int handleShortCutRepeat(String s) throws InvalidCommandException {"},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"        if (s.equals(Parser.DAILY)) {"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"            return 1;"},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"        } else if (s.equals(Parser.WEEKLY)) {"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"            return 7;"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.REPEAT_COMMAND_FORMAT_EXCEPTION);"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the given command equals this one."},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":"     * @param obj the object to compare"},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"     * @return true if obj is a FindCommand and command input is the same"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"            return true;"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"        } else if (obj instanceof RepeatCommand) {"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"            return input.equals(((RepeatCommand) obj).input);"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"            return false;"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":106}},{"path":"src/main/java/duke/command/SnoozeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import duke.task.TimedTask;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":" * Represents a command for reschedule timed tasks."},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"public class SnoozeCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    public static final int SNOOZE_EVENT_COMMAND_LENGTH \u003d 5;"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    public static final int SNOOZE_DEADLINE_COMMAND_LENGTH \u003d 4;"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"     * Creates a snooze command."},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"     * @param input the input command"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    public SnoozeCommand(String input) {"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"        super(input);"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"     * Executes the snooze command."},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"     * @param ui the user interface object that is currently running"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"     * @param list the current list of tasks"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"     * @param storage the storage-writing object that is currently running"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"     * @return the string telling the user about the result of the snoozing command"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input task index is invalid or the time input is invalid"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"    public String execute(Ui ui, TaskList list, Storage storage) throws InvalidCommandException {"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"        assert input.startsWith(Parser.SNOOZE_COMMAND_PREFIX) : \"Snooze command does not start with \u0027snooze \u0027\";"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"        String[] inputs \u003d input.split(Parser.SPACE_STRING);"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"        if (inputs.length \u003e SNOOZE_EVENT_COMMAND_LENGTH || inputs.length \u003c SNOOZE_DEADLINE_COMMAND_LENGTH"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"                || inputs[3].equals(Parser.TO)) {"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.SNOOZE_COMMAND_FORMAT_EXCEPTION);"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"            int n \u003d Parser.getTaskIndex(list, inputs[1]);"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"            Task t \u003d list.get(n);"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"            if (!(t instanceof TimedTask)) {"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"                throw new InvalidCommandException(Parser.INVALID_TASK_TYPE_INDEX_EXCEPTION);"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"            } else {"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"                TimedTask tt \u003d (TimedTask) t;"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"                String output \u003d tt.snoozeTo(inputs);"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"                storage.reWrite(list);"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"                return output;"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.NONNUMERIC_TASK_INDEX_EXCEPTION);"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the given command equals this one."},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"     * @param obj the object to compare"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"     * @return true if obj is a FindCommand and command input is the same"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"            return true;"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"        } else if (obj instanceof SnoozeCommand) {"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"            return input.equals(((SnoozeCommand) obj).input);"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"            return false;"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":73}},{"path":"src/main/java/duke/component/ActualStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import duke.command.InvalidCommandException;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import duke.task.Deadline;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import duke.task.Event;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"import duke.task.ToDo;"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":" * Represents the actual class for objects that executes reading data from and writing data into a storage file."},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"public class ActualStorage implements Storage {"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    public static final char TODO_INDICATOR \u003d \u0027T\u0027;"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"    public static final char DEADLINE_INDICATOR \u003d \u0027D\u0027;"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"    public static final char EVENT_INDICATOR \u003d \u0027E\u0027;"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    public static final String INPUT_FILE_FORMAT_ERROR \u003d \"Input file format error!\";"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    private File file;"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"    private final TaskList list;"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"     * Creates a Storage object, and initializes the list of tasks with data in the file."},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"     * @param filePath the file path holding the targeted data"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    public ActualStorage(String filePath) {"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"        list \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"        file \u003d new File(filePath);"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"            file.createNewFile();"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"            createFile();"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"            readFile(file);"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"            assert false : INPUT_FILE_FORMAT_ERROR;"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"    private void createFile () {"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"        new File(\"data\").mkdir();"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"            file \u003d new File(\"data/tasks.txt\");"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"            file.createNewFile();"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"            assert false : \"Creation unsuccessful!.\";"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"    private void readFile(File file) throws FileNotFoundException {"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"        Scanner sc \u003d new Scanner(file);"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"        while (sc.hasNext()) {"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"            readNextTask(sc);"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"    private void readNextTask(Scanner sc) {"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"        String[] taskInfo \u003d sc.nextLine().split(Storage.SPLITTER);"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"        String taskType \u003d taskInfo[0];"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"            Task toAdd \u003d getTask(taskType, taskInfo);"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"            list.add(toAdd);"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"            assert false : INPUT_FILE_FORMAT_ERROR;"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"    private Task getTask(String taskType, String[] taskInfo) throws InvalidCommandException {"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"        Task toAdd;"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"        if (isToDo(taskType)) {"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"            toAdd \u003d new ToDo(taskInfo);"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"            if (isDeadline(taskType)) {"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"                toAdd \u003d new Deadline(taskInfo);"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"            } else if (isEvent(taskType)) {"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"                toAdd \u003d new Event(taskInfo);"},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"            } else {"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"                assert false : INPUT_FILE_FORMAT_ERROR;"},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"                toAdd \u003d new ToDo(\"error\");"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"        return toAdd;"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"    private boolean isEvent(String taskType) {"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"        return taskType.charAt(0) \u003d\u003d EVENT_INDICATOR;"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"    private boolean isDeadline(String taskType) {"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":"        return taskType.charAt(0) \u003d\u003d DEADLINE_INDICATOR;"},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"    private boolean isToDo(String taskType) {"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"        return taskType.charAt(0) \u003d\u003d TODO_INDICATOR;"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"    public TaskList getList() {"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":"        return list;"},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":"    public void addToList(Task task) throws InvalidCommandException {"},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":"            FileWriter fw \u003d new FileWriter(file, true);"},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":"            fw.write(task.outputToFile());"},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":"            fw.close();"},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":"        } catch (IOException e) {"},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(e.getMessage());"},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":118,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":119,"author":{"gitId":"lll-jy"},"content":"    public void reWrite(TaskList list) throws InvalidCommandException {"},{"lineNumber":120,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"lll-jy"},"content":"            FileWriter fw \u003d new FileWriter(file);"},{"lineNumber":122,"author":{"gitId":"lll-jy"},"content":"            for (Task task : list) {"},{"lineNumber":123,"author":{"gitId":"lll-jy"},"content":"                fw.write(task.outputToFile());"},{"lineNumber":124,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"lll-jy"},"content":"            fw.close();"},{"lineNumber":126,"author":{"gitId":"lll-jy"},"content":"        } catch (IOException e) {"},{"lineNumber":127,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(e.getMessage());"},{"lineNumber":128,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":130}},{"path":"src/main/java/duke/component/CliUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":" * Represents user-interface objects that deals with CLI user inputs and outputs."},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"public class CliUi implements Ui {"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"    private static final String HORIZONTAL_LINE \u003d \"\\t\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"    private final Scanner sc;"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"     * Creates a user-interface Ui object."},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    public CliUi() {"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"     * Prints the given string."},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"     * @param str the string to print"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"    public void print(String str) {"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"        System.out.println(str);"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"     * Prints the given message with the formatting of horizontal lines wrapping it."},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"     * @param message the message to be wrapped"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"    public void output(String message) {"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"        print(HORIZONTAL_LINE + \"\\n\\t  \" + message + \"\\n\" + HORIZONTAL_LINE + \"\\n\");"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"     * Prints the filtered list with nice horizontal line formatting wrapping it and a text tip."},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"     * @param list the list to be printed"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"     * @param predicate the condition for the list element to be printed"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"     * @param note the note that explains the filter, which should have a space at the end"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"     * @return the note with the size of the filtered list at the end"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"    public String printList(TaskList list, Predicate\u003cTask\u003e predicate, String note) {"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"        System.out.println(HORIZONTAL_LINE + \"\\n\\t  \" + \"Here are the tasks \" + note + \"in your list:\");"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"        int n \u003d list.print(predicate);"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"        System.out.println(HORIZONTAL_LINE + \"\\n\");"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"        return note + n;"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"     * Reads input from the user."},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"     * @return the user inputs in the next line"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"    public String readInput() {"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"        return sc.nextLine();"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"     * Greets the user when the app is opened."},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"    public String greeting() {"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"        output(\"Hello! I\u0027m Duke\\n\\t  What can I do for you?\");"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"        return \"Hello! I\u0027m Duke\\n\\t  What can I do for you?\";"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"     * Says goodbye to the user when the app is exited."},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"    public void close() {"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"        output(\"Bye. Hope to see you again soon!\");"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":80}},{"path":"src/main/java/duke/component/FxmlUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"public class FxmlUi implements Ui {"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"    public void print(String str) { }"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"    public void output(String message) { }"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    public String readInput() {"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"        return null;"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"    public String greeting() {"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"        return Ui.GREETING;"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    public void close() { }"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"    public String printList(TaskList list, Predicate\u003cTask\u003e predicate, String note) {"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"        String res \u003d String.format(Ui.TASK_LIST_HEADING, note);"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"        return list.print(res, predicate);"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":32}},{"path":"src/main/java/duke/component/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.command.AddCommand;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.command.ByeCommand;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import duke.command.DoneCommand;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import duke.command.FindCommand;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import duke.command.FixCommand;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"import duke.command.HappenCommand;"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"import duke.command.InvalidCommandException;"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"import duke.command.ListCommand;"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"import duke.command.RepeatCommand;"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"import duke.command.SnoozeCommand;"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"import duke.task.Deadline;"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"import duke.task.Event;"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"import duke.task.ToDo;"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":" * Holds the methods for parsing commands."},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"public class Parser {"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    public static final String BYE_COMMAND \u003d \"bye\";"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"    public static final String LIST_COMMAND \u003d \"list\";"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"    public static final String DELETE_COMMAND_PREFIX \u003d \"delete \";"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    public static final String DONE_COMMAND_PREFIX \u003d \"done \";"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"    public static final String HAPPEN_COMMAND_PREFIX \u003d \"happen \";"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"    public static final String FIND_COMMAND_PREFIX \u003d \"find \";"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"    public static final String FIX_COMMAND_PREFIX \u003d \"fix \";"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"    public static final String SNOOZE_COMMAND_PREFIX \u003d \"snooze \";"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"    public static final String REPEAT_COMMAND_PREFIX \u003d \"repeat \";"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"    public static final String TODO \u003d \"todo\";"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"    public static final String DEADLINE \u003d \"deadline\";"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"    public static final String EVENT \u003d \"event\";"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"    public static final String BY_TIME_IDENTIFIER \u003d \"/by\";"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"    public static final String AT_TIME_IDENTIFIER \u003d \"/at\";"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"    public static final String ON \u003d \"on\";"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"    public static final String BEFORE \u003d \"before\";"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"    public static final String AFTER \u003d \"after\";"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"    public static final String IN \u003d \"in\";"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"    public static final String BETWEEN \u003d \"between\";"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"    public static final String DAYS \u003d \"days\";"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"    public static final String TODAY \u003d \"today\";"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"    public static final String TO \u003d \"to\";"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"    public static final String DAILY \u003d \"daily\";"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"    public static final String WEEKLY \u003d \"weekly\";"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"    public static final String EVERY \u003d \"every\";"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"    public static final char SPACE_CHAR \u003d \u0027 \u0027;"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"    public static final String SPACE_STRING \u003d \" \";"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"    public static final String TASK_SINGULAR \u003d \"task\";"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"    public static final String TASK_PLURAL \u003d \"tasks\";"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"    public static final String SUGGESTION_FORMAT \u003d \"Do you mean \u0027%s %s\u0027?\";"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"    public static final String EMPTY_DONE_COMMAND_EXCEPTION \u003d \"The task to mark as done cannot be empty.\";"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"    public static final String EMPTY_DELETE_COMMAND_EXCEPTION \u003d \"The task to mark to delete cannot be empty.\";"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"    public static final String EMPTY_TASK_DESCRIPTION_EXCEPTION \u003d \"The description of a task cannot be empty.\";"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"    public static final String EMPTY_TIME_EXCEPTION \u003d \"The time specification cannot be empty.\";"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"    public static final String NONPOSITIVE_TASK_INDEX_EXCEPTION \u003d \"The task index should be a positive integer.\";"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"    public static final String TASK_INDEX_OVERFLOW_EXCEPTION \u003d \"The task index does not exist.\";"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"    public static final String NONNUMERIC_TASK_INDEX_EXCEPTION \u003d \"The task index should be a number.\";"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"    public static final String LACK_TIME_SPECIFICATION_EXCEPTION \u003d \"Time should be specified.\";"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"    public static final String UNRECOGNIZED_COMMAND_EXCEPTION \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"    public static final String NEGATIVE_DAYS_EXCEPTION \u003d \"Number of days should be a positive integer.\";"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"    public static final String NONNUMERIC_NUMBER_OF_DAYS_EXCEPTION \u003d \"Number of days is not a number.\";"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"    public static final String HAPPEN_BETWEEN_EMPTY_PERIOD_EXCEPTION \u003d"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"            \"Latter date is before former date for happen between.\";"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"    public static final String UNRECOGNIZED_HAPPEN_COMMAND_EXCEPTION \u003d \"Invalid happen command input.\";"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"    public static final String INVALID_DATE_FORMAT_EXCEPTION \u003d \"Invalid date format. Please use yyyy-MM-dd.\";"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"    public static final String INVALID_DATE_TIME_FORMAT_EXCEPTION \u003d \"Invalid input datetime, please input as \""},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"            + \"yyyy-MM-dd HH:mm.\";"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"    public static final String INVALID_TASK_TYPE_INDEX_EXCEPTION \u003d \"The index of task is not of the desired task type.\";"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"    public static final String FIX_COMMAND_FORMAT_EXCEPTION \u003d \"The format for fix command should be \""},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"            + \"\u0027fix \u003ctask_index of event\u003e \u003cdatetime to fix\u003e\u0027.\";"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"    public static final String FIX_TIME_NOT_EXIST_EXCEPTION \u003d \"The time to fix for the event does not exist.\";"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"    public static final String SNOOZE_COMMAND_FORMAT_EXCEPTION \u003d \"The format for snooze command should be \""},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"            + \"\u0027snooze \u003ctask_index of timed task\u003e to \u003cdate/datetime to reschedule to\u003e\u0027.\";"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"    public static final String SNOOZE_UNFIXED_EVENT_EXCEPTION \u003d \"Cannot snooze an event with multiple tentative slots.\";"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"    public static final String SNOOZE_TO_EARLIER_TIME_EXCEPTION \u003d \"Sorry, you cannot snooze a task to a time earlier\""},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"            + \"than its original scheduled time.\";"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"    public static final String REPEAT_COMMAND_FORMAT_EXCEPTION \u003d \"The format for repeat command should be \""},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"            + \"\u0027repeat \u003ctask_index of timed task\u003e [daily/weekly/every {n} days]\u0027.\";"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"    public static final String REPEAT_UNFIXED_EVENT_EXCEPTION \u003d \"Cannot repeat an event with multiple tentative slots.\";"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"    public static final String INVALID_FILE_EXCEPTION \u003d \"The resource file format is incorrect.\";"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"    public static final String DONE_UNFIXED_EVENT_EXCEPTION \u003d"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"            \"Cannot mark an event as done with multiple tentative slots.\";"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"    public static final DateTimeFormatter DATE_TIME_INPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"    public static final DateTimeFormatter DATE_TIME_OUTPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"hh:mm a   MMM d yyyy\");"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"    public static final DateTimeFormatter DATE_INPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"    public static final DateTimeFormatter DATE_OUTPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"    private static boolean hasEmptyContent(String cmd, String prefix) {"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":"        return cmd.length() \u003c prefix.length() + 1;"},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"    private static int parseTaskIndex(String cmd, String prefix) throws InvalidCommandException {"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"            return Integer.parseInt(cmd.substring(prefix.length()));"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(NONNUMERIC_TASK_INDEX_EXCEPTION);"},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":"    private static int getInputTaskIndex(String cmd, int count, String prefix) throws InvalidCommandException {"},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"        int n \u003d parseTaskIndex(cmd, prefix);"},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":"        if (n \u003c 1) {"},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(NONPOSITIVE_TASK_INDEX_EXCEPTION);"},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":"        } else if (n \u003e count) {"},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(TASK_INDEX_OVERFLOW_EXCEPTION);"},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":"            return n;"},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":117,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"lll-jy"},"content":"     * Gets the task index from the input string of task index and checks its validity."},{"lineNumber":119,"author":{"gitId":"lll-jy"},"content":"     * @param list the task list of the running duke app"},{"lineNumber":120,"author":{"gitId":"lll-jy"},"content":"     * @param inputN the string of the input task index"},{"lineNumber":121,"author":{"gitId":"lll-jy"},"content":"     * @return the task index if it is valid"},{"lineNumber":122,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the index is not a number or valid index in the list"},{"lineNumber":123,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"lll-jy"},"content":"    public static int getTaskIndex(TaskList list, String inputN) throws InvalidCommandException {"},{"lineNumber":125,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":126,"author":{"gitId":"lll-jy"},"content":"            int n \u003d Integer.parseInt(inputN);"},{"lineNumber":127,"author":{"gitId":"lll-jy"},"content":"            if (n \u003c 1) {"},{"lineNumber":128,"author":{"gitId":"lll-jy"},"content":"                throw new InvalidCommandException(Parser.NONPOSITIVE_TASK_INDEX_EXCEPTION);"},{"lineNumber":129,"author":{"gitId":"lll-jy"},"content":"            } else if (n \u003e list.size()) {"},{"lineNumber":130,"author":{"gitId":"lll-jy"},"content":"                throw new InvalidCommandException(Parser.TASK_INDEX_OVERFLOW_EXCEPTION);"},{"lineNumber":131,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":132,"author":{"gitId":"lll-jy"},"content":"            return n - 1;"},{"lineNumber":133,"author":{"gitId":"lll-jy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":134,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.NONNUMERIC_TASK_INDEX_EXCEPTION);"},{"lineNumber":135,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":138,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"lll-jy"},"content":"     * Parses a DoneCommand to tell which task to mark as done."},{"lineNumber":140,"author":{"gitId":"lll-jy"},"content":"     * @param cmd the given input command"},{"lineNumber":141,"author":{"gitId":"lll-jy"},"content":"     * @param count the current number of tasks in list"},{"lineNumber":142,"author":{"gitId":"lll-jy"},"content":"     * @return the index of the task to mark as done"},{"lineNumber":143,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input is invalid, including non-integer, negative values, 0 or large"},{"lineNumber":144,"author":{"gitId":"lll-jy"},"content":"     * numbers"},{"lineNumber":145,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"lll-jy"},"content":"    public static int getDoneTaskIndex(String cmd, int count) throws InvalidCommandException {"},{"lineNumber":147,"author":{"gitId":"lll-jy"},"content":"        assert cmd.startsWith(\"done \") : \"Calling isValidDone not using a done command\";"},{"lineNumber":148,"author":{"gitId":"lll-jy"},"content":"        if (hasEmptyContent(cmd, DONE_COMMAND_PREFIX)) {"},{"lineNumber":149,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(EMPTY_DONE_COMMAND_EXCEPTION);"},{"lineNumber":150,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"lll-jy"},"content":"        return getInputTaskIndex(cmd, count, DONE_COMMAND_PREFIX);"},{"lineNumber":152,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":154,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"lll-jy"},"content":"     * Parses a DeleteCommand to tell which task to delete."},{"lineNumber":156,"author":{"gitId":"lll-jy"},"content":"     * @param cmd the given input command"},{"lineNumber":157,"author":{"gitId":"lll-jy"},"content":"     * @param count the current number of tasks in list"},{"lineNumber":158,"author":{"gitId":"lll-jy"},"content":"     * @return the index of the task to delete"},{"lineNumber":159,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input is invalid, including non-integer, negative values, 0 or large"},{"lineNumber":160,"author":{"gitId":"lll-jy"},"content":"     * numbers"},{"lineNumber":161,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"lll-jy"},"content":"    public static int getDeleteTaskIndex(String cmd, int count) throws InvalidCommandException {"},{"lineNumber":163,"author":{"gitId":"lll-jy"},"content":"        assert cmd.startsWith(\"delete \") : \"Calling isValidDelete not using a delete command\";"},{"lineNumber":164,"author":{"gitId":"lll-jy"},"content":"        if (hasEmptyContent(cmd, DELETE_COMMAND_PREFIX)) {"},{"lineNumber":165,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(EMPTY_DELETE_COMMAND_EXCEPTION);"},{"lineNumber":166,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"lll-jy"},"content":"        return getInputTaskIndex(cmd, count, DELETE_COMMAND_PREFIX);"},{"lineNumber":168,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":170,"author":{"gitId":"lll-jy"},"content":"    private static String generateSuggestion(String taskType, String description) {"},{"lineNumber":171,"author":{"gitId":"lll-jy"},"content":"        return String.format(SUGGESTION_FORMAT, taskType, description.substring(taskType.length()));"},{"lineNumber":172,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":174,"author":{"gitId":"lll-jy"},"content":"    private static boolean hasSpaceAfterType(String cmd, String taskType) {"},{"lineNumber":175,"author":{"gitId":"lll-jy"},"content":"        return cmd.charAt(taskType.length()) \u003d\u003d SPACE_CHAR;"},{"lineNumber":176,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":178,"author":{"gitId":"lll-jy"},"content":"    private static void checkValidAddCommand(String cmd, String taskType) throws InvalidCommandException {"},{"lineNumber":179,"author":{"gitId":"lll-jy"},"content":"        if (hasEmptyContent(cmd, taskType)) {"},{"lineNumber":180,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(EMPTY_TASK_DESCRIPTION_EXCEPTION);"},{"lineNumber":181,"author":{"gitId":"lll-jy"},"content":"        } else if (!hasSpaceAfterType(cmd, taskType)) {"},{"lineNumber":182,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(generateSuggestion(taskType, cmd));"},{"lineNumber":183,"author":{"gitId":"lll-jy"},"content":"        } else if (hasEmptyContent(cmd, taskType + SPACE_STRING)) {"},{"lineNumber":184,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(EMPTY_TASK_DESCRIPTION_EXCEPTION);"},{"lineNumber":185,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":188,"author":{"gitId":"lll-jy"},"content":"    private static String getTaskDescription(String cmd, String taskType) throws InvalidCommandException {"},{"lineNumber":189,"author":{"gitId":"lll-jy"},"content":"        checkValidAddCommand(cmd, taskType);"},{"lineNumber":190,"author":{"gitId":"lll-jy"},"content":"        return cmd.substring(taskType.length() + 1);"},{"lineNumber":191,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":193,"author":{"gitId":"lll-jy"},"content":"    private static int locateTimeIdentifier(String description, String identifier) throws InvalidCommandException {"},{"lineNumber":194,"author":{"gitId":"lll-jy"},"content":"        int result \u003d description.indexOf(identifier);"},{"lineNumber":195,"author":{"gitId":"lll-jy"},"content":"        if (result \u003d\u003d -1) {"},{"lineNumber":196,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(LACK_TIME_SPECIFICATION_EXCEPTION);"},{"lineNumber":197,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"lll-jy"},"content":"        return result;"},{"lineNumber":199,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":201,"author":{"gitId":"lll-jy"},"content":"    private static String getTimeSpecification(String description, String identifier, int timePosition)"},{"lineNumber":202,"author":{"gitId":"lll-jy"},"content":"            throws InvalidCommandException {"},{"lineNumber":203,"author":{"gitId":"lll-jy"},"content":"        String timeSpecificationPart \u003d description.substring(timePosition);"},{"lineNumber":204,"author":{"gitId":"lll-jy"},"content":"        if (hasEmptyContent(timeSpecificationPart, identifier + SPACE_STRING)) {"},{"lineNumber":205,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(EMPTY_TIME_EXCEPTION);"},{"lineNumber":206,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"lll-jy"},"content":"        return timeSpecificationPart.substring(identifier.length() + 1);"},{"lineNumber":208,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":210,"author":{"gitId":"lll-jy"},"content":"    private static String getPlainDescription(String description, int timePosition) {"},{"lineNumber":211,"author":{"gitId":"lll-jy"},"content":"        return description.substring(0, timePosition - 1);"},{"lineNumber":212,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":214,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"lll-jy"},"content":"     * Parses an AddCommand to tell what is the task need to be added."},{"lineNumber":216,"author":{"gitId":"lll-jy"},"content":"     * @param cmd the given input command"},{"lineNumber":217,"author":{"gitId":"lll-jy"},"content":"     * @return the task to be added according to the command"},{"lineNumber":218,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the command does not make sense"},{"lineNumber":219,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":220,"author":{"gitId":"lll-jy"},"content":"    public static Task parseAddTask(String cmd) throws InvalidCommandException {"},{"lineNumber":221,"author":{"gitId":"lll-jy"},"content":"        if (cmd.startsWith(TODO)) {"},{"lineNumber":222,"author":{"gitId":"lll-jy"},"content":"            return new ToDo(getTaskDescription(cmd, TODO));"},{"lineNumber":223,"author":{"gitId":"lll-jy"},"content":"        } else if (cmd.startsWith(DEADLINE)) {"},{"lineNumber":224,"author":{"gitId":"lll-jy"},"content":"            String fullDescription \u003d getTaskDescription(cmd, DEADLINE);"},{"lineNumber":225,"author":{"gitId":"lll-jy"},"content":"            int timePosition \u003d locateTimeIdentifier(fullDescription, BY_TIME_IDENTIFIER);"},{"lineNumber":226,"author":{"gitId":"lll-jy"},"content":"            String time \u003d getTimeSpecification(fullDescription, BY_TIME_IDENTIFIER, timePosition);"},{"lineNumber":227,"author":{"gitId":"lll-jy"},"content":"            String description \u003d getPlainDescription(fullDescription, timePosition);"},{"lineNumber":228,"author":{"gitId":"lll-jy"},"content":"            return new Deadline(description, time);"},{"lineNumber":229,"author":{"gitId":"lll-jy"},"content":"        } else if (cmd.startsWith(EVENT)) {"},{"lineNumber":230,"author":{"gitId":"lll-jy"},"content":"            String fullDescription \u003d getTaskDescription(cmd, EVENT);"},{"lineNumber":231,"author":{"gitId":"lll-jy"},"content":"            int timePosition \u003d locateTimeIdentifier(fullDescription, AT_TIME_IDENTIFIER);"},{"lineNumber":232,"author":{"gitId":"lll-jy"},"content":"            String time \u003d getTimeSpecification(fullDescription, AT_TIME_IDENTIFIER, timePosition);"},{"lineNumber":233,"author":{"gitId":"lll-jy"},"content":"            String description \u003d getPlainDescription(fullDescription, timePosition);"},{"lineNumber":234,"author":{"gitId":"lll-jy"},"content":"            return new Event(description, time);"},{"lineNumber":235,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":236,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(UNRECOGNIZED_COMMAND_EXCEPTION);"},{"lineNumber":237,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":240,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":241,"author":{"gitId":"lll-jy"},"content":"     * Parses any input command."},{"lineNumber":242,"author":{"gitId":"lll-jy"},"content":"     * @param input the given input command"},{"lineNumber":243,"author":{"gitId":"lll-jy"},"content":"     * @return the Command to be executed"},{"lineNumber":244,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":245,"author":{"gitId":"lll-jy"},"content":"    public static Command parse(String input) {"},{"lineNumber":246,"author":{"gitId":"lll-jy"},"content":"        if (input.equals(BYE_COMMAND)) {"},{"lineNumber":247,"author":{"gitId":"lll-jy"},"content":"            return new ByeCommand(input);"},{"lineNumber":248,"author":{"gitId":"lll-jy"},"content":"        } else if (input.equals(LIST_COMMAND)) {"},{"lineNumber":249,"author":{"gitId":"lll-jy"},"content":"            return new ListCommand(input);"},{"lineNumber":250,"author":{"gitId":"lll-jy"},"content":"        } else if (input.startsWith(DELETE_COMMAND_PREFIX)) {"},{"lineNumber":251,"author":{"gitId":"lll-jy"},"content":"            return new DeleteCommand(input);"},{"lineNumber":252,"author":{"gitId":"lll-jy"},"content":"        } else if (input.startsWith(DONE_COMMAND_PREFIX)) {"},{"lineNumber":253,"author":{"gitId":"lll-jy"},"content":"            return new DoneCommand(input);"},{"lineNumber":254,"author":{"gitId":"lll-jy"},"content":"        } else if (input.startsWith(HAPPEN_COMMAND_PREFIX)) {"},{"lineNumber":255,"author":{"gitId":"lll-jy"},"content":"            return new HappenCommand(input);"},{"lineNumber":256,"author":{"gitId":"lll-jy"},"content":"        } else if (input.startsWith(FIND_COMMAND_PREFIX)) {"},{"lineNumber":257,"author":{"gitId":"lll-jy"},"content":"            return new FindCommand(input);"},{"lineNumber":258,"author":{"gitId":"lll-jy"},"content":"        } else if (input.startsWith(FIX_COMMAND_PREFIX)) {"},{"lineNumber":259,"author":{"gitId":"lll-jy"},"content":"            return new FixCommand(input);"},{"lineNumber":260,"author":{"gitId":"lll-jy"},"content":"        } else if (input.startsWith(SNOOZE_COMMAND_PREFIX)) {"},{"lineNumber":261,"author":{"gitId":"lll-jy"},"content":"            return new SnoozeCommand(input);"},{"lineNumber":262,"author":{"gitId":"lll-jy"},"content":"        } else if (input.startsWith(REPEAT_COMMAND_PREFIX)) {"},{"lineNumber":263,"author":{"gitId":"lll-jy"},"content":"            return new RepeatCommand(input);"},{"lineNumber":264,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":265,"author":{"gitId":"lll-jy"},"content":"            return new AddCommand(input);"},{"lineNumber":266,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":267,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":269,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":270,"author":{"gitId":"lll-jy"},"content":"     * Gets the string tasks with proper singular or plural format."},{"lineNumber":271,"author":{"gitId":"lll-jy"},"content":"     * @param count the number of tasks currently have"},{"lineNumber":272,"author":{"gitId":"lll-jy"},"content":"     * @return \"task\" if count is smaller than 1 and \"tasks\" if count is biggerthan 1"},{"lineNumber":273,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":274,"author":{"gitId":"lll-jy"},"content":"    public static String getTaskPlural(int count) {"},{"lineNumber":275,"author":{"gitId":"lll-jy"},"content":"        return count \u003c\u003d 1 ? TASK_SINGULAR : TASK_PLURAL;"},{"lineNumber":276,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":277,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":277}},{"path":"src/main/java/duke/component/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.command.InvalidCommandException;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":" * Represents the storage behaviors, including reading data from file, adding lines to file, and re-write file."},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"public interface Storage {"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"    String SPLITTER \u003d \" \u0026\u0026\u0026 \";"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"     * Gets the list of tasks held by the storage."},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"     * @return the list of tasks"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    TaskList getList();"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"     * Writes the task to the storage file."},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"     * @param task the task that is to be written in the task"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException should never been thrown unless the file path is not working"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    void addToList(Task task) throws InvalidCommandException;"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"     * Re-writes the storage file because of deletion or marking-as-done executed."},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"     * @param list the new task list used for updating the storage file"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException should never been thrown unless the file path is not working"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    void reWrite(TaskList list) throws InvalidCommandException;"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":31}},{"path":"src/main/java/duke/component/StorageStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"public class StorageStub implements Storage {"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"    public TaskList getList() {"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"        return new TaskList();"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"    public void addToList(Task task) {"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    public void reWrite(TaskList list) {"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":18}},{"path":"src/main/java/duke/component/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":" * Represents lists of tasks."},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"     * Creates a list of tasks."},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"        super();"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"     * Prints a filtered list based on this list with the given predicate on CLI App."},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"     * @param predicate the condition for a task to be printed"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"     * @return the number of tasks printed"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"    public int print(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"        int n \u003d size();"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"        int count \u003d 0;"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"        for (int i \u003d 0; i \u003c n; i++) {"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"            Task task \u003d get(i);"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"            if (predicate.test(task)) {"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"                System.out.println(\"\\t  \" + (i + 1) + \".\" + task);"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"                count++;"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"        return count;"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"     * Prints a filtered list based on this list with the given predicate on FXML App."},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"     * @param initialStatement the heading about the content of the task list"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"     * @param predicate checks if a task is wanted to print"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"     * @return the entire string of the filtered task list"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"    public String print(String initialStatement, Predicate\u003cTask\u003e predicate) {"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"        String res \u003d initialStatement;"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"        int n \u003d size();"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"        for (int i \u003d 0; i \u003c n; i++) {"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"            Task task \u003d get(i);"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"            if (predicate.test(task)) {"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"                res \u003d res.concat(getIndexedTaskString(i, task));"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"        return res;"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"    private String getIndexedTaskString(int i, Task task) {"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"        return (i + 1) + \".\" + task + \"\\n\";"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":58}},{"path":"src/main/java/duke/component/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"public interface Ui {"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"    String ADD_TASK_OUTPUT_FORMAT \u003d \"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d %s in the list.\";"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"    String DELETE_TASK_OUTPUT_FORMAT \u003d \"Noted. I\u0027ve removed this task:\\n%s\\nNow you have %d %s.\";"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"    String DONE_TASK_OUTPUT_FORMAT \u003d \"Nice! I\u0027ve marked this task as done:\\n%s\";"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"    String FIX_TASK_OUTPUT_FORMAT \u003d \"Nice! I\u0027ve fixed the slot for the event:\\n%s\";"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"    String SNOOZE_TASK_OUTPUT_FORMAT \u003d \"Noted. I\u0027ve postponed this task:\\n%s\\nfrom %s to %s\";"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"    String REPEAT_TASK_OUTPUT_FORMAT \u003d \"Noted. I\u0027ve set this task to repeat every %d days:\\n%s\";"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"    String FIND_LIST_NOTE_FORMAT \u003d \"containing \u0027%s\u0027 \";"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    String HAPPEN_LIST_NOTE_FORMAT \u003d \"happening %s %s \";"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    String GREETING \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    String TASK_LIST_HEADING \u003d \"Here are the tasks %sin your list:\\n\\n\";"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    void print(String str);"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    String printList(TaskList list, Predicate\u003cTask\u003e predicate, String note);"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"    void output(String message);"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"    String readInput();"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    String greeting();"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    void close();"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":24}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.command.InvalidCommandException;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import duke.command.SnoozeCommand;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":" * Represents a deadline task that consists of a description and a date as the deadline for completing the task."},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"public class Deadline extends TimedTask {"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    private LocalDate byTime;"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"     * Creates a deadline task."},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"     * @param description the description of the task"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"     * @param byTime the string description of the time the deadline task should be done by"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input time format is not yyyy-MM-dd"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"    public Deadline(String description, String byTime) throws InvalidCommandException {"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"            this.byTime \u003d LocalDate.parse(byTime, Parser.DATE_INPUT_FORMAT);"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.INVALID_DATE_FORMAT_EXCEPTION);"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"     * Creates a deadline task using the resource file."},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"     * @param taskInfo the full line of the task"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the resource file format is invalid"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"    public Deadline(String[] taskInfo) throws InvalidCommandException {"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"        super(\"\");"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"        assert taskInfo[0].equals(\"D\") : \"Wrong read of file\";"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"            int done \u003d Integer.parseInt(taskInfo[1]);"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"            if ((done \u003d\u003d 0 \u0026\u0026 taskInfo.length !\u003d 5) || (done \u003d\u003d 1 \u0026\u0026 taskInfo.length !\u003d 6)) {"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"                throw new InvalidCommandException(Parser.INVALID_FILE_EXCEPTION);"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"            try {"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"                description \u003d taskInfo[2];"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"                byTime \u003d LocalDate.parse(taskInfo[3], Parser.DATE_INPUT_FORMAT);"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"                repeat \u003d Integer.parseInt(taskInfo[4]);"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"                if (done \u003d\u003d 1) {"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"                    lastDone \u003d LocalDate.parse(taskInfo[5], Parser.DATE_INPUT_FORMAT);"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"                    this.isDone \u003d true;"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"                }"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"            } catch (Exception e) {"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"                throw new InvalidCommandException(Parser.INVALID_FILE_EXCEPTION);"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"        } catch (StackOverflowError | NumberFormatException e) {"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.INVALID_FILE_EXCEPTION);"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningOn(LocalDate date) {"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"        return isHappeningOn(date, byTime);"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningToday() {"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"        return isHappeningOn(LocalDate.now());"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"    public boolean hasHappenedBefore(LocalDate date) {"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"        return byTime.isBefore(date);"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"    public boolean hasHappenedBeforeToday() {"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"        return hasHappenedBefore(LocalDate.now());"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningAfter(LocalDate date) {"},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"        return repeat \u003e 0 || byTime.isAfter(date);"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningAfterToday() {"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"        return isHappeningAfter(LocalDate.now());"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningBetween(LocalDate date1, LocalDate date2) {"},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"        return isHappeningBetween(date1, date2, byTime);"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"    public boolean willHappenInDays(int n) {"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"        return isHappeningBetween(LocalDate.now(), LocalDate.now().plusDays(n));"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"    public String snoozeTo(String[] input) throws InvalidCommandException {"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":"        if (input.length !\u003d SnoozeCommand.SNOOZE_DEADLINE_COMMAND_LENGTH) {"},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.INVALID_DATE_FORMAT_EXCEPTION);"},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"        String dateTimeStr \u003d input[3];"},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":"            LocalDate newDate \u003d LocalDate.parse(dateTimeStr, Parser.DATE_INPUT_FORMAT);"},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":"            if (newDate.isAfter(byTime)) {"},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":"                LocalDate originalDate \u003d byTime;"},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":"                byTime \u003d newDate;"},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":"                return String.format(Ui.SNOOZE_TASK_OUTPUT_FORMAT, this, originalDate, newDate);"},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":"            } else {"},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"                throw new InvalidCommandException(Parser.SNOOZE_TO_EARLIER_TIME_EXCEPTION);"},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"lll-jy"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":118,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.INVALID_DATE_FORMAT_EXCEPTION);"},{"lineNumber":119,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":122,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":123,"author":{"gitId":"lll-jy"},"content":"    public String repeat(int n) {"},{"lineNumber":124,"author":{"gitId":"lll-jy"},"content":"        repeat \u003d n;"},{"lineNumber":125,"author":{"gitId":"lll-jy"},"content":"        return String.format(Ui.REPEAT_TASK_OUTPUT_FORMAT, n, this);"},{"lineNumber":126,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":128,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"lll-jy"},"content":"    public void markAsDone() throws InvalidCommandException {"},{"lineNumber":130,"author":{"gitId":"lll-jy"},"content":"        markAsDone(byTime);"},{"lineNumber":131,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":133,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":134,"author":{"gitId":"lll-jy"},"content":"    public String outputToFile() {"},{"lineNumber":135,"author":{"gitId":"lll-jy"},"content":"        return \"D\" + super.outputToFile() + Storage.SPLITTER + byTime + Storage.SPLITTER"},{"lineNumber":136,"author":{"gitId":"lll-jy"},"content":"                + repeat + lastDoneMessage() + \"\\n\";"},{"lineNumber":137,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":139,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":140,"author":{"gitId":"lll-jy"},"content":"    public String toString() {"},{"lineNumber":141,"author":{"gitId":"lll-jy"},"content":"        return \"[D]\" + super.toString() + \" (by: \""},{"lineNumber":142,"author":{"gitId":"lll-jy"},"content":"                + byTime.format(Parser.DATE_OUTPUT_FORMAT) + repeatMessage() + \")\";"},{"lineNumber":143,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":145,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the given object equals this Deadline task."},{"lineNumber":147,"author":{"gitId":"lll-jy"},"content":"     * @param obj the given object to compare"},{"lineNumber":148,"author":{"gitId":"lll-jy"},"content":"     * @return true if the object is a Deadline and both the description and byTime equals"},{"lineNumber":149,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":151,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":152,"author":{"gitId":"lll-jy"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":153,"author":{"gitId":"lll-jy"},"content":"            return true;"},{"lineNumber":154,"author":{"gitId":"lll-jy"},"content":"        } else if (obj instanceof Deadline) {"},{"lineNumber":155,"author":{"gitId":"lll-jy"},"content":"            Deadline o \u003d (Deadline) obj;"},{"lineNumber":156,"author":{"gitId":"lll-jy"},"content":"            return description.equals(o.description) \u0026\u0026 byTime.isEqual(o.byTime);"},{"lineNumber":157,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":158,"author":{"gitId":"lll-jy"},"content":"            return false;"},{"lineNumber":159,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":161}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import duke.command.InvalidCommandException;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import duke.command.SnoozeCommand;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import duke.component.Ui;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":" * Represents an event task that consists of a description and a datetime as the happening time of the event."},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"public class Event extends TimedTask {"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    private LocalDateTime atTime;"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    private LocalDateTime[] tentativeSlots;"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    private String tentativeSlotsStr;"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"     * Creates an event task."},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"     * @param description the description of the task"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"     * @param atTime the string description of the time the event happens at"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input time format is not yyyy-MM-dd HH:mm"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    public Event(String description, String atTime) throws InvalidCommandException {"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"        super(description);"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"        handleTentativeSlots(atTime);"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"     * Creates an event task using the resource file."},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"     * @param taskInfo the full line of the task"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the resource file format is invalid"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"    public Event(String[] taskInfo) throws InvalidCommandException {"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"        super(\"\");"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"        assert taskInfo[0].equals(\"E\") : \"Wrong read of file\";"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"            int done \u003d Integer.parseInt(taskInfo[1]);"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"            description \u003d taskInfo[2];"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"            if (taskInfo.length \u003d\u003d 4) {"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"                handleTentativeSlots(taskInfo[3]);"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"                if (done \u003d\u003d 1) {"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"                    throw new InvalidCommandException(Parser.INVALID_FILE_EXCEPTION);"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"                }"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"            } else if (taskInfo.length \u003c\u003d 6) {"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"                atTime \u003d LocalDateTime.parse(taskInfo[3], Parser.DATE_TIME_INPUT_FORMAT);"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"                repeat \u003d Integer.parseInt(taskInfo[4]);"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"                if (done \u003d\u003d 1) {"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"                    lastDone \u003d LocalDate.parse(taskInfo[5], Parser.DATE_INPUT_FORMAT);"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"                    this.isDone \u003d true;"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"                } else if (taskInfo.length \u003d\u003d 6) {"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"                    throw new InvalidCommandException(Parser.INVALID_FILE_EXCEPTION);"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"                }"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"            } else {"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"                throw new InvalidCommandException(Parser.INVALID_FILE_EXCEPTION);"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"        } catch (StackOverflowError | NumberFormatException e) {"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.INVALID_FILE_EXCEPTION);"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"    private void handleTentativeSlots(String timeStr) throws InvalidCommandException {"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"        String[] times \u003d timeStr.split(\"/\");"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"        tentativeSlots \u003d new LocalDateTime[times.length];"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"            for (int i \u003d 0; i \u003c times.length; i++) {"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"                tentativeSlots[i] \u003d LocalDateTime.parse(times[i], Parser.DATE_TIME_INPUT_FORMAT);"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"            if (times.length \u003d\u003d 1) {"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"                this.atTime \u003d tentativeSlots[0];"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"                tentativeSlotsStr \u003d \"\";"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"            } else {"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"                this.atTime \u003d null;"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"                tentativeSlotsStr \u003d String.join(\"/\", times);"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.INVALID_DATE_TIME_FORMAT_EXCEPTION);"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningOn(LocalDate date) {"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"        return atTime !\u003d null \u0026\u0026 isHappeningOn(date, atTime.toLocalDate());"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningToday() {"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"        return isHappeningOn(LocalDate.now());"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":"    public boolean hasHappenedBefore(LocalDate date) {"},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"        return atTime !\u003d null \u0026\u0026 atTime.toLocalDate().isBefore(date);"},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"    public boolean hasHappenedBeforeToday() {"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"        return hasHappenedBefore(LocalDate.now());"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningAfter(LocalDate date) {"},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":"        return atTime !\u003d null \u0026\u0026 (repeat \u003e 0 || atTime.toLocalDate().isAfter(date));"},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningAfterToday() {"},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":"        return isHappeningAfter(LocalDate.now());"},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningBetween(LocalDate date1, LocalDate date2) {"},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":"        return atTime !\u003d null \u0026\u0026 isHappeningBetween(date1, date2, atTime.toLocalDate());"},{"lineNumber":117,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":119,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"lll-jy"},"content":"    public boolean willHappenInDays(int n) {"},{"lineNumber":121,"author":{"gitId":"lll-jy"},"content":"        return isHappeningBetween(LocalDate.now(), LocalDate.now().plusDays(n));"},{"lineNumber":122,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":124,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"lll-jy"},"content":"     * Fixes a slot from the tentative slots of the event."},{"lineNumber":126,"author":{"gitId":"lll-jy"},"content":"     * @param timeToFix the time to fix this event at"},{"lineNumber":127,"author":{"gitId":"lll-jy"},"content":"     * @return the string output for the result of this execution"},{"lineNumber":128,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input is invalid, e.g. wrong date-time format, extra arguments"},{"lineNumber":129,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"lll-jy"},"content":"    public String fixSlot(String timeToFix) throws InvalidCommandException {"},{"lineNumber":131,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":132,"author":{"gitId":"lll-jy"},"content":"            LocalDateTime toFix \u003d LocalDateTime.parse(timeToFix, Parser.DATE_TIME_INPUT_FORMAT);"},{"lineNumber":133,"author":{"gitId":"lll-jy"},"content":"            checkExist(toFix);"},{"lineNumber":134,"author":{"gitId":"lll-jy"},"content":"            atTime \u003d toFix;"},{"lineNumber":135,"author":{"gitId":"lll-jy"},"content":"            return String.format(Ui.FIX_TASK_OUTPUT_FORMAT, this);"},{"lineNumber":136,"author":{"gitId":"lll-jy"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":137,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.INVALID_DATE_TIME_FORMAT_EXCEPTION);"},{"lineNumber":138,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":141,"author":{"gitId":"lll-jy"},"content":"    private void checkExist(LocalDateTime toFix) throws InvalidCommandException {"},{"lineNumber":142,"author":{"gitId":"lll-jy"},"content":"        boolean found \u003d false;"},{"lineNumber":143,"author":{"gitId":"lll-jy"},"content":"        for (LocalDateTime dt : tentativeSlots) {"},{"lineNumber":144,"author":{"gitId":"lll-jy"},"content":"            if (dt.isEqual(toFix)) {"},{"lineNumber":145,"author":{"gitId":"lll-jy"},"content":"                found \u003d true;"},{"lineNumber":146,"author":{"gitId":"lll-jy"},"content":"                break;"},{"lineNumber":147,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":148,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"lll-jy"},"content":"        if (!found) {"},{"lineNumber":150,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.FIX_TIME_NOT_EXIST_EXCEPTION);"},{"lineNumber":151,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":154,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":155,"author":{"gitId":"lll-jy"},"content":"    public String snoozeTo(String[] input) throws InvalidCommandException {"},{"lineNumber":156,"author":{"gitId":"lll-jy"},"content":"        if (input.length !\u003d SnoozeCommand.SNOOZE_EVENT_COMMAND_LENGTH) {"},{"lineNumber":157,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.INVALID_DATE_TIME_FORMAT_EXCEPTION);"},{"lineNumber":158,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"lll-jy"},"content":"        if (atTime \u003d\u003d null) {"},{"lineNumber":160,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.SNOOZE_UNFIXED_EVENT_EXCEPTION);"},{"lineNumber":161,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":162,"author":{"gitId":"lll-jy"},"content":"            String dateTimeStr \u003d input[3] + Parser.SPACE_STRING + input[4];"},{"lineNumber":163,"author":{"gitId":"lll-jy"},"content":"            try {"},{"lineNumber":164,"author":{"gitId":"lll-jy"},"content":"                LocalDateTime newTime \u003d LocalDateTime.parse(dateTimeStr, Parser.DATE_TIME_INPUT_FORMAT);"},{"lineNumber":165,"author":{"gitId":"lll-jy"},"content":"                if (newTime.isAfter(atTime)) {"},{"lineNumber":166,"author":{"gitId":"lll-jy"},"content":"                    LocalDateTime originalTime \u003d atTime;"},{"lineNumber":167,"author":{"gitId":"lll-jy"},"content":"                    atTime \u003d newTime;"},{"lineNumber":168,"author":{"gitId":"lll-jy"},"content":"                    return String.format(Ui.SNOOZE_TASK_OUTPUT_FORMAT, this, originalTime, newTime);"},{"lineNumber":169,"author":{"gitId":"lll-jy"},"content":"                } else {"},{"lineNumber":170,"author":{"gitId":"lll-jy"},"content":"                    throw new InvalidCommandException(Parser.SNOOZE_TO_EARLIER_TIME_EXCEPTION);"},{"lineNumber":171,"author":{"gitId":"lll-jy"},"content":"                }"},{"lineNumber":172,"author":{"gitId":"lll-jy"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":173,"author":{"gitId":"lll-jy"},"content":"                throw new InvalidCommandException(Parser.INVALID_DATE_TIME_FORMAT_EXCEPTION);"},{"lineNumber":174,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":175,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":178,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":179,"author":{"gitId":"lll-jy"},"content":"    public String repeat(int n) throws InvalidCommandException {"},{"lineNumber":180,"author":{"gitId":"lll-jy"},"content":"        if (atTime \u003d\u003d null) {"},{"lineNumber":181,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.REPEAT_UNFIXED_EVENT_EXCEPTION);"},{"lineNumber":182,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":183,"author":{"gitId":"lll-jy"},"content":"            repeat \u003d n;"},{"lineNumber":184,"author":{"gitId":"lll-jy"},"content":"            return String.format(Ui.REPEAT_TASK_OUTPUT_FORMAT, n, this);"},{"lineNumber":185,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":188,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":189,"author":{"gitId":"lll-jy"},"content":"    public void markAsDone() throws InvalidCommandException {"},{"lineNumber":190,"author":{"gitId":"lll-jy"},"content":"        if (atTime \u003d\u003d null) {"},{"lineNumber":191,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.DONE_UNFIXED_EVENT_EXCEPTION);"},{"lineNumber":192,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":193,"author":{"gitId":"lll-jy"},"content":"            markAsDone(atTime.toLocalDate());"},{"lineNumber":194,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":197,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":198,"author":{"gitId":"lll-jy"},"content":"    public String outputToFile() {"},{"lineNumber":199,"author":{"gitId":"lll-jy"},"content":"        if (atTime !\u003d null) {"},{"lineNumber":200,"author":{"gitId":"lll-jy"},"content":"            return \"E\" + super.outputToFile() + Storage.SPLITTER"},{"lineNumber":201,"author":{"gitId":"lll-jy"},"content":"                    + atTime.format(Parser.DATE_TIME_INPUT_FORMAT) + Storage.SPLITTER"},{"lineNumber":202,"author":{"gitId":"lll-jy"},"content":"                    + repeat + lastDoneMessage() + \"\\n\";"},{"lineNumber":203,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":204,"author":{"gitId":"lll-jy"},"content":"            return \"E\" + super.outputToFile() + Storage.SPLITTER + tentativeSlotsStr + \"\\n\";"},{"lineNumber":205,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":208,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":209,"author":{"gitId":"lll-jy"},"content":"    public String toString() {"},{"lineNumber":210,"author":{"gitId":"lll-jy"},"content":"        if (atTime !\u003d null) {"},{"lineNumber":211,"author":{"gitId":"lll-jy"},"content":"            return \"[E]\" + super.toString() + \" (at: \""},{"lineNumber":212,"author":{"gitId":"lll-jy"},"content":"                    + atTime.format(Parser.DATE_TIME_OUTPUT_FORMAT) + repeatMessage() + \")\";"},{"lineNumber":213,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":214,"author":{"gitId":"lll-jy"},"content":"            return \"[E]\" + super.toString() + \" (at: \" + tentativeSlotsStr + \")\";"},{"lineNumber":215,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":218,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":219,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the given object equals this Event task."},{"lineNumber":220,"author":{"gitId":"lll-jy"},"content":"     * @param obj the given object to compare"},{"lineNumber":221,"author":{"gitId":"lll-jy"},"content":"     * @return true if the object is an Event and both the description and atTime equals"},{"lineNumber":222,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":223,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":224,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":225,"author":{"gitId":"lll-jy"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":226,"author":{"gitId":"lll-jy"},"content":"            return true;"},{"lineNumber":227,"author":{"gitId":"lll-jy"},"content":"        } else if (obj instanceof Event) {"},{"lineNumber":228,"author":{"gitId":"lll-jy"},"content":"            Event o \u003d (Event) obj;"},{"lineNumber":229,"author":{"gitId":"lll-jy"},"content":"            return description.equals(o.description) \u0026\u0026 atTime.isEqual(o.atTime);"},{"lineNumber":230,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":231,"author":{"gitId":"lll-jy"},"content":"            return false;"},{"lineNumber":232,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":233,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":234}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.command.InvalidCommandException;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":" * Represents a task that has a designated description and a state of whether it has been done."},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"public abstract class Task {"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"    protected String description;"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"    protected boolean isDone;"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"     * Creates a task and sets it as not done."},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"     * @param description the description of the task"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    public Task(String description) {"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"     * Gets the status icon for this task."},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"     * @return cross if not done and tick if done"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"    private String getStatusIcon() {"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"     * Marks this task as done."},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the task is already done"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"    public void markAsDone() throws InvalidCommandException {"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"        if (isDone) {"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(\"The task \" + this + \" has already been done.\");"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"        isDone \u003d true;"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"     * Gets the string to write in the storage file."},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"     * @return the string to write in the storage file"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"    public String outputToFile() {"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"        int done \u003d isDone ? 1 : 0;"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"        return Storage.SPLITTER + done + Storage.SPLITTER + description;"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the task happens on a designated date."},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"     * @param date the given date"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"     * @return true if the task happens on the given date, ToDo does not happen on any date, so always false"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningOn(LocalDate date) {"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"        return false;"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the task happens today."},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"     * @return true if the task happens today, ToDo does not happen on any date, so always false"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningToday() {"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"        return false;"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the task happens before a designated date."},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"     * @param date the given date"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"     * @return true if the task happens before the given date, ToDo does not happen on any date, so always false"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"    public boolean hasHappenedBefore(LocalDate date) {"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"        return false;"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the task happens before today."},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"     * @return true if the task happens before today, ToDo does not happen on any date, so always false"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"    public boolean hasHappenedBeforeToday() {"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"        return false;"},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the task happens after a designated date."},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"     * @param date the given date"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"     * @return true if the task happens after the given date, ToDo does not happen on any date, so always false"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningAfter(LocalDate date) {"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"        return false;"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the task happens after today."},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":"     * @return true if the task happens after today, ToDo does not happen on any date, so always false"},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningAfterToday() {"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"        return false;"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the task happens before the two given designated date."},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":"     * @param date1 the starting date for the period"},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":"     * @param date2 the ending date for the period"},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"     * @return true if the task happens before the two dates (inclusive), ToDo does not happen on any date, so always"},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":"     * false"},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":"    public boolean isHappeningBetween(LocalDate date1, LocalDate date2) {"},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":"        return false;"},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"     * Check whether the task happens within the given days counting from today."},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":"     * @param n the number of days to construct the period, 1 for tomorrow"},{"lineNumber":117,"author":{"gitId":"lll-jy"},"content":"     * @return true if the task happens within n days (inclusive), ToDo does not happen on any date, so always false"},{"lineNumber":118,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"lll-jy"},"content":"    public boolean willHappenInDays(int n) {"},{"lineNumber":120,"author":{"gitId":"lll-jy"},"content":"        return false;"},{"lineNumber":121,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":123,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the task description contains a designated substring"},{"lineNumber":125,"author":{"gitId":"lll-jy"},"content":"     * @param s the substring to find"},{"lineNumber":126,"author":{"gitId":"lll-jy"},"content":"     * @return true if s is found in the task description"},{"lineNumber":127,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"lll-jy"},"content":"    public boolean finds(String s) {"},{"lineNumber":129,"author":{"gitId":"lll-jy"},"content":"        return description.contains(s);"},{"lineNumber":130,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":132,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"lll-jy"},"content":"    public String toString() {"},{"lineNumber":134,"author":{"gitId":"lll-jy"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":135,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":136}},{"path":"src/main/java/duke/task/TimedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import duke.command.InvalidCommandException;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"public abstract class TimedTask extends Task {"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"    protected int repeat;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"    protected LocalDate lastDone;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"     * Creates a TimedTask with the given description and initialize the repeat period to be 0 days, i.e. not repeat."},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"     * @param description"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    public TimedTask(String description) {"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"        repeat \u003d 0;"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"        lastDone \u003d null;"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"     * Snoozes the task to a designated new time."},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"     * @param input the input command split by space"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"     * @return the output notice string of the snooze command"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the input format, or the task index and the time is invalid"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"    public abstract String snoozeTo(String[] input) throws InvalidCommandException;"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"     * Sets the task to repeat regularly."},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"     * @param n the number of days to repeat"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"     * @return the output notice string of the repeat command"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the task does not have a fixed time yet"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"    public abstract String repeat(int n) throws InvalidCommandException;"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"    protected String repeatMessage() {"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"        if (repeat \u003d\u003d 0) {"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"            return \"\";"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"            return String.format(\" repeat every %d days\", repeat);"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"    protected String lastDoneMessage() {"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"        if (isDone) {"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"            return Storage.SPLITTER + lastDone;"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"            return \"\";"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"    protected boolean isHappeningOn(LocalDate date, LocalDate taskDate) {"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"        if (repeat \u003d\u003d 0) {"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"            return date.isEqual(taskDate);"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"            LocalDate datePointer \u003d taskDate;"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"            boolean found \u003d datePointer.isEqual(date);"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"            while (!found \u0026\u0026 datePointer.isBefore(date)) {"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"                datePointer \u003d datePointer.plusDays(repeat);"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"                found \u003d datePointer.isEqual(date);"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"            return found;"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"    protected boolean isHappeningBetween(LocalDate date1, LocalDate date2, LocalDate taskDate) {"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"        if (repeat \u003d\u003d 0) {"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"            return !taskDate.isAfter(date2) \u0026\u0026 !taskDate.isBefore(date1);"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"        } else if (taskDate.isAfter(date2)) {"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"            return false;"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"            LocalDate datePointer \u003d taskDate;"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"            while (datePointer.isBefore(date1)) {"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"                datePointer \u003d datePointer.plusDays(repeat);"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"            return datePointer.isBefore(date2);"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"    protected void markAsDone(LocalDate initial) throws InvalidCommandException {"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"        if (repeat \u003d\u003d 0) {"},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"            super.markAsDone();"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"            lastDone \u003d LocalDate.now();"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"        } else if (!isDone) {"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"            isDone \u003d true;"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"            lastDone \u003d initial;"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"            lastDone \u003d lastDone.plusDays(repeat);"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":93}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import duke.command.InvalidCommandException;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":" * Represents a todo task that contains a description."},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"public class ToDo extends Task {"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"     * Creates a ToDo task."},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"     * @param description the description of the task"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"    public ToDo(String description) {"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"     * Creates a todo task using the resource file."},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"     * @param taskInfo the full line of the task"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"     * @throws InvalidCommandException if the resource file format is invalid"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    public ToDo(String[] taskInfo) throws InvalidCommandException {"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"        super(\"\");"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"        assert taskInfo[0].equals(\"T\") : \"Wrong read of file\";"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"        if (taskInfo.length !\u003d 3) {"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.INVALID_FILE_EXCEPTION);"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"            isDone \u003d Integer.parseInt(taskInfo[1]) \u003d\u003d 1;"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"            description \u003d taskInfo[2];"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"            throw new InvalidCommandException(Parser.INVALID_FILE_EXCEPTION);"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"    public String outputToFile() {"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"        return \"T\" + super.outputToFile() + \"\\n\";"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"     * Checks whether the given object equals this ToDo task."},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"     * @param obj the given object to compare"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"     * @return true if the object is a ToDo and the description equals"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"            return true;"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"        } else if (obj instanceof ToDo) {"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"            ToDo o \u003d (ToDo) obj;"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"            return description.equals(o.description);"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"        } else {"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"            return false;"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":63}},{"path":"src/main/resources/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"T \u0026\u0026\u0026 0 \u0026\u0026\u0026 borrow books"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":"D \u0026\u0026\u0026 1 \u0026\u0026\u0026 cs2102 tutorial 1 \u0026\u0026\u0026 2020-09-04 \u0026\u0026\u0026 1 \u0026\u0026\u0026 2020-09-06"},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"T \u0026\u0026\u0026 1 \u0026\u0026\u0026 return books"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"D \u0026\u0026\u0026 0 \u0026\u0026\u0026 cs2101 email \u0026\u0026\u0026 2020-09-14 \u0026\u0026\u0026 0"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"E \u0026\u0026\u0026 0 \u0026\u0026\u0026 cs2103 project meeting \u0026\u0026\u0026 2020-09-30 12:00/2020-10-01 12:00"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"E \u0026\u0026\u0026 1 \u0026\u0026\u0026 cs2102 project meeting \u0026\u0026\u0026 2020-10-01 19:00 \u0026\u0026\u0026 3 \u0026\u0026\u0026 2020-10-07"}],"authorContributionMap":{"lll-jy":6}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"\u003c?import javafx.scene.shape.Polygon?\u003e"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"        \u003cPolygon fx:id\u003d\"triangle\" /\u003e"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"        \u003cLabel minWidth\u003d\"10.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    \u003c/children\u003e"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    \u003cpadding\u003e"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    \u003c/padding\u003e"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"lll-jy":19}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"317.0\" AnchorPane.bottomAnchor\u003d\"1.0\" style\u003d\"-fx-border-radius: 30 30 30 30;\" /\u003e"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"lll-jy":19}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"    public void dummyTest() {"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"        assertEquals(2, 2);"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":12}},{"path":"src/test/java/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import duke.component.CliUi;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"import duke.component.StorageStub;"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"import duke.task.ToDo;"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"public class AddCommandTest {"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    public void isExit_alwaysFalse() {"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new AddCommand(\"anything\").isExit());"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new AddCommand(\"todo anything\").isExit());"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new AddCommand(\"event anything\").isExit());"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new AddCommand(\"deadline anything\").isExit());"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"    public void executeExceptionHelper(String s, CliUi ui, TaskList list, Storage storage) {"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"        AddCommand a \u003d new AddCommand(s);"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"            a.execute(ui, list, storage);"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"            try {"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"                Parser.parseAddTask(s);"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"                fail();"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"            } catch (Exception e2) {"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"                assertEquals(e2.getMessage(), e.getMessage());"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"    public void execute_invalidCommand_throwException() {"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"        list.add(new ToDo(\"hello\"));"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"bash\", ui, list, storage);"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"done\", ui, list, storage);"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"delete\", ui, list, storage);"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"happen\", ui, list, storage);"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"todo\", ui, list, storage);"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"deadline do something\", ui, list, storage);"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"event meeting /at\", ui, list, storage);"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"event meeting /at 2020-08-09\", ui, list, storage);"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"    public void execute_validCommand_addTask() {"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"        Task task \u003d new ToDo(\"hello\");"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"        Task task2 \u003d new ToDo(\"world\");"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"            String res \u003d new AddCommand(\"todo hello\").execute(ui, list, storage);"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"Got it. I\u0027ve added this task:\\n\" + task"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"                    + \"\\nNow you have 1 task in the list.\", res);"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"            String res2 \u003d new AddCommand(\"todo world\").execute(ui, list, storage);"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"Got it. I\u0027ve added this task:\\n\" + task2"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"                    + \"\\nNow you have 2 tasks in the list.\", res2);"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":78}},{"path":"src/test/java/duke/command/ByeCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"public class ByeCommandTest {"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"    public void isExit_alwaysTrue() {"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"        ByeCommand b \u003d new ByeCommand(\"bye\");"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"        assertTrue(b.isExit());"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":13}},{"path":"src/test/java/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import duke.component.CliUi;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"import duke.component.StorageStub;"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"import duke.task.ToDo;"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"public class DeleteCommandTest {"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    public void isExit_alwaysFalse() {"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new DeleteCommand(\"delete \").isExit());"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new DeleteCommand(\"delete 3\").isExit());"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new DeleteCommand(\"delete 0\").isExit());"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new DeleteCommand(\"delete -3\").isExit());"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new DeleteCommand(\"delete anything\").isExit());"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    public void executeExceptionHelper(String s, CliUi ui, TaskList list, Storage storage) {"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"        DeleteCommand a \u003d new DeleteCommand(s);"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"            a.execute(ui, list, storage);"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"            try {"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"                Parser.getDeleteTaskIndex(s, 1);"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"                fail();"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"            } catch (Exception e2) {"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"                assertEquals(e2.getMessage(), e.getMessage());"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"    public void execute_invalidCommand_throwException() {"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"        list.add(new ToDo(\"hello\"));"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"delete 0\", ui, list, storage);"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"delete -3\", ui, list, storage);"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"delete 5\", ui, list, storage);"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"delete anything\", ui, list, storage);"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"delete 3 5\", ui, list, storage);"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"delete \", ui, list, storage);"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"    public void execute_validCommand_deleteTask() {"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"        Task task1 \u003d new ToDo(\"hello\");"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"        Task task2 \u003d new ToDo(\"world\");"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"        Task task3 \u003d new ToDo(\"test\");"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"        list.add(task1);"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"        list.add(task2);"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"        list.add(task3);"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"Noted. I\u0027ve removed this task:\\n\" + task1"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"                    + \"\\nNow you have 2 tasks.\", new DeleteCommand(\"delete 1\").execute(ui, list, storage));"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"Noted. I\u0027ve removed this task:\\n\" + task3"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"                    + \"\\nNow you have 1 task.\", new DeleteCommand(\"delete 2\").execute(ui, list, storage));"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"Noted. I\u0027ve removed this task:\\n\" + task2"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"                    + \"\\nNow you have 0 task.\", new DeleteCommand(\"delete 1\").execute(ui, list, storage));"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":80}},{"path":"src/test/java/duke/command/DoneCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import duke.component.CliUi;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import duke.component.Parser;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"import duke.component.StorageStub;"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"import duke.task.ToDo;"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"public class DoneCommandTest {"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"    public void isExit_alwaysFalse() {"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new DoneCommand(\"done \").isExit());"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new DoneCommand(\"done 3\").isExit());"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new DoneCommand(\"done 0\").isExit());"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new DoneCommand(\"done -3\").isExit());"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new DoneCommand(\"done anything\").isExit());"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"    public void executeExceptionHelper(String s, CliUi ui, TaskList list, Storage storage) {"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"        DoneCommand a \u003d new DoneCommand(s);"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"            a.execute(ui, list, storage);"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"            try {"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"                Parser.getDoneTaskIndex(s, 1);"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"                fail();"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"            } catch (Exception e2) {"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"                assertEquals(e2.getMessage(), e.getMessage());"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"    public void execute_invalidCommand_throwException() {"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"        Task task \u003d new ToDo(\"hello\");"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"        list.add(task);"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"done 0\", ui, list, storage);"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"done -3\", ui, list, storage);"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"done 5\", ui, list, storage);"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"done anything\", ui, list, storage);"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"done 3 5\", ui, list, storage);"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"        executeExceptionHelper(\"done \", ui, list, storage);"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"    public void execute_markDoneAsDone_throwException() {"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"        Task task \u003d new ToDo(\"hello\");"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"        list.add(task);"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"            task.markAsDone();"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"            String res \u003d new DoneCommand(\"done 1\").execute(ui, list, storage);"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task \" + task + \" has already been done.\", e.getMessage());"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"    public void execute_validCommand_doneTask() {"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"        Task task1 \u003d new ToDo(\"hello\");"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"        list.add(task1);"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"            String res \u003d new DoneCommand(\"done 1\").execute(ui, list, storage);"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"Nice! I\u0027ve marked this task as done:\\n\" + task1, res);"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":94}},{"path":"src/test/java/duke/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import duke.component.CliUi;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import duke.component.StorageStub;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"import duke.task.ToDo;"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"public class FindCommandTest {"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"    public void isExit_alwaysFalse() {"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new FindCommand(\"find this\").isExit());"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new FindCommand(\"find \").isExit());"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    public void execute_emptyString_findsAll() {"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"        Task task \u003d new ToDo(\"hello\");"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"        Task task2 \u003d new ToDo(\"world\");"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"        list.add(task);"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"        list.add(task2);"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"        assertEquals(\"containing \u0027\u0027 2\", new FindCommand(\"find \").execute(ui, list, storage));"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"    public void execute_anyString_findsMatches() {"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"        Task task \u003d new ToDo(\"hello\");"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"        Task task2 \u003d new ToDo(\"world\");"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        list.add(task);"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"        list.add(task2);"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"        assertEquals(\"containing \u0027o\u0027 2\", new FindCommand(\"find o\").execute(ui, list, storage));"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"        assertEquals(\"containing \u0027ll\u0027 1\", new FindCommand(\"find ll\").execute(ui, list, storage));"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"        assertEquals(\"containing \u0027s\u0027 0\", new FindCommand(\"find s\").execute(ui, list, storage));"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":47}},{"path":"src/test/java/duke/command/HappenCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"import duke.component.CliUi;"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"import duke.component.Storage;"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"import duke.component.StorageStub;"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"import duke.component.TaskList;"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"import duke.task.Deadline;"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"import duke.task.Event;"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"public class HappenCommandTest {"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"    public void isExit_alwaysFalse() {"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new HappenCommand(\"happen on today\").isExit());"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    public void unrecognizedCommandHelper(String s, CliUi ui, TaskList list, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"            new HappenCommand(s).execute(ui, list, storage);"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Invalid happen command input.\", e.getMessage());"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"    public void execute_unrecognizedCommand_throwException() {"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"        unrecognizedCommandHelper(\"happen \", ui, list, storage);"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        unrecognizedCommandHelper(\"happen anything\", ui, list, storage);"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"        unrecognizedCommandHelper(\"happen onward\", ui, list, storage);"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"        unrecognizedCommandHelper(\"happen on 1 2 3\", ui, list, storage);"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"        unrecognizedCommandHelper(\"happen after 1 2\", ui, list, storage);"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"        unrecognizedCommandHelper(\"happen in 3 months\", ui, list, storage);"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"        unrecognizedCommandHelper(\"happen between a b c\", ui, list, storage);"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"        unrecognizedCommandHelper(\"happen between a\", ui, list, storage);"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"    public void invalidDateFormatHelper(String s, CliUi ui, TaskList list, Storage storage) {"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"            new HappenCommand(s).execute(ui, list, storage);"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Invalid date format. Please use yyyy-MM-dd.\", e.getMessage());"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"    public void execute_invalidDateFormat_throwException() {"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"        invalidDateFormatHelper(\"happen on 2020\", ui, list, storage);"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"        invalidDateFormatHelper(\"happen on tomorrow\", ui, list, storage);"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"        invalidDateFormatHelper(\"happen before tomorrow\", ui, list, storage);"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"        invalidDateFormatHelper(\"happen between 2020-08-09 2020/09/01\", ui, list, storage);"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"    public void execute_nonPositiveInDays_throwException() {"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"            new HappenCommand(\"happen in 0 days\").execute(ui, list, storage);"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Number of days should be a positive integer.\", e.getMessage());"},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"            new HappenCommand(\"happen in -3 days\").execute(ui, list, storage);"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Number of days should be a positive integer.\", e.getMessage());"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":"    public void execute_invalidBetween_throwException() {"},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"            new HappenCommand(\"happen between 2020-09-01 2020-08-01\").execute(ui, list, storage);"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Latter date is before former date for happen between.\", e.getMessage());"},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"    public void execute_validCommand_showList() {"},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":"        CliUi ui \u003d new CliUi();"},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":"        Storage storage \u003d new StorageStub();"},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":"        TaskList list \u003d storage.getList();"},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":"            LocalDate today \u003d LocalDate.now();"},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":"            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":"            LocalDate later \u003d LocalDate.now().plusDays(2);"},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"            String lt \u003d later.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":"            list.add(new Deadline(\"assignment 1\", \"2021-09-01\"));"},{"lineNumber":117,"author":{"gitId":"lll-jy"},"content":"            list.add(new Deadline(\"assignment 2\", \"2021-09-02\"));"},{"lineNumber":118,"author":{"gitId":"lll-jy"},"content":"            list.add(new Deadline(\"assignemnt 3\", \"2019-09-01\"));"},{"lineNumber":119,"author":{"gitId":"lll-jy"},"content":"            list.add(new Deadline(\"today assign 1\", td));"},{"lineNumber":120,"author":{"gitId":"lll-jy"},"content":"            list.add(new Deadline(\"today assign 2\", td));"},{"lineNumber":121,"author":{"gitId":"lll-jy"},"content":"            list.add(new Deadline(\"in 2 days\", lt));"},{"lineNumber":122,"author":{"gitId":"lll-jy"},"content":"            list.add(new Event(\"meeting 1\", \"2021-09-01 11:00\"));"},{"lineNumber":123,"author":{"gitId":"lll-jy"},"content":"            list.add(new Event(\"meeting 2\", \"2021-09-01 19:00\"));"},{"lineNumber":124,"author":{"gitId":"lll-jy"},"content":"            list.add(new Event(\"today meeting 1\", td + \" 12:00\"));"},{"lineNumber":125,"author":{"gitId":"lll-jy"},"content":"            list.add(new Event(\"later meeting\", lt + \" 13:00\"));"},{"lineNumber":126,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":127,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"happening on today 3\","},{"lineNumber":128,"author":{"gitId":"lll-jy"},"content":"                    new HappenCommand(\"happen on today\").execute(ui, list, storage));"},{"lineNumber":129,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"happening on Sep 1 2021 3\","},{"lineNumber":130,"author":{"gitId":"lll-jy"},"content":"                    new HappenCommand(\"happen on 2021-09-01\").execute(ui, list, storage));"},{"lineNumber":131,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"happening on Aug 31 2019 0\","},{"lineNumber":132,"author":{"gitId":"lll-jy"},"content":"                    new HappenCommand(\"happen on 2019-08-31\").execute(ui, list, storage));"},{"lineNumber":133,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"happening before today 1\","},{"lineNumber":134,"author":{"gitId":"lll-jy"},"content":"                    new HappenCommand(\"happen before today\").execute(ui, list, storage));"},{"lineNumber":135,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"happening before Jan 1 2020 1\","},{"lineNumber":136,"author":{"gitId":"lll-jy"},"content":"                    new HappenCommand(\"happen before 2020-01-01\").execute(ui, list, storage));"},{"lineNumber":137,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"happening before Jan 1 2018 0\","},{"lineNumber":138,"author":{"gitId":"lll-jy"},"content":"                    new HappenCommand(\"happen before 2018-01-01\").execute(ui, list, storage));"},{"lineNumber":139,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"happening after today 6\","},{"lineNumber":140,"author":{"gitId":"lll-jy"},"content":"                    new HappenCommand(\"happen after today\").execute(ui, list, storage));"},{"lineNumber":141,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"happening after Jan 1 2021 4\","},{"lineNumber":142,"author":{"gitId":"lll-jy"},"content":"                    new HappenCommand(\"happen after 2021-01-01\").execute(ui, list, storage));"},{"lineNumber":143,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"happening in 1 days 3\","},{"lineNumber":144,"author":{"gitId":"lll-jy"},"content":"                    new HappenCommand(\"happen in 1 days\").execute(ui, list, storage));"},{"lineNumber":145,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"happening in 2 days 5\","},{"lineNumber":146,"author":{"gitId":"lll-jy"},"content":"                    new HappenCommand(\"happen in 2 days\").execute(ui, list, storage));"},{"lineNumber":147,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"happening in 4 days 5\","},{"lineNumber":148,"author":{"gitId":"lll-jy"},"content":"                    new HappenCommand(\"happen in 4 days\").execute(ui, list, storage));"},{"lineNumber":149,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"happening between Aug 31 2021 and Sep 30 2021  4\","},{"lineNumber":150,"author":{"gitId":"lll-jy"},"content":"                    new HappenCommand(\"happen between 2021-08-31 2021-09-30\").execute(ui, list, storage));"},{"lineNumber":151,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"happening between Sep 1 2021 and Sep 2 2021  4\","},{"lineNumber":152,"author":{"gitId":"lll-jy"},"content":"                    new HappenCommand(\"happen between 2021-09-01 2021-09-02\").execute(ui, list, storage));"},{"lineNumber":153,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":154,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":155,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":157}},{"path":"src/test/java/duke/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"public class ListCommandTest {"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"    public void isExit_alwaysFalse() {"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"        assertFalse(new ListCommand(\"list\").isExit());"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":12}},{"path":"src/test/java/duke/component/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import duke.command.AddCommand;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import duke.command.ByeCommand;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import duke.command.DoneCommand;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"import duke.command.FindCommand;"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"import duke.command.HappenCommand;"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"import duke.command.ListCommand;"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"import duke.task.Deadline;"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"import duke.task.Event;"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"import duke.task.Task;"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"import duke.task.ToDo;"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"public class ParserTest {"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    public void isValidDone_emptyInput_throwException() {"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"            Parser.getDoneTaskIndex(\"done \", 5);"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task to mark as done cannot be empty.\", e.getMessage());"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"    public void isValidDone_nonIntegerInput_throwException() {"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"            Parser.getDoneTaskIndex(\"done anything\", 4);"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task index should be a number.\", e.getMessage());"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"            Parser.getDoneTaskIndex(\"done 1.3\", 4);"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task index should be a number.\", e.getMessage());"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"    public void isValidDone_nonPositiveInput_throwException() {"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"            Parser.getDoneTaskIndex(\"done 0\", 5);"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task index should be a positive integer.\", e.getMessage());"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"            Parser.getDoneTaskIndex(\"done -3\", 5);"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task index should be a positive integer.\", e.getMessage());"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"    public void isValidDone_exceedLimit_throwException() {"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"            Parser.getDoneTaskIndex(\"done 8\", 5);"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task index does not exist.\", e.getMessage());"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"    public void isValidDone_validInput_indexOutput() {"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"            assertEquals(3, Parser.getDoneTaskIndex(\"done 3\", 5));"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"            assertEquals(5, Parser.getDoneTaskIndex(\"done 5\", 5));"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"    public void isValidDelete_emptyInput_throwException() {"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"            Parser.getDeleteTaskIndex(\"delete \", 5);"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task to mark to delete cannot be empty.\", e.getMessage());"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":"    public void isValidDelete_nonIntegerInput_throwException() {"},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"            Parser.getDeleteTaskIndex(\"delete anything\", 4);"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task index should be a number.\", e.getMessage());"},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":"            Parser.getDeleteTaskIndex(\"delete 1.3\", 4);"},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task index should be a number.\", e.getMessage());"},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":"    public void isValidDelete_nonPositiveInput_throwException() {"},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":"            Parser.getDeleteTaskIndex(\"delete 0\", 5);"},{"lineNumber":117,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":118,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":119,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task index should be a positive integer.\", e.getMessage());"},{"lineNumber":120,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":122,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":123,"author":{"gitId":"lll-jy"},"content":"            Parser.getDeleteTaskIndex(\"delete -3\", 5);"},{"lineNumber":124,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":125,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":126,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task index should be a positive integer.\", e.getMessage());"},{"lineNumber":127,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":130,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"lll-jy"},"content":"    public void isValidDelete_exceedLimit_throwException() {"},{"lineNumber":132,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":133,"author":{"gitId":"lll-jy"},"content":"            Parser.getDeleteTaskIndex(\"delete 8\", 5);"},{"lineNumber":134,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":135,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":136,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task index does not exist.\", e.getMessage());"},{"lineNumber":137,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":140,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"lll-jy"},"content":"    public void isValidDelete_validInput_indexOutput() {"},{"lineNumber":142,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":143,"author":{"gitId":"lll-jy"},"content":"            assertEquals(3, Parser.getDeleteTaskIndex(\"delete 3\", 5));"},{"lineNumber":144,"author":{"gitId":"lll-jy"},"content":"            assertEquals(5, Parser.getDeleteTaskIndex(\"delete 5\", 5));"},{"lineNumber":145,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":146,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":147,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":150,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":151,"author":{"gitId":"lll-jy"},"content":"    public void generate_nonTaskInput_throwException() {"},{"lineNumber":152,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":153,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"anything\");"},{"lineNumber":154,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":155,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":156,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"},{"lineNumber":157,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":160,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"lll-jy"},"content":"    public void generate_emptyDescription_throwException() {"},{"lineNumber":162,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":163,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"todo\");"},{"lineNumber":164,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":165,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":166,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The description of a task cannot be empty.\", e.getMessage());"},{"lineNumber":167,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":169,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":170,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"todo \");"},{"lineNumber":171,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":172,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":173,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The description of a task cannot be empty.\", e.getMessage());"},{"lineNumber":174,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":176,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":177,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"deadline\");"},{"lineNumber":178,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":179,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":180,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The description of a task cannot be empty.\", e.getMessage());"},{"lineNumber":181,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":183,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":184,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"deadline \");"},{"lineNumber":185,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":186,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":187,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The description of a task cannot be empty.\", e.getMessage());"},{"lineNumber":188,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":190,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":191,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"event\");"},{"lineNumber":192,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":193,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":194,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The description of a task cannot be empty.\", e.getMessage());"},{"lineNumber":195,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":197,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":198,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"event \");"},{"lineNumber":199,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":200,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":201,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The description of a task cannot be empty.\", e.getMessage());"},{"lineNumber":202,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":205,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":206,"author":{"gitId":"lll-jy"},"content":"    public void generate_noSpace_throwExceptionWithTip() {"},{"lineNumber":207,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":208,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"todothings\");"},{"lineNumber":209,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":210,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":211,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Do you mean \u0027todo things\u0027?\", e.getMessage());"},{"lineNumber":212,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":214,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":215,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"deadlinethings\");"},{"lineNumber":216,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":217,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":218,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Do you mean \u0027deadline things\u0027?\", e.getMessage());"},{"lineNumber":219,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":221,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":222,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"eventthings\");"},{"lineNumber":223,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":224,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":225,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Do you mean \u0027event things\u0027?\", e.getMessage());"},{"lineNumber":226,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":229,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":230,"author":{"gitId":"lll-jy"},"content":"    public void generate_noTimeIndicator_throwException() {"},{"lineNumber":231,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":232,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"deadline things\");"},{"lineNumber":233,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":234,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":235,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Time should be specified.\", e.getMessage());"},{"lineNumber":236,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":237,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":238,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":239,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"event things\");"},{"lineNumber":240,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":241,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":242,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Time should be specified.\", e.getMessage());"},{"lineNumber":243,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":244,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":246,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":247,"author":{"gitId":"lll-jy"},"content":"    public void generate_noTimeSpecification_throwException() {"},{"lineNumber":248,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":249,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"deadline things /by\");"},{"lineNumber":250,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":251,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":252,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The time specification cannot be empty.\", e.getMessage());"},{"lineNumber":253,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":254,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":255,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":256,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"event things /at\");"},{"lineNumber":257,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":258,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":259,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The time specification cannot be empty.\", e.getMessage());"},{"lineNumber":260,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":261,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":263,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":264,"author":{"gitId":"lll-jy"},"content":"    public void generate_invalidDateFormat_throwException() {"},{"lineNumber":265,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":266,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"deadline assignment /by 2020/08/31\");"},{"lineNumber":267,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":268,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":269,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Invalid date format. Please use yyyy-MM-dd.\", e.getMessage());"},{"lineNumber":270,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":271,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":272,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":273,"author":{"gitId":"lll-jy"},"content":"            Parser.parseAddTask(\"event assignment /at 2020-08-01\");"},{"lineNumber":274,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":275,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":276,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Invalid input datetime, please input as yyyy-MM-dd HH:mm.\", e.getMessage());"},{"lineNumber":277,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":278,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":279,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":280,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":281,"author":{"gitId":"lll-jy"},"content":"    public void generate_validInput_validTask() {"},{"lineNumber":282,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":283,"author":{"gitId":"lll-jy"},"content":"            Task t \u003d Parser.parseAddTask(\"todo task\");"},{"lineNumber":284,"author":{"gitId":"lll-jy"},"content":"            Task t2 \u003d new ToDo(\"task\");"},{"lineNumber":285,"author":{"gitId":"lll-jy"},"content":"            assertEquals(t2, t);"},{"lineNumber":286,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":287,"author":{"gitId":"lll-jy"},"content":"            Task d \u003d Parser.parseAddTask(\"deadline assignment /by 2020-08-31\");"},{"lineNumber":288,"author":{"gitId":"lll-jy"},"content":"            Task d2 \u003d new Deadline(\"assignment\", \"2020-08-31\");"},{"lineNumber":289,"author":{"gitId":"lll-jy"},"content":"            assertEquals(d2, d);"},{"lineNumber":290,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":291,"author":{"gitId":"lll-jy"},"content":"            Task e \u003d Parser.parseAddTask(\"event meeting /at 2020-09-01 11:00\");"},{"lineNumber":292,"author":{"gitId":"lll-jy"},"content":"            Task e2 \u003d new Event(\"meeting\", \"2020-09-01 11:00\");"},{"lineNumber":293,"author":{"gitId":"lll-jy"},"content":"            assertEquals(e2, e);"},{"lineNumber":294,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":295,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":296,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":297,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":298,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":299,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":300,"author":{"gitId":"lll-jy"},"content":"    public void parse_byeCommand_byeCommand() {"},{"lineNumber":301,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new ByeCommand(\"bye\"), Parser.parse(\"bye\"));"},{"lineNumber":302,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":303,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":304,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":305,"author":{"gitId":"lll-jy"},"content":"    public void parse_listCommand_listCommand() {"},{"lineNumber":306,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new ListCommand(\"list\"), Parser.parse(\"list\"));"},{"lineNumber":307,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":308,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":309,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":310,"author":{"gitId":"lll-jy"},"content":"    public void parse_deleteCommand_deleteCommand() {"},{"lineNumber":311,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new DeleteCommand(\"delete 3\"), Parser.parse(\"delete 3\"));"},{"lineNumber":312,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new DeleteCommand(\"delete 0\"), Parser.parse(\"delete 0\"));"},{"lineNumber":313,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new DeleteCommand(\"delete -3\"), Parser.parse(\"delete -3\"));"},{"lineNumber":314,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new DeleteCommand(\"delete \"), Parser.parse(\"delete \"));"},{"lineNumber":315,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new DeleteCommand(\"delete //\"), Parser.parse(\"delete //\"));"},{"lineNumber":316,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":317,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":318,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":319,"author":{"gitId":"lll-jy"},"content":"    public void parse_doneCommand_doneCommand() {"},{"lineNumber":320,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new DoneCommand(\"done 3\"), Parser.parse(\"done 3\"));"},{"lineNumber":321,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new DoneCommand(\"done 0\"), Parser.parse(\"done 0\"));"},{"lineNumber":322,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new DoneCommand(\"done -3\"), Parser.parse(\"done -3\"));"},{"lineNumber":323,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new DoneCommand(\"done \"), Parser.parse(\"done \"));"},{"lineNumber":324,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new DoneCommand(\"done //\"), Parser.parse(\"done //\"));"},{"lineNumber":325,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":326,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":327,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":328,"author":{"gitId":"lll-jy"},"content":"    public void parse_happenCommand_happenCommand() {"},{"lineNumber":329,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new HappenCommand(\"happen on 2020-08-31\"), Parser.parse(\"happen on 2020-08-31\"));"},{"lineNumber":330,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new HappenCommand(\"happen \"), Parser.parse(\"happen \"));"},{"lineNumber":331,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":332,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":333,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":334,"author":{"gitId":"lll-jy"},"content":"    public void parse_findCommand_findCommand() {"},{"lineNumber":335,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new FindCommand(\"find books\"), Parser.parse(\"find books\"));"},{"lineNumber":336,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":337,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":338,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":339,"author":{"gitId":"lll-jy"},"content":"    public void parse_taskCommand_addCommand() {"},{"lineNumber":340,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new AddCommand(\"todo homework\"), Parser.parse(\"todo homework\"));"},{"lineNumber":341,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new AddCommand(\"event anything\"), Parser.parse(\"event anything\"));"},{"lineNumber":342,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":343,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":344,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":345,"author":{"gitId":"lll-jy"},"content":"    public void parse_unrecognizedCommand_addCommand() {"},{"lineNumber":346,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new AddCommand(\"bash\"), Parser.parse(\"bash\"));"},{"lineNumber":347,"author":{"gitId":"lll-jy"},"content":"        assertEquals(new AddCommand(\"happen\"), Parser.parse(\"happen\"));"},{"lineNumber":348,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":349,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":349}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"public class DeadlineTest {"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    public void constructor_invalidInput_throwException() {"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020/09/01\");"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Invalid date format. Please use yyyy-MM-dd.\", e.getMessage());"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    public void isHappeningOn_date_isHappeningOnDate() {"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020-09-01\");"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"            assertTrue(d.isHappeningOn(LocalDate.parse(\"2020-09-01\")));"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"            assertFalse(d.isHappeningOn(LocalDate.parse(\"2020-09-04\")));"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"    public void isHappeningToday_isHappeningToday() {"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"            LocalDate today \u003d LocalDate.now();"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"            Deadline d1 \u003d new Deadline(\"Assignment 1\", td);"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"            assertTrue(d1.isHappeningToday());"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"            LocalDate newDate \u003d LocalDate.now().plusDays(2);"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"            String newStr \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"            Deadline d2 \u003d new Deadline(\"Assignment 1\", newStr);"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"            assertFalse(d2.isHappeningToday());"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"    public void hasHappenedBefore_date_hasHappenedBeforeDate() {"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020-09-01\");"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"            assertTrue(d.hasHappenedBefore(LocalDate.parse(\"2020-09-05\")));"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"            assertFalse(d.hasHappenedBefore(LocalDate.parse(\"2020-09-01\")));"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"            assertFalse(d.hasHappenedBefore(LocalDate.parse(\"2020-08-03\")));"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"    public void hasHappenedBeforeToday_hasHappenedBeforeToday() {"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"            LocalDate today \u003d LocalDate.now();"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"            Deadline d1 \u003d new Deadline(\"Assignment 1\", td);"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"            assertFalse(d1.hasHappenedBeforeToday());"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"            Deadline d2 \u003d new Deadline(\"Assignment 1\", \"2030-08-01\");"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"            assertFalse(d2.hasHappenedBeforeToday());"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"            Deadline d3 \u003d new Deadline(\"Assignment 1\", \"2020-08-01\");"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":"            assertTrue(d3.hasHappenedBeforeToday());"},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"    public void isHappeningAfter_date_isHappeningAfterDate() {"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020-09-01\");"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"            assertFalse(d.isHappeningAfter(LocalDate.parse(\"2020-09-05\")));"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"            assertTrue(d.isHappeningAfter(LocalDate.parse(\"2020-07-01\")));"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"            assertFalse(d.isHappeningAfter(LocalDate.parse(\"2020-09-01\")));"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"    public void isHappeningAfterToday_isHappeningAfterToday() {"},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"            LocalDate today \u003d LocalDate.now();"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"            Deadline d1 \u003d new Deadline(\"Assignment 1\", td);"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"            assertFalse(d1.isHappeningAfterToday());"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"            Deadline d2 \u003d new Deadline(\"Assignment 1\", \"2030-08-01\");"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":"            assertTrue(d2.isHappeningAfterToday());"},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":"            Deadline d3 \u003d new Deadline(\"Assignment 1\", \"2020-08-01\");"},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"            assertFalse(d3.isHappeningAfterToday());"},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":"    public void isHappeningBetween_dates_isHappeningBetweenDates() {"},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":"            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020-09-03\");"},{"lineNumber":117,"author":{"gitId":"lll-jy"},"content":"            assertFalse(d.isHappeningBetween(LocalDate.parse(\"2020-08-01\"), LocalDate.parse(\"2020-09-01\")));"},{"lineNumber":118,"author":{"gitId":"lll-jy"},"content":"            assertTrue(d.isHappeningBetween(LocalDate.parse(\"2020-09-01\"), LocalDate.parse(\"2020-09-04\")));"},{"lineNumber":119,"author":{"gitId":"lll-jy"},"content":"            assertTrue(d.isHappeningBetween(LocalDate.parse(\"2020-09-03\"), LocalDate.parse(\"2020-09-03\")));"},{"lineNumber":120,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":121,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":122,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":125,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":126,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"lll-jy"},"content":"    public void willHappenInDays_numberOfDays_willHappenInNDays() {"},{"lineNumber":128,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":129,"author":{"gitId":"lll-jy"},"content":"            LocalDate newDate \u003d LocalDate.now().plusDays(2);"},{"lineNumber":130,"author":{"gitId":"lll-jy"},"content":"            String newStr \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":131,"author":{"gitId":"lll-jy"},"content":"            Deadline d \u003d new Deadline(\"Assignment 1\", newStr);"},{"lineNumber":132,"author":{"gitId":"lll-jy"},"content":"            assertTrue(d.willHappenInDays(3));"},{"lineNumber":133,"author":{"gitId":"lll-jy"},"content":"            assertTrue(d.willHappenInDays(2));"},{"lineNumber":134,"author":{"gitId":"lll-jy"},"content":"            assertFalse(d.willHappenInDays(1));"},{"lineNumber":135,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":136,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":137,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":140,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"lll-jy"},"content":"    public void output_toWriteStorage() {"},{"lineNumber":142,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":143,"author":{"gitId":"lll-jy"},"content":"            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020-08-02\");"},{"lineNumber":144,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"D \u0026\u0026\u0026 0 \u0026\u0026\u0026 Assignment 1 \u0026\u0026\u0026 2020-08-02 \u0026\u0026\u0026 0\\n\", d.outputToFile());"},{"lineNumber":145,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":146,"author":{"gitId":"lll-jy"},"content":"            d.markAsDone();"},{"lineNumber":147,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"D \u0026\u0026\u0026 1 \u0026\u0026\u0026 Assignment 1 \u0026\u0026\u0026 2020-08-02 \u0026\u0026\u0026 0 \u0026\u0026\u0026 2020-09-26\\n\", d.outputToFile());"},{"lineNumber":148,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":149,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":150,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":153,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":154,"author":{"gitId":"lll-jy"},"content":"    public void toString_systemOutput() {"},{"lineNumber":155,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":156,"author":{"gitId":"lll-jy"},"content":"            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020-08-02\");"},{"lineNumber":157,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"[D][\\u2718] Assignment 1 (by: Aug 2 2020)\", d.toString());"},{"lineNumber":158,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":159,"author":{"gitId":"lll-jy"},"content":"            d.markAsDone();"},{"lineNumber":160,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"[D][\\u2713] Assignment 1 (by: Aug 2 2020)\", d.toString());"},{"lineNumber":161,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":162,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":163,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":165}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"public class EventTest {"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"    public void constructor_invalidInput_throwException() {"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11\");"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! Invalid input datetime, please input as yyyy-MM-dd HH:mm.\", e.getMessage());"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"    public void isHappeningOn_date_isHappeningOnDate() {"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11:30\");"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"            assertTrue(e.isHappeningOn(LocalDate.parse(\"2020-09-03\")));"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"            assertFalse(e.isHappeningOn(LocalDate.parse(\"2020-09-04\")));"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"    public void isHappeningToday_isHappeningToday() {"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"            LocalDateTime today \u003d LocalDateTime.now();"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"            Event e1 \u003d new Event(\"Project meeting\", td);"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"            assertTrue(e1.isHappeningToday());"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"            LocalDateTime newDate \u003d LocalDateTime.now().plusDays(2);"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"            String newStr \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"            Event e2 \u003d new Event(\"Project meeting\", newStr);"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":"            assertFalse(e2.isHappeningToday());"},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"    public void hasHappenedBefore_date_hasHappenedBeforeDate() {"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11:30\");"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"            assertTrue(e.hasHappenedBefore(LocalDate.parse(\"2020-09-05\")));"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"            assertFalse(e.hasHappenedBefore(LocalDate.parse(\"2020-09-01\")));"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"            assertFalse(e.hasHappenedBefore(LocalDate.parse(\"2020-09-03\")));"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"    public void hasHappenedBeforeToday_hasHappenedBeforeToday() {"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"            LocalDateTime today \u003d LocalDateTime.now();"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"            Event e1 \u003d new Event(\"Project meeting\", td);"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"            assertFalse(e1.hasHappenedBeforeToday());"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"            LocalDateTime newDate \u003d LocalDateTime.now().plusDays(2);"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"            String newStr \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"            Event e2 \u003d new Event(\"Project meeting\", newStr);"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"            assertFalse(e2.hasHappenedBeforeToday());"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"            Event e3 \u003d new Event(\"Project meeting\", \"2020-08-01 11:30\");"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"            assertTrue(e3.hasHappenedBeforeToday());"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"    public void isHappeningAfter_date_isHappeningAfterDate() {"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11:30\");"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"            assertFalse(e.isHappeningAfter(LocalDate.parse(\"2020-09-05\")));"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"            assertTrue(e.isHappeningAfter(LocalDate.parse(\"2020-09-01\")));"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"            assertFalse(e.isHappeningAfter(LocalDate.parse(\"2020-09-03\")));"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"    public void isHappeningAfterToday_isHappeningAfterToday() {"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"            LocalDateTime today \u003d LocalDateTime.now();"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":"            Event e1 \u003d new Event(\"Project meeting\", td);"},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"            assertFalse(e1.isHappeningAfterToday());"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":"            LocalDateTime newDate \u003d LocalDateTime.now().plusDays(2);"},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":"            String newStr \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"            Event e2 \u003d new Event(\"Project meeting\", newStr);"},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":"            assertTrue(e2.isHappeningAfterToday());"},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":"            Event e3 \u003d new Event(\"Project meeting\", \"2020-08-01 11:30\");"},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":"            assertFalse(e3.isHappeningAfterToday());"},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":117,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"lll-jy"},"content":"    public void isHappeningBetween_dates_isHappeningBetweenDates() {"},{"lineNumber":119,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":120,"author":{"gitId":"lll-jy"},"content":"            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11:30\");"},{"lineNumber":121,"author":{"gitId":"lll-jy"},"content":"            assertFalse(e.isHappeningBetween(LocalDate.parse(\"2020-08-01\"), LocalDate.parse(\"2020-09-01\")));"},{"lineNumber":122,"author":{"gitId":"lll-jy"},"content":"            assertTrue(e.isHappeningBetween(LocalDate.parse(\"2020-09-01\"), LocalDate.parse(\"2020-09-04\")));"},{"lineNumber":123,"author":{"gitId":"lll-jy"},"content":"            assertTrue(e.isHappeningBetween(LocalDate.parse(\"2020-09-03\"), LocalDate.parse(\"2020-09-03\")));"},{"lineNumber":124,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":125,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":126,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":129,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"lll-jy"},"content":"    public void willHappenInDays_numberOfDays_willHappenInNDays() {"},{"lineNumber":131,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":132,"author":{"gitId":"lll-jy"},"content":"            LocalDateTime newDate \u003d LocalDateTime.now().plusDays(2);"},{"lineNumber":133,"author":{"gitId":"lll-jy"},"content":"            String newStr \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":134,"author":{"gitId":"lll-jy"},"content":"            Event e \u003d new Event(\"Project meeting\", newStr);"},{"lineNumber":135,"author":{"gitId":"lll-jy"},"content":"            assertTrue(e.willHappenInDays(3));"},{"lineNumber":136,"author":{"gitId":"lll-jy"},"content":"            assertTrue(e.willHappenInDays(2));"},{"lineNumber":137,"author":{"gitId":"lll-jy"},"content":"            assertFalse(e.willHappenInDays(1));"},{"lineNumber":138,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":139,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":140,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":143,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"lll-jy"},"content":"    public void output_toWriteStorage() {"},{"lineNumber":145,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":146,"author":{"gitId":"lll-jy"},"content":"            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11:30\");"},{"lineNumber":147,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"E \u0026\u0026\u0026 0 \u0026\u0026\u0026 Project meeting \u0026\u0026\u0026 2020-09-03 11:30 \u0026\u0026\u0026 0\\n\", e.outputToFile());"},{"lineNumber":148,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":149,"author":{"gitId":"lll-jy"},"content":"            e.markAsDone();"},{"lineNumber":150,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"E \u0026\u0026\u0026 1 \u0026\u0026\u0026 Project meeting \u0026\u0026\u0026 2020-09-03 11:30 \u0026\u0026\u0026 0 \u0026\u0026\u0026 2020-09-26\\n\","},{"lineNumber":151,"author":{"gitId":"lll-jy"},"content":"                    e.outputToFile());"},{"lineNumber":152,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":153,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":154,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":157,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":158,"author":{"gitId":"lll-jy"},"content":"    public void toString_systemOutput() {"},{"lineNumber":159,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":160,"author":{"gitId":"lll-jy"},"content":"            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11:30\");"},{"lineNumber":161,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"[E][\\u2718] Project meeting (at: 11:30 AM   Sep 3 2020)\", e.toString());"},{"lineNumber":162,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":163,"author":{"gitId":"lll-jy"},"content":"            e.markAsDone();"},{"lineNumber":164,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"[E][\\u2713] Project meeting (at: 11:30 AM   Sep 3 2020)\", e.toString());"},{"lineNumber":165,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":166,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":167,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":169}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"public class ToDoTest {"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"    public void constructor_anyInput_noException() {"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"            ToDo t \u003d new ToDo(\"return books\");"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"    public void output_toWriteStorage() {"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"            ToDo t \u003d new ToDo(\"return books\");"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"T \u0026\u0026\u0026 0 \u0026\u0026\u0026 return books\\n\", t.outputToFile());"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"            t.markAsDone();"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"T \u0026\u0026\u0026 1 \u0026\u0026\u0026 return books\\n\", t.outputToFile());"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"    public void toString_systemOutput() {"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"            ToDo t \u003d new ToDo(\"return books\");"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"[T][\\u2718] return books\", t.toString());"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"            t.markAsDone();"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"[T][\\u2713] return books\", t.toString());"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":48,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"lll-jy"},"content":"    public void happen_today_alwaysFalse() {"},{"lineNumber":50,"author":{"gitId":"lll-jy"},"content":"        ToDo t \u003d new ToDo(\"return books\");"},{"lineNumber":51,"author":{"gitId":"lll-jy"},"content":"        LocalDate today \u003d LocalDate.now();"},{"lineNumber":52,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningOn(today));"},{"lineNumber":53,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningToday());"},{"lineNumber":54,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.hasHappenedBefore(today));"},{"lineNumber":55,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.hasHappenedBeforeToday());"},{"lineNumber":56,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningAfter(today));"},{"lineNumber":57,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningAfterToday());"},{"lineNumber":58,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningBetween(today, today));"},{"lineNumber":59,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.willHappenInDays(8));"},{"lineNumber":60,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":62,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"lll-jy"},"content":"    public void happen_beforeToday_alwaysFalse() {"},{"lineNumber":64,"author":{"gitId":"lll-jy"},"content":"        ToDo t \u003d new ToDo(\"return books\");"},{"lineNumber":65,"author":{"gitId":"lll-jy"},"content":"        LocalDate d1 \u003d LocalDate.parse(\"2019-08-10\");"},{"lineNumber":66,"author":{"gitId":"lll-jy"},"content":"        LocalDate d2 \u003d LocalDate.parse(\"2010-09-01\");"},{"lineNumber":67,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":68,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningOn(d1));"},{"lineNumber":69,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningToday());"},{"lineNumber":70,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.hasHappenedBefore(d1));"},{"lineNumber":71,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.hasHappenedBeforeToday());"},{"lineNumber":72,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningAfter(d1));"},{"lineNumber":73,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningAfterToday());"},{"lineNumber":74,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningBetween(d1, d2));"},{"lineNumber":75,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.willHappenInDays(8));"},{"lineNumber":76,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":78,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"lll-jy"},"content":"    public void happen_afterToday_alwaysFalse() {"},{"lineNumber":80,"author":{"gitId":"lll-jy"},"content":"        ToDo t \u003d new ToDo(\"return books\");"},{"lineNumber":81,"author":{"gitId":"lll-jy"},"content":"        LocalDate d1 \u003d LocalDate.parse(\"2029-08-10\");"},{"lineNumber":82,"author":{"gitId":"lll-jy"},"content":"        LocalDate d2 \u003d LocalDate.parse(\"2030-09-01\");"},{"lineNumber":83,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":84,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningOn(d1));"},{"lineNumber":85,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningToday());"},{"lineNumber":86,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.hasHappenedBefore(d1));"},{"lineNumber":87,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.hasHappenedBeforeToday());"},{"lineNumber":88,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningAfter(d1));"},{"lineNumber":89,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningAfterToday());"},{"lineNumber":90,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.isHappeningBetween(d1, d2));"},{"lineNumber":91,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.willHappenInDays(8));"},{"lineNumber":92,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":94,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"lll-jy"},"content":"    public void markAsDone_markingDoneAsDone_throwException() {"},{"lineNumber":96,"author":{"gitId":"lll-jy"},"content":"        try {"},{"lineNumber":97,"author":{"gitId":"lll-jy"},"content":"            ToDo t \u003d new ToDo(\"return books\");"},{"lineNumber":98,"author":{"gitId":"lll-jy"},"content":"            t.markAsDone();"},{"lineNumber":99,"author":{"gitId":"lll-jy"},"content":"            t.markAsDone();"},{"lineNumber":100,"author":{"gitId":"lll-jy"},"content":"            fail();"},{"lineNumber":101,"author":{"gitId":"lll-jy"},"content":"        } catch (Exception e) {"},{"lineNumber":102,"author":{"gitId":"lll-jy"},"content":"            assertEquals(\"\\u2639 OOPS!!! The task [T][\\u2713] return books has already been done.\", e.getMessage());"},{"lineNumber":103,"author":{"gitId":"lll-jy"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":106,"author":{"gitId":"lll-jy"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"lll-jy"},"content":"    public void finds_givenString_matchingTasks() {"},{"lineNumber":108,"author":{"gitId":"lll-jy"},"content":"        ToDo t \u003d new ToDo(\"return books\");"},{"lineNumber":109,"author":{"gitId":"lll-jy"},"content":"        assertTrue(t.finds(\"return books\"));"},{"lineNumber":110,"author":{"gitId":"lll-jy"},"content":"        assertTrue(t.finds(\"\"));"},{"lineNumber":111,"author":{"gitId":"lll-jy"},"content":"        assertTrue(t.finds(\"return\"));"},{"lineNumber":112,"author":{"gitId":"lll-jy"},"content":"        assertTrue(t.finds(\"boo\"));"},{"lineNumber":113,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.finds(\"retun\"));"},{"lineNumber":114,"author":{"gitId":"lll-jy"},"content":"        assertFalse(t.finds(\"return books a\"));"},{"lineNumber":115,"author":{"gitId":"lll-jy"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"lll-jy"},"content":"}"}],"authorContributionMap":{"lll-jy":116}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lll-jy"},"content":"list"},{"lineNumber":2,"author":{"gitId":"lll-jy"},"content":"bash"},{"lineNumber":3,"author":{"gitId":"lll-jy"},"content":"todo"},{"lineNumber":4,"author":{"gitId":"lll-jy"},"content":"todo buy CD"},{"lineNumber":5,"author":{"gitId":"lll-jy"},"content":"deadline cs3230 assignment 1"},{"lineNumber":6,"author":{"gitId":"lll-jy"},"content":"deadline cs3230 assignment 1 /by"},{"lineNumber":7,"author":{"gitId":"lll-jy"},"content":"deadline cs3230 assignment 1 /by Thursday"},{"lineNumber":8,"author":{"gitId":"lll-jy"},"content":"deadline cs3230 assignment 1 /by 2020-08-22"},{"lineNumber":9,"author":{"gitId":"lll-jy"},"content":"list"},{"lineNumber":10,"author":{"gitId":"lll-jy"},"content":"event cs2101 op meeting /at 2020-08-31 12:00"},{"lineNumber":11,"author":{"gitId":"lll-jy"},"content":"deadline utw2001 final paper /by 2020-11-03"},{"lineNumber":12,"author":{"gitId":"lll-jy"},"content":"todo clean room"},{"lineNumber":13,"author":{"gitId":"lll-jy"},"content":"todo wash clothes"},{"lineNumber":14,"author":{"gitId":"lll-jy"},"content":"list"},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"done"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":"done 3"},{"lineNumber":17,"author":{"gitId":"lll-jy"},"content":"list"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"delete"},{"lineNumber":19,"author":{"gitId":"lll-jy"},"content":"delete 2"},{"lineNumber":20,"author":{"gitId":"lll-jy"},"content":"list"},{"lineNumber":21,"author":{"gitId":"lll-jy"},"content":"deadline cs2101 email /by 2020-08-31"},{"lineNumber":22,"author":{"gitId":"lll-jy"},"content":"event family party /at 2020-08-31 19:00"},{"lineNumber":23,"author":{"gitId":"lll-jy"},"content":"done 1"},{"lineNumber":24,"author":{"gitId":"lll-jy"},"content":"list"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"done 2"},{"lineNumber":26,"author":{"gitId":"lll-jy"},"content":"list"},{"lineNumber":27,"author":{"gitId":"lll-jy"},"content":"done 10"},{"lineNumber":28,"author":{"gitId":"lll-jy"},"content":"list"},{"lineNumber":29,"author":{"gitId":"lll-jy"},"content":"happen on today"},{"lineNumber":30,"author":{"gitId":"lll-jy"},"content":"happen on 2020-08-31"},{"lineNumber":31,"author":{"gitId":"lll-jy"},"content":"happen error"},{"lineNumber":32,"author":{"gitId":"lll-jy"},"content":"happen before today"},{"lineNumber":33,"author":{"gitId":"lll-jy"},"content":"happen before 2020-09-01"},{"lineNumber":34,"author":{"gitId":"lll-jy"},"content":"happen after today"},{"lineNumber":35,"author":{"gitId":"lll-jy"},"content":"happen after 2020-08-25"},{"lineNumber":36,"author":{"gitId":"lll-jy"},"content":"happen in 10 days"},{"lineNumber":37,"author":{"gitId":"lll-jy"},"content":"happen in -3 days"},{"lineNumber":38,"author":{"gitId":"lll-jy"},"content":"happen in x months"},{"lineNumber":39,"author":{"gitId":"lll-jy"},"content":"happen between 2020-08-30 2020-09-10"},{"lineNumber":40,"author":{"gitId":"lll-jy"},"content":"happen between 2020-09-10 2020-08-30"},{"lineNumber":41,"author":{"gitId":"lll-jy"},"content":"find cs"},{"lineNumber":42,"author":{"gitId":"lll-jy"},"content":"find party"},{"lineNumber":43,"author":{"gitId":"lll-jy"},"content":"find anything"},{"lineNumber":44,"author":{"gitId":"lll-jy"},"content":"find family party"},{"lineNumber":45,"author":{"gitId":"lll-jy"},"content":"bye"}],"authorContributionMap":{"lll-jy":45}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"lll-jy"},"content":"export LC_ALL\u003den_GB.UTF-8"},{"lineNumber":16,"author":{"gitId":"lll-jy"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":18,"author":{"gitId":"lll-jy"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/*/*.java"},{"lineNumber":19,"author":{"gitId":"-"},"content":"then"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":22,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":25,"author":{"gitId":"lll-jy"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":28,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":29,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":32,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":33,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":34,"author":{"gitId":"-"},"content":"then"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":37,"author":{"gitId":"-"},"content":"else"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":40,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":36,"lll-jy":4}}]
