[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 2,
      "-": 44
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 1,
      "-": 103
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.AnonymousException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeCreateFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeDateTimeParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeFileException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeFileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeKeywordException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.NoIndexException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Duke is the main program that runs and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * interact with the user with Command Line."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new Duke with the specified filepath."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param filepath file path"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Duke(String filepath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            ui.getExceptionTemplate(new DukeFileNotFoundException());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            ui.getExceptionTemplate(new DukeCreateFileException());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            storage \u003d new Storage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            System.exit(-1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Runs the main program of the Duke. Terminates when"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * isExit is set to true."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void mainProgram() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            String command \u003d ui.readCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                Command c \u003d Parser.parseCommand(command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                ui.getExceptionTemplate(new DukeFileNotFoundException());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                ui.getExceptionTemplate(new DukeFileException());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } catch (AnonymousException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                ui.getExceptionTemplate(new AnonymousException(command));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } catch (DescriptionException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                ui.getExceptionTemplate(new DescriptionException());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } catch (DukeDateTimeParserException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                ui.getExceptionTemplate(new DukeDateTimeParserException());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } catch (NoIndexException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                ui.getExceptionTemplate(new NoIndexException());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } catch (DukeKeywordException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                ui.getExceptionTemplate(new DukeKeywordException());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * The main program of Duke."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param args String[] arbitrary arguments."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static void main (String[]args) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Duke duke \u003d new Duke(\"data/data.txt\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        duke.mainProgram();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 87,
      "-": 3
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.AnonymousException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeDateTimeParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeKeywordException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.NoIndexException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * The Command class implements methods that will be used"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * by its child class to create various Command type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * It also contains strings of commands that specify"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * the command type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String EXIT_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String FIND_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String HELP_COMMAND \u003d \"--help\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String TODO_COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String SHOW_AFTER_COMMAND \u003d \"show after\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String SHOW_BEFORE_COMMAND \u003d \"show before\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String DELETE_ALL_COMMAND \u003d \"delete all\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String DONE_ALL_COMMAND \u003d \"done all\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * An empty constructor to initialize the Command object,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * and initialize isExit fields to false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * isExit would be used to terminate the program when it is false."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * A method template for child\u0027s classes to implement. It would execute any"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * action needed based on the type of the command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws IOException Thrown when the system failed to detect the external file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws AnonymousException Thrown whenever Parser failed to detect"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * valid command from user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DescriptionException Thrown whenever Parsed failed to detect"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * valid description passed in the command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DukeDateTimeParserException Thrown whenever when Parser to detect"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * valid date-time details on the command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws NoIndexException Thrown whenever Parser failed to detect valid index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * that should be specified in the command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DukeKeywordException Thrown when user failed to specify the keyword in the command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public abstract void execute (TaskList tasks, Ui ui, Storage storage) throws IOException, AnonymousException,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            DescriptionException, DukeDateTimeParserException, NoIndexException, DukeKeywordException;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * A getter method that returns the state whether a program is ready to exit or not."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return boolean Returns true if the type of command is ExitCommand, and false otherwise."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * A setter method to set the state to true when the program is ready to be terminated."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param exit boolean true if the program is set to be terminated, and false otherwise."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setExit(boolean exit) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        isExit \u003d exit;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 86
    }
  },
  {
    "path": "src/main/java/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DescriptionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeDateTimeParserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * DeadlineCommand class would execute the program when user specify"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * \"deadline\" in the command. It would parse the command and show"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * message to user, as well as updating the external file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a DeadlineCommand with the given"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * user command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param command String user command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public DeadlineCommand(String command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Executes parsed user command. The result is :"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. A new Task of type DeadlineTask."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 2. Append the new task to the TaskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 3. Notify the user about the newly created task via Ui object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 4. Updates the external file via Storage object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws IOException This exception is thrown when the system failed to detect the external file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DescriptionException This is exception is thrown whenever Parsed failed to detect"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * valid description passed in the command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DukeDateTimeParserException This exception is thrown whenever when Parser to detect"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * valid date-time details on the command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DescriptionException,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            DukeDateTimeParserException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            Map\u003cString, String\u003e taskDetails \u003d Parser.findDescriptionParser(this.command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            DeadlineTask deadlineTask \u003d new DeadlineTask(taskDetails.get(\"taskDescription\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    LocalDateTime.parse(taskDetails.get(\"taskTime\"), formatter));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            tasks.add(deadlineTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            ui.getTaskMessage(deadlineTask, tasks.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            storage.updateFile(tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new DukeDateTimeParserException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 72
    }
  },
  {
    "path": "src/main/java/command/DeleteAllCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * DeleteAllCommand would execute the program when user specify"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * \"delete all\" as the command. This would automatically delete all"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * the existing task via TaskList, show message via Ui, and update the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * external file via Storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DeleteAllCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a DeleteAllCommand without any"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * argument passed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public DeleteAllCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Executes the parsed user command. The result is:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. Delete all the tasks in the task list ."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 2.show messages to the user via Ui object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 3. Updates the external file via Storage object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws IOException Thrown when system failed to open external file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        int length \u003d tasks.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            tasks.remove(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ui.getMessageTemplate(ui.formatMessage(\"All of your task has been removed!\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 51
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.NoIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * DeleteCommand would execute the program when user specify"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * \"delete\" as the command. This would automatically delete the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * specified by user in number via TaskList, show message of the deleted"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * task via Ui, and update the external file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a DeleteCommand with the given"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * user command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param command String user command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public DeleteCommand(String command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Executes the parsed user command. The result is:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1.Removes the tasks based on the index number specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * in the user command in the task list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 2.Shows messages of the deleted task to the user via Ui object,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 3.Updates the external file via Storage object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws IOException This exception would be thrown when the system failed to detect"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * the external file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, NoIndexException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        int index \u003d Parser.findIndexParser(this.command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Task removedTask \u003d tasks.remove(index - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ui.getMessageTemplate(ui.formatMessage(\"Noted. I\u0027ve removed this task:\\n\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + ui.formatMessage(removedTask.toString() + \"\\n\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + ui.formatMessage(\"Now you have \" + tasks.size() + \" tasks in the list\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 61
    }
  },
  {
    "path": "src/main/java/command/DoneAllCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * DoneAllCommand would execute the program when user specify"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * \"done all\" as the command. This would automatically set all task to done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * show message to the user and update the external file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DoneAllCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a DoneAllCommand without any"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * argument passed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public DoneAllCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Executes parsed user command. The result is:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. Sets all task in the list to finished via TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 2. Shows the updates list of tasks to the user via UI."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 3. Updates the external file via Storage object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws IOException This exception is thrown when the system failed to detect"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * the external file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (!task.isDone()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                task.setDone(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (i !\u003d tasks.size() - 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                sb.append(ui.formatMessage((i + 1) + \". \" + tasks.getTask(i) + \"\\n\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                sb.append(ui.formatMessage((i + 1) + \". \" + tasks.getTask(i)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ui.getMessageTemplate(ui.formatMessage(\"Here are the tasks in your list:\\n\" + sb.toString()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 58
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.NoIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * DoneCommand would execute the program when user specify"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * \"done\" as the command. This would automatically set the specified task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * to done,show message to the user and update the external file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a DoneCommand with the given"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * user command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param command String user command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public DoneCommand(String command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Executes parsed user command. The result is:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. Sets the specified task to done via TaskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 2. Shows the updated task to user via Ui object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 3. Updates the external file via Storage object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws IOException This exception would be thrown when the system failed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * to detect the external file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws NoIndexException  This exception would be thrown when user failed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * to specify the index of the task in the command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, NoIndexException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        int index \u003d Parser.findIndexParser(this.command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Task task \u003d tasks.getTask(index - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ui.getMessageTemplate(ui.formatMessage(\"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + ui.formatMessage(task.toString())));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 61
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DescriptionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeDateTimeParserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * EventCommand would execute the program when user specify"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * \"event\" as the command. This would create a Task of type"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * EventTask, show the created task to user and update the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * external file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a EventCommand with the given"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * user command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param command String user command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public EventCommand(String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Executes parsed user command. The result is :"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. Creates a Task of type EventTask."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 2. Adds the newly created to the list of task via TaskList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 3. Notifies the new created task to user via Ui object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 4. Updates the external file via Storage object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws IOException This exception would be thrown when"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * the system failed to detect the external file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DescriptionException This exception would be thrown"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * when user failed to specify the task details in the command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DukeDateTimeParserException This exception would be thrown when"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * user failed to enter the specified format of date-time in the command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DescriptionException,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            DukeDateTimeParserException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            Map\u003cString, String\u003e taskDetails \u003d Parser.findDescriptionParser(this.command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            EventTask eventTask \u003d new EventTask(taskDetails.get(\"taskDescription\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    LocalDateTime.parse(taskDetails.get(\"taskTime\"), formatter));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            tasks.add(eventTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            ui.getTaskMessage(eventTask, tasks.size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            storage.updateFile(tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } catch (DescriptionException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new DescriptionException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new DukeDateTimeParserException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 77
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * EventCommand would execute the program when user specify"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * \"exit\" as the command. This would terminate the Duke"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a ExitCommand without any"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * argument passed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Executes parsed user command. The result is:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. Terminates the Duke program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 2. Sends a farewell message to the user via Ui."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 3. Alter the setExit field to true."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ui.getMessageTemplate(ui.formatMessage(\"Bye! Hope to see you soon\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super.setExit(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 38
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeKeywordException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * FindCommand executes when use specify \"find\" in the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new FindCommand with the specified"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * user command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param command String user command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public FindCommand(String command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Executes parsed user command. The result is:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. Shows the list of tasks with that keyword to the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList list of task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user to show intended messages."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage Updates external file whenever needed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DukeKeywordException Thrown when user failed to specify"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * keyword in the command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeKeywordException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String keyword \u003d Parser.findKeywordParser(this.command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        System.out.println(keyword.equals(\"\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                sb.append(ui.formatMessage((i) + \". \" + task + \"\\n\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        sb.deleteCharAt(sb.length() - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ui.getMessageTemplate(ui.formatMessage(\"Here are the matching tasks in your list:\\n\" + sb.toString()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 55
    }
  },
  {
    "path": "src/main/java/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * HelpCommand would execute the program when user specify"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * \"help\" as the command. This would show a list of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * existing command together with the format of the command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * A constructor with no argument to initialize"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * HelpCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Executes parsed user command. The result is :"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. Shows  the existing command and its format to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * the user via Ui object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ui.getCommandList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 36
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * ListCommand would execute the program when user specify"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * \"list\" as the command. This would show all the existing"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * list of task to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a ListCommand without any"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * argument passed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Executes parsed user command. The result is:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. Shows all the existing tasks in the list via Ui object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (i !\u003d tasks.size() - 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                sb.append(ui.formatMessage((i + 1) + \". \" + tasks.getTask(i) + \"\\n\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                sb.append(ui.formatMessage((i + 1) + \". \" + tasks.getTask(i)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ui.getMessageTemplate(ui.formatMessage(\"Here are the tasks in your list:\\n\" + sb.toString()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 43
    }
  },
  {
    "path": "src/main/java/command/ShowAfterCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeDateTimeParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * ShowAfterCommand would execute the program when user specify"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * \"show after\" as the command. This would show all the task that exist"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * after the specified date that was passed in the user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class ShowAfterCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a ShowAfterCommand with the given"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * user command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param command String user command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public ShowAfterCommand(String command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Executes parsed user command. The result is:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. Shows user all the task that exist after the specified date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DukeDateTimeParserException This exception would be thrown"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * when the user failed to specify the date in the command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeDateTimeParserException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        LocalDate localDate \u003d Parser.findDateParser(this.command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (task instanceof DeadlineTask) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                DeadlineTask deadlineTask \u003d (DeadlineTask) task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                if (deadlineTask.getDateTime().toLocalDate().isAfter(localDate)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    sb.append(ui.formatMessage(i + \". \" + deadlineTask + \"\\n\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } else if (task instanceof EventTask) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                EventTask eventTask \u003d (EventTask) task;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                if (eventTask.getDateTime().toLocalDate().isAfter(localDate)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    sb.append(ui.formatMessage(i + \". \" + eventTask + \"\\n\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ui.getMessageTemplate(sb.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 71
    }
  },
  {
    "path": "src/main/java/command/ShowBeforeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeDateTimeParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * ShowBeforeCommand would execute the program when user specify"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * \"show before\" as the command. This would show all the task that exist"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * before the specified date that was passed in the user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class ShowBeforeCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a ShowBeforeCommand with the given"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * user command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param command String user command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public ShowBeforeCommand(String command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Executes parsed user command. The result is:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. Shows user all the task that exist before the specified date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DukeDateTimeParserException This exception would be thrown"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * when the user failed to specify the date in the command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeDateTimeParserException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        LocalDate localDate \u003d Parser.findDateParser(this.command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (task instanceof DeadlineTask) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                DeadlineTask deadlineTask \u003d (DeadlineTask) task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                if (deadlineTask.getDateTime().toLocalDate().isBefore(localDate)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    sb.append(ui.formatMessage(i + \". \" + deadlineTask + \"\\n\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } else if (task instanceof EventTask) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                EventTask eventTask \u003d (EventTask) task;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                if (eventTask.getDateTime().toLocalDate().isBefore(localDate)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    sb.append(ui.formatMessage(i + \". \" + eventTask + \"\\n\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ui.getMessageTemplate(sb.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 69
    }
  },
  {
    "path": "src/main/java/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TodoTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * TodoCommand would execute the program when user specify"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * \"todo\" in the command. It would create a new Task of type"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * TodoTask, add it to the list, and notify the user that the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * new task was created, as well as updating the external file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a TodoCommand with the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * user command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param command String user command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TodoCommand(String command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *Executes parsed user command. The result is:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. Creates a new Task of type TodoTask."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 2. Adds it to the tasks in TaskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 3. Notifies the user about the newly created task via Ui object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 4. Updates the external file via Storage object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws IOException Thrown when system failed to access external file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DescriptionException Thrown when user forget to include task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * description in user command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DescriptionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String taskDescription \u003d Parser.findTodoParser(this.command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TodoTask todoTask \u003d new TodoTask(taskDescription);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tasks.add(todoTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ui.getTaskMessage(todoTask, tasks.size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 57
    }
  },
  {
    "path": "src/main/java/command/WrongCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.AnonymousException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * WrongCommand class would execute the program when user specify"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * any command that doesn\u0027t exist in the program. It would notify"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * the user that the command doesn\u0027t exist."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class WrongCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a WrongCommand with the given"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * user command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param command String user command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public WrongCommand(String command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Executes parsed user command. The result is:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. Notifies user that the input command does not exist in the program"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * and recommend the user to run the help command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * All the of the notification are run under Ui object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList List of task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param ui Ui updating user interface to show intended messages."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param storage Storage to update external file whenever needed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws AnonymousException Thrown when user run a command that"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * does not exist in the program."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws AnonymousException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        throw new AnonymousException(this.command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 44
    }
  },
  {
    "path": "src/main/java/exception/AnonymousException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Thrown to notify user that enter a"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * non-existing command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class AnonymousException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public AnonymousException(String input) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns a short description of this throwable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * The result is the concatenation of the name of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * the incorrect commend and a suggestion to run"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * the help command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String exception message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return super.toString() + \" There are no commands that start with \" + this.input + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + \"      \" + \"Please type --help to see all the commands\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 27
    }
  },
  {
    "path": "src/main/java/exception/DescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Thrown to notify user that they forgot to include"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * task description in their command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DescriptionException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns a short description of this throwable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * The result is \"OOPS!! Description cannot be empty\"."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String exception message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return super.toString() + \" Description cannot be empty\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 19
    }
  },
  {
    "path": "src/main/java/exception/DukeCreateFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Thrown to notify user that the system failed"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * to create the intended external file."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DukeCreateFileException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns a short description of this throwable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * The result is \"OOPS!! Failed to create a file\"."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String exception message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return super.toString() + \"Failed to create a file\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 19
    }
  },
  {
    "path": "src/main/java/exception/DukeDateTimeParserException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Thrown to notify user that the date time format"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * entered in the command does not satisfy the format"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * that was hoped in the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DukeDateTimeParserException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns a short description of this throwable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * The result is \"OOPS!! You have to enter the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * date time format correctly\"."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String exception message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return super.toString() + \" You have to enter the date time format correctly\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 22
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Thrown to notify user that there are missing input"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * of command when the program is running or to notify"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * that there is something wrong with the file system."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns a short description of this throwable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * The result is \"OOPS!!\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String exception message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return \"OOPS!!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 21
    }
  },
  {
    "path": "src/main/java/exception/DukeFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Thrown to notify user that system failed to access"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * the external file."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DukeFileException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns a short description of this throwable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * The result is \"OOPS!! Something went wrong when"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * accessing your file.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String exception message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return super.toString() + \" Something went wrong when accessing your file\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 20
    }
  },
  {
    "path": "src/main/java/exception/DukeFileNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Thrown to notify user that system failed to find"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * the external file"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DukeFileNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns a short description of this throwable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * The result is \"OOPS!! I cannot find your file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Sorry! :(\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String exception message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return super.toString() + \" I cannot find your file. Sorry! :(\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 20
    }
  },
  {
    "path": "src/main/java/exception/DukeKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DukeKeywordException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return super.toString() + \" You need to specify the keyword.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 9
    }
  },
  {
    "path": "src/main/java/exception/NoIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Thrown to notify user that they forgot to specify"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * index number of the tasks list when they run"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * DoneCommand or DeleteCommand"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class NoIndexException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns a short description of this throwable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * The result is \"OOPS!! You have ton specify"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * which number in your lists."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String exception message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return super.toString() + \" You have to specify which number in your lists\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 21
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.DeadlineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.DeleteAllCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.DoneAllCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.ShowAfterCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.ShowBeforeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.TodoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.WrongCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DescriptionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeDateTimeParserException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.DukeKeywordException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import exception.NoIndexException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TodoTask;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * The Parser class are used to parse any user input and process"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * them into executable command and data."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * An empty constructor to initialize Parser object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Parser() {}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This method parse a file path into parent directory and the file name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param filepath String The path of a file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String[] array of separated String."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static String[] fileParser(String filepath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return filepath.split(\"/\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This method parse the content of a file line by line and"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * turns into the correct Task object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param line String Each line of strings in the file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return Task Return the correct Task type from reading the file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static Task readFileParser(String line) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String[] strings \u003d line.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String taskType \u003d strings[0].trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        switch(taskType) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case \"T\" :"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            TodoTask todoTask \u003d new TodoTask();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (strings[1].trim().equals(\"1\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                todoTask.setDone(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                todoTask.setDone(false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            todoTask.setDescription(strings[2].trim());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return todoTask;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case \"D\" :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            DeadlineTask deadlineTask \u003d new DeadlineTask();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (strings[1].trim().equals(\"1\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                deadlineTask.setDone(true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                deadlineTask.setDone(false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            String[] taskDetails \u003d strings[2].split(\"\\\\|\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            deadlineTask.setDescription(taskDetails[0].trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            deadlineTask.setDate(LocalDateTime.parse(taskDetails[1].trim(), formatter));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return deadlineTask;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        case \"E\" :"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            EventTask eventTask \u003d new EventTask();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (strings[1].trim().equals(\"1\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                eventTask.setDone(true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                eventTask.setDone(false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            String[] taskDetails2 \u003d strings[2].split(\"\\\\|\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            eventTask.setDescription(taskDetails2[0].trim());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            eventTask.setDateTime(LocalDateTime.parse(taskDetails2[1].trim(), formatter));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return eventTask;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new Task();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This method parse given user command and turns it into and"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Command object."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param command String User command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return Command Return various Command type based on user input."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static Command parseCommand(String command) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (command.toLowerCase().equals(Command.EXIT_COMMAND)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } else if (command.toLowerCase().equals(Command.LIST_COMMAND)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } else if (command.toLowerCase().equals(Command.DONE_ALL_COMMAND)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new DoneAllCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } else if (command.toLowerCase().contains(Command.DONE_COMMAND)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new DoneCommand(command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } else if (command.toLowerCase().contains(Command.TODO_COMMAND)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new TodoCommand(command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } else if (command.toLowerCase().contains(Command.DEADLINE_COMMAND)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new DeadlineCommand(command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } else if (command.toLowerCase().contains(Command.EVENT_COMMAND)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new EventCommand(command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } else if (command.toLowerCase().equals(Command.HELP_COMMAND)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } else if (command.toLowerCase().contains(Command.DELETE_ALL_COMMAND)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new DeleteAllCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } else if (command.toLowerCase().contains(Command.DELETE_COMMAND)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new DeleteCommand(command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } else if (command.toLowerCase().contains(Command.SHOW_AFTER_COMMAND)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new ShowAfterCommand(command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } else if (command.toLowerCase().contains(Command.SHOW_BEFORE_COMMAND)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new ShowBeforeCommand(command);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } else if (command.toLowerCase().contains(Command.FIND_COMMAND)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new FindCommand(command);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return new WrongCommand(command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This method would parse user command(usually DeleteCommand and"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * DoneCommand), returns the number that was passed in the command."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param input user command."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return int The index specified by the user command."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws NoIndexException This exception is thrown when user forget"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * to specify the index of the task list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static int findIndexParser(String input) throws NoIndexException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            int index \u003d Integer.parseInt(input.split(\"\\\\s\")[1]);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new NoIndexException();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This method would parse user command(usually ShowAfterCommand"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * or ShowBeforeCommand) and returns the date that was passed in the"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param input String user command."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return LocalDate The date that was passed in the user command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DukeDateTimeParserException This exception is thrown when user forget"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * to specify the date in the command."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static LocalDate findDateParser(String input) throws DukeDateTimeParserException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            LocalDate localDate \u003d LocalDate.parse(input.split(\"\\\\s\")[2]);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return localDate;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new DukeDateTimeParserException();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This method would return Map(String,String) that contains task\u0027s description and"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * task\u0027s date-time. Usually used by DeadlineCommand and EventCommand."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param input user command."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return Map (String,String) Returns map that contains task\u0027s description and task\u0027s date-time."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DescriptionException This exception is thrown when user forget to specify"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * either the task description or the date-time."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static Map\u003cString, String\u003e findDescriptionParser(String input) throws DescriptionException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            String[] getDetails \u003d input.split(\"\\\\s\", 2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            String[] details \u003d getDetails[1].split(\"/\", 2);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            map.put(\"taskDescription\", details[0].trim());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            String[] splitTimeDetails \u003d details[1].split(\"\\\\s\", 2);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            map.put(\"taskTime\", splitTimeDetails[1]);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return map;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new DescriptionException();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This method would parse specific TodoCommand and return the task description."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param input user command."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String task description of type TodoTask."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DescriptionException This exception is thrown when user forget to specify"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * the task\u0027s description on the command."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static String findTodoParser(String input) throws DescriptionException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return input.split(\"\\\\s\", 2)[1];"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new DescriptionException();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Finds the keyword specified in user command"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param input String user command."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String keyword"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws DukeKeywordException Thrown when user failed to specify the keyword"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * in the command."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static String findKeywordParser(String input) throws DukeKeywordException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            String keyword \u003d input.split(\"\\\\s\", 2)[1];"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (keyword.equals(\"\") || keyword.equals(\"\\\\s\")) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                throw new DukeKeywordException();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                return keyword.trim();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new DukeKeywordException();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 244
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TodoTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * This Storage class is used to handle creating, reading, and writing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * a local file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * An empty constructor to initialize Storage object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Storage() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * A constructor to create Storage by taking file path as its arguments."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * It would instantly create the directory and the file if"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * the filepath specified was not found in user\u0027s local."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param filepath String The path of the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws IOException This is exception would be thrown if the system"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * could detect any file or directory with the specified filepath."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Storage(String filepath) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String[] strings \u003d Parser.fileParser(filepath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String parentPath \u003d strings[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String childPath \u003d strings[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.file \u003d new File(parentPath, childPath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!this.file.exists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            this.file.mkdir();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            this.file.createNewFile();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This would load the data from the given file path, turn into"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * various type of Task object (based on the data), and return"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * a list of task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return List(Task) Returns a list of type Task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws FileNotFoundException This exception would be thrown if"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * the specified file was not found in user\u0027s local."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public List\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Scanner s \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            tasks.add(Parser.readFileParser(s.nextLine()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This method would update the external file of the given"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * file path, by taking a list of Task as it\u0027s argument."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks TaskList A list of task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @throws IOException This exception would be thrown if"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * the system was not able to write to the specified file path."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void updateFile(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filepath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        StringBuilder txtToAdd \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (task instanceof TodoTask) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                TodoTask todoTask \u003d (TodoTask) task;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                if (todoTask.isDone()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    txtToAdd.append(\"T\").append(\" | \").append(\"1\").append(\" | \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    txtToAdd.append(\"T\").append(\" | \").append(\"0\").append(\" | \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                txtToAdd.append(todoTask.getDescription()).append(\"\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } else if (task instanceof EventTask) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                EventTask eventTask \u003d (EventTask) task;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                if (eventTask.isDone()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    txtToAdd.append(\"E\").append(\" | \").append(\"1\").append(\" | \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    txtToAdd.append(\"E\").append(\" | \").append(\"0\").append(\" | \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                txtToAdd.append(eventTask.getDescription()).append(\" | \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                        .append(eventTask.getDateTime().format(DateTimeFormatter"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                                .ofPattern(\"yyyy-MM-dd HH:mm\"))).append(\"\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            } else if (task instanceof DeadlineTask) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                DeadlineTask deadlineTask \u003d (DeadlineTask) task;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                if (deadlineTask.isDone()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    txtToAdd.append(\"D\").append(\" | \").append(\"1\").append(\" | \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    txtToAdd.append(\"D\").append(\" | \").append(\"0\").append(\" | \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                txtToAdd.append(deadlineTask.getDescription()).append(\" | \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                        .append(deadlineTask.getDateTime().format(DateTimeFormatter"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                                .ofPattern(\"yyyy-MM-dd HH:mm\"))).append(\"\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        fw.write(txtToAdd.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 124
    }
  },
  {
    "path": "src/main/java/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * The DeadlineTask class inherits method from the Task class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * It would create an DeadlineTask object with the given description"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * and date-time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String DEADLINE \u003d \"[D]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new DeadlineTask with empty description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * and null as its date time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public DeadlineTask() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super(\"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.dateTime \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new DeadlineTask with task description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * and task date time that was parsed from user command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param description String deadline task description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param dateTime LocalDateTime deadline task date and time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public DeadlineTask(String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Gets task date-time."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return LocalDateTime This return deadline task date-time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Sets set the current date-time to the given date-time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param dateTime LocalDateTime this argument would change the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * current date-time."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setDate(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns messages to user. The result is the concatenation of :"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. The type of the Task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 2. The task\u0027s status."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 3. The description of the task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 4. The date and time of the task (MMM d yyy, h a)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String Returns the they task type ([D]), its status as well"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * as its description and date-time in an intended format."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return DEADLINE + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + this.dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyy, h a\")) + \")\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 70
    }
  },
  {
    "path": "src/main/java/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " *  The EventTask class inherits method from the Task class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " *  It would create an EventTask object with the given description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " *  and date-time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String EVENT \u003d \"[E]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new EventTask with empty description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * and null as its date time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public EventTask() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.dateTime \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new EventTask with task description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * and task date time that was parsed from user command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param description String event task description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param dateTime LocalDateTime event task date and time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public EventTask(String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Gets task date-time."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return LocalDateTime This return event task date-time."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Sets set the current date-time to the given date-time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param dateTime LocalDateTime this argument would change the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * current date-time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns messages to user. The result is the concatenation of :"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. The type of the Task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 2. The task\u0027s status."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 3. The description of the task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 4. The date and time of the task (MMM d yyy, h a)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String Returns the task type ([E]), its status as well"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * as its description and date-time in an intended format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return EVENT + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + this.dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyy, h a\")) + \")\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 71
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * The Task class implements methods that will be used"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * by its child class to create various task object."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new Task with empty string as  its"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * description and false for isDone."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.description \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new Task with task description specified"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * by user command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param description To define task description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Gets the task\u0027s description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String task description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Sets the current task description to the specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * description."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param description The task\u0027s description/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns whether a task is finished or not."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return boolean Returns true if task is done,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * false otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns the status (done/undone) of the task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * in symbolic form ([O]/[X])."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String Returns \"[O]\" if the task is done, and"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * return \"[X]\" otherwise."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private String getStatus() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return isDone ? \"[O]\" : \"[X]\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Sets the current isDone to the specified boolean."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param isDone Sets isDone to true if task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * has finished, and false otherwise."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns messages to user. The result is the concatenation of :"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. The status of the Task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 2. The description of the task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String Returns the task type ([T]]), its status as well"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * as its description."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return getStatus() + \" \" + this.description;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 94
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * TaskList class are used to store all the task specified"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * by user in an ArrayList of Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new TaskList with the tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * initalize to a new ArrayList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new TaskList with the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * specified list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks List(Task) List of task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Gets the list of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return List(Task) Returns list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Sets the current list of tasks to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * the specified list of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param tasks List(Task) list of task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Adds new Task to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param task Task single task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Remove the specified task from the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param index int list\u0027s index."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return Task task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return this.tasks.remove(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Gets the specified task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param index int list\u0027s index."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return Task Returns the specified task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Gets the size of the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return int list\u0027s size."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 81
    }
  },
  {
    "path": "src/main/java/task/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * The TodoTask class inherits method from the Task class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * It would create EventTask object with the given description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String TODO \u003d \"[T]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new TodoTask with empty description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TodoTask() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super(\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Costructs a new TodoTask with the given task description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param description todo task description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TodoTask(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns messages to user. The result is the concatenation of :"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 1. The type of the Task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 2. The status of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * 3. The description of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String Returns the task type ([T]]), its status as well"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * as its description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return TODO + super.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 40
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Ui class deals with everything that has to do"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * with user interface, like showing messages,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * showing list of task, and showing exception message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    static final String LINE \u003d \"     ___________________________________________________________________________\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    static final String DOUBLE_TAB \u003d \"      \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a new Ui."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Ui() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Read the input command from user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String user command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        enterCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String command \u003d sc.nextLine();;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Gets the template of message, where messages"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * are in between two lines."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param input String message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void getMessageTemplate(String input) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        System.out.print(LINE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        System.out.println(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * gets the template of exception message, where"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * the exception messages are in between two lines."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param exception String exception message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void getExceptionTemplate(Exception exception) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        System.out.print(LINE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        System.out.println(formatExceptionMessage(exception.toString()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Formats the command and format message, so that"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * it follows some indentation."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param command String existing command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param format String command\u0027s accepted format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String Formats strings with some indentation."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String formatCommandList(String command, String format) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String indentation \u003d \"%-20s%s%n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return formatMessage(String.format(indentation, command, format));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Gets the list of existing commands that is available"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * in Duke program ans shows it to the user via HelpCommand."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void getCommandList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        getMessageTemplate(formatCommandList(\"COMMAND\", \"FORMAT\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + formatCommandList(\"deadline\", \"deadline \u003cDEADLINE_NAME\u003e /by \u003cyyyy-MM-dd\u003e \u003cHH:mm\u003e\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + formatCommandList(\"delete\", \"delete \u003cTASK_NUMBER\u003e\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + formatCommandList(\"delete all\", \"delete all\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + formatCommandList(\"done\", \"done \u003cTASK_NUMBER\u003e\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + formatCommandList(\"done all\", \"done all\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + formatCommandList(\"event\", \"event \u003cEVENT_NAME\u003e /at \u003cyyyy-MM-dd\u003e \u003cHH:mm\u003e\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + formatCommandList(\"show after\", \"show after \u003cyyyy-MM-dd\u003e\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + formatCommandList(\"show before\", \"show before \u003cyyyy-MM-dd\u003e\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + formatCommandList(\"todo\", \"todo \u003cTASK_NAME\u003e\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        );"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Indent the inputted message by two tabs."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param input String input."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String indented message."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public String formatMessage(String input) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return DOUBLE_TAB + input;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Indent the inputted exception message by two tabs."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param message String exception message."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @return String indented exception message."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static String formatExceptionMessage(String message) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return DOUBLE_TAB + message;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Gets the greeting message and show it to the user."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        getMessageTemplate(formatMessage(\"Hello! I\u0027m Rich.\\n\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + formatMessage(\"What can I do for you?\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Gets the message to indicate when program is ready to"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * receive user input."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void enterCommand() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        System.out.print(\"Enter command here: \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Gets the message to show specific Task"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * and the size of the task list to the user."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param task Task task."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * @param size int size of task list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void getTaskMessage(Task task, int size) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        getMessageTemplate(formatMessage(\"Got it. I\u0027ve added this task :\\n\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + formatMessage(task + \"\\n\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + formatMessage(\"Now you have \" + size + \" tasks in the list\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 137
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.DeadlineCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.DeleteAllCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.DoneAllCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.ShowAfterCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.ShowBeforeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.TodoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import command.WrongCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TodoTask;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void readFileTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Task test1 \u003d Parser.readFileParser(\"T | 0 | read book\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TodoTask todoTask \u003d new TodoTask(\"read book\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(todoTask.toString(), test1.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(todoTask.getDescription(), test1.getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Task test2 \u003d (Parser.readFileParser(\"D | 0 | return book | 2020-06-06 06:00\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        DeadlineTask deadlineTask \u003d new DeadlineTask(\"return book\", LocalDateTime"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                .parse(\"2020-06-06 06:00\", formatter));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(deadlineTask.toString(), test2.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(deadlineTask.getDescription(), test2.getDescription());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(deadlineTask.getClass(), test2.getClass());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(deadlineTask.getDateTime(), ((DeadlineTask) test2).getDateTime());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Task test3 \u003d Parser.readFileParser(\"E | 0 | return book | 2020-06-06 06:00\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        EventTask eventTask \u003d new EventTask(\"return book\", LocalDateTime.parse(\"2020-06-06 06:00\", formatter));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(eventTask.toString(), test3.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(eventTask.getDescription(), test3.getDescription());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(eventTask.getDateTime(), ((EventTask) test3).getDateTime());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void parseCommandTest() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Command test1 \u003d Parser.parseCommand(\"bye\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ExitCommand exitCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(exitCommand.getClass(), test1.getClass());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Command test2 \u003d Parser.parseCommand(\"list\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(listCommand.getClass(), test2.getClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Command test3 \u003d Parser.parseCommand(\"done all\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        DoneAllCommand doneAllCommand \u003d new DoneAllCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(doneAllCommand.getClass(), test3.getClass());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Command test4 \u003d Parser.parseCommand(\"done 1\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(\"done 1\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(doneCommand.getClass(), test4.getClass());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Command test5 \u003d Parser.parseCommand(\"todo borrow book\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TodoCommand todoCommand \u003d new TodoCommand(\"todo borrow book\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(todoCommand.getClass(), test5.getClass());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Command test6 \u003d Parser.parseCommand(\"deadline eat /by 2020-04-04 16:00\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(\"deadline eat /by 2020-04-04 16:00\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(deadlineCommand.getClass(), test6.getClass());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Command test7 \u003d Parser.parseCommand(\"event eat /by 2020-04-04 16:00\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        EventCommand eventCommand \u003d new EventCommand(\"event eat /by 2020-04-04 16:00\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(eventCommand.getClass(), test7.getClass());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Command test8 \u003d Parser.parseCommand(\"--help\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        HelpCommand helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(helpCommand.getClass(), test8.getClass());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Command test9 \u003d Parser.parseCommand(\"delete all\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        DeleteAllCommand deleteAllCommand \u003d new DeleteAllCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(deleteAllCommand.getClass(), test9.getClass());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Command test10 \u003d Parser.parseCommand(\"delete 1\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"delete 1\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(deleteCommand.getClass(), test10.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Command test11 \u003d Parser.parseCommand(\"show after 2020-04-04\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ShowAfterCommand showAfterCommand \u003d new ShowAfterCommand(\"show after 2020-04-04\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(showAfterCommand.getClass(), test11.getClass());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Command test12 \u003d Parser.parseCommand(\"show before 2020-04-04\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ShowBeforeCommand showBeforeCommand \u003d new ShowBeforeCommand(\"show before 2020-04-04\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(showBeforeCommand.getClass(), test12.getClass());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Command test13 \u003d Parser.parseCommand(\"blah\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        WrongCommand wrongCommand \u003d new WrongCommand(\"blah\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(wrongCommand.getClass(), test13.getClass());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void findIndexParserTest() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            int test1 \u003d Parser.findIndexParser(\"done 1\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            assertEquals(1, test1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            int test2 \u003d Parser.findIndexParser(\"delete 1\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            assertEquals(1, test2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void findDateParserTest() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Assertions.assertDoesNotThrow(()-\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            LocalDate test1 \u003d Parser.findDateParser(\"show before 2020-05-05\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            LocalDate localDate \u003d LocalDate.parse(\"2020-05-05\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            assertEquals(localDate, test1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            LocalDate test2 \u003d Parser.findDateParser(\"show after 2020-05-05\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            assertEquals(localDate, test2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void findDescriptionParserTest() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            Map\u003cString, String\u003e test1 \u003d Parser.findDescriptionParser(\"event borrow book /by 2020-04-04 18:00\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            assertEquals(\"borrow book\", test1.get(\"taskDescription\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            assertEquals(\"2020-04-04 18:00\", test1.get(\"taskTime\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            Map\u003cString, String\u003e test2 \u003d Parser.findDescriptionParser(\"deadline eating a lot /by 2020-04-04 18:00\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            assertEquals(\"eating a lot\", test2.get(\"taskDescription\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            assertEquals(\"2020-04-04 18:00\", test2.get(\"taskTime\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        });"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void findTodoParserTest() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            String test1 \u003d Parser.findTodoParser(\"todo borrow book\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            assertEquals(\"borrow book\", test1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 161
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import task.TodoTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void todoTaskTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String description \u003d \"Task Example\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TodoTask todoTask \u003d new TodoTask(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(description, todoTask.getDescription());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(\"[T][X] Task Example\", todoTask.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        todoTask.setDone(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(\"[T][O] Task Example\", todoTask.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void deadlineTaskTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String description \u003d \"Task Example\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.parse(\"2020-03-04 18:00\", formatter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        DeadlineTask deadlineTask \u003d new DeadlineTask(description, localDateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(description, deadlineTask.getDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(localDateTime, deadlineTask.getDateTime());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(\"[D][X] Task Example (by: Mar 4 2020, 6 PM)\", deadlineTask.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        deadlineTask.setDone(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(true, deadlineTask.isDone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(\"[D][O] Task Example (by: Mar 4 2020, 6 PM)\", deadlineTask.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void eventTaskTest() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String description \u003d \"Task Example\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.parse(\"2020-03-04 18:00\", formatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        EventTask eventTask \u003d new EventTask(description, localDateTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(description, eventTask.getDescription());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(localDateTime, eventTask.getDateTime());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(\"[E][X] Task Example (by: Mar 4 2020, 6 PM)\", eventTask.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        eventTask.setDone(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(true, eventTask.isDone());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(\"[E][O] Task Example (by: Mar 4 2020, 6 PM)\", eventTask.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 58
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "todo"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "event"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "--help"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "done"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "delete"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "java -classpath ..\\bin main.java.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 7,
      "-": 19
    }
  }
]
