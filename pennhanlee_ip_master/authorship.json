[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "//dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "//    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "//    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "//}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "pennhanlee": 24
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 11
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "# DUKE USER GUIDE - Penn Han\u0027s 2103T iP Todolist Chatbot"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "- Add Tasks: "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t- Todo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t- Event /by date"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t- Deadline /at date"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "- Lists all Saved Tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "- Delete Tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "- Mark Tasks as Done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "- Mark Tasks as Important"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "- Find Specific Tasks by Keyword"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "- Refresh the Entire List"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Duke also prioritises more Urgent and Important Tasks to be listed on top while Completed Tasks are"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "listed at the bottom. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Feature 1 : Add Tasks "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "There are three classification of tasks. **Todo**, **Event** and **Deadline**. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Todo** tasks are general tasks that are not tagged to a specific Date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Use this for general errands like \"Buy Milk!\"  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tTo add a Todo task. Input this command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t\t- Todo (task)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\teg. Todo Buy Milk"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Event** tasks are tasks that have a specific Date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Use this for recording future appointments like \"Lunch with Emily\" "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tTo add an Event task, Input this command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t\t- Event (task) /at MMM D YYYY hh:mm (date \u0026 time)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\teg. Event Lunch with Emily /at Sep 18 2020 12:30"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Deadline** tasks are tasks that have a specific Date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Use this for recording future deadlines like \"Report Submission\" "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tTo add a Deadline task, Input this command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t\t- Deadline (task) /by MMM D YYYY hh:mm (date \u0026 time)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\teg. Deadline 2103T Report Submission /by Sep 18 2020 23:59"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Feature 2 : List all Saved Tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Users can view all Current Tasks that have been added into the List. This"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "includes Saved Tasks from previous usages."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tExample: "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tcommand: list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tlist: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t1. [T][X] Read Book"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t2. [E][O] Lunch with Emily at Sep 18 2020 12:30"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t3. [D][O] 2103T Report Submission by Sep 18 2020 23:59"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Feature 3 : Delete Task "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Users can delete Tasks that have been completed. They can do so by"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "indicating the index of the Task that they would like to delete. "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tExample: "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t1. [T][X] Read Book"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t2. [E][X] Lunch with Emily at Sep 18 2020 12:30"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t3. [D][O] 2103T Report Submission by Sep 18 2020 23:59"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tcommand: delete 2"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tresultant list:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t1. [T][X] Read Book"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t2. [D][O] 2103T Report Submission by Sep 18 2020 23:59"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Feature 4 : Mark Tasks as Done"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Users can indicate that a Task has been completed. They can do so by"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "indicating the index of the Task that they would like to mark as done."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tExample: "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t1. [T][X] Read Book"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t2. [E][X] Lunch with Emily at Sep 18 2020 12:30"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t3. [D][O] 2103T Report Submission by Sep 18 2020 23:59"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tcommand: done 2"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tresultant list:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t1. [T][X] Read Book"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t2. [E][O] Lunch with Emily at Sep 18 2020 12:30"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t3. [D][O] 2103T Report Submission by Sep 18 2020 23:59"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Feature 5 : Mark Tasks as Important"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Users can indicate that a Task is important. They can do so by"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "indicating the index of the Task that they would like to mark as important"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tExample: "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t1. [T][X] Read Book"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t2. [E][X] Lunch with Emily at Sep 18 2020 12:30"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t3. [D][O] 2103T Report Submission by Sep 18 2020 23:59"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tcommand: important 2"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\t"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tresultant list:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t1. [E][X]** Lunch with Emily at Sep 18 2020 12:30"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t2. [T][X] Read Book"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t3. [D][O] 2103T Report Submission by Sep 18 2020 23:59"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\t"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t*note that the order changed in order of urgency and importance*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Feature 6 : Find Specific Tasks by Keyword"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Users can view specific Tasks that have been added into the List. This"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "includes Saved Tasks from previous usages."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tExample: "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tcommand: find book"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\t"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tlist: "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t1. [T][X] Read Book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Feature 7 : Refresh the Entire List of Tasks"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Users can refresh the entire list of Tasks to produce an empty list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "for them to work with."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Note that this will remove all saved tasks and deleted tasks are not recoverable** "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tExample:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tcommand: refresh"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\t"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\tlist:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\t__________________"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "pennhanlee": 111
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * \u003ch1\u003e DUKE CLASS \u003c/h1\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * The Duke Class contains the method to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * initialize the DukeChat bot. Different commands will"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * result in different course of action."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * Currently Duke only supports Todo, Deadline, Event, Done, Delete, List, Find"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * commands as a Task Tracker."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @author Lee Penn Han"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Instantiate a Duke Object with the filepath as that name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * of the file which the lists will be saved to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.taskList \u003d TaskList.createTaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.storage \u003d Storage.createDukeFile(\"Saved\", taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            ArrayList\u003cString\u003e taskHistory \u003d this.storage.loadFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Parser.processOldTasks(taskHistory, this.taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            System.out.println(Ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Generates a formatted response according to the User\u0027s input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * on a brand new task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        boolean inputNewTask \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (!input.equals(\"bye\") \u0026\u0026 input.length() !\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                stringBuilder.append(Parser.process(input, this.taskList, inputNewTask));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                stringBuilder.append(Ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                stringBuilder.append(Ui.showSaving(this.storage.saveToFile()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                stringBuilder.append(Ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            stringBuilder.append(Ui.goodbyeMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "pennhanlee": 64
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/photo1.jpg\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/photo4.jpeg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Initialises the JavaFX GUI"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                DialogBox.getDukeDialog(Ui.welcomeMessage(), dukeImage)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Timeline timeline \u003d new Timeline(new KeyFrame("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                    Duration.millis(1500), x -\u003e Platform.exit()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            timeline.play();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 68
    }
  },
  {
    "path": "src/main/java/duke/command/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public DukeException(String errormessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        super(errormessage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 8
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * \u003ch1\u003e Duke Parser class \u003c/h1\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * This class is the class that processes the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * commands to create readable Tasks that will be stored in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * the arraylist of tasks and arraylist of records"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @author Lee Penn Han"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @since 2020-25-08"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Processes the command and filters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * it the correct private methods to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * instantiate the Task objects to be recorded"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param cmd This is the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param taskList This is the taskList class that stores the current lists of tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @throws DukeException Exception for unidentified commands"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static String process(String cmd, TaskList taskList, boolean isDone) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] stringArr \u003d cmd.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (stringArr[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            response \u003d processorList(taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (stringArr[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            int index \u003d Integer.parseInt(stringArr[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            response \u003d taskList.updateTask(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (stringArr[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            int index \u003d Integer.parseInt(stringArr[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            response \u003d taskList.deleteTask(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (stringArr[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            response \u003d processorFind(cmd, taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (stringArr[0].equals(\"refresh\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            response \u003d processorRefresh(taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (stringArr[0].equals(\"important\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            int index \u003d Integer.parseInt(stringArr[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            response \u003d taskList.setTaskAsImportant(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (stringArr[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            response \u003d processorAddTodo(cmd, taskList, isDone);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (stringArr[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            response \u003d processorAddDeadline(cmd, taskList, isDone);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (stringArr[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            response \u003d processorAddEvent(cmd, taskList, isDone);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String message \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return Ui.showResponse(response, cmd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static String processorRefresh(TaskList taskList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        taskList.refreshTasklist();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return \"Records and Tasks refreshed.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static String processorFind(String command, TaskList taskList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String[] stringarr \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String key \u003d stringarr[1];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            if (key.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                return Ui.showError(\"Please provide a key\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            stringBuilder.append(\"Here are the matching tasks in your list: \\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                Task currentTask \u003d taskList.getTask();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                if (currentTask.getTask().contains(key)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                    String findResponse \u003d counter + \".\" + currentTask.toString() + \"\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                    stringBuilder.append(findResponse);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            taskList.refillTaskPriorityQueue();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            stringBuilder.append(Ui.showLine());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return stringBuilder.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return Ui.showError(\"Please give a key\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static String processorList(TaskList taskList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        stringBuilder.append(\"Here are the tasks in your list: \\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            int index \u003d i + 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Task currentTask \u003d taskList.getTask();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String listResponse \u003d index + \".\" + currentTask.toString() + \"\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            stringBuilder.append(listResponse);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        taskList.refillTaskPriorityQueue();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        stringBuilder.append(Ui.showLine());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static String processorAddTodo(String cmd, TaskList taskList, boolean isDone) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] stringArr \u003d cmd.split(\" \", 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Task taskObj;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (stringArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String message \u003d \"The description of a Todo cannot be empty\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        taskObj \u003d Todo.createTodo(stringArr[1]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            taskObj.setDone();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return taskList.addTask(taskObj);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static String processorAddEvent(String cmd, TaskList taskList, boolean isDone) throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] stringArr \u003d cmd.split(\" \", 2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Task taskObj;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (stringArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String message \u003d \"The description of an Event cannot be empty\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String[] secondArr \u003d stringArr[1].split(\"/at\", 2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            LocalDateTime date \u003d LocalDateTime.parse(secondArr[1].trim(), formatter);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            taskObj \u003d Event.createEvent(secondArr[0], date);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String message \u003d \"That does not look like a proper Date. \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                    + \"Please input MMM d yyyy HH:mm eg. Aug 25 2020 15:00\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            taskObj.setDone();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return taskList.addTask(taskObj);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static String processorAddDeadline(String cmd, TaskList taskList, boolean isDone) throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] stringArr \u003d cmd.split(\" \", 2);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Task taskObj;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (stringArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String message \u003d \"The description of a Deadline cannot be empty\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String[] secondArr \u003d stringArr[1].split(\"/by\", 2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            LocalDateTime date \u003d LocalDateTime.parse(secondArr[1].trim(), formatter);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            taskObj \u003d Deadline.createDeadline(secondArr[0], date);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String message \u003d \"That does not look like a proper Date. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                    + \"Please input MMM d yyyy HH:mm eg. Aug 25 2020 15:00\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            taskObj.setDone();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return taskList.addTask(taskObj);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Processes the Old Tasks that are scanned from the Text file."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param taskHistory ArrayList of String of Tasks from the Text File"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static String processOldTasks(ArrayList\u003cString\u003e taskHistory, TaskList taskList) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (int i \u003d 0; i \u003c taskHistory.size(); i++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String oldTask \u003d taskHistory.get(i);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            boolean isDone \u003d oldTask.charAt(4) \u003d\u003d \u0027O\u0027;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                String command \u003d processStoredTask(oldTask);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                Parser.process(command, taskList, isDone);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                return Ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return \"Total number of Task loaded from previous file: \" + taskHistory.size();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static String processStoredTask(String task) throws DukeException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] stringArr \u003d task.split(\" \", 2);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        switch (task.charAt(1)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        case \u0027T\u0027:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return \"todo \" + stringArr[1];"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String[] secondArr \u003d stringArr[1].split(\"by: \", 2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String storedDeadlineTask \u003d secondArr[0];"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String storedDeadlineDate \u003d secondArr[1];"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return \"deadline \" + storedDeadlineTask + \"/by \" + storedDeadlineDate;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String[] thirdArr \u003d stringArr[1].split(\"at: \", 2);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String storedEventTask \u003d thirdArr[0];"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String storedEventDate \u003d thirdArr[1];"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return \"event \" + storedEventTask + \"/at \" + storedEventDate;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String errorMessage \u003d \"Failed to process Stored Tasks\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new DukeException(errorMessage);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 211
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * \u003ch1\u003e Storage Class (Saving Tasks)\u003c/h1\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * Dukefile class is the class that contains the methods"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * that manages the task within the single initialisation of the bot"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * and extracts the current tasks and stores it in a text file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @author Lee Penn Han."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @version 1.0."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @since 2020-25-08."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private Storage(String fileName, TaskList taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.file \u003d new File(fileName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Loads the saved tasks that have not been archived."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return an ArrayList of the past Tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @throws IOException on input error."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public ArrayList\u003cString\u003e loadFile() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assert this.file !\u003d null : \"file cannot be null\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ArrayList\u003cString\u003e recordArrayLst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Scanner sc \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            recordArrayLst.add(sc.nextLine());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return recordArrayLst;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Saves the current list of task to a textfile."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * By iterating through the records Arraylist,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * the method will save each element as a single task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * in the text file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @author Lee Penn Han."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @throws IOException on input error."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String saveToFile() throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Task task \u003d taskList.getTask();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            fileWriter.write(task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return \"Total number of Tasks saved: \" + taskList.getListSize();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Instantiates a Storage object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @author Lee Penn Han."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param fileName This is the filename that the tasks will be saved under."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return Storage object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static Storage createDukeFile(String fileName, TaskList taskList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new Storage(fileName, taskList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 76
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * \u003ch1\u003e Deadline Task class \u003c/h1\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * The deadline class is a child class of Task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * It contains an extra property: deadline that indicates"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * the date that a task is due."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @author Lee Penn Han"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    protected Deadline(String task, LocalDateTime date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Creates a Deadline object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param task Task to be added"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param date Date to be added"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return Deadline"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static Deadline createDeadline(String task, LocalDateTime date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assert date !\u003d null : \"Assertion Failure: Deadline is Null\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new Deadline(task, date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns a string representation of a Deadline Object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * [D][X]** (task) by: (date) for tasks marked as Important"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * [D][X] (task) by: (date) for tasks not marked as Important"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * X for Undone Task, O for Done Task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String done \u003d this.done ? \"O\" : \"X\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String date \u003d this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (isImportant) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return \"[D][\" + done + \"]** \" + this.task + \"by: \" + date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return \"[D][\" + done + \"] \" + this.task + \"by: \" + date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 52
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * \u003ch1\u003e Event Task class \u003c/h1\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * The event class is a child class of Task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * It contains an extra property: event that indicates"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * the date that a task is happening."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @author Lee Penn Han"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    protected Event(String task, LocalDateTime date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Creates a Event object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param task Task to be added"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param date Date to be added"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return Event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static Event createEvent(String task, LocalDateTime date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new Event(task, date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns a string representation of a Deadline Object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * [E][X]** (task) at: (date) for tasks marked as Important"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * [E][X] (task) at: (date) for tasks not marked as Important"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * X for Undone Task, O for Done Task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String done \u003d this.done ? \"O\" : \"X\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String date \u003d this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (isImportant) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return \"[E][\" + done + \"]** \" + this.task + \"at: \" + date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return \"[E][\" + done + \"] \" + this.task + \"at: \" + date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 51
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * \u003ch1\u003e Task Class \u003c/h1\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * This is the parent task class that contains"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * the properties and methods that the various"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * types of child tasks requires."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @author Lee Penn Han."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @version 1.0."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @since 2020-08-25."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    protected String task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    protected LocalDateTime date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    protected boolean isImportant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    protected Task(String task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.isImportant \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns the current task as a String."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns the status of whether the task is done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return Boolean"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return this.done;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns the date of the task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return LocalDateTime"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Instantiates a Task object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param task the task to be done from User Input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return Task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static Task setTask(String task) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new Task(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Changes the status of done from false to true to"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * indicate that a Task has been completed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Changes the status of isImportance from false to true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * to indicate that a Task is important"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void setAsImportant() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.isImportant \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns a boolean on whether a task is important"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return Boolean"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public boolean isTaskImportant() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return this.isImportant;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 84
    }
  },
  {
    "path": "src/main/java/duke/task/TaskComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class TaskComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Overrides the Compare method of the Comparator Class to compare two tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * on 3 conditions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * 1. If a task is Done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * 2. If a task is marked as Important"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * 3. If a task date is before or after the other."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param task1 Task object 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param task2 Task object 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return Int"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (!task1.isDone() \u0026\u0026 task2.isDone()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (task1.isDone() \u0026\u0026 !task2.isDone()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (task1.isTaskImportant() \u0026\u0026 !task2.isTaskImportant()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (!task1.isTaskImportant() \u0026\u0026 task2.isTaskImportant()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (task1.getDate().isBefore(task2.getDate())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (task1.getDate().isAfter(task2.getDate())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 35
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private PriorityQueue\u003cTask\u003e taskPriority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.taskPriority \u003d new PriorityQueue\u003c\u003e(new TaskComparator());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Adds a task to the Task List"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param task The task as instantiated from Parser to a Task object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String representation of the Task object that is added"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        taskPriority.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return task.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Deletes a task from the Task List"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param taskNumber The index of the task in the Task List"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String representation of the Task object that is deleted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String deleteTask(int taskNumber) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assert !taskPriority.isEmpty() : \"Cannot delete from an Empty Tasklist\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (taskNumber \u003e getListSize()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String message \u003d \"Index not found! Are you sure you are typing the correct index?\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Task removedTask \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (int i \u003d 0; i \u003c taskNumber; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            removedTask \u003d taskPriority.poll();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.taskList.remove(removedTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.taskPriority.clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        refillTaskPriorityQueue();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assert removedTask !\u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return removedTask.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Updates a task in the Task List to mark it as done"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param taskNumber The index of the task in the Task List"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String representation of the Task object that is updated"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String updateTask(int taskNumber) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assert !taskPriority.isEmpty() : \"Cannot delete from an Empty Tasklist\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (taskNumber \u003e getListSize()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String message \u003d \"Index not found! Are you sure you are typing the correct index?\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Task updatedTask \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (int i \u003d 0; i \u003c taskNumber; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            updatedTask \u003d taskPriority.poll();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assert updatedTask !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        updatedTask.setDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.taskPriority.clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        refillTaskPriorityQueue();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return updatedTask.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Marks a Task as Important by changing the boolean property isImportant from false to true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param taskNumber The index of the task as shown on List"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @throws DukeException on User input error for Task number"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String setTaskAsImportant(int taskNumber) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assert !taskPriority.isEmpty() : \"Cannot delete from an Empty Tasklist\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (taskNumber \u003e getListSize()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String message \u003d \"Index not found! Are you sure you are typing the correct index?\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Task importantTask \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (int i \u003d 0; i \u003c taskNumber; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            importantTask \u003d taskPriority.poll();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assert importantTask !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        importantTask.setAsImportant();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.taskPriority.clear();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        refillTaskPriorityQueue();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return importantTask.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Refreshes the Tasklist arraylist to remove all tasks in it"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void refreshTasklist() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.taskPriority.clear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns the current size of the task list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return Integer value of the size of task list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns the task of highest priority in queue."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return Task"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public Task getTask() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return this.taskPriority.poll();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Creates a tasklist object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return TaskList Object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static TaskList createTaskList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new TaskList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Refills an Empty Priority Queue with the Tasks to ensure"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * all tasks are prioritised accordingly"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void refillTaskPriorityQueue() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (int i \u003d 0; i \u003c getListSize(); i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            this.taskPriority.add(taskList.get(i));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 138
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * \u003ch1\u003e Todo Task class \u003c/h1\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * The Todo class is a child class of Task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * It does not have any additional properties"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * from a Task Object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @author Lee Penn Han"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    protected Todo(String task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.date \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Creates a Todo object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param task Task to be added"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return Todo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static Todo createTodo(String task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new Todo(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns a string representation of a Todo Object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * [T][X]** (task) for tasks marked as Important"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * [T][X] (task) for tasks not marked as Important"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * X for Undone Task, O for Done Task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String done \u003d this.done ? \"O\" : \"X\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (isImportant) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return \"[T][\" + done + \"]** \" + this.task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return \"[T][\" + done + \"] \" + this.task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 49
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * \u003ch1\u003eUi Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * The Ui class manages the interactions with"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * the User."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * It consist of mainly void"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * methods that display a formatted text that is readable"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * by the User."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @author Lee Penn Han"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Prints out a line to mark an individual message"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static String showLine() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return \"_________________________________________\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Prints out a line and a message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param message String message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static String showCommandMessage(String message) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return \"_________________________________________\\n\" + message + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Prints out the Welcome Message when Duke is initialised"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * as an opening message"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static String welcomeMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String version \u003d \"Version 1.0\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String indent \u003d \"        \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String commands \u003d indent + \"list: Shows the current List \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + indent + \"delete (index): Delete the task from the List \\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + indent + \"todo (activity): Creates a Todo Task \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + indent + \"deadline /by (date) YYYY-MM-DD: Creates a Deadline Task \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + indent + \"event /at (string): Creates an Event Task \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + indent + \"find (keyword): Finds all occurrences of the keyword in the List\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return \"INITIALIZING \\n\" + logo"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"\\nCurrent version: \" + version"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"\\nWelcome to DUKE, the ToDo list creator \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"\\nWe current support these commands: \\n\" + commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"\\nPlease input a command:\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Prints out the Goodbye Message when Duke is exited"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static String goodbyeMessage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return \"_________________________________________\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"Closing now, hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"_________________________________________\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Print out the error message when an exception is catch"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * by wrapping it in separating lines to format the message."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param error The error message"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static String showError(String error) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return \"Sorry an error occurred!! \\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"_________________________________________\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + error + \"\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"_________________________________________\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Prints a formatted response of a successful Task execution"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param response The String representation of the response from the command input"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param command The String command from the command from User Input"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static String showResponse(String response, String command) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return \"Task: \" + command + \"\\nExecution Success: \\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"_________________________________________\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + response"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + \"\\n_________________________________________\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Prints a formatted response to inform the user that saving is in progress."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static String showSaving(String summary) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return \"Currently saving tasks. Do not Exit! \\n\" + summary + \"\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 103
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@dialogbox.css\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" styleClass\u003d\"dialogbox\" stylesheets\u003d\"@dialogbox.css\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"101.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" styleClass\u003d\"dialogbox\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 22
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@background.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" styleClass\u003d\"bodybg\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 19
    }
  },
  {
    "path": "src/test/java/command/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void processorAddTodoTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Storage storage \u003d Storage.createDukeFile(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        TaskList tasklist \u003d TaskList.createTaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Parser.process(\"todo read book\", tasklist, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertEquals(\"[T][\\u2718] read book\", tasklist.getTask(0).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void processorDoneTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Storage storage \u003d Storage.createDukeFile(\"test\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        TaskList tasklist \u003d TaskList.createTaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Parser.process(\"todo read book\", tasklist, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Parser.process(\"done 1\", tasklist, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertEquals(\"[T][\\u2713] read book\", tasklist.getTask(0).toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void processorDeleteTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Storage storage \u003d Storage.createDukeFile(\"test\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        TaskList tasklist \u003d TaskList.createTaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Parser.process(\"todo read book\", tasklist, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Parser.process(\"todo read 2nd book\", tasklist, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Parser.process(\"delete 1\", tasklist, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertEquals(1, tasklist.getListSize());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertEquals(\"[T][\\u2718] read 2nd book\", tasklist.getTask(0).toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 59
    }
  },
  {
    "path": "src/test/java/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void saveRecordTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Storage storage \u003d Storage.createDukeFile(\"test\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        storage.saveRecord(\"Testing String\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(1, storage.getRecords().size());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void updateRecordTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Storage storage \u003d Storage.createDukeFile(\"test\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        storage.saveRecord(\"Testing String\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        storage.updateRecord(\"Tested String\", 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(1, storage.getRecords().size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(\"Tested String\", storage.getRecords().get(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 33
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "event read book /at Mon 2-4pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deadline return book /by 2020-02-10"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "wrongword"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deadline return book /by wrongdate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 12
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "pennhanlee": 5
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "C:\\Users\\luciu\\Desktop\\NUS Lecture Notes\\Y2S1\\CS2103T\\ip\\src\\main\\java\\Deadline.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "C:\\Users\\luciu\\Desktop\\NUS Lecture Notes\\Y2S1\\CS2103T\\ip\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "C:\\Users\\luciu\\Desktop\\NUS Lecture Notes\\Y2S1\\CS2103T\\ip\\src\\main\\java\\Event.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "C:\\Users\\luciu\\Desktop\\NUS Lecture Notes\\Y2S1\\CS2103T\\ip\\src\\main\\java\\Parser.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "C:\\Users\\luciu\\Desktop\\NUS Lecture Notes\\Y2S1\\CS2103T\\ip\\src\\main\\java\\Task.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "C:\\Users\\luciu\\Desktop\\NUS Lecture Notes\\Y2S1\\CS2103T\\ip\\src\\main\\java\\Todo.java"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 6
    }
  }
]
