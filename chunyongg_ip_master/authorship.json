[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    String deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Deadline(String taskName, String deadline) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return String.format(\"%s%s %s%s\", \"[D]\", super.toString(), \"(by: \", deadline + \")\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 12
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static char line  \u003d (char) \t0x2501 ;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static void loopMethod() throws EmptyArgumentException, InvalidArgumentException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //gets input and displays it"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String word \u003d sc.nextLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (word.equals(\"bye\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            printTopLine();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            printBottomLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        else if (word.equals(\"list\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            printTopLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                System.out.println((i + 1) + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            printBottomLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        else if (word.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                int index \u003d Character.getNumericValue(word.charAt(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                Task originalTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                Task nextTask \u003d originalTask.setTaskAsCompleted();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                tasks.set(index, nextTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                printTopLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                System.out.println(\"Nice! I\u0027ve marked this task as done: \\n\" + nextTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                printBottomLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "               throw new InvalidArgumentException(\"Sorry, the task cannot be found!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        else if (word.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                int index \u003d word.indexOf(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    throw new EmptyArgumentException(\"No task name given\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                word \u003d word.substring(index + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                Task toDo \u003d new Todo(word);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                tasks.add(toDo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                printTopLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                System.out.println(toDo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String numberTasks \u003d String.format(\"Now you have %s %s in the list.\", tasks.size(), tasks.size() \u003d\u003d 1 ? \"task\" : \"tasks\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                System.out.println(numberTasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                printBottomLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "             throw new EmptyArgumentException(\"No task name given! \", e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        else if (word.startsWith(\"deadline\") || word.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            int index \u003d word.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            boolean isDeadline \u003d word.startsWith(\"deadline\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            if (index \u003d\u003d -1 || index \u003d\u003d word.length() - 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "              throw new EmptyArgumentException(\"No task name given!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //get stuff after the space if there are still characters after the space"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String content \u003d word.substring(word.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            index \u003d content.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            if (index \u003d\u003d -1 || index \u003d\u003d content.length() - 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //nothing after the slash"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //if there are words after the slash"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String taskName \u003d content.substring(0,index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String keyword \u003d content.substring(index + 1, index + 3);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            boolean matches \u003d isDeadline \u0026\u0026 keyword.equals(\"by\") || !isDeadline \u0026\u0026 keyword.equals(\"at\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            if (!matches) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                throw new EmptyArgumentException(\"Task name does not start with proper arguments\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String time \u003d content.substring(index + 4);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                Task newTask \u003d isDeadline ? new Deadline(taskName, time) : new Event(taskName, time);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                printTopLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                System.out.println(newTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String numberTasks \u003d String.format(\"Now you have %s %s in the list.\", tasks.size(), tasks.size() \u003d\u003d 1 ? \"task\" : \"tasks\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                System.out.println(numberTasks);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                printBottomLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "               throw new EmptyArgumentException(\"No task name given!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            throw new InvalidArgumentException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static void printTopLine() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Stream.generate(() -\u003e line).limit(50).forEach(System.out::print); // _ _ _ _ _"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static void printBottomLine() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Stream.generate(() -\u003e line).limit(50).forEach(System.out::print); // _ _ _ _ _"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        printTopLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke \\n What can I do for you?\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        printBottomLine();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            loopMethod();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 118,
      "-": 4
    }
  },
  {
    "path": "src/main/java/EmptyArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import sun.invoke.empty.Empty;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class EmptyArgumentException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    EmptyArgumentException(String errorMessage, Throwable err) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(errorMessage, err);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    EmptyArgumentException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 10
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    String time;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Event(String taskName, String time) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return String.format(\"%s%s %s%s\", \"[E]\", super.toString(), \"(at: \", time + \")\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 12
    }
  },
  {
    "path": "src/main/java/InvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.omg.CORBA.DynAnyPackage.Invalid;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class InvalidArgumentException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    InvalidArgumentException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(\"Sorry, Duke does not recognize your command!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    InvalidArgumentException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " }"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 10
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    String taskName;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    boolean isCompleted;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Task(String task) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.taskName \u003d task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private Task(String task, boolean isCompleted) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.taskName \u003d task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Task setTaskAsCompleted() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new Task(taskName, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String tickOrCross  \u003d isCompleted? \"\\u2713\" : \"\\u2717\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return String.format(\"%s %s %s %s\", \"[\", tickOrCross, \"] \", taskName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 23
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Todo(String taskName) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return String.format(\"%s%s\", \"[T]\", super.toString());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 10
    }
  }
]
