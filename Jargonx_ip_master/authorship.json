[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"Jargonx"},"content":"    mainClassName \u003d \"seedu.duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jargonx":16,"-":45}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"1. [T] [DONE] eat eyeholes cereal"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":"2. [T] [X] fix microverse car battery"}],"authorContributionMap":{"Jargonx":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"# RickBot User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"A Rick and Morty themed Command Line Interface for doing To-do tasking."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"## Rick Sanchez Features"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"Here are the features supported by Rick:"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"1. [Adding tasks in the list](#add)"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"2. [Listing of tasks](#list)"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"2. [Marking the tasks as DONE](#done)"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"3. [Deleting tasks](#delete)"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"4. [Finding a task](#find)"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"5. [Help](#help)"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"6. [Save Tasks](#save)"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"7. [Load Tasks](#load)"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"### Features"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"#### 1. Adding tasks in the list \u003ca name\u003d\"add\"\u003e\u003c/a\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"User will be able to add tasks into RickBot. There are 3 types of tasks that can be added to RickBot."},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"Note that all Strings written in [SquareBrackets] are the command parameters, with specified formatting."},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"##### 1. Todo \u003ca name\u003d\"addTodo\"\u003e\u003c/a\u003e - `todo [TaskName]`"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"Adds a simple todo with the specified task name."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"Example usage: `todo go to planet Florzon to Glop`"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"![image](./todo.png)"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"##### 2. Deadline \u003ca name\u003d\"addDeadline\"\u003e\u003c/a\u003e - `deadline [TaskName] /by [DD/MM/YYYY] [HH:MM]`"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"Adds a todo with a deadline with the specified task name, date and time."},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"Example usage: `deadline go to planet Florzon to Glop /by 21/09/2020 21:30`"},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"Expected Outcome:"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":"![image](./deadline.png)"},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"##### 3. Event \u003ca name\u003d\"addEvent\"\u003e\u003c/a\u003e - `event [TaskName] [\u0027/at\u0027 OR \u0027/on\u0027] [DD/MM/YYYY] [HH:MM]`"},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":"Adds a todo as an occurrence, with the specified task name, date and time."},{"lineNumber":40,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":41,"author":{"gitId":"Jargonx"},"content":"Example usage: `event go to planet Florzon to Glop /at 21/09/2020 21:30`"},{"lineNumber":42,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":43,"author":{"gitId":"Jargonx"},"content":"Expected Outcome:"},{"lineNumber":44,"author":{"gitId":"Jargonx"},"content":"![image](./event.png)"},{"lineNumber":45,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":46,"author":{"gitId":"Jargonx"},"content":"#### 2. Listing of tasks \u003ca name\u003d\"list\"\u003e\u003c/a\u003e"},{"lineNumber":47,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":48,"author":{"gitId":"Jargonx"},"content":"User will be able to list the current tasks in the task list."},{"lineNumber":49,"author":{"gitId":"Jargonx"},"content":"##### `list`"},{"lineNumber":50,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":51,"author":{"gitId":"Jargonx"},"content":"Example usage: `list`"},{"lineNumber":52,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":53,"author":{"gitId":"Jargonx"},"content":"Expected Outcome:"},{"lineNumber":54,"author":{"gitId":"Jargonx"},"content":"![image](./list.png)"},{"lineNumber":55,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":56,"author":{"gitId":"Jargonx"},"content":"#### 3. Marking the tasks as DONE \u003ca name\u003d\"done\"\u003e\u003c/a\u003e"},{"lineNumber":57,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":58,"author":{"gitId":"Jargonx"},"content":"All User added tasks will be added as uncompleted tasks. User can mark them as DONE using this command."},{"lineNumber":59,"author":{"gitId":"Jargonx"},"content":"##### `done [TaskListNumber]`"},{"lineNumber":60,"author":{"gitId":"Jargonx"},"content":"The User can see what the TaskListNumber is from the [**`list`**](#list) command."},{"lineNumber":61,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":62,"author":{"gitId":"Jargonx"},"content":"Example usage: `done 1`"},{"lineNumber":63,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":64,"author":{"gitId":"Jargonx"},"content":"Expected Outcome:"},{"lineNumber":65,"author":{"gitId":"Jargonx"},"content":"![image](./done.png)"},{"lineNumber":66,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":67,"author":{"gitId":"Jargonx"},"content":"#### 4. Deleting tasks \u003ca name\u003d\"delete\"\u003e\u003c/a\u003e"},{"lineNumber":68,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":69,"author":{"gitId":"Jargonx"},"content":"User can delete tasks from list."},{"lineNumber":70,"author":{"gitId":"Jargonx"},"content":"##### `delete [TaskListNumber]`"},{"lineNumber":71,"author":{"gitId":"Jargonx"},"content":"The User can see what the TaskListNumber is from the [**`list`**](#list) command."},{"lineNumber":72,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":73,"author":{"gitId":"Jargonx"},"content":"Example usage: `delete 1`"},{"lineNumber":74,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":75,"author":{"gitId":"Jargonx"},"content":"Expected Outcome:"},{"lineNumber":76,"author":{"gitId":"Jargonx"},"content":"![image](./delete.png)"},{"lineNumber":77,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":78,"author":{"gitId":"Jargonx"},"content":"#### 5. Finding a task \u003ca name\u003d\"find\"\u003e\u003c/a\u003e"},{"lineNumber":79,"author":{"gitId":"Jargonx"},"content":"User can find tasks in the list."},{"lineNumber":80,"author":{"gitId":"Jargonx"},"content":"##### `find [TaskNameSubString]`"},{"lineNumber":81,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":82,"author":{"gitId":"Jargonx"},"content":"User can type in any substring that appears in the Task name, and they will be given a list of tasks with the specified substring."},{"lineNumber":83,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":84,"author":{"gitId":"Jargonx"},"content":"Example usage: `find car`"},{"lineNumber":85,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":86,"author":{"gitId":"Jargonx"},"content":"Expected Outcome:"},{"lineNumber":87,"author":{"gitId":"Jargonx"},"content":"![image](./find.png)"},{"lineNumber":88,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":89,"author":{"gitId":"Jargonx"},"content":"#### 6. Help \u003ca name\u003d\"help\"\u003e\u003c/a\u003e"},{"lineNumber":90,"author":{"gitId":"Jargonx"},"content":"Rick Sanchez may be the smartest man in the universe, so he doesn\u0027t expect Morty(the User) to remember the commands that he can say to him."},{"lineNumber":91,"author":{"gitId":"Jargonx"},"content":"The User may type in the `help` command to find the right command for the job."},{"lineNumber":92,"author":{"gitId":"Jargonx"},"content":"##### `help`"},{"lineNumber":93,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":94,"author":{"gitId":"Jargonx"},"content":"Example usage: `help`"},{"lineNumber":95,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":96,"author":{"gitId":"Jargonx"},"content":"Expected Outcome:"},{"lineNumber":97,"author":{"gitId":"Jargonx"},"content":"![image](./helpAll.png)"},{"lineNumber":98,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":99,"author":{"gitId":"Jargonx"},"content":"If the User wants a more detailed description of the command then they can use the following command:"},{"lineNumber":100,"author":{"gitId":"Jargonx"},"content":"##### `help [CommandName]`"},{"lineNumber":101,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":102,"author":{"gitId":"Jargonx"},"content":"Example usage: `help deadline`"},{"lineNumber":103,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":104,"author":{"gitId":"Jargonx"},"content":"Expected Outcome:"},{"lineNumber":105,"author":{"gitId":"Jargonx"},"content":"![image](./helpOne.png)"},{"lineNumber":106,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":107,"author":{"gitId":"Jargonx"},"content":"Ofcourse, they can use the [**`help`**](#help) command to see the list of commands."},{"lineNumber":108,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":109,"author":{"gitId":"Jargonx"},"content":"#### 7. Save Tasks \u003ca name\u003d\"save\"\u003e\u003c/a\u003e"},{"lineNumber":110,"author":{"gitId":"Jargonx"},"content":"User can use the following command to save the current tasks into persistent storage."},{"lineNumber":111,"author":{"gitId":"Jargonx"},"content":"##### `save`"},{"lineNumber":112,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":113,"author":{"gitId":"Jargonx"},"content":"Example usage: `save`"},{"lineNumber":114,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":115,"author":{"gitId":"Jargonx"},"content":"Expected Outcome:"},{"lineNumber":116,"author":{"gitId":"Jargonx"},"content":"![image](./save.png)"},{"lineNumber":117,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":118,"author":{"gitId":"Jargonx"},"content":"This will save the Tasks in a human readable format under the file path ip/data/duke.txt by default."},{"lineNumber":119,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":120,"author":{"gitId":"Jargonx"},"content":"All previous data in the save file(duke.txt) will be overwritten by this."},{"lineNumber":121,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":122,"author":{"gitId":"Jargonx"},"content":"#### 8. Load Tasks \u003ca name\u003d\"load\"\u003e\u003c/a\u003e"},{"lineNumber":123,"author":{"gitId":"Jargonx"},"content":"User can use the following command to load previously stored tasks from persistent storage."},{"lineNumber":124,"author":{"gitId":"Jargonx"},"content":"##### `load [FilePathName]`"},{"lineNumber":125,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":126,"author":{"gitId":"Jargonx"},"content":"Example usage: `load ./data/duke.txt`"},{"lineNumber":127,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":128,"author":{"gitId":"Jargonx"},"content":"Expected Outcome:"},{"lineNumber":129,"author":{"gitId":"Jargonx"},"content":"![image](./load.png)"},{"lineNumber":130,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":131,"author":{"gitId":"Jargonx"},"content":"This will load the Tasks from the filePath specified. User is expected to use `./data/duke.txt` by default."},{"lineNumber":132,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":133,"author":{"gitId":"Jargonx"},"content":"User may choose to make their own task file and load it. The tasks are to follow the following format:"},{"lineNumber":134,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":135,"author":{"gitId":"Jargonx"},"content":"1. [T] [X]  some todo name here"},{"lineNumber":136,"author":{"gitId":"Jargonx"},"content":"2. [D] [X]  some deadline name here (by:  12/05/2020 14:30)"},{"lineNumber":137,"author":{"gitId":"Jargonx"},"content":"3. [E] [X]  some event name here (at:  13/05/2020 13:30)"},{"lineNumber":138,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":139,"author":{"gitId":"Jargonx"},"content":"If the tasks do not follow this format, there will be a WrongFormat Error shown to the User."},{"lineNumber":140,"author":{"gitId":"Jargonx"},"content":"If unsure, refer to [**`todo`**](#addTodo), [**`deadline`**](#addDeadline), [**`event`**](#addEvent)."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"Jargonx"},"content":"Have fun talking to RickBot from Dimension B420!"}],"authorContributionMap":{"Jargonx":133,"-":9}},{"path":"src/main/java/Bye.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":" * Ends the ChatBot."},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"public class Bye extends Command {"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"    Bye() {"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"        this.name \u003d \"bye\";"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"        this.usage \u003d \"bye\";"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"        this.description \u003d \"I will go to sleep\";"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"    public String respond() {"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"        return \"I-I\u0027m gonna go sleep Morty, d-dont disturb me anymore unless you \" +"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"                \" wanna get blasted by my *BURRRRRPPP* lazers\";"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"     * Sets end parameter as true."},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"    public void endBot() {"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"        ChatBot.hasEnded \u003d true;"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":23}},{"path":"src/main/java/ChatBot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":" * Contains the ChatBot called by Main class."},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"public class ChatBot {"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"    /** Indicates if ChatBot has been ended by User */"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"    static boolean hasEnded \u003d false;"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"     * Main static method for ChatBot to be started in Main class."},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"    public static String start() {"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"            DataStorageInterface.initStorage();"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"            return RickCustom.SUCCESS_INTRO;"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"        } catch (DukeException e) {"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"            return RickCustom.FAILED_INTRO;"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"    public static String getResponse(String query){"},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"        try{"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"            if(!hasEnded) {"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"                String resp \u003d ChatBot.respond(query);"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"                return resp;"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":"            } else {"},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"                return \"\";"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"        } catch (Exception e) {"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"            return e.getMessage();"},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"     * Returns appropriate response to be printed on the screen for the User to read."},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"Jargonx"},"content":"     * @param query The String passed in by the User."},{"lineNumber":41,"author":{"gitId":"Jargonx"},"content":"     * @return Response to User\u0027s command."},{"lineNumber":42,"author":{"gitId":"Jargonx"},"content":"     * @throws Exception Encompasses DukeException, FileNotFoundException, IOException."},{"lineNumber":43,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Jargonx"},"content":"    private static String respond(String query) throws Exception {"},{"lineNumber":45,"author":{"gitId":"Jargonx"},"content":"        String[] splitQuery \u003d Parser.getSplit(query);"},{"lineNumber":46,"author":{"gitId":"Jargonx"},"content":"        String command \u003d Parser.getCommand(splitQuery);"},{"lineNumber":47,"author":{"gitId":"Jargonx"},"content":"        String[] commandRemoved \u003d Parser.removeCommandString(splitQuery);"},{"lineNumber":48,"author":{"gitId":"Jargonx"},"content":"        switch (command) {"},{"lineNumber":49,"author":{"gitId":"Jargonx"},"content":"        case \"bye\":"},{"lineNumber":50,"author":{"gitId":"Jargonx"},"content":"            Bye bye \u003d new Bye();"},{"lineNumber":51,"author":{"gitId":"Jargonx"},"content":"            bye.endBot();"},{"lineNumber":52,"author":{"gitId":"Jargonx"},"content":"            return bye.respond();"},{"lineNumber":53,"author":{"gitId":"Jargonx"},"content":"        case \"clear\":"},{"lineNumber":54,"author":{"gitId":"Jargonx"},"content":"            Clear clear \u003d new Clear();"},{"lineNumber":55,"author":{"gitId":"Jargonx"},"content":"            return clear.respond();"},{"lineNumber":56,"author":{"gitId":"Jargonx"},"content":"        case \"deadline\":"},{"lineNumber":57,"author":{"gitId":"Jargonx"},"content":"            Task deadline \u003d getAddedDeadline(commandRemoved);"},{"lineNumber":58,"author":{"gitId":"Jargonx"},"content":"            return DataStorageInterface.taskAdded(deadline);"},{"lineNumber":59,"author":{"gitId":"Jargonx"},"content":"        case \"delete\":"},{"lineNumber":60,"author":{"gitId":"Jargonx"},"content":"            Delete delete \u003d new Delete(commandRemoved);"},{"lineNumber":61,"author":{"gitId":"Jargonx"},"content":"            return delete.deleteTask(splitQuery[1]);"},{"lineNumber":62,"author":{"gitId":"Jargonx"},"content":"        case \"done\":"},{"lineNumber":63,"author":{"gitId":"Jargonx"},"content":"            Done done \u003d new Done(commandRemoved);"},{"lineNumber":64,"author":{"gitId":"Jargonx"},"content":"            return done.markedAsDone(splitQuery[1]);"},{"lineNumber":65,"author":{"gitId":"Jargonx"},"content":"        case \"event\":"},{"lineNumber":66,"author":{"gitId":"Jargonx"},"content":"            Task event \u003d getAddedEvent(commandRemoved);"},{"lineNumber":67,"author":{"gitId":"Jargonx"},"content":"            return DataStorageInterface.taskAdded(event);"},{"lineNumber":68,"author":{"gitId":"Jargonx"},"content":"        case \"find\":"},{"lineNumber":69,"author":{"gitId":"Jargonx"},"content":"            String remainingQuery \u003d Parser.concatenateStrArr(commandRemoved);"},{"lineNumber":70,"author":{"gitId":"Jargonx"},"content":"            Find find \u003d new Find(remainingQuery);"},{"lineNumber":71,"author":{"gitId":"Jargonx"},"content":"            return find.response();"},{"lineNumber":72,"author":{"gitId":"Jargonx"},"content":"        case \"help\":"},{"lineNumber":73,"author":{"gitId":"Jargonx"},"content":"            Help help \u003d new Help(splitQuery);"},{"lineNumber":74,"author":{"gitId":"Jargonx"},"content":"            return help.respond();"},{"lineNumber":75,"author":{"gitId":"Jargonx"},"content":"        case \"load\":"},{"lineNumber":76,"author":{"gitId":"Jargonx"},"content":"            Load load \u003d new Load(splitQuery);"},{"lineNumber":77,"author":{"gitId":"Jargonx"},"content":"            return load.load();"},{"lineNumber":78,"author":{"gitId":"Jargonx"},"content":"        case \"list\":"},{"lineNumber":79,"author":{"gitId":"Jargonx"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":80,"author":{"gitId":"Jargonx"},"content":"            return taskList.response();"},{"lineNumber":81,"author":{"gitId":"Jargonx"},"content":"        case \"save\":"},{"lineNumber":82,"author":{"gitId":"Jargonx"},"content":"            Save save \u003d new Save();"},{"lineNumber":83,"author":{"gitId":"Jargonx"},"content":"            save.writeToFile();"},{"lineNumber":84,"author":{"gitId":"Jargonx"},"content":"            return save.response();"},{"lineNumber":85,"author":{"gitId":"Jargonx"},"content":"        case \"todo\":"},{"lineNumber":86,"author":{"gitId":"Jargonx"},"content":"            String editedQ \u003d Parser.concatenateStrArr(commandRemoved);"},{"lineNumber":87,"author":{"gitId":"Jargonx"},"content":"            Task toDo \u003d DataStorageInterface.addToDo(editedQ);"},{"lineNumber":88,"author":{"gitId":"Jargonx"},"content":"            return DataStorageInterface.taskAdded(toDo);"},{"lineNumber":89,"author":{"gitId":"Jargonx"},"content":"        default:"},{"lineNumber":90,"author":{"gitId":"Jargonx"},"content":"            throw new UnknownCommandException(command);"},{"lineNumber":91,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":94,"author":{"gitId":"Jargonx"},"content":"    private static Task getAddedDeadline(String[] commandRemoved) throws DukeException {"},{"lineNumber":95,"author":{"gitId":"Jargonx"},"content":"        String title \u003d Parser.getTitle(commandRemoved);"},{"lineNumber":96,"author":{"gitId":"Jargonx"},"content":"        String preposition \u003d Parser.getPreposition(commandRemoved);"},{"lineNumber":97,"author":{"gitId":"Jargonx"},"content":"        LocalDate dateDeadline \u003d Parser.getDate(commandRemoved);"},{"lineNumber":98,"author":{"gitId":"Jargonx"},"content":"        LocalTime timeDeadline \u003d Parser.getTime(commandRemoved);"},{"lineNumber":99,"author":{"gitId":"Jargonx"},"content":"        return DataStorageInterface.addDeadline(title, preposition, dateDeadline, timeDeadline);"},{"lineNumber":100,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":102,"author":{"gitId":"Jargonx"},"content":"    private static Task getAddedEvent(String[] commandRemoved) throws DukeException {"},{"lineNumber":103,"author":{"gitId":"Jargonx"},"content":"        String ttle \u003d Parser.getTitle(commandRemoved);"},{"lineNumber":104,"author":{"gitId":"Jargonx"},"content":"        String ppstn \u003d Parser.getPreposition(commandRemoved);"},{"lineNumber":105,"author":{"gitId":"Jargonx"},"content":"        LocalDate dateEvent \u003d Parser.getDate(commandRemoved);"},{"lineNumber":106,"author":{"gitId":"Jargonx"},"content":"        LocalTime timeEvent \u003d Parser.getTime(commandRemoved);"},{"lineNumber":107,"author":{"gitId":"Jargonx"},"content":"        return DataStorageInterface.addEvent(ttle,ppstn,dateEvent,timeEvent);"},{"lineNumber":108,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":109}},{"path":"src/main/java/Clear.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"public class Clear extends Command {"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"     * Adds 20 newline Characters to the screen for better User Experience."},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"    Clear() {"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"        this.name \u003d \"clear\";"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"        this.usage \u003d \"clear\";"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"        this.description \u003d \"Clears the screen with newline characters\";"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"    public String respond() {"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"        return \"Dont you get it Morty? We\u0027re in a GUI you idiot, you cant\" +"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"                \" just clear all the stuff I\u0027ve said away.\";"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":16}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":" * Abstract Class for all Commands."},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"public abstract class Command {"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"    protected String name;"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"    protected String usage;"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"    Command() {}"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"    public String getName() {"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"        return name;"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"    public String getUsage() {"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"        return usage;"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"    public String getDescription() {"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"        return description;"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":22}},{"path":"src/main/java/CommandCenter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"public class CommandCenter {"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"    public static ArrayList\u003cCommand\u003e commandList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"    CommandCenter() {"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"    public static void addCommand(Command command) {"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"        commandList.add(command);"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":14}},{"path":"src/main/java/CustomException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":" * Allows for Custom Messages to be thrown under DukeException."},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"public class CustomException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"    CustomException(String errorMessage) {"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"        this.errorMessage \u003d errorMessage;"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":9}},{"path":"src/main/java/DataStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":" * All Non-Persistent Data is stored in this class."},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":" * This includes all Commands at initialisation."},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":" * Allows for further addition of Command Classes during Runtime for future development."},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"public class DataStorage {"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"    /** Stores all the non-persistent tasks in the taskList */"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"    public static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"    /** Stores all the Commands at initialisation of ChatBot */"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"    public static ArrayList\u003cCommand\u003e commandInit \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"     * Initialises the CommandInit Array with all the possible Commands that User can query."},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"     * @throws DukeException For the different Commands Initialising here, will never be thrown."},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"    public static void init() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"        commandInit.add(new Bye());"},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"        commandInit.add(new Clear());"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"        commandInit.add(new Deadline(\"init\",\"by\",LocalDate.MAX,LocalTime.MIDNIGHT));"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"        commandInit.add(new Delete(new String[]{\"\",\"\"}));"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"        commandInit.add(new Done(new String[]{\"\",\"\"}));"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":"        commandInit.add(new Event(\"init\",\"on\",LocalDate.MAX,LocalTime.MIDNIGHT));"},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"        commandInit.add(new Find(\"init\"));"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"        commandInit.add(new Help(new String[]{\"help\"}));"},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"        commandInit.add(new TaskList());"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"        commandInit.add(new Load(new String[]{\"\",\"\"}));"},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":"        commandInit.add(new ToDo(\"init\"));"},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"        commandInit.add(new Save());"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":37}},{"path":"src/main/java/DataStorageInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalTime;"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":" * Acts as an interface for all other Classes with the Non-Persistent DataStorage Class."},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":" * Ensures that none of the Classes have a direct dependency on the DataStorage itself."},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"public class DataStorageInterface {"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"     * Initialises the DataStorage at start up of ChatBot."},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"     * @throws DukeException For the different Commands Initialising, will never be thrown."},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"    public static void initStorage() throws DukeException {"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"        DataStorage.init();"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"     * Returns String representation of list of commands for User to know."},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"     * @return String representation of list of commands with Usage syntax."},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"    public static String listCommands() {"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"        StringBuilder allCommands \u003d new StringBuilder();"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"        for (Command c:DataStorage.commandInit) {"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"            allCommands.append(c.getName()).append(\": \").append(c.getUsage()).append(\"\\n\");"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"        return allCommands.toString();"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":"     * Marks Task as Done in the task list."},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":"     * @param index Index of Task in list."},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"     * @return Task that is marked Done."},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"     * @throws CustomException If Task IsDone."},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Jargonx"},"content":"    public static Task markDone(int index) throws CustomException {"},{"lineNumber":41,"author":{"gitId":"Jargonx"},"content":"        assert index \u003c DataStorage.taskList.size() \u0026\u0026 index \u003e -1;"},{"lineNumber":42,"author":{"gitId":"Jargonx"},"content":"        Task curr \u003d DataStorage.taskList.get(index);"},{"lineNumber":43,"author":{"gitId":"Jargonx"},"content":"        if (curr.isDone()) {"},{"lineNumber":44,"author":{"gitId":"Jargonx"},"content":"            throw new CustomException(\"Error: H-How many times are you gonna *BUUURRRRRP* mark \" +"},{"lineNumber":45,"author":{"gitId":"Jargonx"},"content":"                    \"this thing as done? I-Its already done Morty\");"},{"lineNumber":46,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"Jargonx"},"content":"        curr.markDone();"},{"lineNumber":48,"author":{"gitId":"Jargonx"},"content":"        return curr;"},{"lineNumber":49,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":51,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Jargonx"},"content":"     * Removes a Task from the Task List."},{"lineNumber":53,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Jargonx"},"content":"     * @param index Index of Task in list."},{"lineNumber":55,"author":{"gitId":"Jargonx"},"content":"     * @return Task that is removed."},{"lineNumber":56,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Jargonx"},"content":"    public static Task remove(int index) {"},{"lineNumber":58,"author":{"gitId":"Jargonx"},"content":"        return DataStorage.taskList.remove(index);"},{"lineNumber":59,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":61,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Jargonx"},"content":"     * Returns size of Task List."},{"lineNumber":63,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"Jargonx"},"content":"     * @return size of Task List."},{"lineNumber":65,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Jargonx"},"content":"    public static int getSize() {"},{"lineNumber":67,"author":{"gitId":"Jargonx"},"content":"        return DataStorage.taskList.size();"},{"lineNumber":68,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":70,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"Jargonx"},"content":"     * Returns number of Tasks that are not marked Done by the User."},{"lineNumber":72,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"Jargonx"},"content":"     * @return number of Tasks that are not marked Done by the User."},{"lineNumber":74,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Jargonx"},"content":"    public static int getTasksNotDone() {"},{"lineNumber":76,"author":{"gitId":"Jargonx"},"content":"        int counter \u003d 0;"},{"lineNumber":77,"author":{"gitId":"Jargonx"},"content":"        for (Task t:DataStorage.taskList) {"},{"lineNumber":78,"author":{"gitId":"Jargonx"},"content":"            if (!t.isDone()) {"},{"lineNumber":79,"author":{"gitId":"Jargonx"},"content":"                counter++;"},{"lineNumber":80,"author":{"gitId":"Jargonx"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"Jargonx"},"content":"        return counter;"},{"lineNumber":83,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":85,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"Jargonx"},"content":"     * Returns Task Added Response with number of tasks Not Done."},{"lineNumber":87,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"Jargonx"},"content":"     * @param task Task to be added."},{"lineNumber":89,"author":{"gitId":"Jargonx"},"content":"     * @return Task Added Response with number of tasks Not Done."},{"lineNumber":90,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"Jargonx"},"content":"    public static String taskAdded(Task task) {"},{"lineNumber":92,"author":{"gitId":"Jargonx"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + task.toString() +"},{"lineNumber":93,"author":{"gitId":"Jargonx"},"content":"                String.format(\"\\nNow you have %d tasks in the list\","},{"lineNumber":94,"author":{"gitId":"Jargonx"},"content":"                        DataStorageInterface.getTasksNotDone());"},{"lineNumber":95,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":97,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"Jargonx"},"content":"     * Adds Todo Task to task list."},{"lineNumber":99,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"Jargonx"},"content":"     * @param query User entered title of Task."},{"lineNumber":101,"author":{"gitId":"Jargonx"},"content":"     * @return Task that is added."},{"lineNumber":102,"author":{"gitId":"Jargonx"},"content":"     * @throws WrongUsageException If todo command is used wrongly."},{"lineNumber":103,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Jargonx"},"content":"    public static Task addToDo(String query) throws WrongUsageException {"},{"lineNumber":105,"author":{"gitId":"Jargonx"},"content":"        Task newTask \u003d new ToDo(query);"},{"lineNumber":106,"author":{"gitId":"Jargonx"},"content":"        DataStorage.taskList.add(newTask);"},{"lineNumber":107,"author":{"gitId":"Jargonx"},"content":"        return newTask;"},{"lineNumber":108,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":110,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"Jargonx"},"content":"     * Adds Deadline Task to task list."},{"lineNumber":112,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"Jargonx"},"content":"     * @param title User entered title of Task."},{"lineNumber":114,"author":{"gitId":"Jargonx"},"content":"     * @param preposition User entered preposition for date and time."},{"lineNumber":115,"author":{"gitId":"Jargonx"},"content":"     * @param date User entered due date of Task."},{"lineNumber":116,"author":{"gitId":"Jargonx"},"content":"     * @param time User entered timing of Task."},{"lineNumber":117,"author":{"gitId":"Jargonx"},"content":"     * @return Task that is added."},{"lineNumber":118,"author":{"gitId":"Jargonx"},"content":"     * @throws WrongUsageException If deadline command is used wrongly."},{"lineNumber":119,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"Jargonx"},"content":"    public static Task addDeadline(String title, String preposition, LocalDate date, LocalTime time)"},{"lineNumber":121,"author":{"gitId":"Jargonx"},"content":"            throws WrongUsageException {"},{"lineNumber":122,"author":{"gitId":"Jargonx"},"content":"        Task newTask \u003d new Deadline(title,preposition,date, time);"},{"lineNumber":123,"author":{"gitId":"Jargonx"},"content":"        DataStorage.taskList.add(newTask);"},{"lineNumber":124,"author":{"gitId":"Jargonx"},"content":"        return newTask;"},{"lineNumber":125,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":127,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"Jargonx"},"content":"     * Adds Event Task to task list."},{"lineNumber":129,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"Jargonx"},"content":"     * @param title User entered title of Task."},{"lineNumber":131,"author":{"gitId":"Jargonx"},"content":"     * @param preposition User entered preposition for date and time."},{"lineNumber":132,"author":{"gitId":"Jargonx"},"content":"     * @param date User entered due date of Task."},{"lineNumber":133,"author":{"gitId":"Jargonx"},"content":"     * @param time User entered timing of Task."},{"lineNumber":134,"author":{"gitId":"Jargonx"},"content":"     * @return Task that is added."},{"lineNumber":135,"author":{"gitId":"Jargonx"},"content":"     * @throws WrongUsageException If event command is used wrongly."},{"lineNumber":136,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"Jargonx"},"content":"    public static Task addEvent(String title, String preposition, LocalDate date, LocalTime time)"},{"lineNumber":138,"author":{"gitId":"Jargonx"},"content":"            throws WrongUsageException {"},{"lineNumber":139,"author":{"gitId":"Jargonx"},"content":"        Task newTask \u003d new Event(title,preposition,date, time);"},{"lineNumber":140,"author":{"gitId":"Jargonx"},"content":"        DataStorage.taskList.add(newTask);"},{"lineNumber":141,"author":{"gitId":"Jargonx"},"content":"        return newTask;"},{"lineNumber":142,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":144,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"Jargonx"},"content":"     * Removes all tasks from the Task List."},{"lineNumber":146,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"Jargonx"},"content":"    public static void removeAllTasks() {"},{"lineNumber":148,"author":{"gitId":"Jargonx"},"content":"        DataStorage.taskList.clear();"},{"lineNumber":149,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":151,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"Jargonx"},"content":"     * Adds Tasks from an array to the current Task List."},{"lineNumber":153,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"Jargonx"},"content":"     * @param taskArrayList Tasks to be Added in current Task List."},{"lineNumber":155,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"Jargonx"},"content":"    public static void loadNewTasks(ArrayList\u003cTask\u003e taskArrayList) {"},{"lineNumber":157,"author":{"gitId":"Jargonx"},"content":"        DataStorage.taskList.addAll(taskArrayList);"},{"lineNumber":158,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":160,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"Jargonx"},"content":"     * Returns String representation of all tasks in the task list."},{"lineNumber":162,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":163,"author":{"gitId":"Jargonx"},"content":"     * @return String representation of all tasks in the task list."},{"lineNumber":164,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"Jargonx"},"content":"    public static String printListOfTasks() {"},{"lineNumber":166,"author":{"gitId":"Jargonx"},"content":"        StringBuilder acc \u003d new StringBuilder();"},{"lineNumber":167,"author":{"gitId":"Jargonx"},"content":"        int i \u003d 0;"},{"lineNumber":168,"author":{"gitId":"Jargonx"},"content":"        for (Task t: DataStorage.taskList) {"},{"lineNumber":169,"author":{"gitId":"Jargonx"},"content":"            i++;"},{"lineNumber":170,"author":{"gitId":"Jargonx"},"content":"            acc.append(String.format(\"%d. %s\\n\", i, t));"},{"lineNumber":171,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"Jargonx"},"content":"        return acc.toString().isEmpty() ? \"You have no Tasks in the list. Not like \" +"},{"lineNumber":173,"author":{"gitId":"Jargonx"},"content":"                \"they *BUUURRRRP* matter\" : acc.toString();"},{"lineNumber":174,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":176,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":177,"author":{"gitId":"Jargonx"},"content":"     * Returns String representation of tasks to be saved in an external file."},{"lineNumber":178,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":179,"author":{"gitId":"Jargonx"},"content":"     * @return String representation of tasks to be saved in an external file."},{"lineNumber":180,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"Jargonx"},"content":"    public static String getSaveRepresentation() {"},{"lineNumber":182,"author":{"gitId":"Jargonx"},"content":"        StringBuilder acc \u003d new StringBuilder();"},{"lineNumber":183,"author":{"gitId":"Jargonx"},"content":"        int i \u003d 0;"},{"lineNumber":184,"author":{"gitId":"Jargonx"},"content":"        for (Task t: DataStorage.taskList) {"},{"lineNumber":185,"author":{"gitId":"Jargonx"},"content":"            i++;"},{"lineNumber":186,"author":{"gitId":"Jargonx"},"content":"            acc.append(String.format(\"%d. %s\\n\", i, t.saveStringRepresentation()));"},{"lineNumber":187,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"Jargonx"},"content":"        return acc.toString().isEmpty() ? \"\" : acc.toString();"},{"lineNumber":189,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":191,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"Jargonx"},"content":"     * Returns Usage of a single Command."},{"lineNumber":193,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":194,"author":{"gitId":"Jargonx"},"content":"     * @param query Command queried by User."},{"lineNumber":195,"author":{"gitId":"Jargonx"},"content":"     * @return String representation of Command queried by User."},{"lineNumber":196,"author":{"gitId":"Jargonx"},"content":"     * @throws UnknownCommandException If User enters wrong Command."},{"lineNumber":197,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"Jargonx"},"content":"    public static String getUsage(String query) throws UnknownCommandException {"},{"lineNumber":199,"author":{"gitId":"Jargonx"},"content":"        for (Command c: DataStorage.commandInit) {"},{"lineNumber":200,"author":{"gitId":"Jargonx"},"content":"            if (c.getName().equalsIgnoreCase(query)) {"},{"lineNumber":201,"author":{"gitId":"Jargonx"},"content":"                return c.getName() + \"\\nUsage: \"  + c.getUsage() +"},{"lineNumber":202,"author":{"gitId":"Jargonx"},"content":"                        \"\\nDescription: \" + c.getDescription();"},{"lineNumber":203,"author":{"gitId":"Jargonx"},"content":"            }"},{"lineNumber":204,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"Jargonx"},"content":"        throw new UnknownCommandException(query);"},{"lineNumber":206,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":208,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":209,"author":{"gitId":"Jargonx"},"content":"     * Returns all tasks that contain keyword queried by User."},{"lineNumber":210,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":211,"author":{"gitId":"Jargonx"},"content":"     * @param searchQuery query term by User."},{"lineNumber":212,"author":{"gitId":"Jargonx"},"content":"     * @return String representation of all tasks containing keyword queried by User."},{"lineNumber":213,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":214,"author":{"gitId":"Jargonx"},"content":"    public static String getQueriedTasks(String searchQuery) {"},{"lineNumber":215,"author":{"gitId":"Jargonx"},"content":"        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":216,"author":{"gitId":"Jargonx"},"content":"        for (Task t: DataStorage.taskList) {"},{"lineNumber":217,"author":{"gitId":"Jargonx"},"content":"            if (t.getTitle().toLowerCase().contains(searchQuery.toLowerCase())) {"},{"lineNumber":218,"author":{"gitId":"Jargonx"},"content":"                newTaskList.add(t);"},{"lineNumber":219,"author":{"gitId":"Jargonx"},"content":"            }"},{"lineNumber":220,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"Jargonx"},"content":"        StringBuilder acc \u003d new StringBuilder();"},{"lineNumber":222,"author":{"gitId":"Jargonx"},"content":"        int i \u003d 0;"},{"lineNumber":223,"author":{"gitId":"Jargonx"},"content":"        for (Task t: newTaskList){"},{"lineNumber":224,"author":{"gitId":"Jargonx"},"content":"            i++;"},{"lineNumber":225,"author":{"gitId":"Jargonx"},"content":"            acc.append(String.format(\"%d. %s\\n\", i, t));"},{"lineNumber":226,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"Jargonx"},"content":"        return acc.toString().isEmpty() ? String.format("},{"lineNumber":228,"author":{"gitId":"Jargonx"},"content":"                \"There are no Tasks with \u0027%s\u0027 in the list\", searchQuery) : acc.toString();"},{"lineNumber":229,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":231,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":231}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":" * Deadline Command to add in an Deadline type Task."},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"    LocalDate date;"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"    LocalTime time;"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"    String preposition;"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"    Deadline(String title, String preposition, LocalDate date, LocalTime time)"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"            throws WrongUsageException {"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"        super(title);"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"        this.name \u003d \"deadline\";"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"        this.usage \u003d \"\\ndeadline [TaskToBeDone] /by [DD/MM/YYYY] [HH:MM]\";"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"        this.description \u003d \"Stores a task in the list marked as a deadline\";"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"        if (title.isEmpty() || preposition.isEmpty()) {"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"            throw new WrongUsageException(this.name, this.usage);"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"        this.preposition \u003d preposition;"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"        this.date \u003d date;"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"        this.time \u003d time;"},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"        this.saveRep \u003d \"[D] \" + super.toString() + \" (\" + preposition + \": \" +"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"                date + \" \" + time + \")\";"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"    public void updateSaveRep(){"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"        this.saveRep \u003d \"[D] \" + super.toString() + \" (\" + preposition + \": \" +"},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"                date + \" \" + time + \")\";"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"        return \"[D] \" + super.toString() + \" (\" + preposition + \": \" +"},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"                date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" \" +"},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":"                time.format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \")\";"},{"lineNumber":40,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":41}},{"path":"src/main/java/Delete.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":" * Deletes a task from the task list."},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"public class Delete extends Command {"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"    Delete(String[] splitQuery) throws WrongUsageException {"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"        this.name \u003d \"delete\";"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"        this.usage \u003d \"delete [TaskListNumber]\";"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"        this.description \u003d \"Deletes a task in the task list\";"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"        if (splitQuery.length !\u003d 2) {"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"            throw new WrongUsageException(this.name, this.usage);"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"     * Parses the String provided into a number and deletes the task in the task list."},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"     * @param listIndex Index of task to be deleted."},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"     * @return String response for delete."},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"     * @throws CustomException If listIndex is not parse-able or listIndex is out of range."},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"    public String deleteTask(String listIndex) throws CustomException {"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"        int idx;"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"            idx \u003d Integer.parseInt(listIndex) - 1;"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"        } catch (Exception e) {"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"            throw new CustomException(\"Error: Dammit Morty, give me a *BUURRRP* valid integer!\");"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":"        if (idx \u003c 0 || idx \u003e DataStorageInterface.getSize() - 1) {"},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"            throw new CustomException(\"Error: Morty y-you idiot give me a number *BUURRP*\" +"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"                    \"that is in range of the task numbers\");"},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"            Task curr \u003d DataStorageInterface.remove(idx);"},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":"            return String.format(\"Wow Morty look at you go huh just deleting things like:\\n%s\\n\" +"},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"                    \"Now you have just another %d meaningless things to do\","},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":"                    curr, DataStorageInterface.getTasksNotDone());"},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":39}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"    private Label dialog;"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"    private ImageView displayPicture;"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"    public DialogBox(String text, Image image){"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"        try{"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"            fxmlLoader.load();"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"        } catch(IOException e){"},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":"            e.printStackTrace();"},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"        displayPicture.setImage(image);"},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":40,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Jargonx"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Jargonx"},"content":"    private void flip(){"},{"lineNumber":44,"author":{"gitId":"Jargonx"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"Jargonx"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"Jargonx"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"Jargonx"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":50,"author":{"gitId":"Jargonx"},"content":"    public static DialogBox getUserDialog(String text, Image image){"},{"lineNumber":51,"author":{"gitId":"Jargonx"},"content":"        return new DialogBox(text, image);"},{"lineNumber":52,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":54,"author":{"gitId":"Jargonx"},"content":"    public static DialogBox getDukeDialog(String text, Image image){"},{"lineNumber":55,"author":{"gitId":"Jargonx"},"content":"        DialogBox dialogBox \u003d new DialogBox(text, image);"},{"lineNumber":56,"author":{"gitId":"Jargonx"},"content":"        dialogBox.flip();"},{"lineNumber":57,"author":{"gitId":"Jargonx"},"content":"        return dialogBox;"},{"lineNumber":58,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":60,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":60}},{"path":"src/main/java/Done.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":" * Marks task as Done in the task list."},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"public class Done extends Command {"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"    Done(String[] splitQuery) throws DukeException {"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"        this.name \u003d \"done\";"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"        this.usage \u003d \"done [TaskListNumber]\";"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"        this.description \u003d \"Marks a task as done in the task list\";"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"        if (splitQuery.length !\u003d 2) {"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"            throw new WrongUsageException(this.name, this.usage);"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"     * Returns String response after task has been marked as done."},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"     * @param listIndex Index of task to be marked as done."},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"     * @return String response after task has been marked as done."},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"     * @throws CustomException If listIndex is not parse-able or listIndex is out of range."},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"    public String markedAsDone(String listIndex) throws CustomException {"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"        int idx;"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"            idx \u003d Integer.parseInt(listIndex) - 1;"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"        } catch (Exception e) {"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"            throw new CustomException(\"Error: Dammit Morty, give me a *BUURRRP* valid integer!\");"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":"        if (idx \u003c 0 || idx \u003e DataStorageInterface.getSize() - 1) {"},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"            throw new CustomException(\"Error: Morty y-you idiot give me a number *BUURRP*\" +"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"                    \"that is in range of the task numbers\");"},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"            Task curr \u003d DataStorageInterface.markDone(idx);"},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":"            return String.format(\"“h-h-how did you take *BURRRRPPPP* so long to-to finish \" +"},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"                    \"a task morty? HOW? Anyways you finished this\\n%s\\n\" +"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":"                    \"Now you have just another %d meaningless things to do\","},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"                    curr,DataStorageInterface.getTasksNotDone());"},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":41,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":41}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":" * Main Class here."},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"public class Duke{"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"    public String init(){"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"        return ChatBot.start();"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"    public String getResponse(String input){"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"        return ChatBot.getResponse(input);"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jargonx":14,"-":2}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":" * Overall DukeException Class."},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"    String errorMessage;"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"    public String getMessage() {"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"        return errorMessage;"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":13}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":" * Event Command to add in an Event type Task."},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"    String preposition;"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"    LocalDate date;"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"    LocalTime time;"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"    Event(String title, String preposition, LocalDate date, LocalTime time)"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"            throws WrongUsageException {"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"        super(title);"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"        this.name \u003d \"event\";"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"        this.usage \u003d \"event [EventName] [\u0027/on\u0027 OR \u0027/at\u0027] [DD/MM/YYYY] [HH:MM]\";"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"        this.description \u003d \"Stores a task in the list marked as an event\";"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"        if (title.isEmpty() || preposition.isEmpty()) {"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"            throw new WrongUsageException(this.name, this.usage);"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"        this.preposition \u003d preposition;"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"        this.date \u003d date;"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"        this.time \u003d time;"},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"        this.saveRep \u003d \"[E] \" + super.toString() + \" (\" + preposition + \": \" +"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"                date + \" \" +"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"                time + \")\";"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"    public void updateSaveRep(){"},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"        this.saveRep \u003d \"[E] \" + super.toString() + \" (\" + preposition + \": \" +"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"                date + \" \" +"},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":"                time + \")\";"},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":"        return \"[E] \" + super.toString() + \" (\" + preposition + \": \" +"},{"lineNumber":40,"author":{"gitId":"Jargonx"},"content":"                date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" \" +"},{"lineNumber":41,"author":{"gitId":"Jargonx"},"content":"                time.format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \")\";"},{"lineNumber":42,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":44,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":45,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":45}},{"path":"src/main/java/Find.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"public class Find extends Command {"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"    String searchQuery;"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"    Find(String query) {"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"        this.name \u003d \"find\";"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"        this.usage \u003d \"find [KeyString]\";"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"        this.description \u003d \"Can filter tasks based on String\";"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"        searchQuery \u003d query;"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"    public String response() {"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"        return \"Do I look like Google Morty? I-Is that what I am nowadays?\" +"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"                \" I searched for your stuff anyway cause I\u0027m not an aaaa*BUURRPPS*ss.\" +"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"                \" You better be grateful for all these things that I\u0027m helping you with.\\n\\n\" +"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"                DataStorageInterface.getQueriedTasks(searchQuery);"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":18}},{"path":"src/main/java/Help.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":" * Help Command Class to list Commands, their usage and their description."},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":" * Allows for listing of all Commands, as well as for a detailed description of one Command."},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"public class Help extends Command {"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"    /** Query of User stored for reference */"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"    String[] query;"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"    Help(String[] query) throws WrongUsageException {"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"        this.name \u003d \"help\";"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"        this.usage \u003d \"\\nhelp [CommandName] (optional)\";"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"        this.description \u003d \"Provides the list of all commands, \" +"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"                \"or a detailed description of a single command\";"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"        if (query.length \u003e 2) {"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"            throw new WrongUsageException(this.name, this.usage);"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"        this.query \u003d query;"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"     * Returns String Response to User."},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"     * @return String Response to User."},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"     * @throws UnknownCommandException If User types in an Unknown Command."},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"    public String respond() throws UnknownCommandException {"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"        if (query.length \u003d\u003d 1) {"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":"            return listCommands();"},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"            return singleCommandHelp(query[1]);"},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"    private String listCommands() {"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":"        return \"OH MY GOD MORTY THIS AGAIN?? REALLY? I expected this from Jerry but YOU? \" +"},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"                \"I guess the apple really doesn\u0027t fall from the tree.\\n\\n\" +"},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"                \"COMMAND: USAGE\\n\" + DataStorageInterface.listCommands();"},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":41,"author":{"gitId":"Jargonx"},"content":"    private String singleCommandHelp(String query) throws UnknownCommandException {"},{"lineNumber":42,"author":{"gitId":"Jargonx"},"content":"        return DataStorageInterface.getUsage(query);"},{"lineNumber":43,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":44}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"public class Launcher {"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"    public static void main(String[] args){"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":8}},{"path":"src/main/java/Load.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":" * Loads a list of tasks from a persistent file stored on the device."},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"public class Load extends Command {"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"    /** Query of User stored for Reference */"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"    String filePath;"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"    Load(String[] query) throws WrongUsageException {"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"        this.name \u003d \"load\";"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"        this.usage \u003d \"load [FILE_PATH]\";"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"        this.description \u003d \"Used to load files stored in the task format\";"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"        if (query.length !\u003d 2) {"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"            throw new WrongUsageException(this.name, this.usage);"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"        this.filePath \u003d query[1];"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"     * Loads file and Returns success or error message accordingly."},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":"     * @return success or error message accordingly."},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"     * @throws FileNotFoundException If File Cannot be found on device with the given file path."},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"     * @throws DukeException If Task Data cannot be read properly."},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"    public String load() throws FileNotFoundException, DukeException {"},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":"        boolean success \u003d readFile();"},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"        if (success) {"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":"            return \"Successfully loaded tasks, obviously:\\n\" + DataStorageInterface.printListOfTasks();"},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"            return \"There was some error. Could not load tasks successfully. \" +"},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":"                    \"Your idiot father must have *BUURRRRRPS* messed up the files somehow\";"},{"lineNumber":40,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":43,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Jargonx"},"content":"     * Reads File Data and adds Task Data into Task List."},{"lineNumber":45,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Jargonx"},"content":"     * @return Success boolean."},{"lineNumber":47,"author":{"gitId":"Jargonx"},"content":"     * @throws FileNotFoundException If File Cannot be found on device with the given file path."},{"lineNumber":48,"author":{"gitId":"Jargonx"},"content":"     * @throws DukeException If Task Data cannot be read properly."},{"lineNumber":49,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Jargonx"},"content":"    private boolean readFile() throws FileNotFoundException,DukeException {"},{"lineNumber":51,"author":{"gitId":"Jargonx"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":52,"author":{"gitId":"Jargonx"},"content":"        ArrayList\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitId":"Jargonx"},"content":"        System.out.println(\"Loaded file and created the array successfully\");"},{"lineNumber":54,"author":{"gitId":"Jargonx"},"content":"        if (!file.exists()) {"},{"lineNumber":55,"author":{"gitId":"Jargonx"},"content":"            System.out.println(\"File does not exist\");"},{"lineNumber":56,"author":{"gitId":"Jargonx"},"content":"            return false;"},{"lineNumber":57,"author":{"gitId":"Jargonx"},"content":"        } else {"},{"lineNumber":58,"author":{"gitId":"Jargonx"},"content":"            Scanner reader \u003d new Scanner(file);"},{"lineNumber":59,"author":{"gitId":"Jargonx"},"content":"            while (reader.hasNextLine()) {"},{"lineNumber":60,"author":{"gitId":"Jargonx"},"content":"                String data \u003d reader.nextLine();"},{"lineNumber":61,"author":{"gitId":"Jargonx"},"content":"                Task task \u003d parseData(data);"},{"lineNumber":62,"author":{"gitId":"Jargonx"},"content":"                newTasks.add(task);"},{"lineNumber":63,"author":{"gitId":"Jargonx"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"Jargonx"},"content":"            DataStorageInterface.removeAllTasks();"},{"lineNumber":65,"author":{"gitId":"Jargonx"},"content":"            DataStorageInterface.loadNewTasks(newTasks);"},{"lineNumber":66,"author":{"gitId":"Jargonx"},"content":"            return true;"},{"lineNumber":67,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":70,"author":{"gitId":"Jargonx"},"content":"    private Task parseData(String data) throws DukeException {"},{"lineNumber":71,"author":{"gitId":"Jargonx"},"content":"        ///Following the following format"},{"lineNumber":72,"author":{"gitId":"Jargonx"},"content":"        ///1. [T] [X]  something"},{"lineNumber":73,"author":{"gitId":"Jargonx"},"content":"        //2. [D] [X]  eat cereal (by:  12/05/2020 14:30)"},{"lineNumber":74,"author":{"gitId":"Jargonx"},"content":"        //3. [E] [X]  lunch (at:  13/05/2020 13:30)"},{"lineNumber":75,"author":{"gitId":"Jargonx"},"content":"        String[] splitData \u003d data.split(\"\\\\s+\");"},{"lineNumber":76,"author":{"gitId":"Jargonx"},"content":"        String taskType \u003d splitData[1];"},{"lineNumber":77,"author":{"gitId":"Jargonx"},"content":"        boolean isDone \u003d splitData[2].equals(\"[DONE]\");"},{"lineNumber":78,"author":{"gitId":"Jargonx"},"content":"        Task task;"},{"lineNumber":79,"author":{"gitId":"Jargonx"},"content":"        if (taskType.equals(\"[T]\")) {"},{"lineNumber":80,"author":{"gitId":"Jargonx"},"content":"            String taskName \u003d concatenateStrArr(splitData, 3, splitData.length);"},{"lineNumber":81,"author":{"gitId":"Jargonx"},"content":"            task \u003d new ToDo(taskName);"},{"lineNumber":82,"author":{"gitId":"Jargonx"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"Jargonx"},"content":"            int index \u003d 3;"},{"lineNumber":84,"author":{"gitId":"Jargonx"},"content":"            while (!splitData[index].startsWith(\"(\")) {"},{"lineNumber":85,"author":{"gitId":"Jargonx"},"content":"                index++;"},{"lineNumber":86,"author":{"gitId":"Jargonx"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"Jargonx"},"content":"            String taskName \u003d concatenateStrArr(splitData,3,index);"},{"lineNumber":88,"author":{"gitId":"Jargonx"},"content":"            String preposition \u003d getPreposition(splitData[index]);"},{"lineNumber":89,"author":{"gitId":"Jargonx"},"content":"            index++;"},{"lineNumber":90,"author":{"gitId":"Jargonx"},"content":"            LocalDate date \u003d getDate(splitData[index]);"},{"lineNumber":91,"author":{"gitId":"Jargonx"},"content":"            index++;"},{"lineNumber":92,"author":{"gitId":"Jargonx"},"content":"            LocalTime time \u003d getTime(splitData[index]);"},{"lineNumber":93,"author":{"gitId":"Jargonx"},"content":"            if (taskType.equals(\"[D]\")) {"},{"lineNumber":94,"author":{"gitId":"Jargonx"},"content":"                task \u003d new Deadline(taskName,preposition, date, time);"},{"lineNumber":95,"author":{"gitId":"Jargonx"},"content":"            } else if (taskType.equals(\"[E]\")) {"},{"lineNumber":96,"author":{"gitId":"Jargonx"},"content":"                task \u003d new Event(taskName, preposition, date, time);"},{"lineNumber":97,"author":{"gitId":"Jargonx"},"content":"            } else {"},{"lineNumber":98,"author":{"gitId":"Jargonx"},"content":"                throw new WrongFileFormatException(filePath);"},{"lineNumber":99,"author":{"gitId":"Jargonx"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Jargonx"},"content":"        if (isDone) {"},{"lineNumber":102,"author":{"gitId":"Jargonx"},"content":"            task.markDone();"},{"lineNumber":103,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"Jargonx"},"content":"        return task;"},{"lineNumber":105,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":107,"author":{"gitId":"Jargonx"},"content":"    private String concatenateStrArr(String[] strArr, int startIndex, int endIndex) {"},{"lineNumber":108,"author":{"gitId":"Jargonx"},"content":"        if (startIndex \u003d\u003d endIndex) {"},{"lineNumber":109,"author":{"gitId":"Jargonx"},"content":"            return strArr[startIndex];"},{"lineNumber":110,"author":{"gitId":"Jargonx"},"content":"        } else {"},{"lineNumber":111,"author":{"gitId":"Jargonx"},"content":"            StringBuilder acc \u003d new StringBuilder();"},{"lineNumber":112,"author":{"gitId":"Jargonx"},"content":"            for (int i \u003d startIndex; i \u003c endIndex; i++) {"},{"lineNumber":113,"author":{"gitId":"Jargonx"},"content":"                acc.append(\" \").append(strArr[i]);"},{"lineNumber":114,"author":{"gitId":"Jargonx"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"Jargonx"},"content":"            return acc.toString();"},{"lineNumber":116,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":119,"author":{"gitId":"Jargonx"},"content":"    private String getPreposition(String dirtyPrep) {"},{"lineNumber":120,"author":{"gitId":"Jargonx"},"content":"        return dirtyPrep.replace(\"(\",\"\").replace(\":\",\"\");"},{"lineNumber":121,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":123,"author":{"gitId":"Jargonx"},"content":"    private LocalDate getDate(String date) {"},{"lineNumber":124,"author":{"gitId":"Jargonx"},"content":"        String dateRep \u003d date;"},{"lineNumber":125,"author":{"gitId":"Jargonx"},"content":"        return LocalDate.parse(dateRep);"},{"lineNumber":126,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":128,"author":{"gitId":"Jargonx"},"content":"    private LocalTime getTime(String time) {"},{"lineNumber":129,"author":{"gitId":"Jargonx"},"content":"        String timeRep \u003d time.replace(\")\",\"\");"},{"lineNumber":130,"author":{"gitId":"Jargonx"},"content":"        return LocalTime.parse(timeRep);"},{"lineNumber":131,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":133,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":133}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().init();"},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":32}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"    @FXML"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"    private VBox dialogContainer;"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"    private TextField userInput;"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"    private Duke duke;"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/dumbMorty.png\"));"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/rickInGarage.png\"));"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"    public void initialize(){"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"    public void setDuke(Duke d){"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"        duke \u003d d;"},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":"    private void handleUserInput(){"},{"lineNumber":40,"author":{"gitId":"Jargonx"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":41,"author":{"gitId":"Jargonx"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":42,"author":{"gitId":"Jargonx"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":43,"author":{"gitId":"Jargonx"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":44,"author":{"gitId":"Jargonx"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":45,"author":{"gitId":"Jargonx"},"content":"        );"},{"lineNumber":46,"author":{"gitId":"Jargonx"},"content":"        userInput.clear();"},{"lineNumber":47,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":49,"author":{"gitId":"Jargonx"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"Jargonx"},"content":"    public void init(){"},{"lineNumber":51,"author":{"gitId":"Jargonx"},"content":"        String firstText \u003d duke.init();"},{"lineNumber":52,"author":{"gitId":"Jargonx"},"content":"        dialogContainer.getChildren().add("},{"lineNumber":53,"author":{"gitId":"Jargonx"},"content":"                DialogBox.getDukeDialog(firstText, dukeImage)"},{"lineNumber":54,"author":{"gitId":"Jargonx"},"content":"        );"},{"lineNumber":55,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":56}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"import java.util.regex.Pattern;"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":" * Parses all the Strings received from User."},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"public class Parser {"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"  "},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"     * Splits the User query String into String Array."},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"     * @param query The String passed in by the User."},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"     * @return String Array containing all the tokens passed in by User."},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"    public static String[] getSplit(String query) {"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"        return query.split(\"\\\\s+\");"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"     * Gets the Command passed in by the User."},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"     * @param splitQuery Query received from the User."},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"     * @return String Command in lower case."},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"    public static String getCommand(String[] splitQuery) {"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"        return splitQuery[0].toLowerCase();"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"     * Removes Command term from the query passed in by User."},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"     * @param splitQuery Query received from the User."},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":"     * @return String Array without the Command term."},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":"    public static String[] removeCommandString(String[] splitQuery) {"},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"        splitQuery[0] \u003d \"\";"},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"        return splitQuery;"},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":41,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Jargonx"},"content":"     * Concatenates a String array with a Command term removed."},{"lineNumber":43,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Jargonx"},"content":"     * @param strArr Any String Array that needs to be concatenated."},{"lineNumber":45,"author":{"gitId":"Jargonx"},"content":"     * @return Concatenated String."},{"lineNumber":46,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Jargonx"},"content":"    public static String concatenateStrArr(String[] strArr) {"},{"lineNumber":48,"author":{"gitId":"Jargonx"},"content":"        StringBuilder acc \u003d new StringBuilder();"},{"lineNumber":49,"author":{"gitId":"Jargonx"},"content":"        for (int i \u003d 0;i \u003c strArr.length;i++) {"},{"lineNumber":50,"author":{"gitId":"Jargonx"},"content":"            if (!strArr[i].equals(\"\")) {"},{"lineNumber":51,"author":{"gitId":"Jargonx"},"content":"                if (i \u003d\u003d 1) {"},{"lineNumber":52,"author":{"gitId":"Jargonx"},"content":"                    acc.append(strArr[i]);"},{"lineNumber":53,"author":{"gitId":"Jargonx"},"content":"                } else {"},{"lineNumber":54,"author":{"gitId":"Jargonx"},"content":"                    acc.append(\" \").append(strArr[i]);"},{"lineNumber":55,"author":{"gitId":"Jargonx"},"content":"                }"},{"lineNumber":56,"author":{"gitId":"Jargonx"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Jargonx"},"content":"        return acc.toString();"},{"lineNumber":59,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":61,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Jargonx"},"content":"     * Returns the title of the task queried by the User."},{"lineNumber":63,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"Jargonx"},"content":"     * @param splitQuery Query received from the User."},{"lineNumber":65,"author":{"gitId":"Jargonx"},"content":"     * @return Title of the Task queried by User."},{"lineNumber":66,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"Jargonx"},"content":"    public static String getTitle(String[] splitQuery) {"},{"lineNumber":68,"author":{"gitId":"Jargonx"},"content":"        StringBuilder accTaskTitle \u003d new StringBuilder();"},{"lineNumber":69,"author":{"gitId":"Jargonx"},"content":"        int i \u003d 1;"},{"lineNumber":70,"author":{"gitId":"Jargonx"},"content":"        while (!splitQuery[i].startsWith(\"/\")) {"},{"lineNumber":71,"author":{"gitId":"Jargonx"},"content":"            accTaskTitle.append(\" \").append(splitQuery[i]);"},{"lineNumber":72,"author":{"gitId":"Jargonx"},"content":"            i++;"},{"lineNumber":73,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"Jargonx"},"content":"        return accTaskTitle.toString();"},{"lineNumber":75,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":77,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"Jargonx"},"content":"     * Returns the preposition queried by the User."},{"lineNumber":79,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"Jargonx"},"content":"     * @param splitQuery Query received from the User."},{"lineNumber":81,"author":{"gitId":"Jargonx"},"content":"     * @return Preposition queried by User."},{"lineNumber":82,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"Jargonx"},"content":"    public static String getPreposition(String[] splitQuery) {"},{"lineNumber":84,"author":{"gitId":"Jargonx"},"content":"        for (String s:splitQuery) {"},{"lineNumber":85,"author":{"gitId":"Jargonx"},"content":"            if (s.startsWith(\"/\")) {"},{"lineNumber":86,"author":{"gitId":"Jargonx"},"content":"                return s.substring(1);"},{"lineNumber":87,"author":{"gitId":"Jargonx"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"Jargonx"},"content":"        return \"\";"},{"lineNumber":90,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":92,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Jargonx"},"content":"     * Returns the Date of the task queried by the User."},{"lineNumber":94,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"Jargonx"},"content":"     * @param splitQuery Query received from the User."},{"lineNumber":96,"author":{"gitId":"Jargonx"},"content":"     * @return Date as a LocalDate Object queried by User."},{"lineNumber":97,"author":{"gitId":"Jargonx"},"content":"     * @throws CustomException If Date is input wrongly."},{"lineNumber":98,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"Jargonx"},"content":"    public static LocalDate getDate(String[] splitQuery) throws CustomException {"},{"lineNumber":100,"author":{"gitId":"Jargonx"},"content":"        int i \u003d 0;"},{"lineNumber":101,"author":{"gitId":"Jargonx"},"content":"        while (!splitQuery[i].startsWith(\"/\")) {"},{"lineNumber":102,"author":{"gitId":"Jargonx"},"content":"            i++;"},{"lineNumber":103,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"Jargonx"},"content":"        i++;"},{"lineNumber":105,"author":{"gitId":"Jargonx"},"content":"        String[] splitDate \u003d splitQuery[i].split(Pattern.quote(\"/\"));"},{"lineNumber":106,"author":{"gitId":"Jargonx"},"content":"        if (splitDate.length !\u003d 3) {"},{"lineNumber":107,"author":{"gitId":"Jargonx"},"content":"            throw new CustomException(\"Error: You formatted the date wrongly Morty!\" +"},{"lineNumber":108,"author":{"gitId":"Jargonx"},"content":"                    \" Is your entire family just a bunch of idiots?\");"},{"lineNumber":109,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"Jargonx"},"content":"        //Format required is DD/MM/YYYY"},{"lineNumber":111,"author":{"gitId":"Jargonx"},"content":"        LocalDate date \u003d LocalDate.parse(splitDate[2] + \"-\" + splitDate[1] + \"-\" + splitDate[0]);"},{"lineNumber":112,"author":{"gitId":"Jargonx"},"content":"        return date;"},{"lineNumber":113,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":115,"author":{"gitId":"Jargonx"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"Jargonx"},"content":"     * Returns the Time of the task queried by the User."},{"lineNumber":117,"author":{"gitId":"Jargonx"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"Jargonx"},"content":"     * @param splitQuery Query received from the User."},{"lineNumber":119,"author":{"gitId":"Jargonx"},"content":"     * @return Time as a LocalTime Object queried by User."},{"lineNumber":120,"author":{"gitId":"Jargonx"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"Jargonx"},"content":"    public static LocalTime getTime(String[] splitQuery) {"},{"lineNumber":122,"author":{"gitId":"Jargonx"},"content":"        int i \u003d 0;"},{"lineNumber":123,"author":{"gitId":"Jargonx"},"content":"        while (!splitQuery[i].startsWith(\"/\")) {"},{"lineNumber":124,"author":{"gitId":"Jargonx"},"content":"            i++;"},{"lineNumber":125,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"Jargonx"},"content":"        i +\u003d 2;"},{"lineNumber":127,"author":{"gitId":"Jargonx"},"content":"        //Format required is HH:MM"},{"lineNumber":128,"author":{"gitId":"Jargonx"},"content":"        LocalTime time \u003d LocalTime.parse(splitQuery[i] + \":00\");"},{"lineNumber":129,"author":{"gitId":"Jargonx"},"content":"        return time;"},{"lineNumber":130,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":131}},{"path":"src/main/java/RickCustom.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"public class RickCustom {"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":"    public static String SUCCESS_INTRO \u003d \"W-what do you *BUUURRRRPPPP* want Morty\";"},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"    public static String FAILED_INTRO \u003d \"I\u0027m messed up *BURRRRRPPP* in the \" +"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"            \"head Morty, I can\u0027t talk right now\";"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":6}},{"path":"src/main/java/Save.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":" * Saves Task Data in a Persistent File."},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"public class Save extends Command {"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"    final String DIR_PATH \u003d \"./data/\";"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"    final String FILE_NAME \u003d \"duke.txt\";"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"    Save() {"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"        this.name \u003d \"save\";"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"        this.usage \u003d \"save\";"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"        this.description \u003d \"Saves current list into file called \" +"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"                \"\u0027ip/data/duke.txt\u0027. Creates file and folder if they do not exist\";"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"    private void createDirectory() {"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"        new File(DIR_PATH).mkdirs();"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"    private void createFile() throws IOException {"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"        createDirectory();"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"        File dir \u003d new File(DIR_PATH);"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"        if (dir.exists()) {"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":"            File saveDatafile \u003d new File(DIR_PATH + FILE_NAME);"},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"            saveDatafile.createNewFile();"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"            throw new FileNotFoundException(\"The directory \" + DIR_PATH +"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"                    \" does not exist\");"},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"    public void writeToFile() throws IOException {"},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"        createFile();"},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":"        File file \u003d new File(DIR_PATH + FILE_NAME);"},{"lineNumber":40,"author":{"gitId":"Jargonx"},"content":"        if (file.exists()) {"},{"lineNumber":41,"author":{"gitId":"Jargonx"},"content":"            new FileWriter(file,false).close();"},{"lineNumber":42,"author":{"gitId":"Jargonx"},"content":"            FileWriter fileWriter \u003d new FileWriter(file, true);"},{"lineNumber":43,"author":{"gitId":"Jargonx"},"content":"            String allTasks \u003d DataStorageInterface.getSaveRepresentation();"},{"lineNumber":44,"author":{"gitId":"Jargonx"},"content":"            System.out.println(\"The following tasks have been saved.\\n\" + allTasks);"},{"lineNumber":45,"author":{"gitId":"Jargonx"},"content":"            fileWriter.write(allTasks);"},{"lineNumber":46,"author":{"gitId":"Jargonx"},"content":"            fileWriter.close();"},{"lineNumber":47,"author":{"gitId":"Jargonx"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"Jargonx"},"content":"            throw new FileNotFoundException(\"The file \" + DIR_PATH +"},{"lineNumber":49,"author":{"gitId":"Jargonx"},"content":"                    FILE_NAME + \" does not exist\");"},{"lineNumber":50,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":53,"author":{"gitId":"Jargonx"},"content":"    public String response() {"},{"lineNumber":54,"author":{"gitId":"Jargonx"},"content":"        return \"File saved successfully at \" + DIR_PATH + FILE_NAME;"},{"lineNumber":55,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":57,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":57}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"public abstract class Task extends Command {"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"    private final String title;"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"    protected String saveRep;"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"    private boolean isDone \u003d false;"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"    Task(String title) {"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"        this.title \u003d title;"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"    private String doneToString() {"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"        return isDone ? \"[DONE]\" : \"[X]\";"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"    public void markDone() {"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"        isDone \u003d true;"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"    public boolean isDone() {"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"        return isDone;"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"    public String saveStringRepresentation() {"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"        this.updateSaveRep();"},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"        return saveRep;"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":"    public abstract void updateSaveRep();"},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"    public String getTitle() {"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"        return title;"},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":"        return doneToString() + \" \" + title;"},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":38}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":" * Returns list of tasks."},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"public class TaskList extends Command {"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"    TaskList() {"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"        this.name \u003d \"list\";"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"        this.usage \u003d \"list\";"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"        this.description \u003d \"Lists all the tasks\";"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"    public String response() {"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"        return DataStorageInterface.printListOfTasks();"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":15}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"public class ToDo extends Task {"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"    ToDo(String title) throws WrongUsageException {"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"        super(title);"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"        this.name \u003d \"todo\";"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"        this.usage \u003d \"todo [TaskToBeDone]\";"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"        this.description \u003d \"Stores a task in the list marked as a todo\";"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"        if (title.isEmpty()) {"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"            throw new WrongUsageException(this.name, this.usage);"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"        }"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"        this.saveRep \u003d \"[T] \" + super.toString();"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"    public void updateSaveRep(){"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"        this.saveRep \u003d \"[T] \" + super.toString();"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"        return \"[T] \" + super.toString();"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":23}},{"path":"src/main/java/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":"public class UnknownCommandException extends DukeException {"},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"    UnknownCommandException(String unknown) {"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"        this.errorMessage \u003d String.format(\"Error: W-What does *BUURRRRRP* \u0027%s\u0027 mean Morty?\\n\" +"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"                \" You\u0027re probably speaking english but I still need a universal translator\" +"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"                \" to understand your freaking words! \""},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"                + \" You might as well try using the \u0027help\u0027 to see what I do understand\", unknown);"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":10}},{"path":"src/main/java/WrongFileFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"public class WrongFileFormatException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"    WrongFileFormatException(String filePath) {"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"        this.errorMessage \u003d \"The file \u0027\" + filePath + \"\u0027 has the wrong file format.\\n\" +"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"                \"Make sure it follows the following format for the following tasks types:\\n\" +"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"                \"1: [T], [D], [E]\\n\" +"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"                \"2: [X], [DONE]\\n\" +"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"                \"3: \u003cTaskName\u003e\\n\" +"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"                \"4: (by: \u003cDateTime\u003e)(for deadline) OR (at/on: \u003cDateTime\u003e)(for event)\\n\";"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":11}},{"path":"src/main/java/WrongUsageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"public class WrongUsageException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"    WrongUsageException(String cmdName, String cmdUse) {"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"        this.errorMessage \u003d String.format(\"Error: You used the command \u0027%s\u0027 wrongly! \" +"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"                \"\\nY-You had 1 job Morty. \" +"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"                \"\\nUsage: %s\", cmdName, cmdUse);"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":8}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"#4a4a49\" wrapText\u003d\"true\"\u003e"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"         \u003cpadding\u003e"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"            \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"         \u003c/padding\u003e"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"         \u003cfont\u003e"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"            \u003cFont name\u003d\"Courier\" size\u003d\"12.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"         \u003c/font\u003e\u003c/Label\u003e"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"    \u003c/children\u003e"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"    \u003cpadding\u003e"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"    \u003c/padding\u003e"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Jargonx":23}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Ask Rick Something\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\" AnchorPane.topAnchor\u003d\"558.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" pannable\u003d\"true\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Jargonx":19}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":3,"author":{"gitId":"Jargonx"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;"},{"lineNumber":4,"author":{"gitId":"Jargonx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":6,"author":{"gitId":"Jargonx"},"content":"public class ParserTest {"},{"lineNumber":7,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":8,"author":{"gitId":"Jargonx"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"Jargonx"},"content":"    public void getSplit_todoCommand_splitQuery(){"},{"lineNumber":10,"author":{"gitId":"Jargonx"},"content":"        String[] splitActual \u003d Parser.getSplit(\"todo someTask\");"},{"lineNumber":11,"author":{"gitId":"Jargonx"},"content":"        String[] splitExpected \u003d new String[]{\"todo\", \"someTask\"};"},{"lineNumber":12,"author":{"gitId":"Jargonx"},"content":"        assertArrayEquals(splitExpected,splitActual);"},{"lineNumber":13,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":15,"author":{"gitId":"Jargonx"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"    public void getSplit_deadlineCommand_splitQuery(){"},{"lineNumber":17,"author":{"gitId":"Jargonx"},"content":"        String[] splitActual \u003d Parser.getSplit(\"deadline A /by 12/05/2020 15:30\");"},{"lineNumber":18,"author":{"gitId":"Jargonx"},"content":"        String[] splitExpected \u003d new String[]{\"deadline\", \"A\", \"/by\", \"12/05/2020\", \"15:30\"};"},{"lineNumber":19,"author":{"gitId":"Jargonx"},"content":"        assertArrayEquals(splitExpected,splitActual);"},{"lineNumber":20,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":22,"author":{"gitId":"Jargonx"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Jargonx"},"content":"    public void getSplit_eventCommand_splitQuery(){"},{"lineNumber":24,"author":{"gitId":"Jargonx"},"content":"        String[] splitActual \u003d Parser.getSplit(\"event B /at 12/05/2020 15:30\");"},{"lineNumber":25,"author":{"gitId":"Jargonx"},"content":"        String[] splitExpected \u003d new String[]{\"event\", \"B\", \"/at\", \"12/05/2020\", \"15:30\"};"},{"lineNumber":26,"author":{"gitId":"Jargonx"},"content":"        assertArrayEquals(splitExpected,splitActual);"},{"lineNumber":27,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":29,"author":{"gitId":"Jargonx"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"Jargonx"},"content":"    public void getCommand_todoCommand_todoCommandExtracted(){"},{"lineNumber":31,"author":{"gitId":"Jargonx"},"content":"        String commandActual \u003d Parser.getCommand(new String[]{\"todo\", \"someTask\"});"},{"lineNumber":32,"author":{"gitId":"Jargonx"},"content":"        String commandExpected \u003d \"todo\";"},{"lineNumber":33,"author":{"gitId":"Jargonx"},"content":"        assertEquals(commandExpected, commandActual);"},{"lineNumber":34,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":36,"author":{"gitId":"Jargonx"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"Jargonx"},"content":"    public void removeCommandString_todoCommand_todoCommandRemoved(){"},{"lineNumber":38,"author":{"gitId":"Jargonx"},"content":"        String[] splitActual \u003d Parser.removeCommandString(new String[]{\"todo\", \"someTask\"});"},{"lineNumber":39,"author":{"gitId":"Jargonx"},"content":"        String[] splitExpected \u003d new String[]{\"\", \"someTask\"};"},{"lineNumber":40,"author":{"gitId":"Jargonx"},"content":"        assertArrayEquals(splitExpected,splitActual);"},{"lineNumber":41,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Jargonx"},"content":""},{"lineNumber":43,"author":{"gitId":"Jargonx"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"Jargonx"},"content":"    public void concatenateStrArr_multipleStrings_noCommandString(){"},{"lineNumber":45,"author":{"gitId":"Jargonx"},"content":"        String concatActual \u003d Parser.concatenateStrArr(new String[]{\"\", \"someTask\",\"that\",\"is\",\"nice\"});"},{"lineNumber":46,"author":{"gitId":"Jargonx"},"content":"        String concatExpected \u003d \"someTask that is nice\";"},{"lineNumber":47,"author":{"gitId":"Jargonx"},"content":"        assertEquals(concatExpected,concatActual);"},{"lineNumber":48,"author":{"gitId":"Jargonx"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Jargonx"},"content":"}"}],"authorContributionMap":{"Jargonx":49}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Jargonx"},"content":"bye"}],"authorContributionMap":{"Jargonx":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"Jargonx"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"Jargonx":1,"-":37}}]
