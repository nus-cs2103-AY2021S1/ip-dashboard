[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 18,
      "-": 44
    }
  },
  {
    "path": "data/test.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "E | 0 | dinner party | Nov 12 2020, 15:30:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "D | 0 | individual project | Aug 25 2020, 16:00:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "D | 0 | readings | Aug 25 2020, 18:00:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "E | 0 | Christmas | Dec 25 2020, 19:30:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "D | 0 | IP Submission | Sep 16 2020, 23:59:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "E | 0 | take a walk | Sep 18 2020, 16:00:00"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "T | 1 | sell walkie-talkie"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "T | 0 | walk dog"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 8
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Siri, your personal assistant to make task management easier."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "![Image of Siri](./Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### Create, read, update, and delete task "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Manage all your different types of tasks - events, to-dos and deadlines by being able to start a new task,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "view existing tasks, mark task as completed, and delete a completed task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- Deadline and Event tasks have a completion date and time associated with them."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### Mark task as done "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Once you have completed your task, mark your task as done to see at a glance what tasks remain."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### Find specific task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Search for the exact task(s) you want to find by keywords in its description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### List all tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Ask Siri to show you all the tasks that you have - completed and uncompleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### Undo previous change"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Revert the changes you made and go back to the previous state by undoing your last command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### `help` - Show all commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Displays all the commands that the user can give to Siri."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Here are all the commands that you can give me:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- \u0027list\u0027 to see all the tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- \u0027todo \u003cdescription\u003e\u0027 to add a new todo task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- \u0027event \u003cdescription\u003e /at \u003cYYYY/MM/DD\u003e \u003cHH:MM\u003e\u0027 to add a new todo task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- \u0027todo \u003cdescription\u003e /by \u003cYYYY/MM/DD\u003e \u003cHH:MM\u003e\u0027 to add a new todo task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- \u0027delete \u003ctaskId\u003e\u0027 to delete the task with the given ID"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- \u0027done \u003ctaskId\u003e\u0027 to mark the task with the given ID as completed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- \u0027find \u003ckeyword\u003e\u0027 to find all tasks with the descriptions matching the given keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- \u0027undo\u0027 to undo the previous command given to Duke"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- \u0027help\u0027 to view this list again"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- \u0027bye\u0027 to exit the program"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### `list` - Show all tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Display all the tasks that Siri has - both completed and uncompleted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Here are all the items in your list:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. E | 0 | dinner party | Nov 12 2020, 15:30:00"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. D | 1 | Individual project | Aug 25 2020, 16:00:00"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "3. D | 0 | readings | Aug 25, 2020, 18:00:00"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "4. T | 0 | walk dog"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "5. T | 0 | take a walk"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### `todo \u003cdescription\u003e` - Add a new to-do item"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Add a new to-do item for Siri to keep track of."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "`todo walk dog`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Got it. I\u0027ve added this task:  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "   T | 0 | walk dog"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### `event \u003cdescription\u003e /at \u003cYYYY/MM/DD\u003e \u003cHH:MM\u003e` - Add a new event item"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Add a new event item with its date for Siri to keep track of."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "`event Christmas /at 2020/12/25 19:30`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Got it. I\u0027ve added this task:  "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "   E | 0 | Christmas | Dec 25 2020,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "19:30:00"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### `deadline \u003cdescription\u003e /by \u003cYYYY/MM/DD\u003e \u003cHH:MM\u003e` - Add a new deadline item"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Add a new deadline item with its completion deadline for Siri to keep track of."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "`deadline IP Submission /by 2020/09/16 23:59`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Got it. I\u0027ve added this task:  "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "   D | 0 | IP Submission | Sep 16 2020,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "23:59:00"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### `done \u003ctaskId\u003e` - Mark a task as done"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Mark the task with the given task ID as complete. The task ID can be seen from the list of all the tasks that Siri has."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "T | 1 | jumping jacks"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### `delete \u003ctaskId\u003e` - Delete a task"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Remove a task from Siri\u0027s list of tasks. The task ID can be seen from the list of all the tasks that Siri has."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "T | 1 | jumping jacks"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### `find \u003ckeyword\u003e` - Search for tasks"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Search for all the tasks that Siri has with a task description that matches the given keyword."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "`find walk`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "I\u0027ve found these tasks that matches your keyword:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. T | 0 | walk dog"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. E | 0 | take a walk | Sep 18, 2020, 16:00:00"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "3. T | 0 | sell walkie-talkie"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### `undo` - Undo previous change"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Undo previous command given to Siri - undo command can be performed until the Siri\u0027s startup state."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "`undo`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Undo successful! This is what your list looks like now:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. E | 0 | dinner party | Nov 12 2020, 15:30:00"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. D | 1 | Individual project | Aug 25 2020, 16:00:00"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "3. D | 0 | readings | Aug 25, 2020, 18:00:00"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "4. T | 0 | walk dog"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "5. T | 0 | take a walk"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "```"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### `bye` - Exit program"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Say goodbye to Siri and exit the program."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Expected outcome: Program window closes."
      }
    ],
    "authorContributionMap": {
      "hansebastian": 174,
      "-": 20
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Personal Assistant that keeps track of a user\u0027s list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static final Path storageFilePath \u003d Paths.get(\".\", \"data\", \"test.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private History history;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a Duke object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Duke consists of a \u003ccode\u003eTaskList\u003c/code\u003e, and \u003ccode\u003eStorage\u003c/code\u003e which"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * is responsible for user interactions, keeping track of user\u0027s tasks, and writing tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * to the user\u0027s local storage respectively."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.storage \u003d new Storage(Duke.storageFilePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.history \u003d new History();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.taskList \u003d new TaskList(this.storage.getAllTasks());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Gets Duke\u0027s response to the user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param input the input by the user via the GUI."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return the response given by Duke to the user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            if (c.isExit()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return c.execute(this.taskList, this.storage, this.history);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return (e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String greet() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"Hello! How can I help you today? Use the \u0027help\u0027 command to see what I can do!\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Main method that starts JavaFX."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param args arguments from the command line"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Launcher.main(args);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 67
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Exception that Duke throws when there are errors in the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Exception thrown to user when Duke encounters errors."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param errorMessage the details of the error thrown."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(\"OOPS!!! \" + errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 16
    }
  },
  {
    "path": "src/main/java/duke/History.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Class representing the past states of Duke\u0027s TaskList, used for undo and redo functionality."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class History {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private LinkedList\u003cTaskList\u003e history;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates an empty end of History state, represented by a null object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public History() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        LinkedList\u003cTaskList\u003e newHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        newHistory.add(null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.history \u003d newHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private boolean endOfHistory(TaskList taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return taskList \u003d\u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Adds the input TaskList to history."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the TaskList to be added to History."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void addToHistory(TaskList taskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        // Deep copy"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList newList \u003d taskList.deepCopy();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.history.addLast(newList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Revert to previous state of Duke\u0027s TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a TaskList representing the previous state of Duke\u0027s Tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when there are no more previous states to revert to."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public TaskList undoHistory() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList previousState \u003d this.history.pollLast();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (endOfHistory(previousState)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"I can not revert to any prior changes,\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                    + \" you have reached the end of your history\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return previousState;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 51
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * A Launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            stage.setTitle(\"Siri\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 33
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.Commands;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * A Parser to take in user input and determines the Command given to Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Parse user input and returns an enum of the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param fullCommand is the user input from the terminal."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return an enum representing the command from the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert fullCommand instanceof String : \"Command must be a String\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String[] splitString \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Commands c;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            c \u003d Commands.valueOf(splitString[0].toUpperCase());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            c \u003d Commands.UNKNOWN;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        switch (c) { // Determine output from user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new AddCommand(fullCommand, c);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new DoneCommand(fullCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case UNDO:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new UndoCommand(fullCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 58
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Storage links the TaskList from Duke to the user\u0027s local storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final Path pathToStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private List\u003cString\u003e allTasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a Storage object, which will be used when Duke creates, updates, or deletes Tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param pathToStorage the path to the user\u0027s storage where the Tasks will be stored."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Storage(Path pathToStorage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.pathToStorage \u003d pathToStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert pathToStorage !\u003d null : \"Path to storage cannot be null\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            // Create directory if needed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Path parentPath \u003d pathToStorage.getParent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Files.createDirectories(parentPath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            if (!Files.exists(pathToStorage)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                Files.createFile(pathToStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            // Get stored info if any"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.allTasks \u003d Files.readAllLines(pathToStorage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(\"Can\u0027t read file \" + e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Converts string from task storage file to a task list for Duke to use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a list of Tasks readable by duke.Duke."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        // Convert string to Tasks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        for (String taskString : this.allTasks) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            char taskType \u003d taskString.charAt(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assert taskType \u003d\u003d \u0027T\u0027 || taskType \u003d\u003d \u0027E\u0027 || taskType \u003d\u003d \u0027D\u0027 : \"Task type is wrong\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            boolean isDone \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            int descriptionIndex \u003d taskString.lastIndexOf(\"|\") + 2;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            String taskDetails \u003d taskString.substring(descriptionIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            if (taskString.charAt(4) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            String eventOrDeadlineDescription \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            if (taskType \u003d\u003d \u0027E\u0027 || taskType \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                eventOrDeadlineDescription \u003d taskString.substring(8, taskString.lastIndexOf(\"|\") - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            case \u0027T\u0027:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                taskList.add(new ToDo(taskDetails, isDone));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            case \u0027E\u0027:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                taskList.add(new Event(eventOrDeadlineDescription, isDone, formatTaskDateTime(taskDetails)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            case \u0027D\u0027:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                taskList.add(new Deadline(eventOrDeadlineDescription, isDone, formatTaskDateTime(taskDetails)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                System.out.println(\"Unable to determine type of task\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private String formatTaskDateTime(String dateTime) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert dateTime.length() !\u003d 0 : \"Date and time cannot be empty\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String[] dateTimes \u003d dateTime.split(\",\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String date \u003d dateTimes[0]; // MMM DD YYYY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String time \u003d dateTimes[1]; // HH:MM:SS"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        LocalDate newDate \u003d LocalDate.parse(date, format);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        int monthInt \u003d newDate.getMonthValue();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String year \u003d String.valueOf(newDate.getYear());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        int dayInt \u003d newDate.getDayOfMonth();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String month \u003d monthInt \u003e\u003d 10"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                ? String.valueOf(monthInt)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                : \"0\".concat(String.valueOf(monthInt));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String day \u003d dayInt \u003e\u003d 10"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                ? String.valueOf(dayInt)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                : \"0\".concat(String.valueOf(dayInt));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String hourAndMinutes \u003d time.substring(0, time.lastIndexOf(\":\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        // Return YYYY/MM/DD HH:MM"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String ans \u003d year + \"/\" + month + \"/\" + day + hourAndMinutes;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return ans;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Saves all the Tasks from the TaskList into the user\u0027s local storage."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void writeToStorage() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assert pathToStorage !\u003d null : \"Path to storage cannot be empty\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            File storageFile \u003d new File(String.valueOf(pathToStorage));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storageFile);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            for (String task : this.allTasks) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                fw.write(task + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Adds a new Task to the local storage."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param task the Task to be added."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createTask(Task task) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert task !\u003d null : \"Task cannot be null\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.allTasks.add(task.toString());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        writeToStorage();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Updates an existing task in the local storage."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param task the task to be updated."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskIndex the index of the Task in the List of all the Tasks."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void updateTask(Task task, int taskIndex) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert task !\u003d null : \"Task cannot be null\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert taskIndex \u003c allTasks.size() : \"Task index must be within range of allTask size\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.allTasks.set(taskIndex, task.toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        writeToStorage();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Removes an existing from the local storage."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskIndex the index of the task in the List of all the Tasks to be deleted."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void deleteTask(int taskIndex) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert taskIndex \u003c allTasks.size() \u0026\u0026 taskIndex \u003e\u003d 0 : \"Task index must be within range of allTask size\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.allTasks.remove(taskIndex);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        writeToStorage();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Updates the local storage when Duke undoes changes."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList is the new TaskList to be written to local storage."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void undoChanges(TaskList taskList) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        List\u003cString\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            newList.add(taskList.get(i).toString());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.allTasks \u003d newList; // Substitute old List with new List which is the previous taskList state"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        writeToStorage();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 188
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Command when user adds a new task, which can be a \u003ccode\u003eToDo\u003c/code\u003e, \u003ccode\u003eEvent\u003c/code\u003e, or \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** The specific type of task to be added */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final Commands c;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create an add command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param userInput command give from user via command line."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param c type of command which is an \u003ccode\u003eENUM\u003c/code\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public AddCommand(String userInput, Commands c) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.c \u003d c;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Determines whether a \u003cCode\u003eToDo\u003c/Code\u003e, \u003cCode\u003eEvent\u003c/Code\u003e, or \u003cCode\u003eDeadline\u003c/Code\u003e task will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * This method parses the user input taken in, and determins which type of task will be added to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The database depending on the command type given."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param history the state of all changes made to Duke\u0027s TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return string representation of Duke\u0027s response to the command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when the type of task being added is unknown."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, History history) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert storage !\u003d null : \"Storage cannot be null\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert taskList !\u003d null : \"taskList cannot be null\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        switch (c) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            history.addToHistory(taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return addToDoTask(this.userInput, taskList, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            history.addToHistory(taskList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return addEventTask(this.userInput, taskList, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            history.addToHistory(taskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return addDeadlineTask(this.userInput, taskList, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"I don\u0027t recognize the type of task you are trying to add\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static boolean checkForEmptyDescription(String userInput) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return userInput.length() \u003c\u003d 4;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private String addToDoTask(String userInput, TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (checkForEmptyDescription(userInput)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String taskDescription \u003d userInput.substring(5);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ToDo newToDoItem \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return addItem(newToDoItem, taskList, storage); // Add to taskList"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private String addEventTask(String userInput, TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            String taskDescription \u003d userInput.substring(6, userInput.indexOf(\"/at\") - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            String eventDateTime \u003d userInput.substring(userInput.indexOf(\"/at\") + 4);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Event newEventItem \u003d new Event(taskDescription, eventDateTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return addItem(newEventItem, taskList, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please refer to help instructions on how to add event task\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private String addDeadlineTask(String userInput, TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            String taskDescription \u003d userInput.substring(9, userInput.indexOf(\"/by\") - 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            String deadlineBy \u003d userInput.substring(userInput.indexOf(\"/by\") + 4);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Deadline newDeadlineItem \u003d new Deadline(taskDescription, deadlineBy);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return addItem(newDeadlineItem, taskList, storage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please refer to help instructions on how to add deadline task\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Adds a newly added task to Duke\u0027s \u003ccode\u003eTaskList\u003c/code\u003e, then stores the newly added task to Duke\u0027s"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * \u003ccode\u003eStorage\u003c/code\u003e."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param newTask the new task that will be added."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String addItem(Task newTask, TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert newTask !\u003d null : \"Task input cannot be null\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        storage.createTask(newTask); // Add to storage database"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n   \" + newTask.toString() + taskList.printNumTasks();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 115
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Command when user exits Duke program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints out goodbye message to console before shutting down Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param history the state of all changes made to Duke\u0027s TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, History history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Determine whether or not Duke should shut down after running this command, only true for ByeCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a boolean specifying whether or not Duke will shut down after the command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 32
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * A command based on the user input that will be sent to Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Abstract method to be implemented by Command subclasses, execution will vary depending on the type of Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param history the state of all changes made to Duke\u0027s TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return string representation of Duke\u0027s response to the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when the type of task being added is unknown."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public abstract String execute(TaskList taskList, Storage storage, History history) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Whether or not Duke program should terminate."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return true only when the command is bye."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 32
    }
  },
  {
    "path": "src/main/java/duke/command/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Constants describing all the possible types of Commands that a user can give to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     BYE, LIST, TODO, EVENT, DEADLINE, DONE, DELETE, FIND, UNDO, UNKNOWN, HELP"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 8
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Command when user deletes a task from the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a delete command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param userInput command give from user via command line."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public DeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Delete a task from Duke\u0027s TaskList and update Duke\u0027s storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param history the state of all changes made to Duke\u0027s TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when the task to be deleted does not exist in Duke\u0027s TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, History history) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert storage !\u003d null : \"Storage cannot be null\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert taskList !\u003d null : \"taskList cannot be null\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            String taskIndex \u003d userInput.substring(7);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            history.addToHistory(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            int index \u003d Integer.valueOf(taskIndex) - 1; // taskIndex started from 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Task deletedTask \u003d taskList.delete(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            storage.deleteTask(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return \"Noted. I\u0027ve removed this task:\\n\" + deletedTask.toString() + taskList.printNumTasks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please enter a valid task number for me delete.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 49
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Command when user marks a task as completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a delete command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param userInput command given from user via command line."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public DoneCommand(String userInput) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Mark a task as completed, updates Duke\u0027s TaskList as well as Storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param history the state of all changes made to Duke\u0027s TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, History history) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert storage !\u003d null : \"Storage cannot be null\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert taskList !\u003d null : \"taskList cannot be null\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            String taskIndex \u003d userInput.substring(5);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            history.addToHistory(taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            int index \u003d Integer.valueOf(taskIndex) - 1; // taskIndex started from 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Task completedTask \u003d taskList.get(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            completedTask.markAsDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            storage.updateTask(completedTask, index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return \"Nice! I\u0027ve marked this task as done:\\n\" + completedTask.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please enter a valid task number for me to mark as done.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 51
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Command given to Duke to search for Tasks within Duke\u0027s TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates a Find Command to search the TaskList for the Task with the specified key word."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param fullCommand \u003ccode\u003eString\u003c/code\u003e of the entire command from the user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public FindCommand(String fullCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.userInput \u003d fullCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Searches for Tasks that has the keyword inputted by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List of all the Tasks that Duke has."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database of Tasks that is saved to the user\u0027s local storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param history the state of all changes made to Duke\u0027s TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, History history) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert taskList !\u003d null : \"taskList cannot be null\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (userInput.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please enter a keyword to find your task\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String keyword \u003d this.userInput.substring(5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"I\u0027ve found these tasks that matches your keyword:\\n\" + taskList.showSpecifiedItems(keyword);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 43
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Command that displays all the commands that Duke is able to understand to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Displays all the commands that Duke supports to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List of all the Tasks that Duke has."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database of Tasks that is saved to the user\u0027s local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param history the state of all changes made to Duke\u0027s TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, History history) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"Here are all the commands that you can give me:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \"- \u0027list\u0027 to see all the tasks\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \"- \u0027todo \u003cdescription\u003e\u0027 to add a new todo task\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \"- \u0027event \u003cdescription\u003e /at \u003cYYYY/MM/DD\u003e \u003cHH:MM\u003e\u0027 to add a new todo task\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \"- \u0027todo \u003cdescription\u003e /by \u003cYYYY/MM/DD\u003e \u003cHH:MM\u003e\u0027 to add a new todo task\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \"- \u0027delete \u003ctaskId\u003e\u0027 to delete the task with the given ID\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \"- \u0027done \u003ctaskId\u003e\u0027 to mark the task with the given ID as completed\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \"- \u0027find \u003ckeyword\u003e\u0027 to find all tasks with the descriptions matching the given keyword\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \"- \u0027undo\u0027 to undo the previous command given to Duke\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \"- \u0027help\u0027 to view this list again\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \"- \u0027bye\u0027 to exit the program\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 34
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Command for Duke to enumerate the entire list of tasks and show it to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Shows all the tasks currently in Duke\u0027s TaskList by printing it out to the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param history the state of all changes made to Duke\u0027s TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, History history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert taskList !\u003d null : \"taskList cannot be null\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"Here are all the items in your list:\\n\" + taskList.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 22
    }
  },
  {
    "path": "src/main/java/duke/command/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates an Undo Command to revert the state of Duke\u0027s TaskList to the previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param fullCommand \u003ccode\u003eString\u003c/code\u003e of the entire command from the user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public UndoCommand(String fullCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.userInput \u003d fullCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Changes the state of Duke\u0027s TaskList to the previous state."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List of all the Tasks that Duke has."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database of Tasks that is saved to the user\u0027s local storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param history the state of all changes made to Duke\u0027s TaskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, History history) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList previousState \u003d history.undoHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        taskList.replace(previousState);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        storage.undoChanges(previousState);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"Undo successful! This is what your list looks like now:\\n\" + previousState.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Type of Task which includes a end date and end time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Deadline date object of task */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    protected LocalDate byDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Deadline time object of task */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    protected LocalTime byTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a Deadline task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description describes the details of the Deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param by the end date and time of the Deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when date and time inputs are invalid, or when no date and time is inputted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.byDate \u003d formatDate(by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.byTime \u003d formatTime(by);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please input date and time in correct format: YYYY/MM/DD HH:MM\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Overloaded constructor used when Tasks are being read from the local Storage of the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description describes the details of the Deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param isDone determines whether task has been completed or not."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param by the end date and time of the Deadline."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when date and time inputs are invalid, or when no date and time is inputted."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Deadline(String description, boolean isDone, String by) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.byDate \u003d formatDate(by);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.byTime \u003d formatTime(by);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please input date and time in correct format: YYYY/MM/DD HH:MM\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Deadline(String description, LocalDate byDate, LocalTime byTime) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.byDate \u003d byDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.byTime \u003d byTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private LocalTime formatTime(String by) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        int timeIndex \u003d by.indexOf(\" \") + 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String timePortion \u003d by.substring(timeIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(timePortion);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private LocalDate formatDate(String by) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        int dateIndex \u003d by.indexOf(\" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String datePortion \u003d by.substring(0, dateIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String formattedDate \u003d datePortion.replaceAll(\"/\", \"-\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(formattedDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates a deep copy of the current Deadline."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a copy of the current Deadline."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Deadline deepCopy() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return new Deadline(this.description, this.byDate, this.byTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints to user the description, and formatted date and time of the Deadline Task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e representing the formatted Deadline Task details."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"D | \" + super.toString() + \" | \" + this.byDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \", \" + this.byTime.format(DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 97
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Type of Task which involves a starting date and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Starting date object of the Event */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    protected LocalDate atDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Starting time object of the Event */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    protected LocalTime atTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a new Event object with the description and starting date and time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description details of the Event Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param at starting Date and Time of the Event Task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when there is no date and time inputted for the Event,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *  or if the date and time are in the wrong format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Event (String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.atDate \u003d formatDate(at);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.atTime \u003d formatTime(at);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please input date and time in correct format: YYYY/MM/DD HH:MM\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Overloaded constructor used when Tasks are being added from the user\u0027s local storage to Duke\u0027s TaskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description details of the Event Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param isDone determines if the Event has been completed or not."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param at starting Date and Time of the Event Task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when there is no date and time inputted for the Event,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *  or if the date and time are in the wrong format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Event(String description, boolean isDone, String at) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.atDate \u003d formatDate(at);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.atTime \u003d formatTime(at);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please input date and time in correct format: YYYY/MM/DD HH:MM\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Event(String description, LocalDate atDate, LocalTime atTime) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.atDate \u003d atDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.atTime \u003d atTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private LocalTime formatTime(String at) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        int timeIndex \u003d at.indexOf(\" \") + 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String timePortion \u003d at.substring(timeIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(timePortion);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private LocalDate formatDate(String at) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        int dateIndex \u003d at.indexOf(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String datePortion \u003d at.substring(0, dateIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String formattedDate \u003d datePortion.replaceAll(\"/\", \"-\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(formattedDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates a deep copy of the current Event."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a copy of the current Event."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Event deepCopy() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return new Event(this.description, this.atDate, this.atTime);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints to user the description, and formatted date and time of the Event Task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e representing the formatted Event Task details."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"E | \" + super.toString() + \" | \" + this.atDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \", \" + this.atTime.format(DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 98
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Parent Task class with multiple sub-classes determining the specific type of Task that the user is adding"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * to Duke\u0027s TaskList."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Details of the Task */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Whether or not the Task is completed */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a new Task object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description the details of the Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to use when reading data from the hard disk upon Duke start up."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description is the details of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param isDone determines whether the task is marked as completed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Checks if Task description contains the give keyword."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param keyword is the pattern string inputted by the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return true if the Task description contains the keyword."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean hasKeyword(String keyword) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return description.contains(keyword);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates a deep copy of the current Task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a copy of the current Task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Task deepCopy() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return new Task(this.description, this.isDone);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return (isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Mark task as completed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The description of the Task, as well as whether or not the Task is completed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e representation of the Task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return this.getStatusIcon() + \" | \" + this.description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 73
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * The \u003ccode\u003eArrayList\u003c/code\u003e containing all the Tasks that Duke is storing."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a new TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Overloaded constructor, used when there are existing tasks being loaded from the user\u0027s local storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param tasks is the List of Tasks that is created from loading the Storage\u0027s tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert tasks !\u003d null : \"Tasks cannot be null\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.taskList \u003d tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Adds a new task to the TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param newTask the task to be added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assert newTask !\u003d null : \"New task cannot be null\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Removes the specified task from the TaskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param index the index of the Task to be deleted from the TaskList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return the Task that has been deleted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Task delete(int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return this.taskList.remove(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The number of Tasks in the TaskList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return an \u003ccode\u003eInteger\u003c/code\u003e representing the number of Tasks in the TaskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Retrieves a Task from the TaskList at a specified index."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param index the Task in the TaskList to be retrieved."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return the Task that is retrieved."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return this.taskList.get(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints out all the Tasks in the TaskList that contains the keyword specified by the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param keyword the key to filter the Tasks in the TaskList by."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return String representing all the filtered items in the TaskList."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String showSpecifiedItems(String keyword) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        List\u003cTask\u003e currList \u003d this.taskList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        List\u003cTask\u003e filteredList \u003d currList.stream().filter((task) -\u003e task.hasKeyword(keyword))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return new TaskList(filteredList).toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints a string representation of the number of tasks currently in the TaskList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String printNumTasks() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"\\nNow you have \" + taskList.size()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + (taskList.size() \u003e 1 ? \" tasks\" : \" task\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \" in the list.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private List\u003cTask\u003e getInnerList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Switches the old TaskList with a new TaskList."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param newTaskList the new TaskList to replace the old TaskList with."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void replace(TaskList newTaskList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.taskList \u003d newTaskList.getInnerList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates a deep copy of the TaskList."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a new instance of TaskList copied from the previous instance."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public TaskList deepCopy() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        List\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        List\u003cTask\u003e currList \u003d this.taskList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        for (Task t : currList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Task copiedTask \u003d t.deepCopy();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            newList.add(copiedTask);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return new TaskList(newList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns a string representation of the Tasks in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a string of all the tasks in the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return IntStream.range(0, this.taskList.size())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                .mapToObj(index -\u003e String.format(\"%d. %s\", index + 1, this.taskList.get(index)))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                .collect(Collectors.joining(\"\\n\"))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                .trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 133
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Type of Task that is to be completed by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a \u003ccode\u003eToDo\u003c/code\u003e Task object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description the details of the ToDo Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Overloaded constructor used when Tasks are being loaded from the user\u0027s local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description the details of the ToDo Task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param isDone whether the Task is completed or not."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates a deep copy of the current ToDo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a copy of the current ToDo."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ToDo deepCopy() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return new ToDo(super.description, super.isDone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints out the details of the ToDo Task, as well as whether or not it is completed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e representation of the ToDo Task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"T | \" + super.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 46
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.layout.Border;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.layout.BorderStroke;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.layout.BorderStrokeStyle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.layout.BorderWidths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private DialogBox(String text, Image img, String color) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        dialog.setWrapText(true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        displayPicture.setFitHeight(40);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        displayPicture.setFitWidth(40);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        // Auto resize dialog box when there is a long list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.setBorder(new Border(new BorderStroke(Paint.valueOf(color),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                BorderStrokeStyle.DASHED, CornerRadii.EMPTY, BorderWidths.DEFAULT)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        int count \u003d text.endsWith(\"\\n\") ? 1 : 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String[] size \u003d text.split(\"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        count +\u003d size.length + 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        for (String s : size) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            count +\u003d s.length() / 32;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.setMinHeight(count * 15 + 30);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return new DialogBox(text, img, \"blue\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        var db \u003d new DialogBox(text, img, \"red\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 83
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Siri.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        DialogBox dukeDialog \u003d DialogBox.getDukeDialog(duke.greet(), dukeImage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        VBox.setMargin(dukeDialog, new Insets(10, 5, 0, 5));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        dialogContainer.getChildren().add(dukeDialog);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        DialogBox userDialog \u003d DialogBox.getUserDialog(input, userImage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        DialogBox dukeDialog \u003d DialogBox.getDukeDialog(response, dukeImage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        VBox.setMargin(userDialog, new Insets(10, 5, 10, 5));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        VBox.setMargin(dukeDialog, new Insets(0, 5, 0, 5));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                userDialog,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                dukeDialog"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 64
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"128.0\" prefWidth\u003d\"404.0\" spacing\u003d\"20.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "      \u003cButtonBar prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "         \u003cbuttons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "              \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "         \u003c/buttons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "      \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 24
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textAlignment\u003d\"CENTER\" textFill\u003d\"RED\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "         \u003cFont name\u003d\"Book Antiqua\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "      \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "   \u003cImageView fitHeight\u003d\"557.0\" fitWidth\u003d\"389.0\" opacity\u003d\"0.3\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "      \u003cimage\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "         \u003cImage url\u003d\"@../images/Background.jpg\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "      \u003c/image\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "   \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 26
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void parseCommand_unkownCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Command c \u003d Parser.parse(\"asd\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"I\u0027m sorry, but I don\u0027t know what that means :-(\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void parseCommand_byeCommand_byeCommandObjectCreated() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Command c \u003d Parser.parse(\"bye\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(c instanceof ByeCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(\"Test failed\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void parseCommand_listCommand_listCommandObjectCreated() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Command c \u003d Parser.parse(\"list\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(c instanceof ListCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(\"Test failed\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void parseCommand_unspecifiedDoneCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Command c \u003d Parser.parse(\"done\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Please enter a valid task number for me to mark as done.\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 51
    }
  },
  {
    "path": "src/test/java/duke/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void isExitTrue_addCommandCreated_false() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Command test \u003d new AddCommand(\"todo walk dog\", Commands.TODO);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertFalse(test.isExit());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void isAddingToDo_executeWithTodo_true() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Command test \u003d new AddCommand(\"todo walk dog\", Commands.TODO);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Path storageFilePath \u003d Paths.get(\".\", \"data\", \"test.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Storage s \u003d new Storage(storageFilePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        History history \u003d new History();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(test.execute(l, s, history).contains(\"Got it. I\u0027ve added this task\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(\"Test failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 38
    }
  },
  {
    "path": "src/test/java/duke/command/ByeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ByeCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void isExitTrue_byeCommandCreated_true() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Command test \u003d new ByeCommand();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertTrue(test.isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 14
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void isExitTrue_deleteCommandCreated_false() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Command test \u003d new DeleteCommand(\"delete 3\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertFalse(test.isExit());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void isTaskDeleted_deleteTask_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Command test \u003d new DeleteCommand(\"delete 0\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Path storageFilePath \u003d Paths.get(\".\", \"data\", \"test.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Storage s \u003d new Storage(storageFilePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        History history \u003d new History();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            test.execute(l, s, history);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Please enter a valid task number\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 38
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void isExitTrue_doneCommandCreated_false() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Command test \u003d new DoneCommand(\"done 3\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertFalse(test.isExit());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void isTaskDone_markTaskAsDone_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Command test \u003d new DoneCommand(\"done 3\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Path storageFilePath \u003d Paths.get(\".\", \"data\", \"test.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Storage s \u003d new Storage(storageFilePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        History history \u003d new History();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            test.execute(l, s, history);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Please enter a valid task number\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 36
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void isExitTrue_findCommandCreated_false() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Command test \u003d new FindCommand(\"find walk\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertFalse(test.isExit());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void isTaskDone_markTaskAsDone_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Command test \u003d new FindCommand(\"find walk\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Path storageFilePath \u003d Paths.get(\".\", \"data\", \"test.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Storage s \u003d new Storage(storageFilePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        History history \u003d new History();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            test.execute(l, s, history);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Please enter a keyword\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 36
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.History;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void isExitTrue_listCommandCreated_false() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Command test \u003d new ListCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertFalse(test.isExit());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void isTaskDone_markTaskAsDone_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Command test \u003d new ListCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Path storageFilePath \u003d Paths.get(\".\", \"data\", \"test.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Storage s \u003d new Storage(storageFilePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        History history \u003d new History();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(test.execute(l, s, history).contains(\"Here are all the items in your list\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(\"Test failed\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 36
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createDeadline_withoutDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Deadline d \u003d new Deadline(\"submission\", \"\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Please input date and time in correct format\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createDeadline_withoutInvalidDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Deadline d \u003d new Deadline(\"submission\", \"2020/14/54 2810\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Please input date and time in correct format\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createDeadline_withDateTime_deadlineCreated() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Deadline d \u003d new Deadline(\"submission\", \"2020/11/14 15:30\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(d instanceof Deadline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(\"Test failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 37
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createEvent_withDescription_stringReturned() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Event test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            test \u003d new Event(\"dinner party\", \"2020/02/14 14:50\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(test.toString().contains(\"E |\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(\"Test failed\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createEvent_withWrongDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Event test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            test \u003d new Event(\"dinner party\", \"200/202/14 14:50\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Please input date and time\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 30
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void addTask_taskListWithItems_taskAdded() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ArrayList\u003cTask\u003e testInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        testInputs.add(new ToDo(\"todo walk dog\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList test \u003d new TaskList(testInputs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        test.add(new ToDo(\"todo test methods\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertEquals(2, test.size());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void addTask_taskListWithoutItems_taskAdded() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ArrayList\u003cTask\u003e testInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList test \u003d new TaskList(testInputs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        test.add(new ToDo(\"todo test methods\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertEquals(1, test.size());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void deleteTask_taskListWithItems_taskDeleted() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ArrayList\u003cTask\u003e testInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        testInputs.add(new ToDo(\"todo walk dog\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList test \u003d new TaskList(testInputs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        test.add(new ToDo(\"todo test methods\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        test.delete(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertEquals(1, test.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void deleteTask_taskListWithoutItems_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ArrayList\u003cTask\u003e testInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList test \u003d new TaskList(testInputs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            test.delete(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Index 1 out of bounds\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void getSize_taskListWithOneItem_one() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ArrayList\u003cTask\u003e testInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList test \u003d new TaskList(testInputs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        test.add(new ToDo(\"todo test methods\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertEquals(1, test.size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void getSize_taskListWithoutItems_zero() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ArrayList\u003cTask\u003e testInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList test \u003d new TaskList(testInputs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertEquals(0, test.size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void getItem_taskListWithoutItems_exceptionThrown() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ArrayList\u003cTask\u003e testInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList test \u003d new TaskList(testInputs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            test.get(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Index 1 out of bounds\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void getItem_taskListWithItems_itemRetrieved() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ArrayList\u003cTask\u003e testInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        testInputs.add(new ToDo(\"todo walk dog\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList test \u003d new TaskList(testInputs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        test.add(new ToDo(\"todo test methods\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertTrue(test.get(1) instanceof ToDo);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 85
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createTask_withDescription_taskCreated() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Task test \u003d new Task(\"description\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertTrue(test instanceof Task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createTask_withoutDescription_taskCreated() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Task test \u003d new Task(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertTrue(test instanceof Task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void getTaskStatus_taskDone_oneString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Task test \u003d new Task(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        test.markAsDone();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertEquals(\"1\", test.getStatusIcon());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void getTaskStatus_taskNotDone_zeroString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Task test \u003d new Task(\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertEquals(\"0\", test.getStatusIcon());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 33
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createTodo_withDescription_stringReturned() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ToDo test \u003d new ToDo(\"Walk Dog\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertEquals(\"T | 0 | Walk Dog\", test.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createTodo_withOutDescription_stringReturned() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ToDo test \u003d new ToDo(\"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertEquals(\"T | 0 | \", test.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 19
    }
  },
  {
    "path": "text-ui-test/data/test.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "D | 0 | return book | May 4 2020, 15:30:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "T | 1 | join sports club"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "T | 0 | borrow book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "D | 0 | individual project | Sep 20 2020, 12:00:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "E | 0 | project meeting | Oct 11 2020, 14:15:00"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 5
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "deadline return book /by 2020/05/04 15:30"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "event talkshow /at 2020/08/15 18:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "deadline individual project /by 2020/09/20 12:00"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "event project meeting /at 2020/10/11 14:15"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "event project task /at 1042/20/14 00:124"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "blah"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "done 929"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "delete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 21
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 2,
      "-": 19
    }
  }
]
