[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"# duke.runner.Runner project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":"1. After the importing is complete, locate the `src/main/java/duke.runner.Runner.java` file, right-click it, and choose `Run duke.runner.Runner.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"geoboom":2,"-":24}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"geoboom"},"content":"    mainClassName \u003d \"Runner\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geoboom":1,"-":45}},{"path":"data/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"2 | NOT DONE | DEADLINE | testing | 12/10/1999 2359"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":"3 | NOT DONE | EVENT | my name chef | 10/10/2021 1800"},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"4 | NOT DONE | TODO | mynamechef"}],"authorContributionMap":{"geoboom":3}},{"path":"design-docs/design-docs.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"# Week 2 (17 AUG - 23 AUG)"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"## Preliminary Design"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"The task is to build an extensible terminal chat application named duke.runner.Runner. Having some experience with Android, FullStack web development, and system design, I decided to glance over the future specs and enhancements and read up a bit about JavaFX FXML (the GUI library) before starting. This gives me a feel of the scope and scale of project duke.runner.Runner so I can choose an architectural pattern to roll with. For now, the MVVM (Model-View-ViewModel) pattern seems promising, along with a DAO (Data Access Object) to encapsulate communication with the data layer."},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"Since I like microservice architecture and modular applications a lot, my goal is to make the transition from CLI to GUI or file-based storage to DB-based storage as simple as \"plug-n-play\". Perhaps my design may evolve or change over the next few weeks. We\u0027ll see."},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"## Project Management"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"Just like in AGILE, project milestones are issued and checked in weekly sprints. This is nice because I plan to learn GitHub project board to manage the development process with Epics, User Stories, and issues."},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":"## Gradle and JUnit"},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"I think I\u0027ll start by migrating the project over to Gradle and conduct testing with JUnit 5 rather than running the `.sh` script over and over. I\u0027ll also use gradle to build the `.jar`. If I have time I might set up CircleCI/Travis CI pipeline to automatically test and build the `.jar` and release it using semantic versioning. This too is a great opportunity for me to practice TDD (Test-Driven Development) as well, where unit tests are written before the actual code."},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":"## Packages"},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"To be updated."},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"# Week 3 (24 AUG - 30 AUG)"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":"```"},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"     August 2020"},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":"Mo Tu We Th Fr Sa Su"},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"                1  2"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":" 3  4  5  6  7  8  9"},{"lineNumber":28,"author":{"gitId":"geoboom"},"content":"10 11 12 13 14 15 16"},{"lineNumber":29,"author":{"gitId":"geoboom"},"content":"17 18 19 20 21 22 23"},{"lineNumber":30,"author":{"gitId":"geoboom"},"content":"24 25 26 27 28 29 30"},{"lineNumber":31,"author":{"gitId":"geoboom"},"content":"31"},{"lineNumber":32,"author":{"gitId":"geoboom"},"content":"```"}],"authorContributionMap":{"geoboom":32}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"public class ByeCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"  public ByeCommand() {"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"  public void execute(Duke duke) throws Exception {"},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":"    duke.removeAllObservers();"},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"  public void undo(Duke duke) {"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":"    // stub"},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"  public boolean isExit() {"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":"    return true;"},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":24}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"public abstract class Command {"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"  public abstract void execute(Duke duke) throws Exception;"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"  public abstract void undo(Duke duke);"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"  public abstract boolean isExit();"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":9}},{"path":"src/main/java/duke/command/CommandEnum.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"public enum CommandEnum {"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":"  BYE,"},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"  LIST,"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"  DONE,"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"  DELETE,"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"  TODO,"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"  EVENT,"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"  DEADLINE,"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":11}},{"path":"src/main/java/duke/command/CompleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"public class CompleteTaskCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"  int taskId;"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"  public CompleteTaskCommand(int taskId) {"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"    this.taskId \u003d taskId;"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":"  public void execute(Duke duke) throws Exception {"},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"    duke.markTaskDone(taskId);"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"  public void undo(Duke duke) {"},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":"    // stub"},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"  public boolean isExit() {"},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":"    return false;"},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":27}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"  private final String desc;"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"  private final String by;"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"  public DeadlineCommand(String desc, String by) {"},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":"    this.desc \u003d desc;"},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":"    this.by \u003d by;"},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":"  public void execute(Duke duke) throws Exception {"},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":"    duke.addDeadlineTask(desc, by);"},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":"  public void undo(Duke duke) {"},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":"    // stub"},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":"  public boolean isExit() {"},{"lineNumber":28,"author":{"gitId":"geoboom"},"content":"    return false;"},{"lineNumber":29,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":30,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":30}},{"path":"src/main/java/duke/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"public class DeleteTaskCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"  int taskId;"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"  public DeleteTaskCommand(int taskId) {"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"    this.taskId \u003d taskId;"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":"  public void execute(Duke duke)  throws Exception{"},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":"    // TODO: make this duke.deleteTask return pos info for undo operation"},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"    duke.deleteTask(taskId);"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"  public void undo(Duke duke) {"},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":"    // stub"},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"  public boolean isExit() {"},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":"    return false;"},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":27}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"public class EventCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"  private final String desc;"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"  private final String at;"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"  public EventCommand(String desc, String at) {"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"    this.desc \u003d desc;"},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":"    this.at \u003d at;"},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"  public void execute(Duke duke) throws Exception {"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":"    duke.addEventTask(desc, at);"},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"  public void undo(Duke duke) {"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":"    // stub"},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"  public boolean isExit() {"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":"    return false;"},{"lineNumber":28,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":29,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":29}},{"path":"src/main/java/duke/command/ListTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"public class ListTasksCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"  public void execute(Duke duke) {"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"    List\u003cTask\u003e tasks \u003d duke.getTasks();"},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"  public void undo(Duke duke) {"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"    // stub"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":"  public boolean isExit() {"},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"    return false;"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":23}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"public class TodoCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"  private final String desc;"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"  public TodoCommand(String desc) {"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"    this.desc \u003d desc;"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":"  public void execute(Duke duke) throws Exception {"},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"    duke.addTodoTask(desc);"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"  public void undo(Duke duke) {"},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":"    // stub"},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"  public boolean isExit() {"},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":"    return false;"},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":27}},{"path":"src/main/java/duke/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.duke;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":"import duke.task.EventTask;"},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"import duke.task.TodoTask;"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"import duke.utils.Storage;"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"import duke.view.cli.CLI;"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":" * duke.runner.Duke is the singleton class we\u0027ll be using to manage the transactions. It will"},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":" * encapsulate the task storage and retrieval system."},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":" */"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"public class Duke {"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":"  private CLI observer;"},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"  private List\u003cTask\u003e tasks;"},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":"  private final Storage storage;"},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":"  public Duke(Storage storage) {"},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":"    this.storage \u003d storage;"},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"    try {"},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":"      tasks \u003d new ArrayList\u003c\u003e(this.storage.load());"},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"    } catch (Exception e) {"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":"      tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"geoboom"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":30,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":31,"author":{"gitId":"geoboom"},"content":"  // TODO: observer list"},{"lineNumber":32,"author":{"gitId":"geoboom"},"content":"  public void addObserver(CLI observer) {"},{"lineNumber":33,"author":{"gitId":"geoboom"},"content":"    this.observer \u003d observer;"},{"lineNumber":34,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":35,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":36,"author":{"gitId":"geoboom"},"content":"  public void notifyObservers(String s) {"},{"lineNumber":37,"author":{"gitId":"geoboom"},"content":"    observer.update(s);"},{"lineNumber":38,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":39,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":40,"author":{"gitId":"geoboom"},"content":"  public void removeObserver(CLI observer) {"},{"lineNumber":41,"author":{"gitId":"geoboom"},"content":"    observer.close();"},{"lineNumber":42,"author":{"gitId":"geoboom"},"content":"    this.observer \u003d null;"},{"lineNumber":43,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":44,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":45,"author":{"gitId":"geoboom"},"content":"  public void removeAllObservers() {"},{"lineNumber":46,"author":{"gitId":"geoboom"},"content":"    this.observer.close();"},{"lineNumber":47,"author":{"gitId":"geoboom"},"content":"    this.observer \u003d null;"},{"lineNumber":48,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":49,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":50,"author":{"gitId":"geoboom"},"content":"  public void updateStorage() throws Exception {"},{"lineNumber":51,"author":{"gitId":"geoboom"},"content":"    storage.store(tasks);"},{"lineNumber":52,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":53,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":54,"author":{"gitId":"geoboom"},"content":"  public void addTodoTask(String description) throws Exception {"},{"lineNumber":55,"author":{"gitId":"geoboom"},"content":"    Task task \u003d new TodoTask(description);"},{"lineNumber":56,"author":{"gitId":"geoboom"},"content":"    tasks.add(task);"},{"lineNumber":57,"author":{"gitId":"geoboom"},"content":"    notifyObservers(\"Added TODO: \" + task.toString());"},{"lineNumber":58,"author":{"gitId":"geoboom"},"content":"    updateStorage(); // TODO: storage as observer"},{"lineNumber":59,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":60,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":61,"author":{"gitId":"geoboom"},"content":"  public void addEventTask(String description, String at) throws Exception {"},{"lineNumber":62,"author":{"gitId":"geoboom"},"content":"    Task task \u003d new EventTask(description, at);"},{"lineNumber":63,"author":{"gitId":"geoboom"},"content":"    tasks.add(task);"},{"lineNumber":64,"author":{"gitId":"geoboom"},"content":"    notifyObservers(\"Added EVENT: \" + task.toString());"},{"lineNumber":65,"author":{"gitId":"geoboom"},"content":"    updateStorage(); // TODO: storage as observer"},{"lineNumber":66,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":67,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":68,"author":{"gitId":"geoboom"},"content":"  public void addDeadlineTask(String description, String by) throws Exception {"},{"lineNumber":69,"author":{"gitId":"geoboom"},"content":"    Task task \u003d new DeadlineTask(description, by);"},{"lineNumber":70,"author":{"gitId":"geoboom"},"content":"    tasks.add(task);"},{"lineNumber":71,"author":{"gitId":"geoboom"},"content":"    notifyObservers(\"Added DEADLINE: \" + task.toString());"},{"lineNumber":72,"author":{"gitId":"geoboom"},"content":"    updateStorage(); // TODO: storage as observer"},{"lineNumber":73,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":74,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":75,"author":{"gitId":"geoboom"},"content":"  public void markTaskDone(int id) throws Exception {"},{"lineNumber":76,"author":{"gitId":"geoboom"},"content":"    Task task \u003d tasks.get(id);"},{"lineNumber":77,"author":{"gitId":"geoboom"},"content":"    task.markDone();"},{"lineNumber":78,"author":{"gitId":"geoboom"},"content":"    notifyObservers(\"Marked DONE:\" + task.toString());"},{"lineNumber":79,"author":{"gitId":"geoboom"},"content":"    updateStorage();"},{"lineNumber":80,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":81,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":82,"author":{"gitId":"geoboom"},"content":"  public void deleteTask(int id) throws Exception {"},{"lineNumber":83,"author":{"gitId":"geoboom"},"content":"    Task task \u003d tasks.remove(id);"},{"lineNumber":84,"author":{"gitId":"geoboom"},"content":"    notifyObservers(\"DELETED:\" + task.toString());"},{"lineNumber":85,"author":{"gitId":"geoboom"},"content":"    notifyObservers(String.format(\"You now have %d tasks.\", tasks.size()));"},{"lineNumber":86,"author":{"gitId":"geoboom"},"content":"    updateStorage();"},{"lineNumber":87,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":88,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":89,"author":{"gitId":"geoboom"},"content":"  public List\u003cTask\u003e getTasks() {"},{"lineNumber":90,"author":{"gitId":"geoboom"},"content":"    notifyObservers(tasks.toString());"},{"lineNumber":91,"author":{"gitId":"geoboom"},"content":"    return tasks;"},{"lineNumber":92,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":93,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":93}},{"path":"src/main/java/duke/exception/ParserException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"public class ParserException extends Exception {"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"  public ParserException(String message) {"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"    super(message);"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":9}},{"path":"src/main/java/duke/runner/Runner.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.runner;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":"import duke.duke.Duke;"},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"import duke.exception.ParserException;"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"import duke.utils.Parser;"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"import duke.utils.Storage;"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"import duke.view.cli.CLI;"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":" * Class that handles the \"event loop\" of the CLI program, terminating when a termination command is"},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":" * detected."},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":" */"},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"public class Runner {"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":"  public static void main(String[] args) {"},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":"    run();"},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"  /*"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":"   * Prints hello, goodbye, nd output of command executions. Also runs the event loop."},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":"   */"},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"  public static void run() {"},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":"    Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"    Duke duke \u003d new Duke(new Storage(\"data/data.txt\"));"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":"    duke.addObserver(new CLI());"},{"lineNumber":28,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":29,"author":{"gitId":"geoboom"},"content":"    String input;"},{"lineNumber":30,"author":{"gitId":"geoboom"},"content":"    while (true) {"},{"lineNumber":31,"author":{"gitId":"geoboom"},"content":"      try {"},{"lineNumber":32,"author":{"gitId":"geoboom"},"content":"        input \u003d sc.nextLine();"},{"lineNumber":33,"author":{"gitId":"geoboom"},"content":"        Command command \u003d Parser.parseCommand(input);"},{"lineNumber":34,"author":{"gitId":"geoboom"},"content":"        command.execute(duke);"},{"lineNumber":35,"author":{"gitId":"geoboom"},"content":"        if (command.isExit()) {"},{"lineNumber":36,"author":{"gitId":"geoboom"},"content":"          break;"},{"lineNumber":37,"author":{"gitId":"geoboom"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"geoboom"},"content":"      } catch (Exception e) { // TODO: break up exception catching"},{"lineNumber":39,"author":{"gitId":"geoboom"},"content":"        System.out.println(e.getMessage());"},{"lineNumber":40,"author":{"gitId":"geoboom"},"content":"      }"},{"lineNumber":41,"author":{"gitId":"geoboom"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":43,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":43}},{"path":"src/main/java/duke/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.exception.ParserException;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":"import duke.utils.Parser;"},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"  private static final DateTimeFormatter DT_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":"  private final LocalDateTime by;"},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":"  public DeadlineTask(String desc, String by) throws ParserException {"},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"    super(desc);"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"    this.by \u003d Parser.parseDateTime(by);"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"//  public String getBy() {"},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":"//    return by;"},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"//  }"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":"  public String toString() {"},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"    return String"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":"        .format(\"%d | %s | %s | %s | %s\", getId(), getIsDone() ? \"DONE\" : \"NOT DONE\", \"DEADLINE\","},{"lineNumber":28,"author":{"gitId":"geoboom"},"content":"            getDesc(), by.format(DT_FORMAT));"},{"lineNumber":29,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":30,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":30}},{"path":"src/main/java/duke/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.exception.ParserException;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":"import duke.utils.Parser;"},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"public class EventTask extends Task {"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"  private static final DateTimeFormatter DT_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":"  private final LocalDateTime at;"},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":"  public EventTask(String desc, String at) throws ParserException {"},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"    super(desc);"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"    this.at \u003d Parser.parseDateTime(at);"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"//  public String getAt() {"},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":"//    return at;"},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"//  }"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":"  public String toString() {"},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"    return String"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":"        .format(\"%d | %s | %s | %s | %s\", getId(), getIsDone() ? \"DONE\" : \"NOT DONE\", \"EVENT\","},{"lineNumber":28,"author":{"gitId":"geoboom"},"content":"            getDesc(), at.format(DT_FORMAT));"},{"lineNumber":29,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":30,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":30}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"  public static int numTasks \u003d 0;"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"  private final int id;"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"  private final String desc;"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"  private boolean isDone \u003d false;"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"  public Task(String desc) {"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"    this.desc \u003d desc;"},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":"    this.id \u003d ++numTasks;"},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"  public int getId() {"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"    return id;"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"  public String getDesc() {"},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":"    return desc;"},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"  public boolean getIsDone() {"},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":"    return isDone;"},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":28,"author":{"gitId":"geoboom"},"content":"  public void setIsDone(boolean isDone) {"},{"lineNumber":29,"author":{"gitId":"geoboom"},"content":"    this.isDone \u003d isDone;"},{"lineNumber":30,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":31,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":32,"author":{"gitId":"geoboom"},"content":"  public void markDone() {"},{"lineNumber":33,"author":{"gitId":"geoboom"},"content":"    setIsDone(true);"},{"lineNumber":34,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":35,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":36,"author":{"gitId":"geoboom"},"content":"  @Override"},{"lineNumber":37,"author":{"gitId":"geoboom"},"content":"  public String toString() {"},{"lineNumber":38,"author":{"gitId":"geoboom"},"content":"    return String.format(\"%d | %s | %s | %s\", id, isDone ? \"DONE\" : \"NOT DONE\", \"TODO\", desc);"},{"lineNumber":39,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":40,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":40}},{"path":"src/main/java/duke/task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"public class TodoTask extends Task {"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"  public TodoTask(String desc) {"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"    super(desc);"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":8}},{"path":"src/main/java/duke/utils/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.command.ByeCommand;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"import duke.command.CommandEnum;"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"import duke.command.CompleteTaskCommand;"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"import duke.command.DeleteTaskCommand;"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"import duke.command.EventCommand;"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"import duke.command.ListTasksCommand;"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"import duke.command.TodoCommand;"},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":"import duke.exception.ParserException;"},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":"import java.time.LocalDateTime;"},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":" * duke.utils.Parser is the class that handles input parsing. Given a string, it should determine"},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":" * what command to execute and execute it."},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":" */"},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"public class Parser {"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":"  private static final DateTimeFormatter DT_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":"  /**"},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"   * @param s command supplied"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":"   * @return a list of string (tasks) corresponding to command execution output"},{"lineNumber":28,"author":{"gitId":"geoboom"},"content":"   */"},{"lineNumber":29,"author":{"gitId":"geoboom"},"content":"  public static Command parseCommand(String s) throws ParserException {"},{"lineNumber":30,"author":{"gitId":"geoboom"},"content":"    String[] args \u003d s.trim().split(\"\\\\s+\", 2);"},{"lineNumber":31,"author":{"gitId":"geoboom"},"content":"    CommandEnum cmdEnum;"},{"lineNumber":32,"author":{"gitId":"geoboom"},"content":"    try {"},{"lineNumber":33,"author":{"gitId":"geoboom"},"content":"      cmdEnum \u003d CommandEnum.valueOf(args[0].toUpperCase());"},{"lineNumber":34,"author":{"gitId":"geoboom"},"content":"    } catch (IllegalArgumentException e) {"},{"lineNumber":35,"author":{"gitId":"geoboom"},"content":"      throw new ParserException(\"Invalid command.\");"},{"lineNumber":36,"author":{"gitId":"geoboom"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":38,"author":{"gitId":"geoboom"},"content":"    switch (cmdEnum) {"},{"lineNumber":39,"author":{"gitId":"geoboom"},"content":"      case BYE:"},{"lineNumber":40,"author":{"gitId":"geoboom"},"content":"        return new ByeCommand();"},{"lineNumber":41,"author":{"gitId":"geoboom"},"content":"      case LIST:"},{"lineNumber":42,"author":{"gitId":"geoboom"},"content":"        return new ListTasksCommand();"},{"lineNumber":43,"author":{"gitId":"geoboom"},"content":"      case TODO: {"},{"lineNumber":44,"author":{"gitId":"geoboom"},"content":"        String todo \u003d parseTodo(args[1]);"},{"lineNumber":45,"author":{"gitId":"geoboom"},"content":"        return new TodoCommand(todo);"},{"lineNumber":46,"author":{"gitId":"geoboom"},"content":"      }"},{"lineNumber":47,"author":{"gitId":"geoboom"},"content":"      case EVENT: {"},{"lineNumber":48,"author":{"gitId":"geoboom"},"content":"        String[] inputArr \u003d parseEvent(args[1]);"},{"lineNumber":49,"author":{"gitId":"geoboom"},"content":"        return new EventCommand(inputArr[0], inputArr[1]);"},{"lineNumber":50,"author":{"gitId":"geoboom"},"content":"      }"},{"lineNumber":51,"author":{"gitId":"geoboom"},"content":"      case DEADLINE: {"},{"lineNumber":52,"author":{"gitId":"geoboom"},"content":"        String[] inputArr \u003d parseDeadline(args[1]);"},{"lineNumber":53,"author":{"gitId":"geoboom"},"content":"        return new DeadlineCommand(inputArr[0], inputArr[1]);"},{"lineNumber":54,"author":{"gitId":"geoboom"},"content":"      } case DONE: {"},{"lineNumber":55,"author":{"gitId":"geoboom"},"content":"        int[] taskIdList \u003d parseTaskIds(args[1]);"},{"lineNumber":56,"author":{"gitId":"geoboom"},"content":"        return new CompleteTaskCommand(taskIdList[0]);"},{"lineNumber":57,"author":{"gitId":"geoboom"},"content":"      }"},{"lineNumber":58,"author":{"gitId":"geoboom"},"content":"      case DELETE: {"},{"lineNumber":59,"author":{"gitId":"geoboom"},"content":"        int[] taskIdList \u003d parseTaskIds(args[1]);"},{"lineNumber":60,"author":{"gitId":"geoboom"},"content":"        return new DeleteTaskCommand(taskIdList[0]);"},{"lineNumber":61,"author":{"gitId":"geoboom"},"content":"      }"},{"lineNumber":62,"author":{"gitId":"geoboom"},"content":"      default:"},{"lineNumber":63,"author":{"gitId":"geoboom"},"content":"        throw new ParserException(\"No such command!\");"},{"lineNumber":64,"author":{"gitId":"geoboom"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":66,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":67,"author":{"gitId":"geoboom"},"content":"  public static LocalDateTime parseDateTime(String dateTimeString) throws ParserException {"},{"lineNumber":68,"author":{"gitId":"geoboom"},"content":"    try {"},{"lineNumber":69,"author":{"gitId":"geoboom"},"content":"      return LocalDateTime.parse(dateTimeString, DT_FORMAT);"},{"lineNumber":70,"author":{"gitId":"geoboom"},"content":"    } catch (DateTimeParseException e) {"},{"lineNumber":71,"author":{"gitId":"geoboom"},"content":"      throw new ParserException(\"DateTime format error.\");"},{"lineNumber":72,"author":{"gitId":"geoboom"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":74,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":75,"author":{"gitId":"geoboom"},"content":"  public static String parseTodo(String s) throws ParserException {"},{"lineNumber":76,"author":{"gitId":"geoboom"},"content":"    if (s.length() \u003c\u003d 0) {"},{"lineNumber":77,"author":{"gitId":"geoboom"},"content":"      throw new ParserException(\"Todo format error.\");"},{"lineNumber":78,"author":{"gitId":"geoboom"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"geoboom"},"content":"    return s;"},{"lineNumber":80,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":81,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":82,"author":{"gitId":"geoboom"},"content":"  public static String[] parseEvent(String s) throws ParserException {"},{"lineNumber":83,"author":{"gitId":"geoboom"},"content":"    String[] arr \u003d s.split(\" /at \");"},{"lineNumber":84,"author":{"gitId":"geoboom"},"content":"    if (arr.length \u003c\u003d 1) {"},{"lineNumber":85,"author":{"gitId":"geoboom"},"content":"      throw new ParserException(\"Event format error.\");"},{"lineNumber":86,"author":{"gitId":"geoboom"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"geoboom"},"content":"    return arr;"},{"lineNumber":88,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":89,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":90,"author":{"gitId":"geoboom"},"content":"  public static String[] parseDeadline(String s) throws ParserException {"},{"lineNumber":91,"author":{"gitId":"geoboom"},"content":"    String[] arr \u003d s.split(\" /by \");"},{"lineNumber":92,"author":{"gitId":"geoboom"},"content":"    if (arr.length \u003c\u003d 1) {"},{"lineNumber":93,"author":{"gitId":"geoboom"},"content":"      throw new ParserException(\"Deadline format error.\");"},{"lineNumber":94,"author":{"gitId":"geoboom"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"geoboom"},"content":"    return arr;"},{"lineNumber":96,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":97,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":98,"author":{"gitId":"geoboom"},"content":"  public static int[] parseTaskIds(String s) throws ParserException {"},{"lineNumber":99,"author":{"gitId":"geoboom"},"content":"    String[] arr \u003d s.split(\" \");"},{"lineNumber":100,"author":{"gitId":"geoboom"},"content":"    if (arr.length \u003c\u003d 0) {"},{"lineNumber":101,"author":{"gitId":"geoboom"},"content":"      throw new ParserException(\"Task numbers format error.\");"},{"lineNumber":102,"author":{"gitId":"geoboom"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"geoboom"},"content":"    int[] taskIdList \u003d new int[arr.length];"},{"lineNumber":104,"author":{"gitId":"geoboom"},"content":"    for (int i \u003d 0; i \u003c arr.length; ++i) {"},{"lineNumber":105,"author":{"gitId":"geoboom"},"content":"      taskIdList[i] \u003d Integer.parseInt(arr[i]);"},{"lineNumber":106,"author":{"gitId":"geoboom"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"geoboom"},"content":"    return taskIdList;"},{"lineNumber":108,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":109,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":109}},{"path":"src/main/java/duke/utils/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import duke.exception.ParserException;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"import duke.task.EventTask;"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"import duke.task.TodoTask;"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":"import java.util.Scanner;"},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":"  private static final int ID_POS \u003d 0;"},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"  private static final int DONE_POS \u003d 1;"},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":"  private static final int TYPE_POS \u003d 2;"},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"  private static final int DESC_POS \u003d 3;"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":"  private static final int DATE_POS \u003d 4;"},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"  private File file;"},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"  public Storage(String path) {"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":"    this.file \u003d new File(path);"},{"lineNumber":28,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":29,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":30,"author":{"gitId":"geoboom"},"content":"  private void init() throws IOException {"},{"lineNumber":31,"author":{"gitId":"geoboom"},"content":"    if (!file.exists()) {"},{"lineNumber":32,"author":{"gitId":"geoboom"},"content":"      File dir \u003d new File(file.getParent());"},{"lineNumber":33,"author":{"gitId":"geoboom"},"content":"      if (!dir.exists()) {"},{"lineNumber":34,"author":{"gitId":"geoboom"},"content":"        dir.mkdirs();"},{"lineNumber":35,"author":{"gitId":"geoboom"},"content":"      }"},{"lineNumber":36,"author":{"gitId":"geoboom"},"content":"      file.createNewFile();"},{"lineNumber":37,"author":{"gitId":"geoboom"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":39,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":40,"author":{"gitId":"geoboom"},"content":"  public void store(List\u003cTask\u003e tasks) throws IOException {"},{"lineNumber":41,"author":{"gitId":"geoboom"},"content":"    init();"},{"lineNumber":42,"author":{"gitId":"geoboom"},"content":"    FileWriter fw \u003d new FileWriter(file);"},{"lineNumber":43,"author":{"gitId":"geoboom"},"content":"    for (Task task : tasks) {"},{"lineNumber":44,"author":{"gitId":"geoboom"},"content":"      fw.write(task.toString() + \u0027\\n\u0027);"},{"lineNumber":45,"author":{"gitId":"geoboom"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"geoboom"},"content":"    fw.close();"},{"lineNumber":47,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":48,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":49,"author":{"gitId":"geoboom"},"content":"  public ArrayList\u003cTask\u003e load() throws FileNotFoundException, ParserException {"},{"lineNumber":50,"author":{"gitId":"geoboom"},"content":"    Scanner sc \u003d new Scanner(file);"},{"lineNumber":51,"author":{"gitId":"geoboom"},"content":"    ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitId":"geoboom"},"content":"    while (sc.hasNextLine()) {"},{"lineNumber":53,"author":{"gitId":"geoboom"},"content":"      String[] chunks \u003d sc.nextLine().split(\" \\\\| \");"},{"lineNumber":54,"author":{"gitId":"geoboom"},"content":"      Task task;"},{"lineNumber":55,"author":{"gitId":"geoboom"},"content":"      switch (chunks[TYPE_POS]) {"},{"lineNumber":56,"author":{"gitId":"geoboom"},"content":"        case \"TODO\":"},{"lineNumber":57,"author":{"gitId":"geoboom"},"content":"          task \u003d new TodoTask(chunks[DESC_POS]);"},{"lineNumber":58,"author":{"gitId":"geoboom"},"content":"          break;"},{"lineNumber":59,"author":{"gitId":"geoboom"},"content":"        case \"DEADLINE\":"},{"lineNumber":60,"author":{"gitId":"geoboom"},"content":"          task \u003d new DeadlineTask(chunks[DESC_POS], chunks[DATE_POS]);"},{"lineNumber":61,"author":{"gitId":"geoboom"},"content":"          break;"},{"lineNumber":62,"author":{"gitId":"geoboom"},"content":"        case \"EVENT\":"},{"lineNumber":63,"author":{"gitId":"geoboom"},"content":"          task \u003d new EventTask(chunks[DESC_POS], chunks[DATE_POS]);"},{"lineNumber":64,"author":{"gitId":"geoboom"},"content":"          break;"},{"lineNumber":65,"author":{"gitId":"geoboom"},"content":"        default:"},{"lineNumber":66,"author":{"gitId":"geoboom"},"content":"          throw new ParserException(\"Invalid task format\");"},{"lineNumber":67,"author":{"gitId":"geoboom"},"content":"      }"},{"lineNumber":68,"author":{"gitId":"geoboom"},"content":"      tasks.add(task);"},{"lineNumber":69,"author":{"gitId":"geoboom"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"geoboom"},"content":"    sc.close();"},{"lineNumber":71,"author":{"gitId":"geoboom"},"content":"    return tasks;"},{"lineNumber":72,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":73,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":73}},{"path":"src/main/java/duke/view/cli/CLI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.view.cli;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"public class CLI {"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"  public CLI() {"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"    System.out.println(\"Hi. Duke here.\\nHow can I help you?\");"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"  public void update(String s) {"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"    System.out.println(s);"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":"  public void close() {"},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":"    System.out.println(\"Bye. Hope to see you again.\");"},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":16}},{"path":"src/test/java/duke/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.duke;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":"class DukeTest {"},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":"  @Test"},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"  void getInstance_ShouldGiveSingleton() {"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"    Duke duke1 \u003d Duke.getInstance();"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":"    Duke duke2 \u003d Duke.getInstance();"},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":"    assertEquals(duke1, duke2);"},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"  @Test"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":"  void addTask_ShouldReturnCorrectTask() {"},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":"    List\u003cString\u003e task \u003d Duke.getInstance().addTask(\"task one\");"},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"    List\u003cString\u003e expectedTask \u003d Collections.singletonList(\"task one\");"},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":"    assertEquals(expectedTask, task);"},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":28,"author":{"gitId":"geoboom"},"content":"  @Test"},{"lineNumber":29,"author":{"gitId":"geoboom"},"content":"  void getTasks_ShouldGiveCorrectAddedTasks() {"},{"lineNumber":30,"author":{"gitId":"geoboom"},"content":"    Duke.getInstance().addTask(\"task one\");"},{"lineNumber":31,"author":{"gitId":"geoboom"},"content":"    Duke.getInstance().addTask(\"task two\");"},{"lineNumber":32,"author":{"gitId":"geoboom"},"content":"    Duke.getInstance().addTask(\"task three\");"},{"lineNumber":33,"author":{"gitId":"geoboom"},"content":"    List\u003cString\u003e tasks \u003d Duke.getInstance().getTasks();"},{"lineNumber":34,"author":{"gitId":"geoboom"},"content":"    List\u003cString\u003e expectedTasks \u003d Arrays.asList(\"task one\", \"task two\", \"task three\");"},{"lineNumber":35,"author":{"gitId":"geoboom"},"content":"    assertEquals(expectedTasks, tasks);"},{"lineNumber":36,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":37,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":38,"author":{"gitId":"geoboom"},"content":"  @Test"},{"lineNumber":39,"author":{"gitId":"geoboom"},"content":"  void getTasks_ShouldNotGiveWronglyOrderedAddedTasks() {"},{"lineNumber":40,"author":{"gitId":"geoboom"},"content":"    Duke.getInstance().addTask(\"task one\");"},{"lineNumber":41,"author":{"gitId":"geoboom"},"content":"    Duke.getInstance().addTask(\"task three\");"},{"lineNumber":42,"author":{"gitId":"geoboom"},"content":"    Duke.getInstance().addTask(\"task two\");"},{"lineNumber":43,"author":{"gitId":"geoboom"},"content":"    List\u003cString\u003e tasks \u003d Duke.getInstance().getTasks();"},{"lineNumber":44,"author":{"gitId":"geoboom"},"content":"    List\u003cString\u003e expectedTasks \u003d Arrays.asList(\"task one\", \"task two\", \"task three\");"},{"lineNumber":45,"author":{"gitId":"geoboom"},"content":"    assertNotEquals(expectedTasks, tasks);"},{"lineNumber":46,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":47,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":47}},{"path":"src/test/java/duke/input/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"package duke.input;"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"import duke.utils.Parser;"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"geoboom"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"geoboom"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":11,"author":{"gitId":"geoboom"},"content":"class ParserTest {"},{"lineNumber":12,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":13,"author":{"gitId":"geoboom"},"content":"  @Test"},{"lineNumber":14,"author":{"gitId":"geoboom"},"content":"  void isExitCommand_ShouldBeCaseInsensitive() {"},{"lineNumber":15,"author":{"gitId":"geoboom"},"content":"    assertTrue(Parser.isExitCommand(Parser.CMD_TERMINATE.toLowerCase()));"},{"lineNumber":16,"author":{"gitId":"geoboom"},"content":"    assertTrue(Parser.isExitCommand(Parser.CMD_TERMINATE.toUpperCase()));"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":18,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":19,"author":{"gitId":"geoboom"},"content":"  @Test"},{"lineNumber":20,"author":{"gitId":"geoboom"},"content":"  void runCommand_AddTask_ShouldReturnTask() {"},{"lineNumber":21,"author":{"gitId":"geoboom"},"content":"    String command \u003d \"test task\";"},{"lineNumber":22,"author":{"gitId":"geoboom"},"content":"    List\u003cString\u003e res \u003d Parser.runCommand(command);"},{"lineNumber":23,"author":{"gitId":"geoboom"},"content":"    assertEquals(Collections.singletonList(command), res);"},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":25,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":26,"author":{"gitId":"geoboom"},"content":"  @Test"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":"  void runCommand_ListTasks_ShouldReturnEmpty_WhenNoTasksAdded() {"},{"lineNumber":28,"author":{"gitId":"geoboom"},"content":"    List\u003cString\u003e res \u003d Parser.runCommand(Parser.CMD_TASK_LIST);"},{"lineNumber":29,"author":{"gitId":"geoboom"},"content":"    assertEquals(new ArrayList\u003cString\u003e(), res);"},{"lineNumber":30,"author":{"gitId":"geoboom"},"content":"  }"},{"lineNumber":31,"author":{"gitId":"geoboom"},"content":""},{"lineNumber":32,"author":{"gitId":"geoboom"},"content":"//  @Test"},{"lineNumber":33,"author":{"gitId":"geoboom"},"content":"//  void runCommand_ListTasks_ShouldReturnAddedTasks() {"},{"lineNumber":34,"author":{"gitId":"geoboom"},"content":"//    Parser.runCommand(Parser.CMD_TASK_LIST);"},{"lineNumber":35,"author":{"gitId":"geoboom"},"content":"//  }"},{"lineNumber":36,"author":{"gitId":"geoboom"},"content":"}"}],"authorContributionMap":{"geoboom":36}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"geoboom"},"content":"read book"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":"return book"},{"lineNumber":3,"author":{"gitId":"geoboom"},"content":"buy bread"},{"lineNumber":4,"author":{"gitId":"geoboom"},"content":"list"},{"lineNumber":5,"author":{"gitId":"geoboom"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"geoboom"},"content":"list"},{"lineNumber":7,"author":{"gitId":"geoboom"},"content":"bye"}],"authorContributionMap":{"geoboom":7}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"geoboom"},"content":"ENTRY_FILENAME\u003d\u0027Runner\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":5,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":6,"author":{"gitId":"-"},"content":"then"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":8,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":11,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":12,"author":{"gitId":"-"},"content":"then"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":14,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":17,"author":{"gitId":"geoboom"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/runner/Runner.java"},{"lineNumber":18,"author":{"gitId":"-"},"content":"then"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":21,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"geoboom"},"content":"java -classpath ../bin duke.runner.Runner \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":27,"author":{"gitId":"geoboom"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":29,"author":{"gitId":"-"},"content":"then"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":32,"author":{"gitId":"-"},"content":"else"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":35,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"geoboom":4,"-":31}}]
