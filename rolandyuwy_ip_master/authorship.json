[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 24,
      "-": 46
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private DialogBox(String text, Image img, Color textColour) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        dialog.setTextFill(textColour);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Circle clip \u003d new Circle(50, 50, 80);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img, Color textColour) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return new DialogBox(text, img, textColour);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img, Color textColour) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        var db \u003d new DialogBox(text, img, textColour);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 64
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import duke.GraphicalUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            duke \u003d new Duke(\"data/duke.txt\", new GraphicalUi());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().greet();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 33
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import duke.GraphicalUi;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Image dukeErrorImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duckError.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duck.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        DialogBox dukeDialog;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (duke.hasErrorInGui()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            dukeDialog \u003d DialogBox.getDukeDialog(response, dukeErrorImage, Color.RED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            dukeDialog \u003d DialogBox.getDukeDialog(response, dukeImage, Color.BLACK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                DialogBox.getUserDialog(input, userImage, Color.BLACK),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                dukeDialog"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (!duke.isInProgram()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Creates a dialog box which contains Duke\u0027s Greeting Message, then appends it to"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * the dialog container."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(((GraphicalUi) duke.getUi()).getGreetingMessage(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                dukeImage, Color.BLACK));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 72
    }
  },
  {
    "path": "src/main/java/duke/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents an add command to add a task into the current list of stored tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes an add command for a task with a description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param commandType The type of add command to be executed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description The description of the task to be added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public AddCommand(CommandType commandType, String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes an add command for a task with a description and date and time details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This is an overloaded constructor to allow for tasks with date and time details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param commandType The type of add command to be executed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description The description of the task to be added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param dateTime    Task time and/or date information."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public AddCommand(CommandType commandType, String description, String dateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Adds the task into the task list, then print the add message and updated the added task into storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskList The existing task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param ui       The UI instance which handles Duke\u0027s user interface."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param storage  The existing storage for Duke."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When an error occurs when adding the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Task newTask \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (commandType \u003d\u003d CommandType.TODO) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            newTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.DEADLINE) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            newTask \u003d new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.EVENT) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            newTask \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            assert (false) : \"Add commands should have been parsed correctly.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        taskList.addTask(newTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ui.processAddMessage(newTask, taskList.getCount());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        storage.updateTasks(taskList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns if the program should continue running at the current point in time."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * If not, the program should be exited."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return If the program should continue running."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean isInProgram() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 72
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents input commands from user to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Executes the input command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskList The existing task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param ui The UI instance which handles Duke\u0027s user interface."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param storage The existing storage for Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When an error related to Duke occurs during command execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns if the program should continue running at the current point in time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * If not, the program should be exited."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return If the program should continue running."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public abstract boolean isInProgram();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 25
    }
  },
  {
    "path": "src/main/java/duke/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents command type with input format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    LIST(\"list\"), BYE(\"bye\"), DELETE(\"delete\"), DONE(\"done\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    TODO(\"todo\"), DEADLINE(\"deadline\"), EVENT(\"event\"), FIND(\"find\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initialises a command type with the input format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param input Input format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    CommandType(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Gets input format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Input format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 29
    }
  },
  {
    "path": "src/main/java/duke/DateTimeHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class DateTimeHandler {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Parses the date and time string, and returns a LocalDateTime object if the date and time string is in accordance"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * to any of the listed formats."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * If date and time string does not follow any of the listed formats, null is returned."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param dateString String representing the date and time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return LocalDateTime object if parsing the successful."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static LocalDateTime tryParseDateTime(String dateString) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cString\u003e formatStrings \u003d Arrays.asList(\"yyyy-MM-dd HHmm\", \"yyyy-MM-d HHmm\", \"dd/MM/yyyy HHmm\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \"dd/M/yyyy HHmm\", \"d/MM/yyyy HHmm\", \"d/M/yyyy HHmm\", \"dd-MM-yyyy HHmm\", \"dd-M-yyyy HHmm\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \"d-MM-yyyy HHmm\", \"d-M-yyyy HHmm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        for (String formatString : formatStrings) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                return LocalDateTime.parse(dateString, DateTimeFormatter.ofPattern(formatString));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                //dateString will not be interpreted to contain a Date and Time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Parses the date string, and returns a LocalDate object if the date string is in accordance"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * to any of the listed formats."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * If date string does not follow any of the listed formats, null is returned."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param dateString String representing the date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return LocalDate object if parsing the successful."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static LocalDate tryParseDate(String dateString) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cString\u003e formatStrings \u003d Arrays.asList(\"yyyy-MM-dd\", \"yyyy-MM-d\", \"dd/MM/yyyy\", \"d/MM/yyyy\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \"dd/M/yyyy\", \"d/M/yyyy\", \"dd-MM-yyyy\", \"dd-M-yyyy\", \"d-MM-yyyy\", \"d-M-yyyy\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        for (String formatString : formatStrings) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                return LocalDate.parse(dateString, DateTimeFormatter.ofPattern(formatString));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                //dateString will not be interpreted to contain a Date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Generates a string for printing from either the LocalDateTime object, LocalDate object, or date time String."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param dateTimeString String representing date and/or time information."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param date LocalDate representing date and/or time information."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param dateTime LocalDateTime representing date and/or time information."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return String representing the date time information for printing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static String generateDateTimeFormat(String dateTimeString, LocalDate date, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (dateTime !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return dateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mm a\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (date !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return dateTimeString;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 72
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a task with a deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected LocalDate byDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected LocalDateTime byDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a deadline task containing the task description and deadline of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the deadline task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param by          Deadline of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.byDateTime \u003d DateTimeHandler.tryParseDateTime(by);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (byDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.byDate \u003d DateTimeHandler.tryParseDate(by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a deadline task containing the task description, if the task is done and deadline of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This is an overloaded constructor to allow for tasks in the hard drive to be loaded when Duke first runs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the deadline task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param isDone      If task is done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param by          Deadline of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Deadline(String description, boolean isDone, String by) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.byDateTime \u003d DateTimeHandler.tryParseDateTime(by);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (byDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.byDate \u003d DateTimeHandler.tryParseDate(by);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the deadline of the task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return String representing the deadline of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return \"[\" + TaskType.DEADLINE.getInitial() + \"]\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                + \" (by: \" + DateTimeHandler.generateDateTimeFormat(by, byDate, byDateTime) + \")\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 62
    }
  },
  {
    "path": "src/main/java/duke/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a delete command to delete a particular stored task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a delete command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskNumber The task number of task to be deleted."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Deletes a task, prints the delete message, then updates the tasks in the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskList The existing task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param ui       The UI instance which handles Duke\u0027s user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param storage  The existing storage for Duke."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When an error occurs while deleting the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ui.processDeleteMessage(taskList.deleteTask(taskNumber), taskList.getCount());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        storage.updateTasks(taskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns if the program should continue running at the current point in time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * If not, the program should be exited."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return If the program should continue running."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean isInProgram() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 43
    }
  },
  {
    "path": "src/main/java/duke/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a done command to mark a task as complete."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a done command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskNumber The task number of task to be marked as complete."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Marks a task as complete, prints the done message, then updates the tasks in the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskList The existing task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param ui       The UI instance which handles Duke\u0027s user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param storage  The existing storage for Duke."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When an error occurs while marking the task as complete."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ui.processDoneMessage(taskList.markTaskAsDone(taskNumber));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        storage.updateTasks(taskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns if the program should continue running at the current point in time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * If not, the program should be exited."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return If the program should continue running."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean isInProgram() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 43
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Duke, more commonly known as Duck, is a Personal Assistant Chat Bot that"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * helps a person to keep track of various tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Contains static attribute stored_task which stores task input from user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private boolean isInProgram;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes Duke containing the storage, terminal ui and task list. For Duke running with Terminal UI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param filePath Filepath of where storage files are stored."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param ui       Terminal User Interface in Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Duke(String filePath, TerminalUi ui) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.isInProgram \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ui.processError(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes Duke containing the storage, graphical ui and task list. For Duke running with GUI."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param filePath Filepath of where storage files are stored."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param ui       Graphical User Interface in Duke."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Duke(String filePath, GraphicalUi ui) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.isInProgram \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ui.setErrorGreeting(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Runs Duke chat bot."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        TerminalUi terminalUi \u003d ((TerminalUi) ui);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        terminalUi.greet();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        while (isInProgram) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                String input \u003d terminalUi.getNextInput();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                isInProgram \u003d command.isInProgram();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                ui.processError(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Generates response from user input."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Response from the user\u0027s input."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            assert (isInProgram) : \"Duke should still be running.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            isInProgram \u003d command.isInProgram();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ui.processError(e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return ((GraphicalUi) ui).getResponseMessage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Checks if GUI currently contains an error message."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return If GUI currently contains an error message."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean hasErrorInGui() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return ((GraphicalUi) ui).hasErrorMessage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean isInProgram() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return isInProgram;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Creates a duke object named duck and runs it."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Duke duck \u003d new Duke(\"data/duke.txt\", new TerminalUi());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        duck.run();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 109,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents exceptions specific to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 11
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents an event task with a time and date period."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected LocalDate atDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected LocalDateTime atDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes an event task containing the task description and time and date of the event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the event task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param at          Event time and/or date information."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.atDateTime \u003d DateTimeHandler.tryParseDateTime(at);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (atDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.atDate \u003d DateTimeHandler.tryParseDate(at);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes an event task containing the task description, if the task is done and time and date of the event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This is an overloaded constructor to allow for tasks in the hard drive to be loaded when Duke first runs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the event task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param isDone      If task is done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param at          Event time and/or date information."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Event(String description, boolean isDone, String at) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.atDateTime \u003d DateTimeHandler.tryParseDateTime(at);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (atDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.atDate \u003d DateTimeHandler.tryParseDate(at);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the event time and/or date of the event."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return String representing the event time and/or date of the event."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return \"[\" + TaskType.EVENT.getInitial() + \"]\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                + \" (at: \" + DateTimeHandler.generateDateTimeFormat(at, atDate, atDateTime) + \")\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 63
    }
  },
  {
    "path": "src/main/java/duke/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents an exit command to exit the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes an exit command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Prints the exit message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskList The existing task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param ui       The UI instance which handles Duke\u0027s user interface."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param storage  The existing storage for Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ui.processClose();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns if the program should continue running at the current point in time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * If not, the program should be exited."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return If the program should continue running."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean isInProgram() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 36
    }
  },
  {
    "path": "src/main/java/duke/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a find command to find tasks which match a particular search description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private String[] searchKeywords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a find command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param searchKeywords The search keywords stored as a String array."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public FindCommand(String[] searchKeywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.searchKeywords \u003d searchKeywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Generates a task list with descriptions containing the search description and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * prints each task in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskList The existing task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param ui       The UI instance which handles Duke\u0027s user interface."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param storage  The existing storage for Duke."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ui.processResultTaskList(taskList.generateResultTaskList(searchKeywords));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns if the program should continue running at the current point in time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * If not, the program should be exited."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return If the program should continue running."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean isInProgram() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 42
    }
  },
  {
    "path": "src/main/java/duke/GraphicalUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class GraphicalUi extends Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static String greetingMessage \u003d GREETING_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private String responseMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private boolean hasErrorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a Graphical Ui for Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public GraphicalUi() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.responseMessage \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        hasErrorMessage \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getGreetingMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return LINE + greetingMessage + LINE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void setErrorGreeting(String errorMessage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        greetingMessage +\u003d \"\\n Note that a new file was loaded due to this error: \" + errorMessage + \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void processError(String errorMessage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        responseMessage \u003d errorMessage + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        hasErrorMessage \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getResponseMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return responseMessage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean hasErrorMessage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return hasErrorMessage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Adds display message for task count to response message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param numOfTasks Number of tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void displayTaskCount(int numOfTasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (numOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            responseMessage +\u003d \"My duck senses tell me you have 1 task in the list.\" + \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            responseMessage +\u003d \"My duck senses tell me you have \" + numOfTasks + \" tasks in the list.\" + \"\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void processAddMessage(Task task, int count) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        responseMessage \u003d \"Quack! I have added: \" + task + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        displayTaskCount(count);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        hasErrorMessage \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void processDeleteMessage(Task taskToDelete, int count) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        responseMessage \u003d \"Quack! I have deleted this task: \\n\" + taskToDelete + \"\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        displayTaskCount(count);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        hasErrorMessage \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void processDoneMessage(Task task) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        responseMessage \u003d \"Quack! I have marked this task as done: \\n\" + task + \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        hasErrorMessage \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void processClose() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void processResultTaskList(List\u003cTask\u003e resultTaskList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (resultTaskList.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            responseMessage \u003d \"No tasks matched...\" + \"\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            responseMessage \u003d \"Quack! Here are the tasks in your list that match:\" + \"\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            for (Task task : resultTaskList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                responseMessage +\u003d count + \". \" + task + \"\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        hasErrorMessage \u003d false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void listStoredTasks(List\u003cTask\u003e storedTasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (storedTasks.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            responseMessage \u003d \"No tasks stored...\" + \"\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            responseMessage \u003d \"Quack! Here are the tasks in your list:\" + \"\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            for (Task task : storedTasks) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                responseMessage +\u003d count + \". \" + task + \"\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        hasErrorMessage \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 107
    }
  },
  {
    "path": "src/main/java/duke/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a list command to list the current stored tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a list command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Lists the current stored tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskList The existing task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param ui       The UI instance which handles Duke\u0027s user interface."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param storage  The existing storage for Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ui.listStoredTasks(taskList.getStoredTasks());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns if the program should continue running at the current point in time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * If not, the program should be exited."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return If the program should continue running."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean isInProgram() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 36
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Parses user input as commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Gets appended strings from string array."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This facilitates parsing of input with many words."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param inputArr  Input string array."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param indexFrom Index of array to start appending."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param indexTo   Index of array to end appending."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Appended string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws IndexOutOfBoundsException When command input is wrongly formatted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static String generateStringFromArray(String[] inputArr, int indexFrom, int indexTo)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            for (int i \u003d indexFrom; i \u003c indexTo; i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                output +\u003d inputArr[i] + \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return output.substring(0, output.length() - 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Parses user input as commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When command input is wrongly formatted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String[] inputInformation \u003d input.split(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (inputInformation[0].equals(CommandType.BYE.getInput())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.LIST.getInput())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.DONE.getInput())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return generateDoneCommand(inputInformation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.DELETE.getInput())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return generateDeleteCommand(inputInformation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.TODO.getInput())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return generateToDoCommand(inputInformation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.DEADLINE.getInput())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return generateDeadlineCommand(inputInformation);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.EVENT.getInput())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return generateEventCommand(inputInformation);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.FIND.getInput())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return generateFindCommand(inputInformation);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"My duck instincts tell me your input makes no sense...\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Generates a Done Command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param inputInformation String array containing input information."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Done Command to be executed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When command input is wrongly formatted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static DoneCommand generateDoneCommand(String[] inputInformation) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(inputInformation[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"You need to include your task number to mark done...\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Generates a Delete Command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param inputInformation String array containing input information."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Delete Command to be executed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When command input is wrongly formatted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static DeleteCommand generateDeleteCommand(String[] inputInformation) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(inputInformation[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"You need to include your task number to delete...\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Generates an Add Command for ToDo task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param inputInformation String array containing input information."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Add Command to be executed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When command input is wrongly formatted."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static AddCommand generateToDoCommand(String[] inputInformation) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            String description \u003d generateStringFromArray(inputInformation, 1, inputInformation.length);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return new AddCommand(CommandType.TODO, description);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"Your todo description can\u0027t be empty...\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Generates an Add Command for Deadline task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param inputInformation String array containing input information."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Add Command to be executed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When command input is wrongly formatted."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static AddCommand generateDeadlineCommand(String[] inputInformation) throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            int indexOfBy \u003d Arrays.asList(inputInformation).indexOf(\"/by\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (indexOfBy \u003d\u003d -1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                throw new DukeException(\"Did you include /by?\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else if (indexOfBy \u003d\u003d 1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                throw new DukeException(\"Did you include a description?\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                String description \u003d generateStringFromArray(inputInformation, 1, indexOfBy);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                String by \u003d generateStringFromArray(inputInformation, indexOfBy + 1, inputInformation.length);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                return new AddCommand(CommandType.DEADLINE, description, by);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"Your deadline description or deadline can\u0027t be empty...\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Generates an Add Command for Event task."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param inputInformation String array containing input information."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Add Command to be executed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When command input is wrongly formatted."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static AddCommand generateEventCommand(String[] inputInformation) throws DukeException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            int indexOfAt \u003d Arrays.asList(inputInformation).indexOf(\"/at\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (indexOfAt \u003d\u003d -1) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                throw new DukeException(\"Did you include /at?\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else if (indexOfAt \u003d\u003d 1) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                throw new DukeException(\"Did you include a description?\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                String description \u003d generateStringFromArray(inputInformation, 1, indexOfAt);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                String at \u003d generateStringFromArray(inputInformation, indexOfAt + 1, inputInformation.length);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                return new AddCommand(CommandType.EVENT, description, at);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"Your event description or event period can\u0027t be empty...\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Generates a Find Command."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param inputInformation String array containing input information."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Find Command to be executed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When command input is wrongly formatted."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static FindCommand generateFindCommand(String[] inputInformation) throws DukeException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            String[] searchKeywords \u003d Arrays.copyOfRange(inputInformation, 1, inputInformation.length);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return new FindCommand(searchKeywords);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"You need to include your keyword...\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 174
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static final String SPLITTER \u003d \"|\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Loads task information stored in the file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return List of tasks after loading."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When file formatting is wrong."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    processLine(sc.nextLine(), taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                sc.close();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Processes the line by splitting relevant information into a String array."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param lineToProcess Line to be processed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskList Task list to store tasks after the line is processed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When file formatting is wrong."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private void processLine(String lineToProcess, List\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String[] taskInformation \u003d lineToProcess.split(\"\\\\\" + SPLITTER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (taskInformation[0].equals(TaskType.TODO.getInitial())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            processToDoTask(taskInformation, taskList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (taskInformation[0].equals(TaskType.DEADLINE.getInitial())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            processDeadlineTask(taskInformation, taskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (taskInformation[0].equals(TaskType.EVENT.getInitial())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            processEventTask(taskInformation, taskList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"File formatting is wrong...\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Processes the task information by accessing the array elements, then adding the task into the task list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskInformation Contains information of the task to be added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskList Task list to store tasks after processing the task information."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When To Do task information formatting is wrong."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private void processToDoTask(String[] taskInformation, List\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            taskList.add(new ToDo(taskInformation[2], isDone(taskInformation[1])));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"File formatting is wrong...\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Processes the task information by accessing the array elements, then adding the task into the task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskInformation Contains information of the task to be added."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskList Task list to store tasks after processing the task information."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When Deadline task information formatting is wrong."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private void processDeadlineTask(String[] taskInformation, List\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            taskList.add(new Deadline(taskInformation[2], isDone(taskInformation[1]), taskInformation[3]));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"File formatting is wrong...\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Processes the task information by accessing the array elements, then adding the task into the task list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskInformation Contains information of the task to be added."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskList Task list to store tasks after processing the task information."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When Event task information formatting is wrong."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private void processEventTask(String[] taskInformation, List\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            taskList.add(new Event(taskInformation[2], isDone(taskInformation[1]), taskInformation[3]));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"File formatting is wrong...\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getDoneString(Task task) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return task.isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean isDone(String storedTaskStatus) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return storedTaskStatus.equals(\"1\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Updates the tasks stored in file from the task list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskList Task list to be updated in file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When there is an input or output error."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void updateTasks(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            for (Task task : taskList.getStoredTasks()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    fileWriter.write(String.join(SPLITTER, TaskType.TODO.getInitial(), getDoneString(task),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                            task.getDescription()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    fileWriter.write(String.join(SPLITTER, TaskType.DEADLINE.getInitial(), getDoneString(task),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                            task.getDescription(), ((Deadline) task).getBy()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    fileWriter.write(String.join(SPLITTER, TaskType.EVENT.getInitial(), getDoneString(task),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                            task.getDescription(), ((Event) task).getAt()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    assert (false) : \"Tasks in taskList should have been in the correct format!\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                fileWriter.write(System.lineSeparator());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"I can\u0027t seem to handle the input/output properly...\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 147
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a task with a description and if task is done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a task containing the task description and if the task is done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This is an overloaded constructor to allow for tasks in the hard drive to be loaded when Duke first runs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Retrieves completion status icon of task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Status icon of task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return (isDone ? \"✓\" : \"X\"); //return tick or X symbols"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Gets the task description."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Task description."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Marks task as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected void markAsDone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Checks if task is done."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return If Task is Done."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected boolean isDone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Checks if task description matches any of the search keywords."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This check is case insensitive."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param searchKeywords Variable number of search keywords."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return If task description matches any of the search keywords."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean matchesKeywords(String... searchKeywords) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return Arrays"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                .stream(searchKeywords)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                .anyMatch(keyword -\u003e description.toLowerCase().contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 83
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a task list with a stored tasks in a list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private List\u003cTask\u003e storedTasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a task list containing the list of stored tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param storedTasks List of stored tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public TaskList(List\u003cTask\u003e storedTasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.storedTasks \u003d storedTasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Gets the list of stored tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return List of stored tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public List\u003cTask\u003e getStoredTasks() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return storedTasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Gets the number of stored tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Number of stored tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return storedTasks.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Adds task into list of stored tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param newTask Task to be added."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        storedTasks.add(newTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assert (storedTasks.contains(newTask)) : \"The task should have been added!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Marks task as done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskNumber Task number of task to be marked as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When task number is wrong or if the task is already done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Task markTaskAsDone(int taskNumber) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (taskNumber \u003c\u003d 0 || taskNumber \u003e storedTasks.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"Wrong task number!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Task task \u003d storedTasks.get(taskNumber - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (task.isDone()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"This task is already done: \" + task.getDescription());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assert (task.isDone) : \"The task should have been already marked done!\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Deletes input task from stored_task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskNumber Task number of task to be deleted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When task number is wrong."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Task deleteTask(int taskNumber) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (taskNumber \u003c\u003d 0 || taskNumber \u003e storedTasks.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"Wrong task number!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Task taskToDelete \u003d storedTasks.get(taskNumber - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        storedTasks.remove(taskToDelete);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assert (!storedTasks.contains(taskToDelete)) : \"The task should have been deleted!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return taskToDelete;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Generates result task list of tasks where the task description matches any of the search keywords."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This includes tasks with descriptions matching the search keywords only partially."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param searchKeywords Variable number of search keywords."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Result task list of tasks where the task description matches any of the search keywords."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public List\u003cTask\u003e generateResultTaskList(String... searchKeywords) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cTask\u003e resultTaskList \u003d storedTasks"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                .filter(task -\u003e task.matchesKeywords(searchKeywords))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return resultTaskList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 99
    }
  },
  {
    "path": "src/main/java/duke/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents task type with initial."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    TODO(\"T\"), DEADLINE(\"D\"), EVENT(\"E\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final String initial;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initialises a task type with the initial."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param initial Initial."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    TaskType(String initial) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.initial \u003d initial;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Gets initial."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Initial."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getInitial() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return initial;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 28
    }
  },
  {
    "path": "src/main/java/duke/TerminalUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class TerminalUi extends Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public TerminalUi() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        printFormattedMessage(GREETING_MESSAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getNextInput() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Prints message in a given format from a variable number of strings."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param response Strings to be printed in a given format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void printFormattedMessage(String... response) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        for (String string : response) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            System.out.println(string);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void processClose() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        printFormattedMessage(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void processError(String errorMessage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        printFormattedMessage(errorMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void listStoredTasks(List\u003cTask\u003e storedTasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (storedTasks.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            printFormattedMessage(\"No tasks stored...\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            String listedTasksString \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            for (Task task : storedTasks) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                listedTasksString +\u003d count + \". \" + task + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            printFormattedMessage(\"Quack! Here are the tasks in your list:\", listedTasksString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void processDoneMessage(Task task) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        printFormattedMessage(\"Quack! I have marked this task as done:\", task.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void processAddMessage(Task task, int count) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        printFormattedMessage(\"Quack! I have added: \", task.toString(), displayTaskCount(count));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void processDeleteMessage(Task taskToDelete, int count) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        printFormattedMessage(\"Quack! I have deleted this task: \","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                taskToDelete.toString(), displayTaskCount(count));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns display message for task count."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param numOfTasks Number of tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Display message."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String displayTaskCount(int numOfTasks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (numOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return \"My duck senses tell me you have 1 task in the list.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return \"My duck senses tell me you have \" + numOfTasks + \" tasks in the list.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void processResultTaskList(List\u003cTask\u003e resultTaskList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (resultTaskList.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            printFormattedMessage(\"No tasks matched...\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            String resultTasksString \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            for (Task task : resultTaskList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                resultTasksString +\u003d count + \". \" + task + \"\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            printFormattedMessage(\"Quack! Here are the tasks in your list that match:\", resultTasksString);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 104
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a task with a description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a task containing the task description."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a task containing the task description and if the task is done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This is an overloaded constructor to allow for tasks in the hard drive to be loaded when Duke first runs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return \"[\" + TaskType.TODO.getInitial() + \"]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 30
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public abstract class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected static final String LINE \u003d \"_________________________________________________\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected static final String GREETING_MESSAGE \u003d \"\\n Quack! I am Duck\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            + \"\\n How can I help you today?\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected static final String EXIT_MESSAGE \u003d \"\\n Waddling off now. See you soon! \\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public abstract void processError(String errorMessage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public abstract void processAddMessage(Task task, int count);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public abstract void processDeleteMessage(Task taskToDelete, int count);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public abstract void processDoneMessage(Task task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public abstract void processClose();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public abstract void processResultTaskList(List\u003cTask\u003e resultTaskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public abstract void listStoredTasks(List\u003cTask\u003e storedTasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 24
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "content": ""
      },
      {
        "lineNumber": 3,
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "content": ""
      },
      {
        "lineNumber": 8,
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 9,
        "content": "         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 10,
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "content": "        \u003cHBox fx:id\u003d\"textBox\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" styleClass\u003d\"textBox\""
      },
      {
        "lineNumber": 13,
        "content": "              stylesheets\u003d\"@./styles.css\"\u003e"
      },
      {
        "lineNumber": 14,
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "content": "                \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 16,
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 22,
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"12.0\" right\u003d\"12.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 25,
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "null": 25,
      "rolandyuwy": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import duke.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void testGetBy() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(\"2021\", new Deadline(\"sleep\", \"2021\").getBy());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 12
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void deleteTask_zeroTaskNumber_dukeExceptionThrown() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cTask\u003e storedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        TaskList taskList \u003d new TaskList(storedTasks);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            taskList.markTaskAsDone(0);;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 20
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import duke.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(\"X\", new ToDo(\"sleep\").getStatusIcon());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void testGetDescription() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(\"sleep\", new ToDo(\"sleep\").getDescription());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "blah"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "event project /at Mon 2-4pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "deadline do hw /by no idea"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "delete two"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "deadline go for book shopping /by 28/8/2020 1800"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "find book"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 20
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "dir /s /B ..\\src\\main\\java\\duke\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "java -classpath ..\\bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "pause"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 5,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\AddCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\Command.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\CommandType.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\Deadline.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\DeleteCommand.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\DoneCommand.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\Duke.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\DukeException.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\Event.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\ExitCommand.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\FindCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\GraphicalUi.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\ListCommand.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\Parser.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\Storage.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\Task.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\TaskList.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\TaskType.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\TerminalUi.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\ToDo.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\duke\\Ui.java"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 21
    }
  }
]
