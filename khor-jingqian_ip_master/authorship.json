[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "# logic.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/logic.Duke.java` file, right-click it, and choose `Run logic.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "khor-jingqian": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.+\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    mainClassName \u003d \"logic.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "clean{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    delete \u0027data\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "khor-jingqian": 21
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Abstract class of all the commands that is created"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * after parsing the user\u0027s input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public final String input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Initialises a command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param input The description of the command created."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Command(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assert !input.isBlank() : \"Checks should have ensured a command is never blank.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 26
    }
  },
  {
    "path": "src/main/java/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Adds the deadline entry that the user input to the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Arraylist of logic.Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DeadlineCommand(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds deadline entry to the Arraylist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of tasks given."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui Handles the output to print."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Writes the save file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidDateTimeFormatException If input does not follow format specified."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidInputException If the input for the delete is incorrect."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue writing the save file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidDateTimeFormatException,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            InvalidInputException, InvalidSaveFileException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final int INPUT_INDEX \u003d 9;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final int DEADLINE_INDEX \u003d 3;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Check if the description is empty."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (super.input.length() \u003c\u003d INPUT_INDEX) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String[] splitWord \u003d super.input.split(\"/\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Seperate task description from deadline given."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String desc \u003d splitWord[0].substring(INPUT_INDEX, splitWord[0].length() - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String deadline \u003d splitWord[1].substring(DEADLINE_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Deadline task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        tasks.checkDuplicates(desc);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            task \u003d new Deadline(desc, LocalDateTime.parse(deadline, dateTimeFormat));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidDateTimeFormatException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    \"Deadline input must follow a certain format: yyyy-mm-dd HH:mm \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    + \"e.g. 2020-08-23 16:45\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return ui.printOutput(\"Got it. I\u0027ve added this task:\\n\" + task.toString()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                + \"\\n\\nNow you have \" + tasks.getTasks().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 69
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the command from the user when they want to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * delete a command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DeleteCommand(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Executes the delete on the task that the user specified."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of tasks given."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui Handles the output to print."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Writes the save file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidInputException If the input for the delete is incorrect."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue writing the save file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throws InvalidInputException, InvalidSaveFileException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final int INPUT_INDEX \u003d 7;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Check if description is empty"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (super.input.length() \u003c\u003d INPUT_INDEX) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    \"\\t☹ OOPS!!! The description of a delete operation cannot be empty / invalid index.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int index \u003d Integer.parseInt(super.input.substring(INPUT_INDEX));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (index \u003e\u003d tasks.getTasks().size() || index \u003c 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    \"\\t☹ OOPS!!! The description of a delete operation cannot be empty / invalid index.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Task task \u003d tasks.getTasks().get(index - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        tasks.removeTask(index - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return ui.printOutput(\"\\tNoted. I\u0027ve removed this task:\\n\" + \"\\t\" + task.toString()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                + \"\\n\\tNow you have \" + tasks.getTasks().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 50
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the command from the user to complete an"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * existing task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DoneCommand(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Completes the task that the user specified."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui logic.Ui Object that handles printing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Handles the rewriting of save file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidInputException If command is poorly written."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue writing the save file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throws InvalidInputException, InvalidSaveFileException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final int INPUT_INDEX \u003d 5;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Check if task was specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (super.input.length() \u003c\u003d INPUT_INDEX) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"\\t☹ OOPS!!! Please specify which task you want to complete!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int completed \u003d Integer.parseInt(super.input.substring(INPUT_INDEX));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Task current \u003d tasks.getTasks().get(completed - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            current.completeTask();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return ui.printOutput(\"\\tNice! I\u0027ve marked this task as done:\\n\" + \"\\t\\t\" + current.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"\\tIndex out of bounds! Please try again.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 48
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Adds the event entry that the user input to the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Arraylist of logic.Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public EventCommand(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Add event entry to the Arraylist."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of tasks given."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui Handles the output to print."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Writes the save file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidDateTimeFormatException If input does not follow format specified."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidInputException If the input for the delete is incorrect."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue writing the save file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidDateTimeFormatException,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            InvalidInputException, InvalidSaveFileException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final int INPUT_INDEX \u003d 6;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final int EVENT_INDEX \u003d 3;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Check if event is specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (super.input.length() \u003c\u003d INPUT_INDEX) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String[] splitWord \u003d super.input.split(\"/\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String desc \u003d splitWord[0].substring(INPUT_INDEX, splitWord[0].length() - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String timing \u003d splitWord[1].substring(EVENT_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Event task;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        tasks.checkDuplicates(desc);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            task \u003d new Event(desc, LocalDateTime.parse(timing, dateTimeFormat));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidDateTimeFormatException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    \"Event timing input must follow a certain format: yyyy-mm-dd HH:mm \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    + \"e.g. 2020-08-23 16:45\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return ui.printOutput(\"Got it. I\u0027ve added this task:\\n\" + task.toString()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                + \"\\nNow you have \" + tasks.getTasks().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 66
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the command to close logic.Duke"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ExitCommand(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Executes the command to save the files for closing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of tasks that logic.Duke is handling."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui Handles what the user reads."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Writes the save file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue writing the save file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidSaveFileException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return ui.printOutput(\"\\tBye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 29
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the command to find a certain task that"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * the user has input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public FindCommand(String fullCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final int INPUT_INDEX \u003d 5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Check if description of task to find is non-empty."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (super.input.length() \u003c\u003d INPUT_INDEX) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"\\tDescription of item to find cannot be empty! Please try again!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cTask\u003e foundTasks \u003d tasks.findTasks(super.input.substring(INPUT_INDEX));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (foundTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return ui.printOutput(\"\\tThere is no item that matches your description!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            String result \u003d ui.printOutput(\"\\tHere are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (int x \u003d 0; x \u003c foundTasks.size(); x++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                result +\u003d ui.printOutput(\"\\n\\t\" + (x + 1) + \".\" + foundTasks.get(x).toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 41
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * List all tasks that logic.Duke currently has."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ListCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * List out all tasks that logic.Duke is currently handling."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of all tasks logic.Duke has."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui Handles the output that the user sees."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Writing of the save file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (tasks.getTasks().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"List is empty! Start adding some tasks\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            String result \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Task current \u003d tasks.getTasks().get(i - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                result +\u003d ui.printOutput(\"\\n\" + i + \".\" + current.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 36
    }
  },
  {
    "path": "src/main/java/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Adds the todos entry into logic.Duke\u0027s list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ToDoCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Executes the command to add the todos entry."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param tasks List of tasks given."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param ui Handles the output to print."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param storage Writes the save file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidInputException If input of todos is wrong."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If writing the save file goes wrong."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throws InvalidInputException, InvalidSaveFileException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final int INPUT_INDEX \u003d 5;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Check if input is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (super.input.length() \u003c\u003d INPUT_INDEX) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Check if there is a description overlap"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String taskDescription \u003d super.input.substring(INPUT_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        tasks.checkDuplicates(taskDescription);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ToDo task \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return ui.printOutput(\"Got it. I\u0027ve added this task:\\n\" + task.toString()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                + \"\\nNow you have \" + tasks.getTasks().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 48
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Parent exception class of all exceptions that"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * logic.Duke is expected to experience"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 11
    }
  },
  {
    "path": "src/main/java/exception/InvalidDateTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Triggers when a user input has a different time format"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * as what was specified in Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class InvalidDateTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Initialises the exception that warns users that"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * their input format for the date and time"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * is wrong."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param message The warning message to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public InvalidDateTimeFormatException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 19
    }
  },
  {
    "path": "src/main/java/exception/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Triggers when a user inputs an invalid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Initialises the exception object that warns"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * users of the incorrect input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param message Informs the users of the error."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 17
    }
  },
  {
    "path": "src/main/java/exception/InvalidSaveFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Triggers when there is either something wrong with"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * the previous save file or there is an issue writing"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * or saving the new save file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class InvalidSaveFileException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Initialises the exception object with a warning"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * to the user that the saving function has an issue."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param message Contains a more detailed error description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public InvalidSaveFileException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 19
    }
  },
  {
    "path": "src/main/java/logic/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        db.getLabel().setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Color.rgb(101, 247, 245),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new CornerRadii(5.0),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new Insets(-5.0)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        )));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Label getLabel() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.dialog;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        db.getLabel().setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Color.rgb(152, 251, 152),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new CornerRadii(5.0),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new Insets(-5.0)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        )));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 79
    }
  },
  {
    "path": "src/main/java/logic/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents a logic.Duke object. Handles all the logic running"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * of logic.Duke"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private String fileLocation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Constructor to create a Duke object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param fileLocation the location to store save files."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Duke(String fileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.fileLocation \u003d fileLocation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.storage \u003d new Storage(fileLocation);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            this.taskList \u003d new TaskList(this.storage.readFile());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (InvalidSaveFileException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.taskList.createDuplicateChecker();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Command fullCommand \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            String dukeResponse \u003d fullCommand.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assert !dukeResponse.isBlank() : \"Response from Duke is never empty!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return dukeResponse;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    protected String showGreeting() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return ui.showGreeting();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "khor-jingqian": 53
    }
  },
  {
    "path": "src/main/java/logic/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 12
    }
  },
  {
    "path": "src/main/java/logic/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().showGreeting();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 33
    }
  },
  {
    "path": "src/main/java/logic/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Prints the greeting the first time the user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * opens up the GUI."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void showGreeting() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String greeting \u003d duke.showGreeting();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                DialogBox.getDukeDialog(greeting, dukeImage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            userInput.setDisable(true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            closeDuke();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private void closeDuke() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        new Thread(() -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Thread.sleep(1000);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }).start();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 82
    }
  },
  {
    "path": "src/main/java/logic/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.ToDoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Takes in the input from the user and tries to make sense of it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Throws error if input is incorrect"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The method that parses the input from the user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param fullCommand User input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Command object that will execute the corresponding command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidInputException If input is gibberish."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static Command parse(String fullCommand) throws InvalidInputException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (fullCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new ExitCommand(fullCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new ListCommand(fullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new DoneCommand(fullCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new ToDoCommand(fullCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new DeadlineCommand(fullCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new EventCommand(fullCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (fullCommand.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 47
    }
  },
  {
    "path": "src/main/java/logic/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Handles saving of the list and reading it upon startup."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private String fileLocation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Storage(String fileLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.fileLocation \u003d fileLocation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Called upon startup. Reads save file if there is one, else creates"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * a blank save file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return A List populated by the tasks.Task from previous save file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue with creating the save file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public List\u003cTask\u003e readFile() throws InvalidSaveFileException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cTask\u003e toDoList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        File dir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!dir.exists()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            File file \u003d new File(fileLocation);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                while (s.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String entry \u003d s.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    if (entry.startsWith(\"[T]\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        toDoList.add(createToDo(entry));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    } else if (entry.startsWith(\"[D]\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        toDoList.add(createDeadline(entry));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    } else if (entry.startsWith(\"[E]\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        toDoList.add(createEvent(entry));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        throw new InvalidSaveFileException(\"Hmmmm.....there seems to be an entry\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                                + \"that does not follow the convention!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidSaveFileException(\"Hmmmm....there is something wrong with the previous save file! We \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    + \"will have to write a new one!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return toDoList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Called every time the list is updated or logic.Duke is closed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param toDoList The current tasks in logic.Duke."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidSaveFileException If there is an issue creating or writing the save file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void saveFile(List\u003cTask\u003e toDoList) throws InvalidSaveFileException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        File dir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!dir.exists()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            FileWriter fw \u003d new FileWriter(fileLocation);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (int i \u003d 0; i \u003c toDoList.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Task interim \u003d toDoList.get(i);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                String desc \u003d interim.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                fw.write(desc + \"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidSaveFileException("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    \"☹ OOPS!!! logic.Duke is experiencing IO errors when writing to save file!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private ToDo createToDo(String entry) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final int STARTING_INDEX \u003d 7;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ToDo todo \u003d new ToDo(entry.substring(STARTING_INDEX));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (entry.contains(\"✓\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            todo.completeTask();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return todo;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Deadline createDeadline(String entry) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //format of example saved entry: [D][✓] return book (by: 13:56 Aug 23 2020)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final int DATETIME_INDEX \u003d entry.indexOf(\"(\") + 5;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final int DESC_INDEX \u003d 7;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"HH:mm MMM d yyyy\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String datetime \u003d entry.substring(DATETIME_INDEX, entry.length() - 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        LocalDateTime ldt \u003d LocalDateTime.parse(datetime, dateTimeFormat);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Deadline deadline \u003d new Deadline(entry.substring(DESC_INDEX, DATETIME_INDEX - 1),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ldt);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (entry.contains(\"✓\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            deadline.completeTask();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Event createEvent(String entry) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //format of example saved entry: [E][✓] return book (at: 13:56 Aug 23 2020)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final int DATETIME_INDEX \u003d entry.indexOf(\"(\") + 5;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final int DESC_INDEX \u003d 7;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"HH:mm MMM d yyyy\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String datetime \u003d entry.substring(DATETIME_INDEX, entry.length() - 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        LocalDateTime ldt \u003d LocalDateTime.parse(datetime, dateTimeFormat);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Event event \u003d new Event(entry.substring(DESC_INDEX, DATETIME_INDEX - 1),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ldt);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (entry.contains(\"✓\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            event.completeTask();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 133
    }
  },
  {
    "path": "src/main/java/logic/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Handles what the user will be seeing when running logic.Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Ui() {}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Show user the greeting message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String showGreeting() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        result +\u003d \"\\t________________________________________________\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        result +\u003d \"\\tHello! I\u0027m Duke\\n\\tWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        result +\u003d \"\\t________________________________________________\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Show error message thrown."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param errorMsg Error message of thrown error."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void showError(String errorMsg) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        System.out.println(errorMsg);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Print the message according to the input given."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param input Output for the user to read."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String printOutput(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 38
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the deadlines that the user wants to remember."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Constructor for creating a Deadlines object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param taskDesc Description of the Deadlines."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param deadline Deadline of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Deadline(String taskDesc, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(taskDesc);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                + deadline.format(DateTimeFormatter.ofPattern(\"HH:mm MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 29
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the events that the user inputs."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    protected LocalDateTime timing;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Constructor for creating an Events object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param taskDesc Description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param timing Timing to finish the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Event(String taskDesc, LocalDateTime timing) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(taskDesc);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                + timing.format(DateTimeFormatter.ofPattern(\"HH:mm MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 29
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Parent class of all tasks that logic.Duke can handle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    protected String taskDesc;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    protected boolean taskStatus \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Initializes a Task object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param taskDesc The description of a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Task(String taskDesc) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assert !taskDesc.isBlank() : \"Checks should have ensured task description is never blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.taskDesc \u003d taskDesc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * set the status of this task to be completed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void completeTask() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        taskStatus \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Depending on taskStatus, return a tick if complete, else a cross"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return a tick or cross, depending on taskStatus"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return (taskStatus ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return \"[\" + this.getIcon() + \"] \" + this.taskDesc;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 40
    }
  },
  {
    "path": "src/main/java/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the List of all the tasks that logic.Duke"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * is handling this iteration."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private HashSet\u003cString\u003e tasksDescription \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns this Arraylist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return the Arraylist that the class has."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Removes tasks.Task at the given index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param index Represents the index of the item to be removed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.taskList.remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns a List that contains the task that matches"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * the keyword that the user is finding."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param keyword Keyword that the user is finding."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return List of tasks that matches the keyword given."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public List\u003cTask\u003e findTasks(String keyword) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cTask\u003e filteredTasks \u003d taskList.stream().filter(task -\u003e task.taskDesc.contains(keyword)).collect("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Collectors.toList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds new task to Tasklist."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param task New Task object created for the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.tasksDescription.add(task.taskDesc);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Ensures no duplicate tasks in Duke."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param input Description of task that user wants to add."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws InvalidInputException If the input of user is wrong."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void checkDuplicates(String input) throws InvalidInputException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (tasksDescription.contains(input)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new InvalidInputException(\"It seems that there is already a task matching this description!\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    + \" To be safe, please be more specific in your description!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Populates the HashSet that will be used to check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * for duplicates in task description"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void createDuplicateChecker() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        taskList.forEach(task -\u003e tasksDescription.add(task.taskDesc));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 87
    }
  },
  {
    "path": "src/main/java/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents the todos of the user that he input"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * into logic.Duke"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ToDo(String taskDesc) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(taskDesc);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 16
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "         style\u003d\"-fx-border-color:black; -fx-border-width: 1; -fx-border-style: solid\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cInsets right\u003d\"10.0\" left \u003d \"10.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 21
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"logic.MainWindow\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            style\u003d\"-fx-background-color: white\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 21
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static DateTimeFormatter dateTimeFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    static void init() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        localDateTime \u003d LocalDateTime.parse(\"2020-08-23 18:00\", dateTimeFormat);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Deadline events \u003d new Deadline(\"kiwis\", localDateTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \"[D][\" + \"\\u2718\" + \"] kiwis (by: 18:00 Aug 23 2020)\", events.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void completionTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Deadline events \u003d new Deadline(\"kiwis\", localDateTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        events.completeTask();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(\"[D][\" + \"\\u2713\" + \"] kiwis (by: 18:00 Aug 23 2020)\", events.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 35
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    static void init() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        localDateTime \u003d LocalDateTime.parse(\"2020-08-23 18:00\", dateTimeFormatter);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Event event \u003d new Event(\"kiwis\", localDateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \"[E][\" + \"\\u2718\" + \"] kiwis (at: 18:00 Aug 23 2020)\", event.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void completionTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Event event \u003d new Event(\"kiwis\", localDateTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        event.completeTask();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(\"[E][\" + \"\\u2713\" + \"] kiwis (at: 18:00 Aug 23 2020)\", event.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 35
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import logic.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void testParsing() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertTrue(Parser.parse(\"event kiwis /at 2020-08-30 18:00\") instanceof Command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void testError() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Parser.parse(\"kiwis /at 2020-08-40 18:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 31
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import tasks.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ToDo events \u003d new ToDo(\"kiwis\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \"[T][\" + \"\\u2718\" + \"] kiwis\", events.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void completionTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ToDo events \u003d new ToDo(\"kiwis\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        events.completeTask();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(\"[T][\" + \"\\u2713\" + \"] kiwis\", events.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 21
    }
  },
  {
    "path": "text-ui-test/data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[D][✓] return book (by: 13:56 Aug 23 2020)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[E][✘] project meeting (at: 13:58 Aug 26 2020)"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 2
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "event"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deadline return book /by 2020-08-40 13:56"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deadline return book /by 2020-08-23 13:56"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "event project meeting /at 2020-08-40 13:58"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "event project meeting /at 2020-08-26 13:58"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 23
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\tasks\\*.java ..\\src\\main\\java\\exception\\*.java ..\\src\\main\\java\\command\\*.java ..\\src\\main\\java\\logic\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "java -classpath ..\\bin logic.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "khor-jingqian": 7
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/logic.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "java -classpath ../bin logic.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "khor-jingqian": 2
    }
  }
]
