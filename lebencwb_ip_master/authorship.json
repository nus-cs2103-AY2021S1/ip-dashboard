[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Duke(String filepath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ui.showLoadingError(e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "lebencwb": 43
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException INVALID_COMMAND_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException INVALID_TASK_INDEX_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"Sorry, that is not a valid task.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException INVALID_TASK_DESCRIPTION_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"Sorry, the description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException FILE_PARSING_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"Sorry, an error occurred while trying to parse the file.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException FILE_LOADING_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"Sorry, the specified file does not seem to exist.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 22
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.QueryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static Command parse(String string) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Scanner parsingScanner \u003d new Scanner(string);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (parsingScanner.hasNext()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String commandString \u003d parsingScanner.next();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Command command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            switch (commandString.toLowerCase()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                command \u003d new ExitCommand(CommandType.BYE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                command \u003d new QueryCommand(CommandType.LIST);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (parsingScanner.hasNext()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        int index \u003d Integer.parseInt(parsingScanner.next());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        command \u003d new EditCommand(CommandType.DONE, index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        throw DukeException.INVALID_TASK_INDEX_EXCEPTION;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    throw DukeException.INVALID_TASK_INDEX_EXCEPTION;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (parsingScanner.hasNext()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        int index \u003d Integer.parseInt(parsingScanner.next());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        command \u003d new EditCommand(CommandType.DELETE, index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        throw DukeException.INVALID_TASK_INDEX_EXCEPTION;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    throw DukeException.INVALID_TASK_INDEX_EXCEPTION;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (parsingScanner.hasNext()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    command \u003d new AddCommand(CommandType.TODO, parsingScanner.nextLine());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    throw DukeException.INVALID_TASK_DESCRIPTION_EXCEPTION;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (parsingScanner.hasNext()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    command \u003d new AddCommand(CommandType.DEADLINE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                            parsingScanner.nextLine().split(\"( /by )\", 2));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    throw DukeException.INVALID_TASK_DESCRIPTION_EXCEPTION;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (parsingScanner.hasNext()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    command \u003d new AddCommand(CommandType.EVENT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                            parsingScanner.nextLine().split(\"( /at )\", 2));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    throw DukeException.INVALID_TASK_DESCRIPTION_EXCEPTION;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                throw DukeException.INVALID_COMMAND_EXCEPTION;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.INVALID_COMMAND_EXCEPTION;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static Task parseTaskFromFile(String line) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Scanner parsingScanner \u003d new Scanner(line);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String type \u003d parsingScanner.next();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int isDoneInteger;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            parsingScanner.next();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            isDoneInteger \u003d parsingScanner.nextInt();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            parsingScanner.next();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ToDo toDo \u003d new ToDo(parsingScanner.nextLine());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (isDoneInteger \u003d\u003d 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                toDo.markAsDone();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            task \u003d toDo;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            parsingScanner.next();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            isDoneInteger \u003d parsingScanner.nextInt();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            parsingScanner.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String[] details \u003d parsingScanner.nextLine().split(\"( by )\", 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Deadline deadline \u003d new Deadline(details[0], details[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (isDoneInteger \u003d\u003d 1) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                deadline.markAsDone();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            task \u003d deadline;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            parsingScanner.next();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            isDoneInteger \u003d parsingScanner.nextInt();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            parsingScanner.next();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            details \u003d parsingScanner.nextLine().split(\"( at )\", 2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Event event \u003d new Event(details[0], details[1]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (isDoneInteger \u003d\u003d 1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                event.markAsDone();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            task \u003d event;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.FILE_PARSING_EXCEPTION;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 130
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String parentFilepath \u003d Path.of(this.filepath).getParent().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            File parentFolder \u003d new File(parentFilepath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (!parentFolder.exists()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                parentFolder.mkdir();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            File taskFile \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (!taskFile.exists()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                taskFile.createNewFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Scanner scanner \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                tasks.add(Parser.parseTaskFromFile(scanner.nextLine()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.FILE_LOADING_EXCEPTION;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void addLine(String line) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.filepath, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fw.write(line + System.lineSeparator());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(\"Encountered an unexpected error with the file :(\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void deleteLine(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String tempFilepath \u003d Path.of(this.filepath).getParent().toString() + \"/temp.txt\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Files.copy(Path.of(this.filepath), Path.of((tempFilepath)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.filepath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            File copy \u003d new File(tempFilepath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Scanner scanner \u003d new Scanner(copy);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            int lineNumber \u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (lineNumber !\u003d index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    fw.write(scanner.nextLine() + System.lineSeparator());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    scanner.nextLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                lineNumber++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Files.delete(Path.of(tempFilepath));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(\"Encountered an unexpected error with the file :(\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void replaceLine(int index, String line) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String tempFilepath \u003d Path.of(this.filepath).getParent().toString() + \"/temp.txt\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Files.copy(Path.of(this.filepath), Path.of((tempFilepath)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.filepath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            File copy \u003d new File(tempFilepath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Scanner scanner \u003d new Scanner(copy);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            int lineNumber \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (lineNumber !\u003d index) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    fw.write(scanner.nextLine() + System.lineSeparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    fw.write(line + System.lineSeparator());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    scanner.nextLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                lineNumber++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Files.delete(Path.of(tempFilepath));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(\"Encountered an unexpected error with the file :(\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 101
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String INDENTATION \u003d \"\\t\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"-------------------------\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"------------------------------\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String CURRENT_TASKS \u003d \"Now you have %d task(s) in the list.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String ADD_TASK \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String DONE_TASK \u003d \"Nice! I\u0027ve marked this as done:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String DELETED_TASK \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static void showFormatted(String... lines) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        System.out.println(INDENTATION + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        for (String s : lines) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(INDENTATION + s);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        System.out.println(INDENTATION + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static void showNumbered(boolean hasHeader, boolean hasFooter, String... lines) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int start \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int end \u003d lines.length;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int number \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        System.out.println(INDENTATION + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (hasHeader) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(INDENTATION + lines[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            start++;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (hasFooter) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            end--;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        for (int i \u003d start; i \u003c end; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(INDENTATION + String.format(\"%d. %s\", number++, lines[i]));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (hasFooter) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(INDENTATION + lines[lines.length - 1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        System.out.println(INDENTATION + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        showFormatted(\"Hello! I\u0027m Duke\", \"What can I do for you?\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        showFormatted(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        showFormatted(\"\\u2639 OOPS!!! \" + errorMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void showTasks(String... tasks) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String[] lines \u003d new String[tasks.length + 1];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        lines[0] \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        System.arraycopy(tasks, 0, lines, 1, tasks.length);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        showNumbered(true, false, lines);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void showLoadingError(String message) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        showFormatted(\"Oh dear, an error occurred while trying to load the file:\", \"\\t\" + message);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void showAddedTask(String task, int numTasks) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        showFormatted(ADD_TASK, \"  \" + task, String.format(CURRENT_TASKS, numTasks));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void showDoneTask(String task) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        showFormatted(DONE_TASK, \"  \" + task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void showDeletedTask(String task, int numTasks) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        showFormatted(DELETED_TASK, \"  \" + task, String.format(CURRENT_TASKS, numTasks));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 90
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private String[] description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public AddCommand(CommandType commandType, String... description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        switch (this.commandType) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ToDo toDo \u003d new ToDo(this.description[0]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            taskList.addTask(toDo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            storage.addLine(toDo.toFileString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ui.showAddedTask(toDo.toString(), taskList.getNumTasks());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Deadline deadline \u003d new Deadline(this.description[0], this.description[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            taskList.addTask(deadline);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            storage.addLine(deadline.toFileString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ui.showAddedTask(deadline.toString(), taskList.getNumTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Event event \u003d new Event(this.description[0], this.description[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            taskList.addTask(event);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            storage.addLine(event.toFileString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ui.showAddedTask(event.toString(), taskList.getNumTasks());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return this.commandType.toString() + \" \" + Arrays.toString(this.description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 57
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 12
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    BYE(\"bye\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    EVENT(\"event\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final String label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    CommandType(String label) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 17
    }
  },
  {
    "path": "src/main/java/duke/command/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public EditCommand(CommandType commandType, int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        switch (this.commandType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Task doneTask \u003d taskList.markTaskAsDone(this.index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ui.showDoneTask(doneTask.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            storage.replaceLine(this.index, doneTask.toFileString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Task deletedTask \u003d taskList.deleteTask(this.index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ui.showDeletedTask(deletedTask.toString(), taskList.getNumTasks());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            storage.deleteLine(this.index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return this.commandType.toString() + \" \" + this.index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public ExitCommand(CommandType commandType) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return this.commandType.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 29
    }
  },
  {
    "path": "src/main/java/duke/command/QueryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class QueryCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public QueryCommand(CommandType commandType) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String[] lines \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ui.showTasks(lines);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return this.commandType.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 30
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected LocalDate deadlineDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            this.deadlineDate \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            //do nothing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void printTime() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(this.deadlineDate.getMonth().toString()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \" \" + this.deadlineDate.getDayOfMonth()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \" \" + this.deadlineDate.getYear());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(\"No valid date available.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.by + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int stat;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stat \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stat \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return String.format(\"%s | %d | %s by %s\", this.getType(), stat,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                this.description, this.by);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 53
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected LocalDate eventDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            this.eventDate \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            //do nothing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void printTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(this.eventDate.getMonth().toString()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    + \" \" + this.eventDate.getDayOfMonth()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    + \" \" + this.eventDate.getYear());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(\"No valid date available.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.at + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int stat;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stat \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stat \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return String.format(\"%s | %d | %s at %s\", this.getType(), stat,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                this.description, this.at);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 51
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"?\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int stat;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stat \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stat \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return String.format(\"%s | %d | %s\", this.getType(), stat, this.description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 38
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public int getNumTasks() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String[] getTasks() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String[] taskStrings \u003d new String[this.tasks.size()];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            taskStrings[i] \u003d this.tasks.get(i).toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return taskStrings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Task markTaskAsDone(int index) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Task task \u003d this.tasks.get(index - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.INVALID_TASK_INDEX_EXCEPTION;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Task deleteTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return this.tasks.remove(index - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.INVALID_TASK_INDEX_EXCEPTION;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 51
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "rmdir /s /q data"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "lebencwb": 2
    }
  }
]
