[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "# duke.main.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.main.Duke.java` file, right-click it, and choose `Run duke.main.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    mainClassName \u003d \"duke.main.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/command/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.DukeError;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.IllegalCharacterError;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class AddTaskCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    final Task task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeError {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (task.getDescription().contains(\"|\") || task.getDate().contains(\"|\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            throw new IllegalCharacterError();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ui.addTask(task.toString(), taskList.numberOfTasks());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 30
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        storage.saveData(ui, taskList);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else if (obj instanceof ByeCommand) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 30
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.DukeError;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * The base command class for other command class to inherit from."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Executes the command, taking in TaskList, UI and Storage to display the result in"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * UI while receiving data from TaskList and Storage and maybe modifying them concurrently."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param taskList The class that holds the list of Tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param ui       The User Interface which interacts with the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param storage  The class that deals with saving and loading data of the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @throws DukeError DukeErrors may be thrown in the process if user input is faulty"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    void execute(TaskList taskList, UI ui, Storage storage) throws DukeError;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Checks whether the command that ran exited the Duke program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @return Returns true if the command wants to exit the Duke program and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    boolean isExit();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 30
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.DukeError;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.InvalidRangeError;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class DeleteTaskCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private final int n;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public DeleteTaskCommand(int n) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.n \u003d n;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeError {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (n \u003c 1 || n \u003e taskList.numberOfTasks()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            throw new InvalidRangeError();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Task task \u003d taskList.getTaskList().get(n - 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        taskList.deleteTask(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ui.deleteTask(task.toString(), taskList.numberOfTasks());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DisplayListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class DisplayListCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ui.displayList(taskList.getTaskList());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else if (obj instanceof DisplayListCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 29
    }
  },
  {
    "path": "src/main/java/duke/command/DoneTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.DukeError;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.InvalidRangeError;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.TaskAlreadyCompletedError;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class DoneTaskCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private final int n;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public DoneTaskCommand(int n) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.n \u003d n;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeError {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (n \u003c 1 || n \u003e taskList.numberOfTasks()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            throw new InvalidRangeError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Task task \u003d taskList.getTaskList().get(n - 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (task.getIsDone()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            throw new TaskAlreadyCompletedError(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ui.doneTask(task.getDescription());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 35
    }
  },
  {
    "path": "src/main/java/duke/command/ErrorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class ErrorCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private final Exception error;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public ErrorCommand(Exception error) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ui.showError(error.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 23
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ArrayList\u003cTask\u003e foundList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                foundList.add(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ui.displayMatchingList(foundList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 33
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ui.showHelp();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else if (obj instanceof HelpCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 29
    }
  },
  {
    "path": "src/main/java/duke/command/SaveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class SaveCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        storage.saveData(ui, taskList);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 17
    }
  },
  {
    "path": "src/main/java/duke/error/DukeError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * The base error class for other Duke-related errors to inherit from."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class DukeError extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    DukeError(String msg) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 10
    }
  },
  {
    "path": "src/main/java/duke/error/EmptyDateError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class EmptyDateError extends DukeError {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public EmptyDateError() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"Please input a date!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 7
    }
  },
  {
    "path": "src/main/java/duke/error/EmptyTaskError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class EmptyTaskError extends DukeError {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public EmptyTaskError() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"Please insert a task!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 7
    }
  },
  {
    "path": "src/main/java/duke/error/IllegalCharacterError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class IllegalCharacterError extends DukeError {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public IllegalCharacterError() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"You message contains an illegal character!\\nPlease remove it and try again!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 7
    }
  },
  {
    "path": "src/main/java/duke/error/InvalidDateInputError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class InvalidDateInputError extends DukeError {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public InvalidDateInputError() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"Invalid date entered!\\nPlease enter the following format! dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 7
    }
  },
  {
    "path": "src/main/java/duke/error/InvalidNumberError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class InvalidNumberError extends DukeError {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public InvalidNumberError() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"Invalid number! Try again!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 7
    }
  },
  {
    "path": "src/main/java/duke/error/InvalidRangeError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class InvalidRangeError extends DukeError {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public InvalidRangeError() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"Uh oh! That number looks like it is out of range.\\nCheck again!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 7
    }
  },
  {
    "path": "src/main/java/duke/error/TaskAlreadyCompletedError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class TaskAlreadyCompletedError extends DukeError {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public TaskAlreadyCompletedError(Task task) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(String.format(\"Sorry! You have already completed \u0027%s\u0027.\", task.getDescription()));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 9
    }
  },
  {
    "path": "src/main/java/duke/error/UnknownCommandError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class UnknownCommandError extends DukeError {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public UnknownCommandError() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"Unknown command! Please insert the task type first before\\ntyping in your task!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 7
    }
  },
  {
    "path": "src/main/java/duke/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.DukeError;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * The main class for running Duke, the ChatBot."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private final UI ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Initialisation for Duke, the ChatBot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param filepath Requires a filepath which will be relative to where Duke was ran, to save and load files from"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public Duke(String filepath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        tasks \u003d storage.loadData(ui);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Runs Duke, the ChatBot."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            } catch (DukeError e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 47,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/main/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.command.AddTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.command.DeleteTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.command.DisplayListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.command.DoneTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.command.ErrorCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.command.SaveCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.DukeError;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.EmptyDateError;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.EmptyTaskError;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.InvalidDateInputError;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.InvalidNumberError;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.error.UnknownCommandError;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * The class that parses the user\u0027s input into commands that Duke can understand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Reads the user\u0027s input and returns a command for Duke to execute."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param inputLine The user\u0027s input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @return Returns an executable command based on the user\u0027s input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static Command parse(String inputLine) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String[] arr \u003d inputLine.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (inputLine.equals(\"bye\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else if (inputLine.equals(\"help\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else if (inputLine.equals(\"list\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return new DisplayListCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else if (inputLine.equals(\"save\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return new SaveCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else if (arr[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return new FindCommand(inputLine.substring(5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else if (arr.length \u003d\u003d 2 \u0026\u0026 (arr[0].equals(\"done\") || arr[0].equals(\"delete\")) \u0026\u0026 isInteger(arr[1])) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                int num \u003d Integer.parseInt(arr[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                if (arr[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    return new DoneTaskCommand(num);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                } else if (arr[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    return new DeleteTaskCommand(num);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                return new ErrorCommand(new InvalidNumberError());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                switch (arr[0]) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    String todo \u003d inputLine.substring(4).trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    if (todo.equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        throw new EmptyTaskError();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        return new AddTaskCommand(new ToDo(todo));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    int by \u003d inputLine.indexOf(\"/by\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    String deadline;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    String byDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    if (by \u003d\u003d -1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        deadline \u003d inputLine.substring(8).trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        byDate \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        deadline \u003d inputLine.substring(8, by).trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        byDate \u003d inputLine.substring(by + 3).trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    if (deadline.equals(\"\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        throw new EmptyTaskError();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    } else if (byDate.equals(\"\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        throw new EmptyDateError();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        return new AddTaskCommand(new Deadline(deadline, formatDateTime(byDate)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    int at \u003d inputLine.indexOf(\"/at\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    String event;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    String atDate;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    if (at \u003d\u003d -1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        event \u003d inputLine.substring(5).trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        atDate \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        event \u003d inputLine.substring(5, at).trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        atDate \u003d inputLine.substring(at + 3).trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    if (event.equals(\"\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        throw new EmptyTaskError();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    } else if (atDate.equals(\"\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        throw new EmptyDateError();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        return new AddTaskCommand(new Event(event, formatDateTime(atDate)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    throw new UnknownCommandError();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            } catch (DukeError e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                return new ErrorCommand(e);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                return new ErrorCommand(new InvalidDateInputError());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return new ErrorCommand(new UnknownCommandError());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static boolean isInteger(String strNum) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (strNum \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            Integer.parseInt(strNum);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static LocalDateTime formatDateTime(String s) throws InvalidDateInputError {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String[] dateAndTime \u003d s.split(\" \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (dateAndTime.length !\u003d 2) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            throw new InvalidDateInputError();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String beforeDate \u003d dateAndTime[0];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String[] arrDate \u003d beforeDate.split(\"/\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (arrDate.length !\u003d 3) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            throw new InvalidDateInputError();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (arrDate[0].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            beforeDate \u003d \"0\".concat(beforeDate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (arrDate[1].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            beforeDate \u003d String.format(\"%s/0%s/%s\", beforeDate.substring(0, 2),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    arrDate[1], arrDate[2]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String beforeTime \u003d dateAndTime[1];"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (beforeTime.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            beforeTime \u003d beforeTime.substring(0, 2) + \":\" + beforeTime.substring(2);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String after \u003d beforeDate + \" \" + beforeTime;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return LocalDateTime.parse(after, dateFormatter);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 166
    }
  },
  {
    "path": "src/main/java/duke/main/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.nio.file.FileSystems;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * The class that saves and loads data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private final String filepath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Initialisation of the Storage class which requires a filepath to save and load data from."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param filepath The relative filepath from where Duke was ran, to save and load data from"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Loads data using the filepath given."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param ui Needed to display the outcome to the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @return Returns the saved TaskList, if there is any"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public TaskList loadData(UI ui) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Path path \u003d FileSystems.getDefault().getPath(filepath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            File data \u003d new File(filepath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            Scanner scanner \u003d new Scanner(data);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            ui.startLoading();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                String s \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                String[] str \u003d s.split(\"\\\\|\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                switch (str[0]) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    ToDo toDo \u003d new ToDo(str[2]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    if (str[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        toDo.markAsDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    taskList.addTask(toDo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    Deadline deadline \u003d new Deadline(str[2], LocalDateTime.parse(str[3], dateFormatter));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    if (str[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        deadline.markAsDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    taskList.addTask(deadline);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    Event event \u003d new Event(str[2], LocalDateTime.parse(str[3], dateFormatter));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    if (str[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        event.markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    taskList.addTask(event);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    throw new IOException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            ui.loadSuccess();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(\"Uh oh! An error has occurred. T_T\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return new TaskList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Saves data using the filepath given."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param ui       Needed to display the outcome to the user"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param taskList The TaskList being saved into the filepath"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void saveData(UI ui, TaskList taskList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            File data \u003d new File(filepath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            data.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            data.createNewFile();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(data);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            PrintWriter writer \u003d new PrintWriter(fileWriter);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            ui.startSaving();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                String s \u003d String.format(\"%s|%b|%s\", task.getTaskType(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        task.getIsDone(), task.getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                if (!task.getTaskType().equals(\"T\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    s \u003d s.concat(String.format(\"|%s\", task.getDate()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                writer.println(s);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            ui.saveSuccess();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(\"Uh oh! An error has occurred. T_T\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 123
    }
  },
  {
    "path": "src/main/java/duke/main/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * The class that is responsible of taking care of the user\u0027s list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        taskList.remove(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public int numberOfTasks() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 32
    }
  },
  {
    "path": "src/main/java/duke/main/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * The class that interacts with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static Scanner sc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Initialises the UI class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private void showLine() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Reads in the user\u0027s input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @return Returns the trimmed version of the user\u0027s input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return sc.nextLine().trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private void showCmd(String s) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the welcome message to the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        showCmd(\" Hello! I\u0027m Duke!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the goodbye message to the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        showCmd(\" Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the error message to the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param error The error that was thrown"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        showCmd(error);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the added task message to the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param task The task that was added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param n    The size of the TaskList after the task was added"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void addTask(String task, int n) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String s \u003d \" Got it. I\u0027ve added this task:\\n   \" + task + \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        showCmd(s.concat(displayListSize(n)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the list of tasks to the user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param taskList The TaskList of the user"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void displayList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            showCmd(\"You have no tasks left! Good job my child!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            String s \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            if (taskList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                s \u003d s.concat(\" Here is the task in your list:\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                s \u003d s.concat(\" Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                s \u003d s.concat(\" \" + (i + 1) + \".\" + taskList.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            s \u003d s.substring(0, s.length() - 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            showCmd(s);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the list of tasks that contains the matching keyword to the user."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param taskList The TaskList containing tasks with the matching keyword"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void displayMatchingList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            showCmd(\" I\u0027ve found no matching tasks with the keyword! T_T\\n Try again!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            String s \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            if (taskList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                s \u003d s.concat(\" Here is the matching task in your list:\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                s \u003d s.concat(\" Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                s \u003d s.concat(\" \" + (i + 1) + \".\" + taskList.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            s \u003d s.substring(0, s.length() - 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            showCmd(s);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the size of the TaskList to the user."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param n The size of the TaskList"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @return Returns the String message to be concatenated with the display message."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String displayListSize(int n) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (n \u003d\u003d 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return (\" Great job son! You\u0027re left with no more tasks!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else if (n \u003d\u003d 1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return String.format(\" Now you have %d task in the list.\", n);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return String.format(\" Now you have %d tasks in the list.\", n);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the start saving message to the user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void startSaving() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        System.out.println(\"Saving...\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the save was successful message to the user."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void saveSuccess() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        System.out.println(\"Saved successfully!\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the start loading message to the user."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void startLoading() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        System.out.println(\"Fetching old data...\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the load was successful message to the user."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void loadSuccess() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        System.out.println(\"Data successfully loaded! ^^\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the task was successfully done message to the user."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param task The task that was successfully completed"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void doneTask(String task) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        showCmd(String.format(\"Great job! I\u0027ll mark \u0027%s\u0027 as done for you. ^^\", task));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the task was successfully deleted message to the user."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param task The task that was successfully deleted"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param n    The number of remaining tasks"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void deleteTask(String task, int n) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String s \u003d \" Noted. I\u0027ve removed this task:\\n  \" + task + \"\\n\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        showCmd(s.concat(displayListSize(n)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Displays the help message to the user."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void showHelp() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        showCmd(\"Here are the list of commands you can use:\\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                + \"help\\nlist\\nsave\\nbye\\ntodo \u0027TASK\u0027\\ndeadline \u0027TASK\u0027 /by \u0027dd/MM/yyyy HH:mm\u0027\\n\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                + \"event \u0027TASK\u0027 /at \u0027dd/MM/yyyy HH:mm\u0027\\ndone \u0027n\u0027\\ndelete \u0027n\u0027\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 192
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    protected final LocalDateTime dateEnd;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Initialisation of the deadline class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param description The description about the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param dateEnd The deadline of this task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public Deadline(String description, LocalDateTime dateEnd) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.dateEnd \u003d dateEnd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return dateEnd.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return String.format(\"%s (by: %s)\", super.toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                dateEnd.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 34
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    protected final LocalDateTime time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Initialisation of the event class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param description The description about the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param time The date and time when this event is happening"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public Event(String description, LocalDateTime time) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return String.format(\"%s (at: %s)\", super.toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 34
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " * The base task class for other tasks class to inherit from."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Initial setup for all child classes of Task class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * @param description The description about the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     * Marks this instance of the task as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return (isDone ? \"Y\" : \"N\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public abstract String getTaskType();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public abstract String getDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return String.format(\"[%s][%s] %s\", getTaskType(), getStatusIcon(), description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 46
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 18
    }
  },
  {
    "path": "src/test/java/duke/command/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.main.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void ByeTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Assertions.assertEquals(new ByeCommand(), Parser.parse(\"bye\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void DisplayListTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertEquals(new DisplayListCommand(), Parser.parse(\"list\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void HelpTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertEquals(new HelpCommand(), Parser.parse(\"help\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 24
    }
  },
  {
    "path": "src/test/java/duke/main/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void LoadEmptyTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Storage storage \u003d new Storage(\"non-existent-path\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        TaskList taskList \u003d storage.loadData(new UI());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        assertEquals(new ArrayList\u003cTask\u003e(), taskList.getTaskList());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 17
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "dab"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "todo yeet"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "deadline hehe"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "deadline haha /by dab"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "event /at"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "event hoho"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "event huhu /at yeet"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "done 01"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 20
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "SET MY_PATH\u003d\"C:\\Users\\ambro\\Downloads\\nus\\~y2s1\\cs2103\\ip\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\duke.main.Duke.java\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" duke.main.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 5,
      "-": 18
    }
  }
]
