[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Deadline class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Deadline is a task that needs to be done before a specific date/time."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Deadline(String description, String time, boolean isDone) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new uncompleted deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param time Time by which the task is to be done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New uncompleted deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Deadline getDeadline(String description, String time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Deadline(description, time, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Deadline(description, time, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), time);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 35
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Immutable Duke chatbot class to encapsulate the behavior of the chatbot."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Task id starts from 1."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Duke implements IDuke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /** List for storing Tasks */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final ArrayList\u003cITask\u003e list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Duke(ArrayList\u003cITask\u003e list) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new Duke chatbot object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New Duke chatbot object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Duke getDuke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Duke(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.LOGO);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .getFormattedText(\"Hi I\u0027m Cat Bot.\\nWhat can I do for you?\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .getFormattedText(\"Bye! Hope to see you again!\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public IDuke storeTask(ITask task) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ArrayList\u003cITask\u003e newList \u003d new ArrayList\u003c\u003e(this.list);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        newList.add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Duke(newList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void displayTasks() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            sb.append(\" \").append(i + 1).append(\". \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    .append(list.get(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText(sb.toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws IllegalArgumentException"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ITask getTask(int id) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (id - 1 \u003e list.size() || id \u003c 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new IllegalArgumentException(\"Task id out of bound!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list.get(id - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public int getNumTask() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public IDuke handleCommand(String command) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                // Handle list command"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                handleDisplay();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (command.matches(\"^done.*\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                // Handle done command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                if (!command.matches(\"^done -?[0-9]+$\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            \"Wrong done command! Format: done \u003ctaskId\u003e\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                int index \u003d Integer.parseInt(command.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return handleDone(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (command.matches(\"^todo.*\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                // Handle todo command"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                if (!command.matches(\"^todo .*\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            \"Wrong todo command! Format: todo \u003ctaskName\u003e\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String param \u003d command.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return handleToDo(param);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (command.matches(\"^deadline.*\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                // Handle deadline command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                if (!command.matches(\"^deadline .* /by .*\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            \"Wrong deadline command!\\nFormat: deadline \u003ctaskName\u003e /by \u003ctime\u003e\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String[] params \u003d command.split(\" \", 2)[1].split(\" /by \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return handleDeadline(params[0], params[1]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (command.matches(\"^event.*\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                // Handle event command"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                if (!command.matches(\"^event .* /at .*\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            \"Wrong event command!\\nFormat: event \u003ctaskName\u003e /at \u003ctime\u003e\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String[] params \u003d command.split(\" \", 2)[1].split(\" /at \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return handleEvent(params[0], params[1]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (command.matches(\"^delete.*\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                // Handle delete command"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                if (!command.matches(\"^delete -?[0-9]+$\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            \"Wrong delete command! Format: delete \u003ctaskId\u003e\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                int index \u003d Integer.parseInt(command.split(\" \")[1]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return handleDelete(index);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                throw new DukeUnrecognizedArgumentException(\"Unrecognizable command!\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (DukeIllegalArgumentException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Meow?!! \" + e.getMessage()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (DukeUnrecognizedArgumentException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Meow? Sorry I don\u0027t know what you are talking about...\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Meow!!! Something terrible happened!\" + e));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void handleDisplay() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Oops! Looks like there\u0027s no task in the list!\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            displayTasks();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke handleDone(int index) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (index \u003c 1 || index \u003e getNumTask()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Task index out of bound!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        IDuke newDuke \u003d doneTask(index);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \"Naisu! I\u0027ve marked this task done!\\n\" + newDuke.getTask(index)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return newDuke;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke handleDelete(int index) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (index \u003c 1 || index \u003e getNumTask()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Task index out of bound!\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        IDuke newDuke \u003d deleteTask(index);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \"Hmmm~! I\u0027ve removed this task:\\n\\t\" + getTask(index)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"\\n Now you have \" + newDuke.getNumTask() + \" task(s) in the list.\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return newDuke;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke handleToDo(String description) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (description.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The description of todo cannot be empty!\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ITask task \u003d ToDo.getToDo(description);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        IDuke newDuke \u003d storeTask(task);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\n\\t\" + task.toString()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        + \"\\nNow you have \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        +  newDuke.getNumTask() + \" task(s) in the list.\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return newDuke;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke handleDeadline(String description, String time)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throws DukeIllegalArgumentException{"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (description.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The description of deadline cannot be empty!\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (time.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The time of deadline cannot be empty!\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ITask task \u003d Deadline.getDeadline(description, time);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        IDuke newDuke \u003d storeTask(task);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\n\\t\" + task.toString()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        + \"\\nNow you have \" +  newDuke.getNumTask()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        + \" task(s) in the list.\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return newDuke;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke handleEvent(String description, String time)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (description.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The description of event cannot be empty!\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (time.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The time of event cannot be empty!\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ITask task \u003d Event.getEvent(description, time);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        IDuke newDuke \u003d storeTask(task);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\n\\t\" + task.toString()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        + \"\\nNow you have \" +  newDuke.getNumTask()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        + \" task(s) in the list.\"));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return newDuke;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Marks a specified task as done."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Task to be done is specified by its index id."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Duke with task done."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws DukeIllegalArgumentException If index out of bound."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke doneTask(int id) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (id - 1 \u003e list.size() || id \u003c 0) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Cannot done task! Task id out of bound!\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (list.get(id - 1).isDone()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Cannot done task! Task is already done!\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ArrayList\u003cITask\u003e newList \u003d new ArrayList\u003c\u003e(this.list);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        newList.set(id - 1, newList.get(id - 1).markComplete());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Duke(newList);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Removes a specified task."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Task to be removed is specified by its index id."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Duke with task removed."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws DukeIllegalArgumentException If index out of bound."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke deleteTask(int id) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (id - 1 \u003e list.size() || id \u003c 0) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Cannot delete task! Task id out of bound!\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ArrayList\u003cITask\u003e newList \u003d new ArrayList\u003c\u003e(this.list);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        newList.remove(id - 1);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Duke(newList);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        IDuke bot \u003d getDuke();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Greet user"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        bot.greet();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Handle commands until user types bye"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String s \u003d sc.nextLine();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (s.equals(\"bye\")) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (!s.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                // Ignore white spaces or empty lines"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                bot \u003d bot.handleCommand(s);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Exit bot"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        bot.bye();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 291,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeIllegalArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Duke specific exception, thrown when Duke detects illegal/empty argument."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class DukeIllegalArgumentException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public DukeIllegalArgumentException(String s) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 8
    }
  },
  {
    "path": "src/main/java/DukeUnrecognizedArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Duke specific exception, thrown when argument cannot be recognized by Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class DukeUnrecognizedArgumentException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public DukeUnrecognizedArgumentException(String s) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 8
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * An Event class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * An Event is a task that start at a specific time and ends at a specific time."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Event(String description, String time, boolean isDone) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new uncompleted event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param time Time during which the event is happening."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New uncompleted event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Event getEvent(String description, String time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Event(description, time, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Event(description, time, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), time);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 35
    }
  },
  {
    "path": "src/main/java/IDuke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public interface IDuke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Prints greeting message."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    void greet();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Prints goodbye message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    void bye();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Stores a task in the bot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param task User input task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Updated Duke object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    IDuke storeTask(ITask task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Prints the current list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    void displayTasks();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Gets a specific task from the list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return The specified task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ITask getTask(int id);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Gets the number of tasks in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Number of tasks currently in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    int getNumTask();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Handles a given command and returns the resulting Duke."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param command A user command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Resulting Duke object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    IDuke handleCommand(String command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 48
    }
  },
  {
    "path": "src/main/java/ITask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public interface ITask {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a task which is completed."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Completed Task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ITask markComplete();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns true if the task is done, false otherwise."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return true if the task is done, false otherwise."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    boolean isDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 15
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Immutable Task Object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A task has a description and a completion status."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Task implements ITask {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected final boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new uncompleted task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New uncompleted task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Task getTask(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Task(description, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Task(this.description, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"[%s] %s\", isDone ? \"✓\" : \"✗\", description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 43
    }
  },
  {
    "path": "src/main/java/TextFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Handles text formatting"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TextFormatter {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /** Horizontal lines used for formatting */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"∴‥∵‥∴‥∵‥∴‥∴‥∵‥∴‥∵‥∴‥∴‥∵‥∴‥∵‥∴‥∴‥∵‥∴\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final String HORIZONTAL_LINE_2 \u003d \"▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /** Bot Logo */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String LOGO \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            \"　　＼　　　　　／\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　＼∧∧∧／\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　＜　 Ｃ ＞\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　＜ 　Ａ ＞\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　＜　 Ｔ ＞\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　 ───＜ Ｂ　 ＞───\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　＜ Ｏ　 ＞\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　＜ Ｔ　 ＞\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　／∨∨∨＼\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　／ ∧_∧　　＼\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　／　( ･ω･)　　 ＼\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"／　＿(_つ/￣￣￣/　＼\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　 　＼/＿＿＿/\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns text formatted with indentation and lines."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param text Text to be wrapped."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static String getFormattedText(String text) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String output \u003d text.replaceAll(\"(?m)^\", \"∴‥\\t\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (output.charAt(output.length() - 1) !\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return HORIZONTAL_LINE + \"\\n\" + output + HORIZONTAL_LINE + \"\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 37
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * ToDo class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A ToDo is a task without any date/time attached to it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new uncompleted ToDo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of ToDo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New uncompleted ToDo."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static ToDo getToDo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ToDo(description, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ToDo(description, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 31
    }
  },
  {
    "path": "text-ui-test/input_deadline.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline do laundry /by tomorrow"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline have something to eat /by lunch time"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 10
    }
  },
  {
    "path": "text-ui-test/input_delete.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo myTodo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline myDeadline /by today"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event myEvent /at today"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 11
    }
  },
  {
    "path": "text-ui-test/input_event.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event NUS OPEN HOUSE /at August"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event SOMETHING FUN /at JUNE"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 10
    }
  },
  {
    "path": "text-ui-test/input_exception.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list 123"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo correctTodo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo correctTodo something extra"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline wrong command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline place /at time"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline   /by time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline place /by    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline correctDeadline /by time"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event wrong command\t"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event place /by time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event   /at tomorrow"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event someEvent /at   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event correctEvent /at today"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 9"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete haha this is funny"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete 20"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 28
    }
  },
  {
    "path": "text-ui-test/input_mixed.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo coding"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline lab1 /by tomorrow"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event weeee~ /at next year"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 13
    }
  },
  {
    "path": "text-ui-test/input_todo.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo abc"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo bcd"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_TODO.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_DEADLINE.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_EVENT.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_MIXED.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_EXCEPTION.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_DELETE.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "javac  -cp ..\\src -Xlint:none -encoding UTF-8 -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_todo.txt \u003e ACTUAL_TODO.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_deadline.txt \u003e ACTUAL_DEADLINE.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_event.txt \u003e ACTUAL_EVENT.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_mixed.txt \u003e ACTUAL_MIXED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_exception.txt \u003e ACTUAL_EXCEPTION.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_delete.txt \u003e ACTUAL_DELETE.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_TODO.TXT EXPECTED_TODO.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_DEADLINE.TXT EXPECTED_DEADLINE.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_EVENT.TXT EXPECTED_EVENT.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_MIXED.TXT EXPECTED_MIXED.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_EXCEPTION.TXT EXPECTED_EXCEPTION.TXT"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_DELETE.TXT EXPECTED_DELETE.TXT"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      }
    ],
    "authorContributionMap": {
      "luo-git": 25,
      "-": 17
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if [ -e \"./ACTUAL_TODO.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    rm ACTUAL_TODO.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if [ -e \"./ACTUAL_DEADLINE.TXT\" ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    rm ACTUAL_DEADLINE.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "fi"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if [ -e \"./ACTUAL_EVENT.TXT\" ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    rm ACTUAL_EVENT.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if [ -e \"./ACTUAL_MIXED.TXT\" ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "then"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    rm ACTUAL_MIXED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if ! javac -cp ../src -Xlint:none -encoding UTF-8 -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin Duke \u003c input_todo.txt \u003e ACTUAL_TODO.TXT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -classpath ../bin Duke \u003c input_deadline.txt \u003e ACTUAL_DEADLINE.TXT"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -classpath ../bin Duke \u003c input_event.txt \u003e ACTUAL_EVENT.TXT"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -classpath ../bin Duke \u003c input_mixed.txt \u003e ACTUAL_MIXED.TXT"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "cp EXPECTED_TODO.TXT EXPECTED_TODO-UNIX.TXT"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "cp EXPECTED_DEADLINE.TXT EXPECTED_DEADLINE-UNIX.TXT"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "cp EXPECTED_EVENT.TXT EXPECTED_EVENT-UNIX.TXT"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "cp EXPECTED_MIXED.TXT EXPECTED_MIXED-UNIX.TXT"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "dos2unix ACTUAL_TODO.TXT EXPECTED_TODO-UNIX.TXT"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "dos2unix ACTUAL_DEADLINE.TXT EXPECTED_DEADLINE-UNIX.TXT"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "dos2unix ACTUAL_EVENT.TXT EXPECTED_EVENT-UNIX.TXT"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "dos2unix ACTUAL_MIXED.TXT EXPECTED_MIXED-UNIX.TXT"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "diff ACTUAL_TODO.TXT EXPECTED_TODO-UNIX.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "diff ACTUAL_DEADLINE.TXT EXPECTED_DEADLINE-UNIX.TXT"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "diff ACTUAL_EVENT.TXT EXPECTED_EVENT-UNIX.TXT"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "diff ACTUAL_MIXED.TXT EXPECTED_MIXED-UNIX.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "luo-git": 34,
      "-": 31
    }
  }
]
