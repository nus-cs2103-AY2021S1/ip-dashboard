[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    archiveBaseName \u003d \"TheMatrix\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "test {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.4.0\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.4.0\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 33,
      "-": 44
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "munharsha": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "munharsha": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "munharsha": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "munharsha": 11
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "E | 1 | project meeting | 01-01-2020 12:30 | done"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "D | 0 | return book | 23-02-2020 00:00 | bro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "T | 0 | sing song | sis"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "T | 1 | run | bro"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "T | 0 | swim | deeddd"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "T | 1 | eat | "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "D | 0 | return book | 23-02-2020 00:00 | "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "E | 0 | project meeting | 01-01-2020 12:30 | "
      }
    ],
    "authorContributionMap": {
      "munharsha": 8
    }
  },
  {
    "path": "data/dukeInvalid.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "rubbish"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "hehhee"
      }
    ],
    "authorContributionMap": {
      "munharsha": 2
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "# TheMatrix User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "![alt text](matrix.png)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "The matrix is a desktop app which allows you to keep track of tasks with a Graphical User Interface(GUI). The app has a chat interface which make the monitoring of tasks more human like. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "- Quick start"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "- Features"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\t1. Add tasks: `todo` `event` `deadline` "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\t2. Display list: `list`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\t3. Marking task as done: `done`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\t4. Deleting tasks: `delete`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\t5. Searching tasks: `find`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\t6. Tagging a task: \u0027tag\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\t7. Finding a task with tags: `findtag`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\t8. Help: `help`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\t9. Exiting the program: `exit`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "- Quick list of command examples"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "## QuickStart"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Please ensure that you have installed the latest version of the Jar file as well as java `11` installed to run the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Here are some example commands you can try:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "- `todo swim`: Adds a todo `swim` to the list of tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "- `list`: Lists all the tasks that are present"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "- `done 1`: Marks the first task as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "- `delete 1`: Deletes the first task on the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "- `bye`: Exits the app"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "### Add tasks \u003cdiv id \u003d\"addtask\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "There are three types of tasks that could be added into the list: ToDo, Event and Deadline. The various formats have various types of inputs and outputs as shown below:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "#### Adding a ToDo: `todo`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Adds a todo to the list of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Format: `todo \u003cDESCRIPTION\u003e`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "`todo swim`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "[T][✘] swim"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": " ```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "#### Adding a Deadline: `deadline`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Adds a deadline to the list of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Format: `deadline \u003cDESCRIPTION\u003e /by \u003cDD-MM-YYYY HH:MM\u003e`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003e The date that has been input has to be strictly of the following format: `DD-MM-YYYY HH:MM\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "`deadline return book /by 23-02-2020 00:00`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "[D][✘] return book (by: 23 Feb 2020, 12:00 AM)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": " ```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "#### Adding an Event: `event`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Adds an event to the list of tasks."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Format: `event \u003cDESCRIPTION\u003e /at \u003cDD-MM-YYYY HH:MM\u003e`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003e The date that has been input has to be strictly of the following format: `DD-MM-YYYY HH:MM\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "`event project meeting /at 01-01-2020 12:30`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "[E][✘] project meeting (by: 1 Jan 2020, 12:30 PM)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "### Display list: `list`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "To display the list fo tasks that has already been made."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": " `list`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "1. [T][✘] swim"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "2. [E][✘] project meeting (by: 1 Jan 2020, 12:30 PM)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": "3. [D][✘] return book (by: 23 Feb 2020, 12:00 AM)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": " ```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": " \u003e If the list is empty a warning message will be shown."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": "### Done: `done`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Marks the task as done "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Format: `done \u003cTask Number in list\u003e`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "munharsha"
        },
        "content": " `done 1`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": " Example of outcome:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "munharsha"
        },
        "content": "[T][✓] swim"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "munharsha"
        },
        "content": "### Delete: `delete`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Deletes the selected task from the list "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Format: `delete \u003cTask Number in list\u003e`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "munharsha"
        },
        "content": "  "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "munharsha"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Example of outcome:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "munharsha"
        },
        "content": "[T][✓] swim"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "munharsha"
        },
        "content": "### Find: `find`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Finds tasks with the keyword provided."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "munharsha"
        },
        "content": " Format: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "munharsha"
        },
        "content": "`find book`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Example of outcome:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "munharsha"
        },
        "content": "1. [T][✘] read book"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "munharsha"
        },
        "content": "2. [E][✘] book discussion (by: 1 Jan 2020, 12:30 PM)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "munharsha"
        },
        "content": "3. [D][✘] return book (by: 23 Feb 2020, 12:00 AM)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "munharsha"
        },
        "content": " \u003e You could enter partial words and it still works. For example, instead of `book` you could type `bo` and it would generate search results based on that."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "munharsha"
        },
        "content": "### Tag: \u0027tag\u0027"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "munharsha"
        },
        "content": "You can tag tasks with a certain tag to make it easier to group certain tasks together."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Format: `tag \u003ctask number\u003e \u003ctag name\u003e`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "munharsha"
        },
        "content": "`tag 1 today\u0027"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Example of outcome:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Got it. I\u0027ve tagged this task with: #today"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "munharsha"
        },
        "content": "[E][✘] project meeting (by: 1 Jan 2020, 12:30 PM)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "munharsha"
        },
        "content": " \u003e Use tags to group multiple tasks together for easier search."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "munharsha"
        },
        "content": "### FIndTag: `findtag\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "munharsha"
        },
        "content": "This will help you search for tags with a certain tag name."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Example of usage: \u0027findtag today\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Example of outcome:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Here are the matching tasks in your list with the tag:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "munharsha"
        },
        "content": "1. [E][✘] project meeting (by: 1 Jan 2020, 12:30 PM)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "munharsha"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "munharsha"
        },
        "content": "### Help: `help`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Calls out the help message which shows all the commands that can be entered."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Example of usage: `help`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "munharsha"
        },
        "content": "### Bye: \u0027bye\u0027"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "munharsha"
        },
        "content": "This will exit the program."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "munharsha"
        },
        "content": "Example of usage: \u0027bye\u0027"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "munharsha"
        },
        "content": "## Quicklist of commands"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "munharsha"
        },
        "content": "`todo borrow book` `deadline return book /by 23-02-2020 00:00` `event project meeting /at 01-01-2020 12:30` `done 2` `delete 2` `list` `bye` `tag 1 lol` `findtag lol` `help`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "munharsha"
        },
        "content": " "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "munharsha": 178,
      "-": 19
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Abstract command class that extends the different types of reminders."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public abstract String execute(TaskList taskList, UI ui) throws DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 6
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a deadline reminder."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected String descriptionAfterBy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected LocalDateTime localDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a Deadline with a description and a due date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param description        The description of this deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param descriptionAfterBy The due date of this deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DateTimeParseException If date is not in the right format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Deadline(String description, String descriptionAfterBy) throws DateTimeParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.descriptionAfterBy \u003d descriptionAfterBy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.localDate \u003d LocalDateTime.parse(descriptionAfterBy, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a Deadline with a description and a due date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Deadline object information in the format to be saved."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String writeSaveFormat() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return String.format(\"D | %d | %s | %s | %s\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                isDone ? 1 : 0, description, descriptionAfterBy, hasTag ? tagName : \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a Deadline with a description and a due date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Deadline information in a string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + localDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, hh:mm a\")) + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 46
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a deadline command which genereates the deadline reminder."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DeadlineCommand object with a provided input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input The input that has been input by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DeadlineCommand(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Generates the Deadline task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasklist The list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param ui       The ui object that helps generate the different messgaes for display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String The message that is to be output on the GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyDeadlineException     If there is empty message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyDeadlineTimeException If date is not in the right format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeEmptyDeadlineException, DukeEmptyDeadlineTimeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (input.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyDeadlineException(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String deadlinerMessage \u003d Parser.stringBuilder(input.split(\" \"), 1, input.split(\" \").length - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String[] deadlinerMessageParts \u003d deadlinerMessage.split(\" /by \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (deadlinerMessageParts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyDeadlineTimeException(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            Deadline deadlineTask \u003d new Deadline(deadlinerMessageParts[0], deadlinerMessageParts[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            tasklist.addTask(deadlineTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d ui.printTaskAdd(deadlineTask, tasklist.numOfTasks());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyDeadlineException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyDeadlineTimeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 47
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a delete command which helps with deleting of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DeleteCommand object with a provided input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input The input that has been input by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DeleteCommand(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Deletes a task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasklist The list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param ui       The ui object that helps generate the different messgaes for display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String The message that is to be output on the GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeDeleteException If there is a wrong delete number keyed in."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeDeleteException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            int deleteTaskNumber \u003d Integer.parseInt(input.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (deleteTaskNumber + 1 \u003e tasklist.numOfTasks() || deleteTaskNumber \u003c 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeDeleteException(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d ui.printDeleteMessage(tasklist.getTask(deleteTaskNumber), tasklist.numOfTasks() - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            tasklist.deleteTask(deleteTaskNumber);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeDeleteException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 39
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * This control represents a dialog box consisting of a Circle to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Circle displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Generates the Dialog box object for the GUI."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param text The text generated for teh reminder."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param img  The image of the different parties talking in the GUI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        displayPicture.setRadius(50);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        displayPicture.setFill(new ImagePattern(img));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Generates the Dialog box object for the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param text The text generated for the reminder."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param img  The image of the different parties talking in the GUI"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Generates the Dialog box object for the responder."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param text The text generated for the reminder."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param img  The image of the different parties talking in the GUI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 79
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a DoneCommand which marks the tasks as done."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DeleteCommand object with a provided input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input The input that has been input by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DoneCommand(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasklist The list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param ui       The ui object that helps generate the different messgaes for display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String The message that is to be output on the GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeInvalidDoneNumException If an invalid task number is keyed in."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyDoneNumException   If there is no done number keyed in."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeInvalidDoneNumException, DukeEmptyDoneNumException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String[] splitMessage \u003d input.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (splitMessage.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyDoneNumException(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            int doneTaskNumber \u003d Integer.parseInt(splitMessage[1]) - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (doneTaskNumber + 1 \u003e tasklist.numOfTasks() || doneTaskNumber \u003c 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeInvalidDoneNumException(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d tasklist.markAsDone(doneTaskNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeInvalidDoneNumException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 44
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Main class where Duke program is run."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs the duke object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            this.tasks \u003d storage.load();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            this.ui \u003d new UI();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            ui.printFormattedMessage(\"OOPS!!! File Loading error!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Runs the duke program and will terminate upon input \"bye\"."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input input of the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeException If the user keys in wromg inputs and returns various messages."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String run(String input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Command currentCommand \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (Parser.isList(input)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                currentCommand \u003d new ListCommand(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isDone(input)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                currentCommand \u003d new DoneCommand(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isToDo(input)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                currentCommand \u003d new ToDoCommand(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isDeadline(input)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                currentCommand \u003d new DeadlineCommand(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isEvent(input)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                currentCommand \u003d new EventCommand(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isDelete(input)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                currentCommand \u003d new DeleteCommand(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isFind(input)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                currentCommand \u003d new FindCommand(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isTag(input)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                currentCommand \u003d new TagCommand(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isFindTag(input)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                currentCommand \u003d new FindTagCommand(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isHelp(input)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                currentCommand \u003d new HelpCommand(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeUnknownInputException(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d currentCommand.execute(this.tasks, this.ui);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (Parser.isBye(input)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d ui.printByeMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        storage.save(storage.convertArrayToSaveFormat(this.tasks));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 66,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeDeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid delete command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeDeleteException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeDeleteException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeDeleteException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The invalid delete number.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeEmptyDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty deadline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyDeadlineException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyDeadlineException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeEmptyDeadlineTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty deadline Time."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyDeadlineTimeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyDeadlineTimeException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyDeadlineTimeException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The description of a deadline time cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeEmptyDoneNumException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid done number."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyDoneNumException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyDoneNumException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyDoneNumException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! You have keyed in a done command without a number.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeEmptyEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty event."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyEventException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyEventException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyEventException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeEmptyEventTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty time for an event."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyEventTimeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyEventTimeException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyEventTimeException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The description of a event time cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/DukeEmptyFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty find."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyFindException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyFindException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyFindException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! Empty find body!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeEmptyFindTagException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty FindTag message."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyFindTagException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyFindTagException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyFindTagException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! You have keyed in an empty tag to find.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeEmptyTagException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty Tag message."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyTagException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyTagException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyTagException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! You have keyed in an empty tag.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeEmptyTaskListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has requested to display the list when there is no tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyTaskListException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyEventTimeException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyTaskListException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! There are no tasks entered!.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeEmptyToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty ToDo reminder."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyToDoException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyToDoException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyToDoException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid duke command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeInvalidDoneNumException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid done number."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeInvalidDoneNumException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeInvalidDoneNumException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeInvalidDoneNumException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! You have keyed in an invalid done number.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeInvalidTagNumException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid tag number."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeInvalidTagNumException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeInvalidTagNumException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeInvalidTagNumException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! You have keyed in an invalid tag number.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeNoMatchesExcpetion.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that there is no matches with what the user has keyed in."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeNoMatchesExcpetion extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeNoMatchesException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeNoMatchesExcpetion(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! No matches found!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeNoMatchesTagExcpetion.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that there is no matches with Tags the user has keyed in."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeNoMatchesTagExcpetion extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeNoMatchesException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeNoMatchesTagExcpetion(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! No matches found for the Tag!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeTimeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid duke command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeTimeParseException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public DukeTimeParseException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The invalid date format has \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"been keyed in. PLease enter in dd-MM-yyyy HH:mm format\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/DukeUnknownInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeUnknownInputException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeUnknownInputException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeUnknownInputException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents an event reminder."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The time/date of the event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected String descriptionAfterAt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The time/date of the event in terms of LocalDateTimeObject."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected LocalDateTime localTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs an Event object with the specified description and date and/or time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param description        The description of this event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param descriptionAfterAt The date/time of this event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DateTimeParseException Throws if there is a wrong format of date/time passed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Event(String description, String descriptionAfterAt) throws DateTimeParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.descriptionAfterAt \u003d descriptionAfterAt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.localTime \u003d LocalDateTime.parse(descriptionAfterAt, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns the String representation of this event for saving."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return The String representation of this event for saving."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String writeSaveFormat() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return String.format(\"E | %d | %s | %s | %s\", isDone"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                ? 1 : 0, description, descriptionAfterAt, hasTag ? tagName : \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns the String representation of this event for the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return The String representation of this event for the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + localTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, hh:mm a\")) + \")\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 52
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a Eventcommand which generates the event task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs an EventCommand object with a provided input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input The input that has been input by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    EventCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Generates the Event task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasklist The list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param ui       The ui object that helps generate the different messgaes for display."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String The message that is to be output on the GUI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyEventException     If an empty event message is keyed in."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyEventTimeException If wrong format is keyed in for the event time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeEmptyEventTimeException, DukeEmptyEventException,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            DukeTimeParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (this.input.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyEventException(this.input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String eventMessage \u003d Parser.stringBuilder(input.split(\" \"), 1, input.split(\" \").length - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String[] eventMessageParts \u003d eventMessage.split(\" /at \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (eventMessageParts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyEventTimeException(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            Event eventTask \u003d new Event(eventMessageParts[0], eventMessageParts[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            tasklist.addTask(eventTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d ui.printTaskAdd(eventTask, tasklist.numOfTasks());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyEventTimeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyEventException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new DukeTimeParseException(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 53
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a Findcommand which helps find the different tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a FindCommand object with a provided input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input The input that has been input by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    FindCommand(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Finds the task with the input provided."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasklist The list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param ui       The ui object that helps generate the different messgaes for display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String The message that is to be output on the GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyFindException If there is empty message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeNoMatchesExcpetion If there are no matches to the input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeEmptyFindException, DukeNoMatchesExcpetion {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String[] findParts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (findParts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyFindException(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message \u003d ui.printKeywordTasks(findParts[1], tasklist.getTasks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyFindException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeNoMatchesExcpetion e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assert tasklist.numOfTasks() \u003e 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 43
    }
  },
  {
    "path": "src/main/java/FindTagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a FindTagCommand which finds the tasks with the different tags."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class FindTagCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a FindTagCommand object with a provided input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input The input that has been input by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    FindTagCommand(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Finds the task with the input tag provided."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasklist The list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param ui       The ui object that helps generate the different messgaes for display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String The message that is to be output on the GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyFindTagException If there is empty message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeNoMatchesTagExcpetion If there are no matches to the input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeEmptyFindTagException, DukeNoMatchesTagExcpetion {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String[] findParts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (findParts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyFindTagException(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message \u003d ui.printFoundTagsTasks(findParts[1], tasklist.getTasks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyFindTagException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assert tasklist.numOfTasks() \u003e 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 41
    }
  },
  {
    "path": "src/main/java/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a helpCommand which genereates the help message."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a helpCommand object with a provided input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input The input that has been input by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    HelpCommand(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Generates the help message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasklist The list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param ui       The ui object that helps generate the different messgaes for display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String The message that is to be output on the GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeException If there are wrong eneteries."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"Welcome to the help list!!! Below are the list of commands that you can enter: \\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        message +\u003d \"1) To add a todo say \\\u0027todo \u003ctask description\u003e\\\u0027\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        message +\u003d \"2) To add a deadline say \\\u0027 deadline \u003ctask description\u003e /by \u003cdd-MM-yyyy HH:mm\u003e \\\u0027\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        message +\u003d \"3) To add an event say \\\u0027 event \u003ctask description\u003e /at \u003cdd-MM-yyyy HH:mm\u003e \\\u0027\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        message +\u003d \"4) To view your tasks list enter \\\u0027list\\\u0027\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        message +\u003d \"5) To find your tasks by keywords enter \\\u0027find \u003ckeyword\u003e\\\u0027\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        message +\u003d \"6) To find your tasks by tags enter \\\u0027findtag \u003ctag\u003e\\\u0027\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        message +\u003d \"7) To mark a task as done enter \\\u0027done \u003ctask number\u003e\\\u0027\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        message +\u003d \"8) To tag a task enter \\\u0027tag \u003ctask number\u003e \u003ctag\u003e\\\u0027\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 37
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 10
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a ListCommand which genereates the list of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a ListCommand object with a provided input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input The input that has been input by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    ListCommand(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Generates the list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasklist The list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param ui       The ui object that helps generate the different messgaes for display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String The message that is to be output on the GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyTaskListException If there is an empty tasklist."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeEmptyTaskListException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (tasklist.numOfTasks() \u003c 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyTaskListException(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d ui.printListOfTasks(tasklist.getTasks());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyTaskListException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 37
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            scene.getStylesheets().add(\"/view/Styles.css\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static void endDuke() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 35
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Creates the dialog container to store all the nodes related to it."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(\"Welcome to The Matrix Reloaded task keeper!\", dukeImage));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String response \u003d duke.run(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            Main.endDuke();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 57
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents a parser that parses the different user input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"bye\"."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"bye\"."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isBye(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.equals(TaskElement.BYE.label);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"list\"."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"list\"."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isList(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.equals(TaskElement.LIST.label);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Checks the input if there is command done present."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"done\"."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isDone(String input) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DONE.label);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Checks the input if there is command Todo present."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"Todo\"."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isToDo(String input) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.TODO.label);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Checks the input if there is command deadline present."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"deadline\"."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isDeadline(String input) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DEADLINE.label);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Checks the input if there is command event present."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"event\"."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isEvent(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.EVENT.label);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Checks the input if there is command delete present."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"delete\"."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isDelete(String input) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DELETE.label);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the remaining input to check for \"done\"."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"done\"."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseDone(String input) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DONE.label);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the remaining input to check for \"todo\"."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"todo\"."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseToDo(String input) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.TODO.label);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the remaining input to check for \"deadline\"."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"deadline\"."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseDeadline(String input) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DEADLINE.label);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the remaining input to check for \"event\"."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"event\"."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseEvent(String input) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.EVENT.label);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"delete\"."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"delete\"."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseDelete(String input) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DELETE.label);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Builds up a string ."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param arr   Array of the strings seperated."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param start Starting Index."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param end   Ending Index."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Returns the string that is built."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static String stringBuilder(String[] arr, int start, int end) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String store \u003d \"\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        for (int i \u003d start; i \u003c\u003d end; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (i \u003d\u003d end) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                store +\u003d arr[i];"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                store +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"find\"."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"find\"."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isFind(String input) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.FIND.label);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"tag\"."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"tag\"."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isTag(String input) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.TAG.label);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"findtag\"."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"findtag\"."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isFindTag(String input) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.FINDTAG.label);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"help\"."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"help\"."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isHelp(String input) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.HELP.label);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 187
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents a strorage systems that stores the input information"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The default relative path to the saving file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private static final String DEFAULT_PATH \u003d \"./data/duke.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Stores the path object with the default path."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs the storage class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Storage() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        path \u003d Paths.get(DEFAULT_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        File file \u003d new File(DEFAULT_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a Tasklist of the tasks that are present in the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Tasklist of the previous tasks that have been stored."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public TaskList load() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (!Files.exists(path) || !Files.isRegularFile(path)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return convertTextToTask(Files.readAllLines(path));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a Tasklist of the tasks that are present in the storage."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasklist Contains the list of all the tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Arraylist that will be coverted from a tasklist object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ArrayList\u003cString\u003e convertArrayToSaveFormat(TaskList tasklist) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ArrayList\u003cString\u003e strings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        for (Task tasks : tasklist.getTasks()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            strings.add(tasks.writeSaveFormat());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return strings;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Converts a list of strings to tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param lines lines of strings that represents the tasks."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Tasklist generated from the list of strings that have been given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public TaskList convertTextToTask(List\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            for (String line : lines) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                String[] currLine \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                Task currTask \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                if (currLine[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    currTask \u003d new ToDo(currLine[2]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    if (currLine.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        currTask.makeTag(currLine[3]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } else if (currLine[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    currTask \u003d new Deadline(currLine[2], currLine[3]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    if (currLine.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        currTask.makeTag(currLine[4]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } else if (currLine[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    currTask \u003d new Event(currLine[2], currLine[3]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    if (currLine.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        currTask.makeTag(currLine[4]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                if (currLine[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    currTask.markAsDone();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                tasks.addTask(currTask);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Saves the list of strings into the folder"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param strings Strings of the different tasks."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void save(ArrayList\u003cString\u003e strings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            Files.write(path, strings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 122
    }
  },
  {
    "path": "src/main/java/TagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a TagCommand which tags the different tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a TagCommand object with a provided input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input The input that has been input by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    TagCommand(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Tags the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasklist The list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param ui       The ui object that helps generate the different messgaes for display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String The message that is to be output on the GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyTagException If there is an empty tag message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeEmptyTagException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String[] tagCommand \u003d this.input.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (tagCommand.length \u003d\u003d 1 || tagCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new DukeEmptyTagException(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d ui.printTag(this.input, tasklist.getTasks());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 35
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents an Task reminder."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected String tagName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected boolean hasTag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a task object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param description The description of this task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.hasTag \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Marks if the task is done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String markAsDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return UI.printMarkAsDone(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Generates the string format for saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String format fro saving."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String writeSaveFormat() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String store \u003d \"D |\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            store +\u003d \" 1 |\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            store +\u003d \" 0 |\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        store +\u003d \" \" + this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (hasTag) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            store +\u003d \" | \" + this.tagName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Generates the tick and cross symbol."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String returns the string version of a tick and cross."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Generates the tag message."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String returns the tage message with the # infront."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String getTagDisplay() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (hasTag) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message +\u003d \" #\" + this.tagName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Generates the message of this task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String returns the message form of this task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + \" \" + description + getTagDisplay();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Checks wether the keyword is in the descrition."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param substring the string to be found."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return boolean if the keyword exists."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public boolean containsKeyword(String substring) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.description.contains(substring);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Makes the tag with the current tag name."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tagName Name of the tag."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void makeTag(String tagName) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.hasTag \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "munharsha": 100
    }
  },
  {
    "path": "src/main/java/TaskElement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that stores the differnt types of command constants."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public enum TaskElement {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    BYE(\"bye\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    TAG(\"tag\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    FIND(\"find\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    HELP(\"help\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    FINDTAG(\"findtag\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public final String label;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns the labels of the different constants."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input The input that has been input by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private TaskElement(String label) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 27
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that helps store the list of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a TaskList object that contains an arraylist of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns the list of tasks that is stored in the TaskList object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return ArrayList list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Adds a task into the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param task Current task that is to be added into the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param value Index of the task to be marked done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index that is provided is not valid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String markAsDone(int value) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d this.tasks.get(value).markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Deletes a task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param value Index of the task to be deleted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index that is provided is not valid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void deleteTask(int value) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            this.tasks.remove(value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return int Number of tasks in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public int numOfTasks() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns a task with the respective index."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param value Index of the task to be obtained."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Task Task to be obtained with the index."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Task getTask(int value) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.tasks.get(value);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 82
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a Todo task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a ToDo object with the specified description ."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param description The description of this event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns the String representation of this event for saving."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return The String representation of this event for saving."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String writeSaveFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return String.format(\"T | %d | %s | %s\", isDone ? 1 : 0, description, hasTag ? tagName : \"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns the String representation of this event for the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return The String representation of this event for the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 34
    }
  },
  {
    "path": "src/main/java/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a ToDoCommand which helps generate a ToDo task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a ToDoCommand object with a provided input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input The input that has been input by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    ToDoCommand(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Makes a ToDo event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasklist The list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param ui       The ui object that helps generate the different messgaes for display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String The message that is to be output on the GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyToDoException If there is a empty description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeEmptyToDoException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (input.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyToDoException(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String toDoMessage \u003d Parser.stringBuilder(input.split(\" \"), 1, input.split(\" \").length - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            ToDo todoTask \u003d new ToDo(toDoMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            tasklist.addTask(todoTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d ui.printTaskAdd(todoTask, tasklist.numOfTasks());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyToDoException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 40
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that generates all the messages for display on the GUI."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Prints the error message in the terminal."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param errorMessage Is the error message to be displayed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void printFormattedMessage(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * generates the bye message to GUI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String bye message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String printByeMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * generates the added task message to GUI."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param task      the task to be printed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param sizeStore index of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String added task message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String printTaskAdd(Task task, int sizeStore) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \\n\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"Now you have \" + String.valueOf(sizeStore) + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * generates the deleted task message to GUI."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param task      the task to be printed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param sizeStore index of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String added task message."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String printDeleteMessage(Task task, int sizeStore) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"Now you have \" + String.valueOf(sizeStore) + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * generates the list of tasks message to GUI."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasks the list of tasks to be printed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String list of tasks message."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String printListOfTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        int sizeStore \u003d tasks.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        for (int i \u003d 1; i \u003c sizeStore + 1; i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message +\u003d String.valueOf(i) + \".\" + tasks.get(i - 1).toString() + \"\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * generates the mark task done message to GUI."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param task the list of tasks to be printed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String  task description message."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static String printMarkAsDone(Task task) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * generates the tasks with the keyword message to GUI."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param substring the keyword that th user wnats to find."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasks     list of tasks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String list of tasks with keyword message."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeNoMatchesExcpetion If there no matches for the keyword."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String printKeywordTasks(String substring, ArrayList\u003cTask\u003e tasks) throws DukeNoMatchesExcpetion {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            ArrayList\u003cTask\u003e keywordTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                if (tasks.get(i).containsKeyword(substring)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    keywordTasks.add(tasks.get(i));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (keywordTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeNoMatchesExcpetion(\"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            int sizeStore \u003d keywordTasks.size();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            for (int i \u003d 1; i \u003c sizeStore + 1; i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message +\u003d String.valueOf(i) + \".\" + keywordTasks.get(i - 1).toString() + \"\\n\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeNoMatchesExcpetion e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * generates the task with tag message."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input input of the user"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String task with tag message."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String printTag(String input, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"Nice! I\u0027ve tagged this task with: \";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String[] commandSubstring \u003d input.split(\" \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            int index \u003d Integer.parseInt(commandSubstring[1]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (index \u003c 1 || index \u003e tasks.size()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeInvalidTagNumException(input);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                tasks.get(index - 1).makeTag(commandSubstring[2]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message +\u003d \"#\" + commandSubstring[2];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message +\u003d \"\\n\" + tasks.get(index - 1).toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeInvalidTagNumException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * generates the tasks with the tags message to GUI."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param substring the tags that the user wants to find."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasks     list of tasks."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String list of tasks with tags message."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String printFoundTagsTasks(String substring, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"Here are the matching tasks in your list with the tag:\\n\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            ArrayList\u003cTask\u003e keywordTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                if (tasks.get(i).getTagDisplay().contains(substring)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    keywordTasks.add(tasks.get(i));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (keywordTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeNoMatchesTagExcpetion(\"\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            int sizeStore \u003d keywordTasks.size();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            for (int i \u003d 1; i \u003c sizeStore + 1; i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message +\u003d String.valueOf(i) + \".\" + keywordTasks.get(i - 1).toString() + \"\\n\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeNoMatchesTagExcpetion e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 163
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" stylesheets\u003d\"@Styles.css\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" styleClass\u003d\"messageWindow\" graphicTextGap\u003d\"5\" textFill\u003d\"chartreuse\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003cFont name\u003d\"Trebuchet MS Bold\" size\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "      \u003cCircle fx:id\u003d\"displayPicture\" accessibleRole\u003d\"IMAGE_VIEW\" fill\u003d\"DODGERBLUE\" radius\u003d\"100.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "munharsha": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\"  prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\" stylesheets\u003d\"@Styles.css\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" styleClass\u003d\"sendButton\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" styleClass\u003d\"borderBackground\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" styleClass\u003d\"mainBackground\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "munharsha": 19
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testEventWriteSaveFormat() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Event eventTask \u003d new Event(\"project meeting\", \"01-01-2020 12:30\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String actualFormat \u003d \"E | 0 | project meeting | 01-01-2020 12:30 | \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(actualFormat, eventTask.writeSaveFormat());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testCreateEvent() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Event eventTask \u003d new Event(\"project meeting\", \"01-01-2020 12:30\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String actualFormat \u003d \"[E][\\u2718] project meeting (at: 1 Jan 2020, 12:30 PM)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(actualFormat, eventTask.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 20
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testToDoWriteSaveFormat() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ToDo toDoTask \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String actualFormat \u003d \"T | 0 | read book | \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(actualFormat, toDoTask.writeSaveFormat());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testCreateToDo() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ToDo toDoTask \u003d new ToDo(\"run\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String actualFormat \u003d \"[T][\\u2718] run\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(actualFormat, toDoTask.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 21
    }
  },
  {
    "path": "src/test/java/UITest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "class UITest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testByeMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        UI ui \u003d new UI();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(ui.printByeMessage(), \"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testPrintMarkAsDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ToDo toDoTask \u003d new ToDo(\"run\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        toDoTask.markAsDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(UI.printMarkAsDone(toDoTask), \"Nice! I\u0027ve marked this task as done:\\n[T][\\u2713] run\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testKeywordTasks() throws DukeNoMatchesExcpetion {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        UI ui \u003d new UI();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ToDo toDoEvent \u003d new ToDo(\"run\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        tasks.add(toDoEvent);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String actual \u003d \"Here are the matching tasks in your list:\\n\" + \"1.[T][\\u2718] run\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(actual, ui.printKeywordTasks(\"run\", tasks));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testPrintTag() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        UI ui \u003d new UI();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ToDo toDoEvent \u003d new ToDo(\"run\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        toDoEvent.makeTag(\"lol\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        tasks.add(toDoEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String actual \u003d \"Nice! I\u0027ve tagged this task with: \" + \"#lol\\n\" + \"[T][\\u2718] run #lol\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(actual , ui.printTag(\"tag 1 lol\", tasks));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 46
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "blah"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "deadline return book /by 23-02-2020 00:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "deadline return book /by 123456789"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "event project meeting"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "event project meeting /at 01-01-2020 12:30"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "event project meeting /at hello"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    rm help.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "munharsha": 4,
      "-": 36
    }
  }
]
