[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 6,
      "-": 44
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "T | 0 | yo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "T | 0 | ded"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "T | 0 | haha"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "T | 0 | yey"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "T | 0 | what"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 5
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs Duke bot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param filePath File path containing data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            tasks \u003d new TaskList(Storage.readFile());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            this.ui.showLoadingError();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            io.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Runs the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        new Duke(\"tasks.txt\").run();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Runs the Duke bot."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        //storage.showData();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 60
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.command.ShowCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.WrongInputException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the command based on user\u0027s input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param command User\u0027s input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return Corresponding command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @throws DukeException If user\u0027s input is not compatible to any command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            String[] cmd \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            String firstWord \u003d cmd[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            if (cmd.length \u003c 2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                if (firstWord.equals(\"list\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    return new ListCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else if (firstWord.equals(\"bye\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    return new ExitCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    throw new WrongInputException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String taskDetails \u003d removeFirstWord(command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                if (firstWord.equals(\"done\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    return new DoneCommand(taskDetails);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else if (firstWord.equals(\"todo\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    return new TodoCommand(taskDetails);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else if (firstWord.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    return new DeadlineCommand(taskDetails);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else if (firstWord.equals(\"event\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    return new EventCommand(taskDetails);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else if (firstWord.equals(\"delete\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    return new DeleteCommand(taskDetails);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else if (firstWord.equals(\"show\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    return new ShowCommand(taskDetails);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else if (firstWord.equals(\"find\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    return new FindCommand(taskDetails);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    throw new WrongInputException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DukeException exc) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(\"Error!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            throw new DukeException(exc.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the task details by removing the command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param command User\u0027s input."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return task details containing the description, date, and time."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @throws DukeException if the command consists of only one word."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private static String removeFirstWord(String command) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            String[] cmd \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return cmd[1];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 92
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.CalendarException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.StorageException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private static String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    //private TaskList taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        Storage.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Reads the file from hard disk."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return List containing the parsed data from file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @throws IOException   If file cannot be read or found."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @throws DukeException If there is incorrect format in the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public static List\u003cTask\u003e readFile() throws IOException, DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        Path folder \u003d Path.of(\"data\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        Path file \u003d folder.resolve(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        //Create a new directory by creating all parent directories first"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        Files.createDirectories(folder);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        //if user is new and file does not exist, create the file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Files.createFile(file);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        //read from file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        BufferedReader reader \u003d Files.newBufferedReader(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e(); //this does not update this.todos"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        String currentLine;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        while ((currentLine \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                System.out.println(currentLine);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                Task task \u003d parseData(currentLine);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            } catch (StorageException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            } catch (DukeException d) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Formats the data to more readable format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param line String to be parsed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return parsed Task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @throws DukeException If there is incorrect data format."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private static Task parseData(String line) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            String[] parsed \u003d line.split(\"\\\\s\\\\|\\\\s\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            if (parsed.length \u003c 2) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                throw new StorageException(line + \"is in invalid format.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String identifier \u003d parsed[0]; //get the type of duke.task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String doneIndicator \u003d parsed[1];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String taskName \u003d parsed[2];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                if (identifier.equals(\"T\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    if (doneIndicator.equals(\"1\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        task \u003d new Todo(taskName, true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        task \u003d new Todo(taskName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else if (identifier.equals(\"E\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    //String dateAndTime \u003d parsed[3];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    String date \u003d parsed[3];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    //String[] dateTime \u003d dateString.split(\"\\\\s\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    //String date \u003d dateTime[0];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    LocalDate localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    if (parsed.length \u003c 5) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        if (doneIndicator.equals(\"1\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            task \u003d new Event(taskName, true, localDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            task \u003d new Event(taskName, localDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        String time \u003d parsed[4];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        String[] startEndTime \u003d time.split(\"-\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        String startTime \u003d startEndTime[0];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        LocalTime localStartTime \u003d LocalTime.parse(startTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        if (startEndTime.length \u003c 2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            if (doneIndicator.equals(\"1\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                                task \u003d new Event(taskName, true, localDate, localStartTime);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                                task \u003d new Event(taskName, false, localDate, localStartTime);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            String endTime \u003d startEndTime[1];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            LocalTime localEndTime \u003d LocalTime.parse(endTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            if (doneIndicator.equals(\"1\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                                task \u003d new Event(taskName,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                                    true, localDate, localStartTime, localEndTime);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                                task \u003d new Event(taskName,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                                    false, localDate, localStartTime, localEndTime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else if (identifier.equals(\"D\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    //String dateAndTime \u003d parsed[3];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    String date \u003d parsed[3];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    //String[] dateTime \u003d dateAndTime.split(\" \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    //String date \u003d dateTime[0];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    LocalDate localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    if (parsed.length \u003c 5) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        if (doneIndicator.equals(\"1\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            task \u003d new Deadline(taskName, true, localDate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            task \u003d new Deadline(taskName, localDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        String time \u003d parsed[4];"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        LocalTime localTime \u003d LocalTime.parse(time);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        if (doneIndicator.equals(\"1\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            task \u003d new Deadline(taskName, true, localDate, localTime);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            task \u003d new Deadline(taskName, false, localDate, localTime);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    throw new StorageException(\"Invalid format. Moving on to the next task.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            throw new CalendarException(\"Please input the correct date and time format. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + \"YYYY-MM-DD for date and HH:MM for time.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Updates the data in the file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param tasks List containing all the updated tasks."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public static void updateData(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            BufferedWriter writer \u003d Files.newBufferedWriter(Path.of(\"data/tasks.txt\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String type \u003d task.getType();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                Boolean status \u003d task.getStatus();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String taskName \u003d task.getDescription();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String stored \u003d \"\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    stored \u003d String.format(\"%s | %d | %s\", type, status ? 1 : 0, taskName);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    LocalDate date \u003d event.getDate();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    LocalTime startTime \u003d event.getStartTime();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    LocalTime endTime \u003d event.getEndTime();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    if (startTime \u003d\u003d null \u0026\u0026 endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        stored \u003d String.format("
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            \"%s | %d | %s | %s\", type, status ? 1 : 0, taskName, date);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    } else if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        stored \u003d String.format(\"%s | %d | %s | %s | %s\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            type, status ? 1 : 0, taskName, date, startTime);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        stored \u003d String.format(\"%s | %d | %s | %s | %s-%s\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            type, status ? 1 : 0, taskName, date, startTime, endTime);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    LocalDate date \u003d deadline.getDeadline();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    LocalTime time \u003d deadline.getTime();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        stored \u003d String.format(\"%s | %d | %s | %s\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            type, status ? 1 : 0, taskName, date);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        stored \u003d String.format(\"%s | %d | %s | %s | %s\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            type, status ? 1 : 0, taskName, date, time);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                writer.write(stored);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                writer.newLine();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 226
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.CalendarException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DeleteException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DoneException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Lists all the tasks in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void listItems() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (this.tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(\"You don\u0027t have any task in your list.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            StringBuilder todoList \u003d new StringBuilder(\"Here are the task(s) in your list: \\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            int num \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            for (Task item : this.tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                todoList.append(num + \". \" + item.toString() + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                num++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(todoList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Deletes a task based on the corresponding number."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param index Index of the list containing the task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @throws DeleteException If the index \u003c 0 or more than the size."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void deleteTask(int index) throws DeleteException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (index \u003c 0 || index \u003e tasks.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            throw new DeleteException(\"Please enter a valid task number.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Task task \u003d this.tasks.get(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            this.tasks.remove(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Storage.updateData(this.tasks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task for you: \\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + \"Now you have \" + this.tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Saves the task to the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param task Task to save to the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void saveToList(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        System.out.println(\"Okay~ I\u0027ve added this task: \\n\" + task.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        System.out.println(\"Now you have \" + this.tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the task corresponding to the task number."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskNum Task number of the task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return The task corresponding to the task number."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Task getTask(int taskNum) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this.tasks.get(taskNum - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Marks the task corresponding to the task number as done."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskNum Task number of the task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @throws DoneException If the index \u003c 0 or more than the size."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void markTaskAsDone(int taskNum) throws DoneException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (taskNum \u003c\u003d 0 || taskNum \u003e tasks.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            throw new DoneException(\"Please enter a valid task number.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            int index \u003d taskNum - 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Task oldTask \u003d this.tasks.get(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Task newTask \u003d oldTask.markAsDone();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            this.tasks.remove(oldTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            this.tasks.add(index, newTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Storage.updateData(this.tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(\"YAYY! I\u0027ve marked this task as done : \\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + newTask.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Shows the all task(s) on the input day."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param date Date to show."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @throws CalendarException If the date input is in invalid format."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void showDate(String date) throws CalendarException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            LocalDate localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Boolean hasSomething \u003d false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(\"Task(s) on : \" + localDate.getDayOfWeek() + \", \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            for (Task task : this.tasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String type \u003d task.getType();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    LocalDate eventDate \u003d event.getDate();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    if (eventDate.equals(localDate)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        hasSomething \u003d true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        System.out.println(task);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    LocalDate deadlineDate \u003d deadline.getDeadline();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    if (deadlineDate.equals(localDate)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        hasSomething \u003d true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        System.out.println(task);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            if (!hasSomething) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                System.out.println(\"You have nothing to do on this day!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            throw new CalendarException(\"Invalid input date format. Please try again.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns all the tasks in the list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return List containing all of the tasks."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 154
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Shows greetings when user starts the bot."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        String donLogo \u003d \"   ___     ___    _  _     ___     ___ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            + \"  |   \\\\   / _ \\\\  | \\\\| |   / __|   / _ \\\\  \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            + \"  | |) | | (_) | | .` |  | (_ |  | (_) | \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            + \"  |___/   \\\\___/  |_|\\\\_|   \\\\___|   \\\\___/  \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            + \"_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"| \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            + \"\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027 \\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        String msg \u003d \"Hola! I\u0027m Dongo :) \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            + \"How can I help you?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        System.out.println(donLogo + \"\\n\" + msg);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Shows the loading error if"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * there is a problem in loading the bot."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        System.out.println(\"Unable to load.... Try again later.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Reads user\u0027s command from Scanner."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return user\u0027s command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Exits the bot and shows bye message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        System.out.println(\"Time to say goodbye :( \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            + \"Have a great day!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Shows pretty line before and after every output."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            \"\\n__̴ı̴̴̡̡̡ ̡͌l̡̡̡ ̡͌l̡*̡̡ ̴̡ı̴̴̡ ̡̡͡|̲̲̲͡͡͡ ̲▫̲͡ \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + \"̲̲̲͡͡π̲̲͡͡ ̲̲͡▫̲̲͡͡ ̲|̡̡̡ ̡ ̴̡ı̴̡̡ ̡͌l̡̡̡̡.___\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            + \"__̴ı̴̴̡̡̡ ̡͌l̡̡̡ ̡͌l̡*̡̡ ̴̡ı̴̴̡ ̡̡͡|̲̲̲͡͡͡ ̲▫̲͡ \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + \"̲̲̲͡͡π̲̲͡͡ ̲̲͡▫̲̲͡͡ ̲|̡̡̡ ̡ ̴̡ı̴̡̡ ̡͌l̡̡̡̡.__\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Shows error message."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param msg Error message."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void showError(String msg) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 71
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    protected String task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    protected Boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param task Task description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Command(String task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param task Task description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param isExit Exit indicator."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Command(String task, Boolean isExit) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param isExit Exit indicator."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Command(Boolean isExit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.task \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.task \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Determines whether the bot should exit or not."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return true if the command is \"exit\" and false otherwise."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Executes the user\u0027s command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns this command object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return this command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 71
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.CalendarException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DeadlineException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public DeadlineCommand(String task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Executes any command corresponding to Deadline keyword."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            processDeadline(this.task, taskList, ui, storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DeadlineException dead) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(dead.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Processes all the deadline command to determine the correct output."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param theRest  Parsed string containing task details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List containing all the task(s)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @throws DeadlineException If user\u0027s input is incomplete or in the wrong format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void processDeadline("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        String theRest, TaskList taskList, Ui ui, Storage storage) throws DeadlineException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            String[] taskAndDeadlineAndTime \u003d theRest.split(\" /by \", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Deadline deadline;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String task \u003d taskAndDeadlineAndTime[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String dateAndTime \u003d taskAndDeadlineAndTime[1];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String[] dateTime \u003d dateAndTime.split(\" \", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String date \u003d dateTime[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    LocalDate localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    if (dateTime.length \u003c 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        deadline \u003d new Deadline(task, localDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        String time \u003d dateTime[1];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        LocalTime localTime \u003d LocalTime.parse(time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        deadline \u003d new Deadline(task, false, localDate, localTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    taskList.saveToList(deadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    Storage.updateData(taskList.getTasks());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    throw new CalendarException(\"Please enter the date in YYYY/MM/DD format and time in HH:MM format.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                throw new DeadlineException(\"Please specify the task and deadline.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            throw new DeadlineException(\"Please specify the task and deadline.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Evaluates whether this and other object if this and"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * other object is the same or of the same type and task details."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param other Other object to compare."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return True if this object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } else if (other instanceof DeadlineCommand) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            DeadlineCommand deadlineCommand \u003d (DeadlineCommand) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return this.task.equals(deadlineCommand.getTask());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 100
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DeleteException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public DeleteCommand(String task) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Processes all the delete command to determine the correct output."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            processDelete(this.task, taskList, ui, storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DeleteException d) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Processes all the deadline command to determine the correct output."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param theRest  Parsed string containing task details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List containing all the task(s)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @throws DeleteException If user\u0027s input is incomplete or in the wrong format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void processDelete("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        String theRest, TaskList taskList, Ui ui, Storage storage) throws DeleteException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Integer taskNum \u003d Integer.parseInt(theRest);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            int index \u003d taskNum - 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            taskList.deleteTask(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Storage.updateData(taskList.getTasks());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            throw new DeleteException(\"Please enter a number. I cannot delete nothing :(\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Evaluates whether this and other object if this and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * other object is the same or of the same type and task details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param other Other object to compare."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return True if this object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } else if (other instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            DeleteCommand deleteCommand \u003d (DeleteCommand) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return this.task.equals(deleteCommand.getTask());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 69
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DoneException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public DoneCommand(String task) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Processes all the done command to determine the correct output."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            processDone(this.task, taskList, ui, storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DoneException done) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(done.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Processes all the done command to determine the correct output."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param theRest  Parsed string containing task details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List containing all the task(s)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @throws DoneException If user\u0027s input is incomplete or in the wrong format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void processDone("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        String theRest, TaskList taskList, Ui ui, Storage storage) throws DoneException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Integer taskNum \u003d Integer.parseInt(theRest);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            taskList.markTaskAsDone(taskNum);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Storage.updateData(taskList.getTasks());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            throw new DoneException(\"Please enter a valid task number\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Evaluates whether this and other object if this and"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * other object is the same or of the same type and task details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param other Other object to compare."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return True if this object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } else if (other instanceof DoneCommand) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            DoneCommand doneCommand \u003d (DoneCommand) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return this.task.equals(doneCommand.getTask());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 67
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.EventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public EventCommand(String task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Processes all the done command to determine the correct output."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            processEvent(this.task, taskList, ui, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (EventException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Processes all the event command to determine the correct output."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param theRest  Parsed string containing task details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List containing all the task(s)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @throws EventException If user\u0027s input is incomplete or in the wrong format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void processEvent("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        String theRest, TaskList taskList, Ui ui, Storage storage) throws EventException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            String[] eventAndDateAndTime \u003d theRest.split(\" /at \", 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Event event;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String eventDesc \u003d eventAndDateAndTime[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String eventDateAndTime \u003d eventAndDateAndTime[1];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String[] dateTime \u003d eventDateAndTime.split(\" \", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                String date \u003d dateTime[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    LocalDate localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    if (dateTime.length \u003c 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        event \u003d new Event(eventDesc, localDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        String time \u003d dateTime[1];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        String[] startEndTime \u003d time.split(\"-\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        if (startEndTime.length \u003c 2) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            String startTime \u003d startEndTime[0];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            LocalTime localTime \u003d LocalTime.parse(startTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            event \u003d new Event(eventDesc, false, localDate, localTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            String startTime \u003d startEndTime[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            String endTime \u003d startEndTime[1];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            LocalTime localStartTime \u003d LocalTime.parse(startTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            LocalTime localEndTime \u003d LocalTime.parse(endTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                            event \u003d new Event(eventDesc, false,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                                localDate, localStartTime, localEndTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    taskList.saveToList(event);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    Storage.updateData(taskList.getTasks());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                    System.out.println("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                        \"Please enter the date in YYYY/MM/DD format and time in HH:MM format.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                throw new EventException(\"Please specify the event name and date.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            throw new EventException(\"Please specify the event name and date.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Evaluates whether this and other object if this and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * other object is the same or of the same type and task details."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param other Other object to compare."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return True if this object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } else if (other instanceof EventCommand) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            EventCommand eventCommand \u003d (EventCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return this.task.equals(eventCommand.getTask());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 114
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Processes the exit command to exit the bot."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        processBye(ui);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Exits the bot."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui UI to show the goodbye message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void processBye(Ui ui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        ui.bye();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 32
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.FindException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public FindCommand(String task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            processFind(this.task, taskList, ui, storage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (FindException find) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(find.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void processFind(String toFind, TaskList taskList, Ui ui, Storage storage) throws FindException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        findTask(toFind, taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } else if (other instanceof FindCommand) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            FindCommand findCommand \u003d (FindCommand) other;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return this.task.equals(findCommand.getTask());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private List\u003cTask\u003e findTask(String toFind, TaskList taskList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        //try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        List\u003cTask\u003e tasksFound \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        int num \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        System.out.println(\"Here are the matching task(s) in your list : \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            if (task.getDescription().contains(toFind)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                tasksFound.add(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                System.out.println(num + \". \" + task.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (tasksFound.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(\"Nothing match this keyword. \\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + \"Please try again with another keyword.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return tasksFound;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 64
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Processes the list command to list all the task(s) in the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        //try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        processList(taskList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Calls the TaskList to list all the task(s)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList TaskList that stores the list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void processList(TaskList taskList) { //throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        //try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        taskList.listItems();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        //} catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        //    throw new DukeException(\"Please input a valid number.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 36
    }
  },
  {
    "path": "src/main/java/duke/command/ShowCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.CalendarException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public ShowCommand(String task) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Processes the show command to show all the task(s) on that day."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            processShow(this.task, taskList, ui, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (CalendarException cal) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(cal.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Calls the TaskList to show all the task(s) on that day."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param date     Queried date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList TaskList containing the tasks list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @throws CalendarException If the date is in incorrect format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void processShow("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        String date, TaskList taskList, Ui ui, Storage storage) throws CalendarException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        taskList.showDate(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Evaluates whether this and other object if this and"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * other object is the same or of the same type and task details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param other Other object to compare."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return True if this object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } else if (other instanceof ShowCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            ShowCommand showCommand \u003d (ShowCommand) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return this.task.equals(showCommand.getTask());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 59
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public TodoCommand(String task) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Executes any command corresponding to Todo keyword."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        processTodo(this.task, taskList, ui, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Processes all the todo command to determine the correct output."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param theRest  Parsed string containing task details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param taskList List containing all the task(s)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param ui       UI of the bot"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param storage  Storage managing the file in hard disk."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void processTodo(String theRest, TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        Todo todo \u003d new Todo(theRest);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        taskList.saveToList(todo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        Storage.updateData(taskList.getTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Evaluates whether this and other object if this and"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * other object is the same or of the same type and task details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param other Other object to compare."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return True if this object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } else if (other instanceof TodoCommand) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            TodoCommand todoCommand \u003d (TodoCommand) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return this.task.equals(todoCommand.getTask());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 54
    }
  },
  {
    "path": "src/main/java/duke/exception/CalendarException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class CalendarException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs the calendar exception"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * for invalid format of date and time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param msg Error message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public CalendarException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class DeadlineException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs the deadline exception for invalid details."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param msg Error message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public DeadlineException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/DeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class DeleteException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs the delete exception for invalid details."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param msg Error message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public DeleteException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class DoneException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs the done exception for invalid details."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param msg Error message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public DoneException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs the Duke Exception."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param msg Error message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class EventException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs the event exception for invalid details."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param msg Error message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public EventException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/FindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class FindException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public FindException(String msg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/StorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class StorageException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs the storage exception for error found in accessing the file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param msg Error message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public StorageException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/TodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class TodoException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs the todo exception for invalid details."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public TodoException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(\"Please specify what do you want to do~\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/WrongInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class WrongInputException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs the exception for invalid input or command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public WrongInputException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(\"Please enter a valid command.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 11
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private LocalDate deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs deadline object with"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * description and date that is not done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param deadline    Deadline date of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Deadline(String description, LocalDate deadline) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs deadline object with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * description, date, and time that is not done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param deadline    Deadline date of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param time        Deadline time of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Deadline(String description, LocalDate deadline, LocalTime time) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs deadline object with description and date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs a done object if isDone is true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * and not done object otherwise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param isDone      Indicates whether a task is done or not."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param deadline    Deadline date of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Deadline(String description, Boolean isDone, LocalDate deadline) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs deadline object with description, date, and time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs a done object if isDone is true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * and not done object otherwise."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param isDone      Indicates whether a task is done or not."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param deadline    Deadline date of the task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param time        Deadline time of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Deadline(String description, Boolean isDone, LocalDate deadline, LocalTime time) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns D to mark this as a deadline object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return D in string."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the date of this deadline."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return Deadline date in LocalDate."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public LocalDate getDeadline() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the time of this deadline if it exists."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return Deadline time in LocalTime."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the string representation of this deadline object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return String object of this deadline."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this.time !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            ? \"[\" + this.getType() + \"]\" + this.getStatusIcon() + \" \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            + this.description + \" (by:\" + this.deadline.format("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            + \" \" + this.time.format(DateTimeFormatter.ISO_LOCAL_TIME) + \")\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            : \"[\" + this.getType() + \"]\" + this.getStatusIcon() + \" \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            + this.description + \" (by:\" + this.deadline.format("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Mark this deadline as done."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return Done version of this deadline task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Deadline markAsDone() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        //int index \u003d taskNum - 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (!this.isDone) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Deadline newTask \u003d new Deadline(this.getDescription(), true, this.deadline, this.time);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return newTask;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 120
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs deadline object with"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * description and date that is not done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param date        Event date of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Event(String description, LocalDate date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.startTime \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.endTime \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs event object with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * description, date, and start time that is not done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param date        Event date of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param startTime   Start time of this event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Event(String description, LocalDate date, LocalTime startTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.endTime \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs event object with description, date,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * start time, and end time that is not done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param date        Event date of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param startTime   Start time of this event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param endTime     End time of this event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Event(String description, LocalDate date, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs event object with description and date."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs a done object if isDone is true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * and not done object otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param isDone      Indicates whether this task is done or not."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param date        Event date of the task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Event(String description, Boolean isDone, LocalDate date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.startTime \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.endTime \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs event object with description and date."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs a done object if isDone is true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * and not done object otherwise."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param isDone      Indicates whether this task is done or not."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param date        Event date of the task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param startTime   Start time of this event."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Event(String description, Boolean isDone, LocalDate date, LocalTime startTime) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.endTime \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs event object with description and date."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs a done object if isDone is true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * and not done object otherwise."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param isDone      Indicates whether this task is done or not."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param date        Event date of the task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param startTime   Start time of this event."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param endTime     End time of this event."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Event(String description, Boolean isDone,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                 LocalDate date, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns E to mark this as an event object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return E in string."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the date of this event."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return Event date in LocalDate."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the start time of this event if it exists."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return Event start time in LocalTime."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the end time of this event if it exists."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return Deadline time in LocalTime."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the string representation of this event object."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return String object of this event."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (this.startTime !\u003d null \u0026\u0026 this.endTime !\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return \"[\" + this.getType() + \"]\" + this.getStatusIcon() + \" \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + this.description + \" (at:\" + this.date.format("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + \" \" + this.startTime.format(DateTimeFormatter.ISO_LOCAL_TIME)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + \" - \" + this.endTime.format(DateTimeFormatter.ISO_LOCAL_TIME) + \")\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } else if (this.startTime !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return \"[\" + this.getType() + \"]\" + this.getStatusIcon() + \" \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + this.description + \" (at:\" + this.date.format("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + \" \" + this.startTime.format(DateTimeFormatter.ISO_LOCAL_TIME) + \")\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return \"[\" + this.getType() + \"]\" + this.getStatusIcon() + \" \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                + this.description + \" (at:\" + this.date.format("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Mark this event as done."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return Done version of this event task."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Event markAsDone() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        //int index \u003d taskNum - 1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (!this.isDone) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Event newTask \u003d new Event(this.getDescription(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                true, this.date, this.startTime, this.endTime);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return newTask;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 178
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param description Task description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Constructs task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param description Task description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @param isDone Done indicator."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Task(String description, Boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the status of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return A tick sign if the task is done and a cross otherwise."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return (isDone ? \"[\" + \"\\u2713\" + \"]\" : \"[\" + \"\\u2718\" + \"]\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the type of the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return E for event, T for todo, D for deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the task decription."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return Description of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Get status of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return True if the task is done and false otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Boolean getStatus() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Mark this task as done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return Done version of the old task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public abstract Task markAsDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns string representation of this task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return String object of this task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 69
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Todo(String description, Boolean isDone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns T to mark this as a todo object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return T in string."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Returns the string representation of this deadline object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return String object of this deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return \"[\" + this.getType() + \"]\" + this.getStatusIcon() + \" \" + this.description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * Mark this task as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     * @return Done version of the old task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public Todo markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        //int index \u003d taskNum - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        if (!this.isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Todo newTask \u003d new Todo(this.getDescription(), true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            return newTask;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 43
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private Task todo \u003d new Todo(\"test1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private LocalDate today \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private LocalDate tmr \u003d LocalDate.parse(\"2020-08-25\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private LocalTime startTime \u003d LocalTime.parse(\"12:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private LocalTime endTime \u003d LocalTime.parse(\"14:00\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private LocalTime time \u003d LocalTime.parse(\"09:00\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private Task event \u003d new Event(\"test2\", today, startTime, endTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private Task deadline \u003d new Deadline(\"test3\", tmr, time);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    private TaskList createTaskList(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        return new TaskList(list);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void todoTest() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        taskList \u003d createTaskList(todo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        assertEquals(todo.toString(), taskList.getTask(1).toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void eventTest() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        taskList \u003d createTaskList(event);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        assertEquals(event.toString(), taskList.getTask(1).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void deadlineTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        taskList \u003d createTaskList(deadline);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        assertEquals(deadline.toString(), taskList.getTask(1).toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 57
    }
  },
  {
    "path": "src/test/java/duke/command/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.CalendarException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DeadlineException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.EventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.exception.TodoException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void commandTest1() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Command command \u003d new TodoCommand(\"test1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            assertEquals(command, Parser.parse(\"todo test1\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DukeException t) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            TodoException todoExc \u003d new TodoException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            assertEquals(todoExc.getMessage(), t.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void commandTest2() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            DeadlineCommand command \u003d new DeadlineCommand(\"test2 /by 2020-09-08 16:00\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            assertEquals(command, Parser.parse(\"deadline test2 /by 2020-09-08 16:00\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (CalendarException c) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            CalendarException calendarExc \u003d new CalendarException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                \"Please enter the date in YYYY/MM/DD format and time in HH:MM format.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            assertEquals(calendarExc.getMessage(), c.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DeadlineException t) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            DeadlineException deadlineExc \u003d new DeadlineException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                \"Please specify the task and deadline.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            assertEquals(deadlineExc.getMessage(), t.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void commandTest3() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            EventCommand command \u003d new EventCommand(\"test3 /at 2020-09-01 16:00-19:00\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            assertEquals(command, Parser.parse(\"event test3 /at 2020-09-01 16:00-19:00\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (CalendarException c) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            CalendarException calendarExc \u003d new CalendarException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "                \"Please enter the date in YYYY/MM/DD format and time in HH:MM format.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            assertEquals(calendarExc.getMessage(), c.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (EventException t) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            EventException eventExc \u003d new EventException(\"Please specify the event name and date.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            assertEquals(eventExc.getMessage(), t.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 61
    }
  },
  {
    "path": "src/test/java/duke/exception/ExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class ExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void exceptionTest1() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        assertThrows(WrongInputException.class, () -\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Parser.parse(\"hehe\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void exceptionTest2() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "            Parser.parse(\"todo \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 23
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "todo read"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "deadline math homework /by Monday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "deadline cs homework /by Tuesday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "deadline sci homework /by Wednesday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "event pillow party /at 9th August 2020"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "event funeral /at 8th August 2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "event eat /at 10th August 2020"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\Duke.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florenciamartina"
        },
        "content": "java -classpath ..\\bin main.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "florenciamartina": 4,
      "-": 19
    }
  }
]
