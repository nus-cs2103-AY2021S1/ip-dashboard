[
  {
    "path": "data/task.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "T|false|123"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "D|false|123|hey"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "T|true|123"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 3
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    protected LocalDateTime dateEnd;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public Deadline(String description, LocalDateTime dateEnd) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.dateEnd \u003d dateEnd;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return dateEnd.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return String.format(\"%s (by: %s)\", super.toString(), dateEnd.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 26
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.nio.file.FileSystems;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static List\u003cTask\u003e toDoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        welcomeMessage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String inputLine \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        while (!inputLine.equals(\"bye\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            String[] arr \u003d inputLine.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            if (inputLine.equals(\"list\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                displayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            else if (inputLine.equals(\"save\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                hrTag();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                saveData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                hrTag();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            else if (arr.length \u003d\u003d 2 \u0026\u0026 (arr[0].equals(\"done\") || arr[0].equals(\"delete\")) \u0026\u0026 isInteger(arr[1])) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                int num \u003d Integer.parseInt(arr[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    if (num \u003c 1 || num \u003e toDoList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        throw new InvalidRangeError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    if (arr[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        doneTask(num);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    else if (arr[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        deleteTask(num);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                catch (DukeError e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    hrTag();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    hrTag();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    switch (arr[0]) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        case \"todo\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            String todo \u003d inputLine.substring(4).trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            if (todo.equals(\"\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                throw new EmptyTaskError();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                addTask(new ToDo(todo));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        case \"deadline\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            int by \u003d inputLine.indexOf(\"/by\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            String deadline, byDate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            if (by \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                deadline \u003d inputLine.substring(8).trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                byDate \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                deadline \u003d inputLine.substring(8, by).trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                byDate \u003d inputLine.substring(by + 3).trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            if (deadline.equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                throw new EmptyTaskError();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            } else if (byDate.equals(\"\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                throw new EmptyDateError();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                addTask(new Deadline(deadline, formatDateTime(byDate)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        case \"event\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            int at \u003d inputLine.indexOf(\"/at\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            String event, atDate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            if (at \u003d\u003d -1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                event \u003d inputLine.substring(5).trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                atDate \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                event \u003d inputLine.substring(5, at).trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                atDate \u003d inputLine.substring(at + 3).trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            if (event.equals(\"\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                throw new EmptyTaskError();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            } else if (atDate.equals(\"\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                throw new EmptyDateError();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                addTask(new Event(event, formatDateTime(atDate)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            throw new UnknownCommandError();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                catch (DukeError e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    hrTag();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    hrTag();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    hrTag();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    System.out.println(\"Invalid date entered!\\nPlease enter the following format! dd/mm/yyyy HH:MM\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    hrTag();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            inputLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        goodbyeMessage();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public static void hrTag() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static LocalDateTime formatDateTime(String s) throws InvalidDateInputError {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String[] dateAndTime \u003d s.split(\" \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (dateAndTime.length !\u003d 2) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            throw new InvalidDateInputError();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String beforeDate \u003d dateAndTime[0];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String[] arrDate \u003d beforeDate.split(\"/\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (arrDate[0].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            beforeDate \u003d \"0\".concat(beforeDate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (arrDate[1].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            beforeDate \u003d String.format(\"%s/0%s/%s\", beforeDate.substring(0, 2),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    arrDate[1], arrDate[2]);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String beforeTime \u003d dateAndTime[1];"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (beforeTime.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            beforeTime \u003d beforeTime.substring(0, 2) + \":\" + beforeTime.substring(2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        String after \u003d beforeDate + \" \" + beforeTime;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return LocalDateTime.parse(after, dateFormatter);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static void welcomeMessage() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        hrTag();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        System.out.println(\"Hello! I am your mother!\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        readData();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        hrTag();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static void readData() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        Path path \u003d FileSystems.getDefault().getPath(\"data\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (Files.exists(path)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                File data \u003d new File(\"data/task.txt\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                Scanner scanner \u003d new Scanner(data);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                System.out.println(\"Fetching old data...\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    String s \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    String[] str \u003d s.split(\"\\\\|\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    switch (str[0]) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        case \"T\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            ToDo toDo \u003d new ToDo(str[2]);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            if (str[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                toDo.markAsDone();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            toDoList.add(toDo);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            Deadline deadline \u003d new Deadline(str[2], LocalDateTime.parse(str[3], dateFormatter));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            if (str[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                deadline.markAsDone();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            toDoList.add(deadline);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            Event event \u003d new Event(str[2], LocalDateTime.parse(str[3], dateFormatter));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            if (str[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                                event.markAsDone();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            toDoList.add(event);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                            throw new IOException();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                System.out.println(\"Data successfully read. ^^\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                scanner.close();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                System.out.println(\"Uh oh! An error has occurred. T_T\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static void addTask(Task task) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        hrTag();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            if (task.getDescription().contains(\"|\") || task.getDate().contains(\"|\")) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                throw new IllegalCharacterError();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            toDoList.add(task);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(\" Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(\"   \" + task);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            if (toDoList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                System.out.printf(\" Now you have %d task in the list.%n\", toDoList.size());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                System.out.printf(\" Now you have %d tasks in the list.%n\", toDoList.size());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } catch (DukeError e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        hrTag();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static void displayList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        hrTag();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (toDoList.isEmpty()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(\"You have no tasks left! Good job my child!\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            if (toDoList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                System.out.println(\" Here is the task in your list:\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                System.out.println(\" Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            for (int i \u003d 0; i \u003c toDoList.size(); i++) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                System.out.println(\" \" + (i+1) + \".\" + toDoList.get(i));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        hrTag();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static void goodbyeMessage() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        hrTag();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        System.out.println(\"Goodbye my child!\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        saveData();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        hrTag();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static void saveData() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            // Find if /data folder exists"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            Path path \u003d FileSystems.getDefault().getPath(\"data\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                File folder \u003d new File(\"data\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                folder.mkdir();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            File data \u003d new File(\"data/task.txt\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(data);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            PrintWriter writer \u003d new PrintWriter(fileWriter);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(\"Saving...\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            for (Task task : toDoList) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                String s \u003d String.format(\"%s|%b|%s\", task.getTaskType(),"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                        task.getIsDone(), task.getDescription());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                if (!task.getTaskType().equals(\"T\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    s \u003d s.concat(String.format(\"|%s\", task.getDate()));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                writer.println(s);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(\"Saved successfully.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(\"Uh oh! An error has occurred. T_T\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static boolean isInteger(String strNum) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (strNum \u003d\u003d null) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            Integer.parseInt(strNum);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static void doneTask(int num) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        hrTag();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (toDoList.get(num - 1).getIsDone()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.printf(\"Sorry! You have already completed \u0027%s\u0027.%n\","
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    toDoList.get(num - 1).getDescription());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.printf(\"Great job son! I\u0027ll mark \u0027%s\u0027 as done for you. ^^%n\","
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "                    toDoList.get(num - 1).getDescription());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            toDoList.get(num - 1).markAsDone();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        hrTag();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    private static void deleteTask(int num) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        hrTag();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        System.out.println(\" Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        System.out.println(\"  \" + toDoList.get(num - 1));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        toDoList.remove(num - 1);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        if (toDoList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(\" Great job son! You\u0027re left with no more tasks!\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        else if (toDoList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.println(\" Now you have only 1 task in the list!\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "            System.out.printf(\" Now you have %d tasks in the list.%n\", toDoList.size());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        hrTag();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 311,
      "-": 5
    }
  },
  {
    "path": "src/main/java/DukeError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class DukeError extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    DukeError(String msg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 5
    }
  },
  {
    "path": "src/main/java/EmptyDateError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class EmptyDateError extends DukeError {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public EmptyDateError() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"Please input a date!\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 5
    }
  },
  {
    "path": "src/main/java/EmptyTaskError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class EmptyTaskError extends DukeError {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public EmptyTaskError() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"Please insert a task!\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    protected LocalDateTime time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public Event(String description, LocalDateTime time) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.time \u003dtime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return String.format(\"%s (at: %s)\", super.toString(), time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 26
    }
  },
  {
    "path": "src/main/java/IllegalCharacterError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class IllegalCharacterError extends DukeError {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public IllegalCharacterError() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"You message contains an illegal character!\\nPlease remove it and try again!\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 5
    }
  },
  {
    "path": "src/main/java/InvalidDateInputError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class InvalidDateInputError extends DukeError {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public InvalidDateInputError() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"Invalid date entered!\\nPlease enter the following format! dd/mm/yyyy HH:MM\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 5
    }
  },
  {
    "path": "src/main/java/InvalidRangeError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class InvalidRangeError extends DukeError {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public InvalidRangeError() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"Uh oh! That number looks like it is out of range.\\nCheck again!\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 5
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\"); //return tick or X symbols"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public abstract String getTaskType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public abstract String getDate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return String.format(\"[%s][%s] %s\", getTaskType(),getStatusIcon(), description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 34
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 16
    }
  },
  {
    "path": "src/main/java/UnknownCommandError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "public class UnknownCommandError extends DukeError {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    public UnknownCommandError() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "        super(\"Unknown command! Please insert the task type first before\\ntyping in your task!\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 5
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "dab"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "todo yeet"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "deadline hehe"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "deadline haha /by dab"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "event /at"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "event hoho"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "event huhu /at yeet"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "done 01"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 20
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "SET MY_PATH\u003d\"C:\\Users\\ambro\\Downloads\\nus\\~y2s1\\cs2103\\ip\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MorningLit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MorningLit"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "MorningLit": 5,
      "-": 18
    }
  }
]
