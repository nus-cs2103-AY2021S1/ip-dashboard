[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 17,
      "-": 44
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "T|1|read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "D|1|return book|Jun 06 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "E|1|project meeting|Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "T|1|join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "DA|0|nothing|exam tmr"
      }
    ],
    "authorContributionMap": {
      "fanminj": 5
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "# Duke - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "1. [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "1. [Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "1. [Features](#3-features)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    1. [Listing all tasks: `list`](#31-listing-all-tasks-list)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    1. [Finding tasks: `find`](#32-finding-tasks-find)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    1. [Adding a ToDo task: `todo`](#33-adding-a-todo-task-todo)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    1. [Adding a Deadline task: `deadline`](##34-adding-a-deadline-task-deadline)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    1. [Adding an Event task: `event`](#35-adding-an-event-task-event)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    1. [Adding a Do After task: `doafter`](#36-adding-a-do-after-task-doafter)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    1. [Marking a task as done: `done`](#37-marking-a-task-as-done-done)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    1. [Deleting a task: `delete`](#38-deleting-a-task-delete)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    1. [Exiting the app: `bye`](#39-exiting-the-app-bye)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Duke is a desktop app for managing tasks. It is catered towards individuals who enjoy working with a Command Line Interface (CLI). This app is especially useful for fast typists."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "1. Ensure you have Java `11` or above installed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "2. Download the latest duke.jar here (insert link later)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "3. Copy the file to a folder you wish to use as your home folder."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "4. Double-click the file to start the app. The GUI should appear in a few seconds. Shown below is an example with some user commands and the app\u0027s responses."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "![Ui image](/docs/Ui.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "5. Type the command in the text box and press `Enter`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "6. Refer to [Section 3, \"Features\"](#3-features) for details of each command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### 3.1 Listing all tasks: `list`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Shows a list of all the tasks added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format / Example of usage:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### 3.2 Finding tasks: `find`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Returns with task(s) that contain the given keyword."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`find [keyword]`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`find test`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### 3.3 Adding a ToDo task: `todo`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Adds a new todo task to the current list of tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`todo [taskname]`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`todo read lecture notes`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### 3.4 Adding a Deadline task: `deadline`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Adds a new deadline task to the current list of tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`deadline [taskname] /by [yyyy-mm-dd]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`deadline return book /by 2020-10-13`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### 3.5 Adding an Event task: `event`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Adds a new event task to the current list of tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`event [taskname] /at [date, can be in any format]`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`event 2103 meeting /at 15 sep, 8pm`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### 3.6 Adding a Do After task: `doafter`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Adds a new do after task to the current list of tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`doafter [taskname] /after [date, can be in any format]`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`doafter study for test /after lecture tmr`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### 3.7 Marking a task as done: `done`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Changes the completion status of a task to be done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`done [task number]`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`done 5`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### 3.8 Deleting a task: `delete`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Deletes a task from the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`delete [task number]`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`delete 4`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "### 3.9 Exiting the app: `bye`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Exits the app."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanminj"
        },
        "content": "Format / Example of usage:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "`bye`"
      }
    ],
    "authorContributionMap": {
      "fanminj": 102,
      "-": 14
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected static final String ADD_MESSAGE \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected static final String DELETE_MESSAGE \u003d \"Noted. I\u0027ve removed this task: \\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected String arguments;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Constructor for class Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @param arguments description of the command given by user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Command(String arguments) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Checks if this is an exit command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @return true if an exit command is executed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @param tasks list of tasks given by user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @param storage used to load and save tasks given by user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws DukeException method should only be called for child classes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        throw new DukeException(\"This method is to be implemented by child classes\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 37
    }
  },
  {
    "path": "src/main/java/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents the result of executing a command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public final String responseToUser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    CommandResult(String responseToUser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.responseToUser \u003d responseToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assert !this.responseToUser.equals(\"\") : \"Response cannot be empty\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 11
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents a deadline task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected static final String TYPE \u003d \"deadline\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Deadline(String description, String by) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(description, TYPE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getTiming() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 23
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Adds a deadline task to the list of tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    DeadlineCommand(String arguments) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private static String formatDate(String date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        DateTimeFormatter pattern \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return localDate.format(pattern);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String[] s \u003d this.arguments.split(\" /by \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String description \u003d s[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String by \u003d formatDate(s[1]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Task task \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d ADD_MESSAGE + \"  \" + task.toString()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                + \"\\n\" + tasks.replyNumTasks();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 36
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Deletes a task from the list of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    DeleteCommand(String arguments) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d Integer.parseInt(arguments) - 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Task task \u003d tasks.removeTask(index);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d DELETE_MESSAGE + \"  \" + task.toString()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                + \"\\n\" + tasks.replyNumTasks();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 24
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * speaker\u0027s face and a label containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        dialog.setMinHeight(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Circle circle \u003d new Circle(30, 30, 30);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        displayPicture.setClip(circle);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 64
    }
  },
  {
    "path": "src/main/java/DoAfter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents a do after task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DoAfter extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected static final String TYPE \u003d \"doafter\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected String after;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    DoAfter(String description, String after) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(description, TYPE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.after \u003d after;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getTiming() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.after;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return \"[DA]\" + super.toString() + \" (after: \" + after + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 23
    }
  },
  {
    "path": "src/main/java/DoAfterCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Adds a do after task to the list of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DoAfterCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"doafter\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    DoAfterCommand(String arguments) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String[] s \u003d this.arguments.split(\"/after\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String description \u003d s[0].trim();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String after \u003d s[1].trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Task task \u003d new DoAfter(description, after);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d ADD_MESSAGE + \"  \" + task.toString()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                + \"\\n\" + tasks.replyNumTasks();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 30
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Marks a task as completed."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    DoneCommand(String arguments) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d Integer.parseInt(arguments) - 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Task task \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d task.markAsDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 23
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Responsible for running the Duke application, and responding to user."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Initializes and terminates the application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private String storageErrorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private boolean hasStorageError;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            this.tasks \u003d storage.loadFile();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            this.hasStorageError \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            this.storageErrorMessage \u003d e.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            this.hasStorageError \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getStorageErrorMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return storageErrorMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean hasStorageError() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return hasStorageError;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected CommandResult acceptInput(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            Command command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return command.execute(this.tasks, this.storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new CommandResult(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 41,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents an event task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected static final String TYPE \u003d \"event\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Event(String description, String at) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(description, TYPE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getTiming() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.at + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 23
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Adds an event task to the list of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    EventCommand(String arguments) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String[] s \u003d this.arguments.split(\" /at \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String description \u003d s[0];"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String at \u003d s[1];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Task task \u003d new Event(description, at);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d ADD_MESSAGE + \"  \" + task.toString()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                + \"\\n\" + tasks.replyNumTasks();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 27
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Command that signals the termination of the application."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ExitCommand(String arguments) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 17
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Finds a task based on the given keyword."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    FindCommand(String arguments) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        ArrayList\u003cTask\u003e currentTasks \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        for (Task t : currentTasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            String description \u003d t.getDescription().toLowerCase();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            String arg \u003d arguments.toLowerCase();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            if (description.contains(arg)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                matchingTasks.add(t);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int size \u003d matchingTasks.size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (size \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            message \u003d \"There is no matching task in your list.\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } else if (size \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            message \u003d \"Here is the matching task in your list:\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            message \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            message +\u003d String.format(\"%d. %s%n\", i + 1, matchingTasks.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 43
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 7
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Lists out the tasks that user has added."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ListCommand(String arguments) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d tasks.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 16
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates initial dialog box with welcome message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String welcomeText \u003d ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(welcomeText, dukeImage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (duke.hasStorageError()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            dialogContainer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    .getChildren()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    .addAll(DialogBox.getDukeDialog(duke.getStorageErrorMessage(), dukeImage));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        CommandResult commandResult \u003d duke.acceptInput(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String response \u003d ui.showResponse(commandResult);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 63
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Parses user input and passes the input to command for execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws DukeException if the command is not recognised or the description of the command is empty"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static Command parseCommand(String userInput)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String[] input \u003d userInput.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String commandWord \u003d input[0];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String arguments \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        HashSet\u003cString\u003e commandsWithArgs \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        commandsWithArgs.add(DeadlineCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        commandsWithArgs.add(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        commandsWithArgs.add(DoneCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        commandsWithArgs.add(EventCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        commandsWithArgs.add(ToDoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        commandsWithArgs.add(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        commandsWithArgs.add(DoAfterCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (commandsWithArgs.contains(commandWord)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            if (input.length \u003e 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                arguments \u003d input[1];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String message \u003d String.format(\"OOPS! \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        + \"The description of a %s cannot be empty.\", commandWord);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case DeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new DeadlineCommand(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new DeleteCommand(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new DoneCommand(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new EventCommand(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new ExitCommand(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new ListCommand(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case ToDoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new ToDoCommand(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new FindCommand(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case DoAfterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new DoAfterCommand(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new DukeException(\"OOPS! I\u0027m sorry, but I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 62
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents the file used for storing user data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected static final String SRC \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected static final Path PATH \u003d Paths.get(SRC, \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected boolean hasDirectory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Storage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.hasDirectory \u003d Files.exists(PATH);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Save the TaskList data to the storage file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @param tasks list of tasks given by the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @throws DukeException if the storage file is not found"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (this.hasDirectory) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                FileWriter fw \u003d new FileWriter(PATH.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String newText \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                for (Task t : tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    String tempType \u003d t.getType();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    String type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    switch (tempType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    case \"todo\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        type \u003d \"T\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    case \"event\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        type \u003d \"E\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    case \"deadline\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        type \u003d \"D\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    case \"doafter\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        type \u003d \"DA\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        throw new DukeException(\"Type not recognised\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    int doneStatus \u003d t.getDoneStatus() ? 1 : 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    String description \u003d t.getDescription();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    String timing \u003d t.getTiming();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    newText +\u003d String.format(\"%s|%d|%s\", type, doneStatus, description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    if (timing.equals(\"\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        newText +\u003d \"\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        newText +\u003d String.format(\"|%s%n\", timing);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                fw.write(newText);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new DukeException(\"duke.txt not found\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private TaskList loadTasks(String filePath) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String data \u003d sc.nextLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String[] arr \u003d data.split(\"\\\\|\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String task \u003d arr[0];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String doneStatus \u003d arr[1];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                boolean isDone \u003d doneStatus.equals(\"1\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String description \u003d arr[2];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String timing \u003d arr.length \u003d\u003d 4 ? arr[3] : \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                Task t;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                switch (task) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    t \u003d new ToDo(description);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    t \u003d new Event(description, timing);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    t \u003d new Deadline(description, timing);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                case \"DA\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    t \u003d new DoAfter(description, timing);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    throw new DukeException(\"OOPS!!! I\u0027m sorry, \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                            + \"but I don\u0027t recognise the command from the text file.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    t.markAsDone();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                tasks.addTask(t);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new TaskList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Loads TaskList data from the storage file, and returns it."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Creates a new storage file, and returns an empty TaskList if the file does not exist."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @return a TaskList"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public TaskList loadFile() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (this.hasDirectory) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                return loadTasks(PATH.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                File file \u003d new File(PATH.toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                this.hasDirectory \u003d true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                return new TaskList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new TaskList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 152
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents a task from user input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Task(String description, String type) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @return a String message informing the user of the completed task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String markAsDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return String.format(\"%s%n  %s%n\", message, this.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean getDoneStatus() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getTiming() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 49
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents the list of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Task removeTask(int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.tasks.remove(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the total number of tasks in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @return a String message informing user of the number of remaining tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String replyNumTasks() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \"Now you have %d %s in the list.%n\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                getSize(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                getSize() \u003c\u003d 1 ? \"task\" : \"tasks\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int size \u003d this.tasks.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String response \u003d size \u003c\u003d 1"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                ? \"Here is the task in your list:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                : \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            response +\u003d String.format(\"%d. %s%n\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    i + 1,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    this.tasks.get(i).toString()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 61
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Represents a todo task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected static final String TYPE \u003d \"todo\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ToDo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(description, TYPE);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 15
    }
  },
  {
    "path": "src/main/java/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Adds a todo task to the list of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ToDoCommand(String arguments) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Task task \u003d new ToDo(arguments);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d ADD_MESSAGE + \"  \" + task.toString()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                + \"\\n\" + tasks.replyNumTasks();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 24
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": " * Ui of the application."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the welcome message on application start."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String showWelcomeMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                + \"What can I do for you?\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the exit message on application termination."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String showExitMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * Returns the result of a command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     * @param result contains a String message after a command has been executed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String showResponse(CommandResult result) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assert !result.responseToUser.equals(\"\") : \"Response to user cannot be empty\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return result.responseToUser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 30
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003cfx:root"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        alignment\u003d\"TOP_RIGHT\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003cImageView"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                fx:id\u003d\"displayPicture\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                fitHeight\u003d\"60\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                fitWidth\u003d\"60\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                preserveRatio\u003d\"true\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "fanminj": 30
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003cAnchorPane"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        maxHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        maxWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        fx:controller\u003d\"MainWindow\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003cTextField"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                fx:id\u003d\"userInput\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                layoutY\u003d\"558.0\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                prefHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                AnchorPane.bottomAnchor\u003d\"1.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003cButton"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                fx:id\u003d\"sendButton\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                layoutX\u003d\"324.0\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                layoutY\u003d\"558.0\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                prefHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                prefWidth\u003d\"76.0\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                text\u003d\"Send\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003cScrollPane"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                fx:id\u003d\"scrollPane\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                prefHeight\u003d\"557.0\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                vvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fanminj": 52
    }
  },
  {
    "path": "src/test/java/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void testCommandExecution() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String expected \u003d new CommandResult(\"Bye. Hope to see you again soon!\").responseToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String actual \u003d new ExitCommand(\"bye\").execute(new TaskList(), new Storage()).responseToUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void unknownCommand_executeUnknownCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            new Command(\"test\").execute(new TaskList(), new Storage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            assertEquals(\"This method is to be implemented by child classes\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    e.getMessage()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 23
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void testMarkTaskAsDone() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String expected \u003d \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                + \"  [D][✓] return book (by: tmr)\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String actual \u003d new Deadline(\"return book\", \"tmr\").markAsDone();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void testPrintingOfTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String expected \u003d \"[T][✘] read book\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String actual \u003d new ToDo(\"read book\").toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 20
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "fanminj": 6
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "fanminj": 1,
      "-": 37
    }
  }
]
