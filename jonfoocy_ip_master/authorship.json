[
  {
    "path": "src/main/java/sparrow/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " * Represents a Deadline in the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    protected LocalDate dueDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Creates a Deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param description details of deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param dueDate when deadline is due"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public Deadline(String description, LocalDate dueDate) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public LocalDate getDueDate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), this.dueDate.format(formatter));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 31
    }
  },
  {
    "path": "src/main/java/sparrow/EmptyDeadlineDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class EmptyDeadlineDescriptionException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public EmptyDeadlineDescriptionException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 7
    }
  },
  {
    "path": "src/main/java/sparrow/EmptyEventDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class EmptyEventDescriptionException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public EmptyEventDescriptionException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 7
    }
  },
  {
    "path": "src/main/java/sparrow/EmptyTodoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class EmptyTodoDescriptionException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public EmptyTodoDescriptionException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 7
    }
  },
  {
    "path": "src/main/java/sparrow/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " * Represents an Event in the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Creates an Event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param description Details of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param date When the event occurs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public Event(String description, LocalDate date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), this.date.format(formatter));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 31
    }
  },
  {
    "path": "src/main/java/sparrow/InvalidDeadlineByException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class InvalidDeadlineByException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public InvalidDeadlineByException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 7
    }
  },
  {
    "path": "src/main/java/sparrow/InvalidEventAtException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class InvalidEventAtException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public InvalidEventAtException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 7
    }
  },
  {
    "path": "src/main/java/sparrow/MissingTaskNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class MissingTaskNumberException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public MissingTaskNumberException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 7
    }
  },
  {
    "path": "src/main/java/sparrow/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " * Parses user input and calls the relevant methods."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Creates a Parser that handles user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param tasks TaskList for methods to be called on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param storage Storage and retrieval of TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public Parser(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Returns boolean to tell program whether to exit."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Parses a line of user input and calls relevant methods."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param commandLine Entire line of user input to be handled."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @return Whether to exit program"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public boolean parse(String commandLine) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        String[] commandArr \u003d commandLine.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        String command \u003d commandArr[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                Ui.reply(\"Bye. Hope t\u0027 see ye again soon!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                if (commandArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    tasks.displayList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                } else if (commandArr.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                        tasks.filterList(commandArr[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                        tasks.displayList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                        System.out.println(Sparrow.standardExceptionMessage() + \"Please enter a date in this format: yyyy-mm-dd\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    tasks.markAsDone(commandArr[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    storage.saveTaskList(tasks.getTasks());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    throw new MissingTaskNumberException(\"No task number passed to done command.\", e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    tasks.addTask(\"todo\", commandArr[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    storage.saveTaskList(tasks.getTasks());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    throw new EmptyTodoDescriptionException(\"No description provided for todo.\", e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    tasks.addTask(\"deadline\", commandArr[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    storage.saveTaskList(tasks.getTasks());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    throw new EmptyDeadlineDescriptionException(\"No description provided for deadline.\", e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    tasks.addTask(\"event\", commandArr[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    storage.saveTaskList(tasks.getTasks());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    throw new EmptyEventDescriptionException(\"No description provided for event.\", e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    tasks.deleteTask(commandArr[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    storage.saveTaskList(tasks.getTasks());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    throw new MissingTaskNumberException(\"No task number passed to delete command.\", e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                tasks.displayList(tasks.findTasks(commandArr[1]));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                throw new UnknownCommandException(commandArr[0]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } catch(MissingTaskNumberException e){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(Sparrow.standardExceptionMessage() +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    \"️ Please enter a task number after the \\\"done\\\"/\\\"delete\\\" command.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } catch(EmptyTodoDescriptionException e){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(Sparrow.standardExceptionMessage() +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    \"️ The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } catch(EmptyDeadlineDescriptionException e){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(Sparrow.standardExceptionMessage() +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    \"️ The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } catch(EmptyEventDescriptionException e){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(Sparrow.standardExceptionMessage() +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    \"️ The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } catch(UnknownCommandException e){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(Sparrow.standardExceptionMessage() +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    \"️ What be the meaning of this?\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 113
    }
  },
  {
    "path": "src/main/java/sparrow/Sparrow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class Sparrow {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public Sparrow(String filePath) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        storage \u003d new Storage(\"data/sparrow.Sparrow.txt\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            tasks \u003d new TaskList(storage.loadFromFile());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } catch (AssertionError e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(standardExceptionMessage() + \"file not loaded\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        Sparrow sparrow \u003d new Sparrow(\"data/sparrow.Sparrow.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        Ui.greet();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        Parser parser \u003d new Parser(sparrow.getTasks(), sparrow.getStorage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        while (parser.parse(command)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Returns emoji to be pre-pended to an exception message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @return Pre-exception string."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public static String standardExceptionMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return \"ARR!\\uD83C\\uDFF4\\u200D\\u2620\\uFE0F️ \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Converts String representation of date to LocalDate."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param dateStr String representation of a date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @return LocalDate object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @throws DateTimeParseException If input String cannot be parsed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public static LocalDate stringToDate(String dateStr) throws DateTimeParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return LocalDate.parse(dateStr);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 63
    }
  },
  {
    "path": "src/main/java/sparrow/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " * Represents the file used to store the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Returns list of tasks loaded from hard disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * If no file found, returns an empty list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @return Task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFromFile() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        File f \u003d new File(\"data/Sparrow.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        if (f.exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    String task \u003d sc.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    tasks.add(stringToTask(task));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            File g \u003d new File(\"data\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            if (!g.exists()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                g.mkdirs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Converts user input into a Task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param input User input to be converted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @return Task object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public Task stringToTask(String input) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        String[] inputArr \u003d input.split(\"\\\\s+\\\\|\\\\s+\", 4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        boolean isTaskDone \u003d Integer.parseInt(inputArr[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        switch (inputArr[0]) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            Todo todo \u003d new Todo(inputArr[2]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            if (isTaskDone) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                todo.markAsDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            task \u003d todo;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            LocalDate dueDate \u003d Sparrow.stringToDate(inputArr[3]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            Deadline deadline \u003d new Deadline(inputArr[2], dueDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            if (isTaskDone) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                deadline.markAsDone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            task \u003d deadline;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            LocalDate date \u003d Sparrow.stringToDate(inputArr[3]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            Event event \u003d new Event(inputArr[2], date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            if (isTaskDone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                event.markAsDone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            task \u003d event;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(\"No matching task found, shouldn\u0027t end up here\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(\"No task created\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Converts a Task into a String for storage."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param task Task to be converted."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @return String representation of Task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public String taskToString(Task task) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(task.getDescription());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        if (task.getIsDone()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            sb.insert(0, \"1 | \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            sb.insert(0, \"0 | \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            sb.insert(0,\"T | \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            sb.insert(0,\"D | \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            sb.append(\" | \").append(((Deadline) task).getDueDate());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } else if (task instanceof  Event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            sb.insert(0,\"E | \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            sb.append(\" | \").append(((Event) task).getDate());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Saves specified task list to the hard disk."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param taskList Task list to be saved."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public void saveTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"data/Sparrow.txt\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                fw.append(taskToString(task));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 139
    }
  },
  {
    "path": "src/main/java/sparrow/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " * Represents a Task in the task list. Child classes include Todo, Deadline and Event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 35
    }
  },
  {
    "path": "src/main/java/sparrow/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " * Encapsulates task list with operations to be carried out on list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Displays current tasks in list to user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public void displayList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Here are the tasks in your list: \\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            String temp \u003d String.format(\"%d. %s\\n\", i + 1, tasks.get(i));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            sb.append(temp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        Ui.reply(sb.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Displays list of tasks passed as argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public void displayList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Here are the matching tasks in your list: \\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            String temp \u003d String.format(\"%d. %s\\n\", i + 1, tasks.get(i));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            sb.append(temp);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        Ui.reply(sb.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Adds a task to task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param type Type of Task to be added."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param details Description of Task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public void addTask(String type, String details) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Aye Aye Captain! I\u0027ve added this task:\\n  \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                Todo todo \u003d new Todo(details);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                tasks.add(todo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                sb.append(todo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    String[] taskDetails \u003d details.trim().split(\"/by\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    String description \u003d taskDetails[0];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    LocalDate dueDate \u003d Sparrow.stringToDate(taskDetails[1].trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    Deadline deadline \u003d new Deadline(description, dueDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    tasks.add(deadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    sb.append(deadline);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    throw new InvalidDeadlineByException(\"/by not passed\", e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    String[] taskDetails \u003d details.trim().split(\"/at\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    String description \u003d taskDetails[0];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    LocalDate date \u003d Sparrow.stringToDate(taskDetails[1].trim());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    Event event \u003d new Event(description, date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    tasks.add(event);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    sb.append(event);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    throw new InvalidEventAtException(\"/at not passed\", e);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            String summary \u003d String.format(\"\\nNow you have %d task(s) in the list.\", tasks.size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            sb.append(summary);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            Ui.reply(sb.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } catch (InvalidDeadlineByException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(Sparrow.standardExceptionMessage() +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    \"️ Please pass a /by to the deadline\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } catch (InvalidEventAtException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(Sparrow.standardExceptionMessage() +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    \"️ Please pass a /at to the event\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(Sparrow.standardExceptionMessage() +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    \"Please enter a date in this format: yyyy-mm-dd\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Returns a task list matching the inputted date filter."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param dateFilter User\u0027s command and date to filter by."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @return Filtered list based on input."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @throws DateTimeParseException if date passed cannot be converted to a LocalDate object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public ArrayList\u003cTask\u003e filterList(String dateFilter) throws DateTimeParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        String[] dateArr \u003d dateFilter.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        LocalDate dateToCompare \u003d Sparrow.stringToDate(dateArr[1]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        ArrayList\u003cTask\u003e filteredList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        switch (dateArr[0]) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        case \"on\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                LocalDate taskDate;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                // Get date from Deadline/Event"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    taskDate \u003d ((Deadline) task).getDueDate();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    taskDate \u003d ((Event) task).getDate();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                // Check if task\u0027s date is on date specified"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                if (taskDate.isEqual(dateToCompare)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    filteredList.add(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        case \"before\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                LocalDate taskDate;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                // Get date from Deadline/Event"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    taskDate \u003d ((Deadline) task).getDueDate();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    taskDate \u003d ((Event) task).getDate();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                // Check if task\u0027s date is before date specified"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                if (taskDate.isBefore(dateToCompare)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                    filteredList.add(task);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return filteredList;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Marks a task in the task list as completed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param taskNum Task number corresponding to completed task."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public void markAsDone(String taskNum) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(taskNum);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            if (taskNumber \u003c\u003d tasks.size() \u0026\u0026 taskNumber \u003e 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                tasks.get(taskNumber - 1).markAsDone();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                Ui.reply(\"Jolly riddance! I\u0027ve marked this task as done:\\n\" + tasks.get(taskNumber - 1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                System.out.println(\"Please enter a valid task number.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(\"Please enter a valid task number.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Deletes a task from the task list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param taskNum Task number corresponding to the task to be deleted."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public void deleteTask(String taskNum) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(taskNum);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            if (taskNumber \u003c\u003d tasks.size() \u0026\u0026 taskNumber \u003e 0) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                Task removedTask \u003d tasks.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                Ui.reply(\"Jolly riddance! I\u0027ve deleted this task:\\n\" + \"  \" + removedTask.toString() +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                        String.format(\"\\nNow you have %d task(s) in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                System.out.println(\"Please enter a valid task number.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(\"Please enter a valid task number.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasks(String taskStr) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            if (task.getDescription().contains(taskStr)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 204
    }
  },
  {
    "path": "src/main/java/sparrow/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " * Represents a Todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Creates a Todo."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param description Details of the todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 19
    }
  },
  {
    "path": "src/main/java/sparrow/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " * Responsible for sending messages to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Welcomes the user to the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        String welcome \u003d \"  _  _ _   ___ _                    \\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                \" | || (_) |_ _( )_ __               \\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                \" | __ | |  | ||/| \u0027  \\\\              \\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                \" |_||_|_| |___| |_|_|_|             \\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                \" / __|_ __  __ _ _ _ _ _ _____ __ __\\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                \" \\\\__ \\\\ \u0027_ \\\\/ _` | \u0027_| \u0027_/ _ \\\\ V  V /\\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                \" |___/ .__/\\\\__,_|_| |_| \\\\___/\\\\_/\\\\_/ \\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "                \"     |_|                            \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        System.out.println(welcome);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        reply(\"How can I help ye?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * Sends a reply to the user in a standard format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     * @param message Reply to be formatted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public static void reply(String message) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        System.out.println(\"    ________________________________________\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        Scanner sc \u003d new Scanner(message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "            System.out.println(\"      \" + line);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        System.out.println(\"    ________________________________________\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 40
    }
  },
  {
    "path": "src/main/java/sparrow/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class UnknownCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public UnknownCommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 7
    }
  },
  {
    "path": "src/test/java/sparrow/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    Parser p \u003d new Parser(new TaskList(), new Storage(\"test\"));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public void byeCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        assertFalse(p.parse(\"bye\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public void correctCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        assertTrue(p.parse(\"list\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 20
    }
  },
  {
    "path": "src/test/java/sparrow/SparrowTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "package sparrow;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "public class SparrowTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    public void exceptionMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "        assertEquals(\"ARR!\\uD83C\\uDFF4\\u200D\\u2620\\uFE0F️ \", Sparrow.standardExceptionMessage());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 14
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "todo buy ship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "todo sail to Tortuga"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "wrong command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "todo find treasure"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "deadline find a crew"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "deadline find a crew /by"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "deadline find a crew /by end of Aug"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "event brethren\u0027s court meeting"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "event brethren\u0027s court meeting /at"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "event brethren\u0027s court meeting /at next Wed 2-4pm"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "done -5"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "done 1000"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "delete"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "delete -99"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "delete 999"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "bye"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 24
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonfoocy"
        },
        "content": "java -classpath ../bin Sparrow \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jonfoocy": 2,
      "-": 36
    }
  }
]
