[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    toolVersion \u003d \u00278.35\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 16,
      "-": 44
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "E | 1 | marathon | 2020-03-04"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "T | 1 | make bed"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "D | 0 | eat | 2020-12-03"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "E | 1 | snack | 2020-07-12"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "T | 0 | eat"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "T | 0 | wake"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "T | 0 | fly"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "T | 0 | eat my breakfast"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "D | 0 | do CS2103T quiz | 2020-09-15"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 9
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### Feature 1: Help"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Sends instructions on how to use bot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### Feature 2: Add a task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Tasks can be in the form of a todo [T], deadline [D], or event [E]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### Feature 3: View all tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Shows all tasks with status and date if any."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### Feature 4: Find a task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Shows all tasks with the specified letters in it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### Feature 5: Mark as done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Marks specified task as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### Feature 6: Delete a task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Deletes a specific task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### Feature 7: Exit the program"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Saves all data and closes the window for you."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### `help` - Shows a message with all the instructions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Send me a task in one of the following formats and I\u0027ll store it for you."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Todo: todo \u003cdescription\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Deadline: deadline \u003cdescription\u003e /by \u003cYYYY-MM-DD\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Event: event \u003cdescription\u003e /at \u003cYYYY-MM-DD\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Send list to see all tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Send find \u003cstring of choice\u003e to see all related tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Send done \u003citem number\u003e to mark an item as done"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Send delete \u003citem number\u003e to delete and item from the list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Send bye to end our conversation."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Send help to end see the commands again."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### `todo` - Adds a todo item to the list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Format: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "`todo eat my breakfast`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        [T][✘] eat my breakfast"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    You now have x tasks in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### `deadline` - Adds a deadline item to the list, with a specified date"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Format: `deadline DESCRIPTION /by YYYY-MM-DD`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "`deadline do CS2103T quiz /by 2020-09-15`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        [D][✘] do CS2103T quiz (by: Sep 15 2020)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    You now have x tasks in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### `event` - Adds an event item to the list, with a specified date"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Format: `event DESCRIPTION /at YYYY-MM-DD`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "`event marathon /at 2020-10-11`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        [E][✘] marathon (at: Oct 11 2020)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    You now have x tasks in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### `list` - Shows all current tasks"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "If there are no items in the list:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Theres currently nothing in your list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "If there are existing items in the list, it may look something like:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    1. [T][✓] eat my breakfast"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    2. [D][✘] do CS2103T quiz (by: Sep 15 2020)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    3. [E][✓] marathon (at: Oct 11 2020)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### `find` - Shows all current tasks"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Format: `find DESCRIPTION`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "`find mar`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "If there are no items that matxhes your search:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    I\u0027m sorry, there\u0027s nothing that matches your search."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "If there are items that match your search, it may look something like:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    1. [T][✓] mark my peer\u0027s work"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    2. [E][✓] marathon (at: Oct 11 2020)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### `done` - Marks a current task as done"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Format: `done ITEM NUMBER`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Nice, I\u0027ve marked this item as done:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        [T][✓] make bed"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### `delete` - Deletes an item from the list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Format: `delete ITEM NUMBER`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Noted, I\u0027ve removed this task:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        [T][✓] make bed"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    You now have x items in the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### `bye` - Exits the program."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "The window closes."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 149,
      "-": 21
    }
  },
  {
    "path": "src/main/java/duke/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents an add command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final CommandEnum type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs AddCommand initialized with command type and description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param type Type of add command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param description Description of the command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    AddCommand(CommandEnum type, String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert tasks !\u003d null : \"tasks have not been initialised\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert ui !\u003d null : \"ui have not been initialised\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert storage !\u003d null : \"storage have not been initialised\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                return addToDo(tasks, storage, ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                return addDeadline(tasks, storage, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                return addEvent(tasks, storage, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                throw new DukeException(\"Please key in a valid command\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (IOException | DateTimeException ex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new DukeException(ex.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new DukeException(\"Please follow a valid command format!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private String convertToOutputString(String task, int size) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\\t\" + task + \"\\nYou now have \" + size + \" tasks in the list.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private String addToDo(TaskList tasks, Storage storage, Ui ui) throws DukeException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Task todoTask \u003d new Todo(description);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        tasks.add(todoTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return ui.showOutput(convertToOutputString(todoTask.toString(), tasks.size()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private String addDeadline(TaskList tasks, Storage storage, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String[] inputArray \u003d description.split(\" /by \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String task \u003d inputArray[0];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String by \u003d inputArray[1];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Task deadlineTask \u003d new Deadline(task, LocalDate.parse(by));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        tasks.add(deadlineTask);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return ui.showOutput(convertToOutputString(deadlineTask.toString(), tasks.size()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private String addEvent(TaskList tasks, Storage storage, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String[] inputArray \u003d description.split(\" /at \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String task \u003d inputArray[0];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String at \u003d inputArray[1];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Task eventTask \u003d new Event(task, LocalDate.parse(at));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        tasks.add(eventTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return ui.showOutput(convertToOutputString(eventTask.toString(), tasks.size()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 85
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * A representation for user commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Updates and stores tasks, prints out user response."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param tasks List of the current tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param storage Stored copy of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return The reply message from Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws DukeException If errors occur for any of the processes involved."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return True if exit command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 23
    }
  },
  {
    "path": "src/main/java/duke/CommandEnum.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents command types"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public enum CommandEnum {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    BYE, LIST, DONE, DELETE, TODO, DEADLINE, EVENT, FIND, HELP"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 8
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents a deadline task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a Deadline task with description and deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param description Description of Deadline task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param by Deadline of task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a Deadline task with description, status and deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param description Description of Deadline task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param isDone Status of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param by Deadline of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDate by) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns deadline of task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return String representation of deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return by.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 46
    }
  },
  {
    "path": "src/main/java/duke/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents a delete command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a delete command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param description Description of command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    DeleteCommand(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert tasks !\u003d null : \"tasks have not been initialised\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert ui !\u003d null : \"ui have not been initialised\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert storage !\u003d null : \"storage have not been initialised\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            int itemNumber \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            output +\u003d \"Noted. I\u0027ve removed this task:\\n\\t\" + tasks.get(itemNumber - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            tasks.remove(itemNumber - 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            output +\u003d \"\\nYou now have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return ui.showOutput(output);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new DukeException(\"Please key in a valid number for \\\"delete\\\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new DukeException(ex.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 42
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (text.contains(\"☹ OOPS!!!\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            db.dialog.setStyle(\"-fx-text-fill: #AB4642\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 64
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Main class for running bot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private static Label outputLabel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private static final String FILE_PATH \u003d getFilePath();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a Duke instance."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            tasks \u003d new TaskList(storage.loadTasksFromFile());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Getter for ui."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return The ui object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Gets user Response"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return The response from Duke."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            if (c.isExit()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return ex.getMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private static String getFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (System.getProperty(\"user.dir\").endsWith(\"text-ui-test\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return System.getProperty(\"user.dir\").substring(0, System.getProperty(\"user.dir\").length() - 13)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    + \"/data/duke.txt\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return System.getProperty(\"user.dir\") + \"/data/duke.txt\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 63,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents en exception that occurs due to running Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a DukeException with error message, prefixed with identifier string."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param errorMessage Error message to be printed out."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(\"☹ OOPS!!! \" + errorMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 14
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents an Event task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs an Event task with description and date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param description Description of Event task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param at Date of event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs an Event task with description, status and date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param description Description of Event task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param isDone Status of task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param at Date of event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Event(String description, boolean isDone, LocalDate at) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns date of event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return String representation of date of event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return at.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 45
    }
  },
  {
    "path": "src/main/java/duke/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents an exit command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert tasks !\u003d null : \"tasks have not been initialised\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert ui !\u003d null : \"ui have not been initialised\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert storage !\u003d null : \"storage have not been initialised\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return ui.showOutput(\"Bye, hope to chat again soon!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 19
    }
  },
  {
    "path": "src/main/java/duke/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents a Find Command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a Find Command with description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param description Description of command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    FindCommand(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert tasks !\u003d null : \"tasks have not been initialised\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert ui !\u003d null : \"ui have not been initialised\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert storage !\u003d null : \"storage have not been initialised\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        TaskList filteredTaskList \u003d new TaskList(new ArrayList\u003c\u003e(tasks.toStream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .filter(x -\u003e x.description.contains(description)).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (filteredTaskList.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            output.append(\"I\u0027m sorry, there\u0027s nothing that matches your search.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            IntStream.range(0, filteredTaskList.size()).forEach(i -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                if (i \u003d\u003d filteredTaskList.size() - 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    output.append(String.format(\"%d. %s\", i + 1, filteredTaskList.get(i)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    output.append(String.format(\"%d. %s%n\", i + 1, filteredTaskList.get(i)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return ui.showOutput(output.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 45
    }
  },
  {
    "path": "src/main/java/duke/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents a help command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert tasks !\u003d null : \"tasks have not been initialised\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert ui !\u003d null : \"ui have not been initialised\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert storage !\u003d null : \"storage have not been initialised\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        output.append(ui.getInstructions());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return ui.showOutput(output.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 21
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static void main(String ... args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            assert ap !\u003d null : \"MainWindow has an error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 29
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Robot.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                DialogBox.getDukeDialog(duke.getUi().showWelcome(), dukeImage)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 57
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Encapsulates parsing of logic."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns appropriate Command given user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param fullCommand User input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return Command of user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws DukeException If user inputs invalid command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String[] strings \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String description \u003d String.join(\" \", Arrays.copyOfRange(strings, 1, strings.length));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        switch (convertCommandToEnum(strings[0])) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            if (strings.length \u003e 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                throw new DukeException(\"Please key in a correct command.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return new ShowCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return new UpdateCommand(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return new DeleteCommand(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return new FindCommand(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case TODO: case EVENT: case DEADLINE:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return new AddCommand(convertCommandToEnum(strings[0]), description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new DukeException(\"Please key in a correct command.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private static CommandEnum convertCommandToEnum(String string) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        switch (string) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return CommandEnum.BYE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return CommandEnum.LIST;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return CommandEnum.DONE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return CommandEnum.DELETE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return CommandEnum.FIND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return CommandEnum.TODO;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return CommandEnum.DEADLINE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return CommandEnum.EVENT;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return CommandEnum.HELP;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new DukeException(\"Please key in a correct command.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 65
    }
  },
  {
    "path": "src/main/java/duke/ShowCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents a show command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert tasks !\u003d null : \"tasks have not been initialised\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert ui !\u003d null : \"ui have not been initialised\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert storage !\u003d null : \"storage have not been initialised\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            output.append(\"Theres currently nothing in your list.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            IntStream.range(0, tasks.size()).forEach(i -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                if (i \u003d\u003d tasks.size() - 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    output.append(String.format(\"%d. %s\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    output.append(String.format(\"%d. %s%n\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return ui.showOutput(output.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 33
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Encapsulates storing logic"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a Storage class with specified file path."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param filePath Location of the file where data is to be stored."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Writes tasks to file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param tasks Tasks to be written."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws IOException If an error occurs during writing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void writeToFile(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert tasks !\u003d null : \"tasks have not been initialised\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        FileWriter file \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        IntStream.range(0, tasks.size()).forEach(i -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            if (tasks.get(i) instanceof Todo) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                s.append(String.format(\"T | %d | %s\", tasks.get(i).getStatus() ? 1 : 0, tasks.get(i).getDescription()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            } else if (tasks.get(i) instanceof Deadline) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                s.append(String.format(\"D | %d | %s | %s\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                        tasks.get(i).getStatus() ? 1 : 0,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                        tasks.get(i).getDescription(), ("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                                (Deadline) tasks.get(i)).getDate()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            } else if (tasks.get(i) instanceof Event) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                s.append(String.format(\"E | %d | %s | %s\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                        tasks.get(i).getStatus() ? 1 : 0,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                        tasks.get(i).getDescription(), ("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                                (Event) tasks.get(i)).getDate()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            s.append(\"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        file.write(s.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Reads file and returns ArrayList of tasks stored."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return ArrayList of tasks stored."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws DukeException If error occurs during reading file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTasksFromFile() throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            makeDirectory(file);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                String row \u003d s.nextLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                String[] strArray \u003d row.split(\" \\\\| \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                switch (strArray[0]) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    tasks.add(new Todo(strArray[2], \"1\".equals(strArray[1])));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    tasks.add(new Deadline(strArray[2], \"1\".equals(strArray[1]), LocalDate.parse(strArray[3])));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    tasks.add(new Event(strArray[2], \"1\".equals(strArray[1]), LocalDate.parse(strArray[3])));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    throw new DukeException(\"File in incorrect format.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new DukeException(\"Error reading file.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private void makeDirectory(File file) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new DukeException(\"Failed to create file for storage.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 98
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a task with description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a task with description and state of it."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param isDone State of task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns status of task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return Status of task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns description of task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 54
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Encapsulates a list of tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs an empty task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a task list with the specified tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param tasks ArrayList of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert tasks !\u003d null : \"ArrayList have not been initialised\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns true if this TaskList contains no elements."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return True if this TaskList contains no elements."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns number of elements in this TaskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return Number of elements in this TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns the element at the specified position in this TaskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param index Index of the element to return."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return The element at the specified position in this TaskList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Removes the element at the specified position in this TaskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Shifts any subsequent elements to the left (subtracts one from their indices)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param index The index of the element to be removed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Appends the specified element to the end of this TaskList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param task Task to be appended to this list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert task !\u003d null : \"task have not been initialised\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Stream\u003cTask\u003e toStream() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return this.tasks.stream();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 74
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents a Todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a Todo class with description."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param description Description of Todo task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a Todo class with description and status."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param description Description of Todo task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param isDone Status of Todo task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 28
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Encapsulates user interface interactions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final String instructions \u003d \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"Send me a task in one of the following formats and I\u0027ll store it for you.\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"\\tTodo: \\\"todo \u003cdescription\u003e\\\"\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"\\tDeadline: \\\"deadline \u003cdescription\u003e /by \u003cYYYY-MM-DD\u003e\\\"\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"\\tEvent: \\\"event \u003cdescription\u003e /at \u003cYYYY-MM-DD\u003e\\\"\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"Send \\\"list\\\" to see all tasks.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"Send \\\"find \u003cstring of choice\u003e\\\" to see all related tasks.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"Send \\\"done \u003citem number\u003e\\\" to mark an item as done\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"Send \\\"delete \u003citem number\u003e\\\" to delete and item from the list\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"Send \\\"bye\\\" to end our conversation.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"Send \\\"help\\\" to end see the commands again.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Prints error message when error occurs while loading data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        System.out.println(\"Error occurred while loading data.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Shows welcome message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return The welcome message by duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return instructions + \"\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Prints specified output message for user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param output Message for the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return The output by Duke."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String showOutput(String output) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Gets instruction message."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @return The instruction message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String getInstructions() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return instructions;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 51
    }
  },
  {
    "path": "src/main/java/duke/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents an update command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs an update command with description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param description Description of command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    UpdateCommand(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert tasks !\u003d null : \"tasks have not been initialised\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert ui !\u003d null : \"ui have not been initialised\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert storage !\u003d null : \"storage have not been initialised\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            int itemNumber \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            tasks.get(itemNumber - 1).isDone \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            output +\u003d \"Nice, I\u0027ve marked this item as done:\\n\\t\" + tasks.get(itemNumber - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return ui.showOutput(output);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new DukeException(\"Please key in a valid number for \\\"done\\\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new DukeException(ex.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 40
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #383838;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" graphicTextGap\u003d\"10.0\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" textFill\u003d\"WHITE\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #181818;\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 19
    }
  },
  {
    "path": "src/test/java/duke/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Class that encapsulates tests for the Deadline class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Tests the toString() method for Deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void toString_test_formattedString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Task t \u003d new Deadline(\"test\", true, LocalDate.parse(\"2020-03-19\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assertEquals(\"[D][✓] test (by: Mar 19 2020)\", t.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 21
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Class that encapsulates tests for the Parser class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Tests if the input \"bye\" would return an ExitCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws DukeException if DukeException is thrown in Parser.parse(...)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void parse_bye_exitTrue() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assertEquals(new ExitCommand().isExit(), Parser.parse(\"bye\").isExit());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 19
    }
  },
  {
    "path": "src/test/java/duke/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Class that encapsulates tests for the Task class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Tests the toString() method for Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void toString_normal_formattedString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Task t \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assertEquals(\"[✘] test\", t.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 19
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 2
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 3,
      "-": 35
    }
  }
]
