[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    runtime files(\"src/main\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " sourceSets {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     main {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         java {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "             srcDirs \u0027src\\\\main\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     test {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         java {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "             srcDirs \u0027src\\\\test\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 32,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * \u003ch1\u003eDuke IP Project\u003c/h1\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * \u003cp\u003eA simple task managing chatbot. Functionalities include saving tasks, completing tasks, and \u003c/p\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Ui duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Instantiates a new Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        duke \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return duke.takeInputAndReturn(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/* ------------------------------------------------------DEPRECATED-------------------------------------------------- */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    public static void main(String[] args) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        Ui duke \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        duke.start();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        /* Initial setting of password */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        while (!duke.checkAuth()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            System.out.println(\"Please set a user password for auth.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            String p1 \u003d sc.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            System.out.println(\"Please confirm password\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            String p2 \u003d sc.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            if (p1.trim().equals(p2.trim())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//                duke.setPw(p1.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        /* Main App Loop */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        int x \u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        //Loop until exit command given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        while (x \u003e 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            if (sc.hasNext()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//                x \u003d duke.takeInputAndReturn(sc.nextLine());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//                duke.end();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        if (x \u003c 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            System.out.println(\"Fatal system error uncaught in main logic\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 69,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.uicomponents.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        System.out.println(\"Launching Duke!!!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        System.out.println(\"Duke processes finished.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 15
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.parser.Controller;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Class that separates the command checker/parser from the main(). Catches command that"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * ends/closes program, terminating it immediately. Prints to std::out."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String GREETING \u003d \"Hello, I\u0027m Duke\\nwhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String CIAO \u003d\"Spero di rivederti presto\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String CONVO_START \u003d GREETING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String END \u003d \"|end|ciao|bye|close|exit|nights|shutdown|\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String USER_GREETINGS \u003d \"|hi|hey|wassup|\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final Controller CONTROLLER \u003d Controller.init();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private boolean enterPasswordMode \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private boolean confirmPasswordMode \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private boolean hasBeenGreeted \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Receives command from user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Handling of \"bye\" command takes place here, for now."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * This method is the main display method of Duke, and prints straight to std::out."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param s command given by user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return -1 indicating failure, 0 indicating end of program, 1 indicating program is running"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String takeInputAndReturn(String s) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // End command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (!s.isEmpty() \u0026\u0026 END.contains(\"|\" + s + \"|\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return \"See yall around!!!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // Checks if the second entering of the password matches the first entering."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (confirmPasswordMode) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            // The second entering of password matches the first entering."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (password.equals(s)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                CONTROLLER.saveUserDetails(password);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                confirmPasswordMode \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                enterPasswordMode \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return \"Password saved successfully.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                enterPasswordMode \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                confirmPasswordMode \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return \"The password you have entered does not match.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // First attempt of entering the password by the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (enterPasswordMode) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            password \u003d s;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            confirmPasswordMode \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            enterPasswordMode \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return \"Please enter your password again.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (!CONTROLLER.hasUserEnteredDetails()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            enterPasswordMode \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return \"You are somebody new! Please state your user password.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // Initiating a conversation with duke with \u0027hi\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (!hasBeenGreeted \u0026\u0026 USER_GREETINGS.contains(\"|\" + s + \"|\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            hasBeenGreeted \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return CONVO_START;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (hasBeenGreeted \u0026\u0026 USER_GREETINGS.contains(\"|\" + s + \"|\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return \"Why are you greeting me again?\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String reply \u003d CONTROLLER.parseAndExec(s);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return reply;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 80
    }
  },
  {
    "path": "src/main/java/duke/UserAuthenticator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class UserAuthenticator {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Storage object to access and manipulate files/saved data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Storage passwordStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Private constructor for a UserAuthenticator object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private UserAuthenticator() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        passwordStorage \u003d new Storage(\"cache\", \"pw.dat\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Factory methods"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return UserAuthenticator object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static UserAuthenticator init() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new UserAuthenticator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Checks if the user details is cached previously."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return True if the user details is already cached."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean isUserCached() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return passwordStorage.isSavedFilePresent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Initialises the user data file to store the authentication details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void initUserCache() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        passwordStorage.instantiateFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Save the user details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param userDetails The given details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void save(String userDetails) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        passwordStorage.instantiateFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        passwordStorage.writeStringToFile(userDetails);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Checks if the given user details matches the saved details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param userDetails The details to be validated."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return True if the given details matches the saved details."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean check(String userDetails) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return passwordStorage.readDataFileAsString().equals(userDetails);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 62
    }
  },
  {
    "path": "src/main/java/duke/dependencies/dukeexceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * \u003cp\u003eThe class DukeException indicates runtime conditions or situations that needs to be caught."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * DukeExceptions and its subclasses are checked exceptions.\u003c/p\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * \u003cp\u003eChecked exceptions need to be declared in a method or constructor\u0027s throws clause if they can"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * be thrown by the execution of the method or constructor and propagate outside the method or"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * constructor boundary.\u003c/p\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * \u003cp\u003eHow the program should respond depends on how the implementation and the characteristic of the main.java.Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Given that the program should continue running and accepting user input, the program is recommended to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * respond with a error message to try to get the user to pass in a valid input that would not throw"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * DukeExceptions\u003c/p\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructs a new exception with the specified detail message.  The"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * cause is not initialized, and may subsequently be initialized by"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * a call to {@link #initCause}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param   message   the detail message. The detail message is saved for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *          later retrieval by the {@link #getMessage()} method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 30
    }
  },
  {
    "path": "src/main/java/duke/dependencies/dukeexceptions/EmptyTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * \u003cp\u003eThis class extends DukeExceptions, and indicates that the user has passed in a command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * regarding a task but did not specify the task.\u003c/p\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class EmptyTaskException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructs a new ExmptyTaskException with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param   message   the detail message. The detail message is saved for"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *          later retrieval by the {@link #getMessage()} method."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public EmptyTaskException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 18
    }
  },
  {
    "path": "src/main/java/duke/dependencies/dukeexceptions/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * \u003cp\u003eThis class extends DukeExceptions, and indicates that the user has passed in a command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * regarding a date that is invalid.\u003c/p\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class InvalidDateException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructs a new InvalidDateException with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param   message   the detail message. The detail message is saved for"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *          later retrieval by the {@link #getMessage()} method."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public InvalidDateException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 18
    }
  },
  {
    "path": "src/main/java/duke/dependencies/dukeexceptions/InvalidPassException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class InvalidPassException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public InvalidPassException(String m) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(m);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 7
    }
  },
  {
    "path": "src/main/java/duke/dependencies/dukeexceptions/MissingListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * \u003cp\u003eThis class extends DukeExceptions, and is thrown when the saved todoList cannot be found in saved"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * cache.\u003c/p\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class MissingListException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructs a new MissingListException with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param   message   the detail message. The detail message is saved for"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *          later retrieval by the {@link #getMessage()} method."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public MissingListException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 18
    }
  },
  {
    "path": "src/main/java/duke/dependencies/dukeexceptions/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * \u003cp\u003eThis class extends DukeExceptions, and is thrown when the user passes a command that is invalid or unknown"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * and main.java.Duke cannot parse the command.\u003c/p\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructs a new UnknownCommandException with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param   message   the detail message. The detail message is saved for"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *          later retrieval by the {@link #getMessage()} method."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public UnknownCommandException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 18
    }
  },
  {
    "path": "src/main/java/duke/dependencies/dukeexceptions/UnspecifiedDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * \u003cp\u003eThis class extends DukeExceptions, and is thrown the user fails to specify a certain date or"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * deadline for a deadline or event.\u003c/p\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class UnspecifiedDateException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructs a new UnspecifiedDateException with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param   message   the detail message. The detail message is saved for"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *          later retrieval by the {@link #getMessage()} method."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public UnspecifiedDateException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 18
    }
  },
  {
    "path": "src/main/java/duke/dependencies/executable/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.executable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Class to encapsulate a command given by the user to Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Commands have predefined types such as delete, todo... etc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Contains the task associated with the command. For which the command is to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Some task may be empty and could be associated with Commands. For eg. a \u0027list\u0027 command does not have a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class Command implements Executable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private CommandType command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Command(CommandType command, Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the type of the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Command type."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public CommandType getType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the Task object for this command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Task object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public Task getTask() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /* -------------------------------------- Static Factory Methods --------------------------------------------------*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns a Command of type ADD. This command encapsulates the instruction to add a specific Task object to"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * the task list of the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param task The Task object representing the task user wants to complete."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Command of type ADD."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Command createAddCommand(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new Command(CommandType.ADD, task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns a Command of type DONE. This command encapsulates the instruction to complete a specific Task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * object that the user wants to complete."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param task The Task object representing the task user wants to complete."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Command of type DONE."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Command createDoneCommand(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new Command(CommandType.DONE, task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns a Command of type LIST. This command encapsulates the instruction to list all task in the task list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param task This does not affect the command in any way aas LIST commands do not inherently associate with any"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *             task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Command of type LIST."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Command createListCommand(Task task) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new Command(CommandType.LIST, Task.createEmptyTask());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns a Command of type DELETE. This command encapsulates the instruction to remove a Task from the task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * list by the index of the Task in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param task The Task object that the user wants to delete."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Command of type DELETE."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Command createDeleteCommand(Task task) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new Command(CommandType.DELETE, task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns a Command of type FIND. This command encapsulates the instruction to find tasks in the list that has"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * words matching the keyword specified by the user in the \u0027task\u0027."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param keyword Task object, which holds the keyword that has to be found in the list (This task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *             object is a Misc. Task)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Command of type FIND."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Command createFindCommand(Task keyword) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new Command(CommandType.FIND, keyword);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Command createClearCacheCommand(Task task) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new Command(CommandType.CLEAR, null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Command createCheckAuthCommand(Task task) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new Command(CommandType.AUTHCHECK, null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    public static Command createEventCommand(Task task) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        return new Command(CommandType.EVENT, task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    public static Command createDeadlineCommand(Task task) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        return new Command(CommandType.DEADLINE, task);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    public static Command createTodoCommand(Task task) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        return new Command(CommandType.TODO, task);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    public static Command createGetCompletedCommand(Task task) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        return new Command(CommandType.GETCOMPLETED, null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    public static Command createGetIncompleteCommand(Task task) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        return new Command(CommandType.GETINCOMPLETE, null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    public static Command createGetListSizeCommand(Task task) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        return new Command(CommandType.GETLISTSIZE, null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 128
    }
  },
  {
    "path": "src/main/java/duke/dependencies/executable/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.executable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * For use to indicate the different performable commands Duke can execute."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    LIST, INVALID, DONE, DELETE, ADD, FIND, CLEAR, AUTHCHECK"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 8
    }
  },
  {
    "path": "src/main/java/duke/dependencies/executable/Executable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.executable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Classes implementing this interface have a command type and can be interpreted by their type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Task can be extracted as well as implementing classes serve as a wrapper for the Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public interface Executable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the command type of the Executable object. Manipulation of todo list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * is based on command type in conjunction with the Task contained."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return command type"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    CommandType getType();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the Task object wrapped within the Executable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Task object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    Task getTask();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 25
    }
  },
  {
    "path": "src/main/java/duke/dependencies/executor/Executor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.executor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.executable.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.executable.Executable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.storage.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static duke.dependencies.executable.CommandType.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Class that enables the logical manipulation of given Executable. Interprets the type of Command and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * carries out the command on the associated Task and the task list of the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class Executor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final TaskList TASK_LIST \u003d TaskList.initStorage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /* Half-assed attempt at concurrency lock."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    There should be no need for concurrency"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    in this application. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private CommandType commandState;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /** Private constructor. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Executor() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Initializer for the executor. Returns the Executor object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Executor object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Executor initExecutor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new Executor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Executes the given command and returns with a reply indicating the state of completion of given Executable."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param executable The command to be executed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return String specifying what happened/what was done (no newline character at end of reply)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String receiveAndExec(Executable executable) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // TODO: Adding of new commands is to be done here."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        switch(executable.getType()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                setState(LIST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case ADD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                setState(ADD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                setState(DELETE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                setState(DONE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                setState(FIND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case CLEAR:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                setState(CLEAR);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                setState(INVALID);  // Should never reached this stage."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return execAndReturn(executable);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns number of completed tasks in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Integer."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public int getNumOfCompletedTasks() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return TASK_LIST.getNumOfCompleted();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns number of incomplete tasks in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Integer."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public int getNumOfIncompleteTasks() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return TASK_LIST.getNumOfIncomplete();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns number of items in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Integer."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return TASK_LIST.getListSize();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /* -------------------------------------------------------------------------------------------------------------- */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    // TODO: Ideally this class should not be returning strings. String should be returned in the Parser"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private String execAndReturn(Executable e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // Block scoped the variable declaration in the cases."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        switch(commandState) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case LIST: {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return TASK_LIST.getTodosInList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case DONE: {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                /* C-MassOperations */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                // Done command would have a task of \"1 2 3 4\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                String[] nums \u003d e.getTask().showTaskDescription().split(\"[\\\\D]+\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                Integer[] arr \u003d new Integer[nums.length];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                for (int i \u003d 0; i \u003c nums.length; i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    arr[i] \u003d Integer.valueOf(nums[i]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return TASK_LIST.done(arr);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case DELETE: {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                String[] nums \u003d e.getTask().showTaskDescription().split(\"[\\\\D]+\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                Integer[] arr \u003d new Integer[nums.length];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                for (int i \u003d 0; i \u003c nums.length; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    arr[i] \u003d Integer.valueOf(nums[i]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return TASK_LIST.deleteTask(arr);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case FIND: {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                String keyword \u003d e.getTask().showTaskDescription();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return TASK_LIST.findMatching(keyword);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case ADD: {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                Task t \u003d e.getTask();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return TASK_LIST.add(t);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case CLEAR: {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return TASK_LIST.clearList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return \"Error\";   // This should not happen."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void setState(CommandType c) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.commandState \u003d c;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 153
    }
  },
  {
    "path": "src/main/java/duke/dependencies/parser/Controller.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.UserAuthenticator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.dukeexceptions.EmptyTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.dukeexceptions.InvalidDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.dukeexceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.dukeexceptions.UnspecifiedDateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.executable.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.executable.Executable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.executor.Executor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Parser class which parses the given input. Checks if any command is given"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * and command is valid. Also validates the format of the dates given and ensures/enforces user compliance to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * input formats before parsing into an Executable"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class Controller {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Object for executing the commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Executor exe;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Object to authenticate the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final UserAuthenticator userAuthenticator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private boolean isInUserAuthenticationMode \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Private constructor for a Parser object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Controller() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        exe \u003d Executor.initExecutor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        userAuthenticator \u003d UserAuthenticator.init();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Initializer for Parser."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return The Parser object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Controller init() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new Controller();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Checks the whether the user has entered his details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return True if the user details has already been cached."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean hasUserEnteredDetails() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return userAuthenticator.isUserCached();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Saves the given user details."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param details User details to be saved."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void saveUserDetails(String details) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        userAuthenticator.save(details);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Parses given command and determines if it is a valid command,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * and calls an executor to execute a valid command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param command The given input by the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Reply: what was done by the execution of input."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String parseAndExec(String command) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Parser parser;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (!isInUserAuthenticationMode) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                parser \u003d Parser.parseAndCheck(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            } catch (EmptyTaskException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return \"You have to tell me what you want from me\\nbefore I can do anything!!! O.o\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            } catch (UnspecifiedDateException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return \"You need to give me the date!!!\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            } catch (UnknownCommandException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return \"C\u0027mon, you know I don\u0027t understand this!\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return \"I don\u0027t understand the date you are giving -_-\\n\" +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                        \"Please give in either format:\\n\" +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                        \"1. MM/dd/yyyy\\n2. yyyy-MM-dd\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return \"HUH???\" + e.getMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            /* If no DukeException is thrown, it means user input is valid and follows all specific format */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Executable e \u003d parser.getExecutable();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            String reply;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            reply \u003d exe.receiveAndExec(e);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            switch (e.getType()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return String.format(\"Here are the tasks in your list:\\n%s\", reply);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return String.format(\"Congratz! I will marked this task as completed for you!\\n%s\\n\" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                                \"Keep up the good work and continue to stay motivated.\\n\" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                                \"You\u0027ve only got %d task left to be completed!\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                        reply,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                        exe.getNumOfIncompleteTasks());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return String.format(\"Noted. I\u0027ve removed this task:\\n%s\\n\" +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                                \"Now you have %d tasks left in the list.\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                        reply,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                        exe.getListSize());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case AUTHCHECK:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                isInUserAuthenticationMode \u003d true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return \"Please enter your password before I clear your whole list.\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return String.format(\"Here are the tasks matching: %s\\n\" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                        reply, e.getTask().showTaskDescription());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            case ADD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return String.format(\"Got it! I have added the task:\\n%s\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                                + \"Now you have %s tasks in the list.\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                        reply,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                        exe.getListSize());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return \"Something is not right. This should not be printed. Error in Controller.java\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            // In user authentication mode. Check for user password validity."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (userAuthenticator.check(command)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                isInUserAuthenticationMode \u003d false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                String reply \u003d exe.receiveAndExec(Command.createClearCacheCommand(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return reply;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                // Quits user authentication mode even if the password entered is wrong."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                // Clearing of task list will not execute."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                isInUserAuthenticationMode \u003d false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return \"You\u0027ve entered the wrong pw!\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 152
    }
  },
  {
    "path": "src/main/java/duke/dependencies/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.dukeexceptions.EmptyTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.dukeexceptions.InvalidDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.dukeexceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.executable.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.executable.Executable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.task.TaskDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * A Class to parse commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Executable command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructor for the checker object. Validates the command given/if and creates an Executable object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * that can be passed to the executor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param e String to be parsed into an Executable for Executor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Parser(Executable e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.command \u003d e;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the Executable object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Executable object holds the Task object inside."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return The Executable object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public Executable getExecutable() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param s String to be parsed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return A parser object wrapped around an Executable."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws DukeException Thrown if the given string input from"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * the user does not match any form of valid commands."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Parser parseAndCheck(String s) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return parseExplicitCommand(s);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//     * @param pw Password/name to be checked with."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//     * @return"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//     * @throws DukeException Thrown if the given string is incorrect."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//     * AKA no authorisation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    public static Parser authenthicateUser(String pw) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        Storage s \u003d new Storage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        if (s.checkUserAuth(pw)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//                return parseExplicitCommand(\"authentication::success\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//                throw e;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            throw new InvalidPassException(\"Wrong password\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /* -------------------------------------- END OF PUBLIC METHODS ----------------------------------------------- */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Checks for command that is passed in explicit format."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * eg."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * 1) \"event (task) /at (date)\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * 2) \"todo (task)\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * 3) \"deadline (task) /by (date)\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param s input"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Checker object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static Parser parseExplicitCommand(String s) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Executable e;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        /* LIST COMMAND */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (checkForWord(s, \"list\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e \u003d Command.createListCommand(null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        /* DONE COMMAND */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        else if (checkForWord(s, \"done\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            String task \u003d cutOutTheWord(s, \"done \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (task.isBlank() || task.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                throw new EmptyTaskException(\"Error: Done task cannot be empty\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Task t \u003d Task.createMiscTask(task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e \u003d Command.createDoneCommand(t);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        /* TODO_COMMAND */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        else if (checkForWord(s, \"todo\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            String task \u003d cutOutTheWord(s, \"todo \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Task t \u003d Task.createTodo(task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (task.isEmpty() || task.isBlank()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                throw new EmptyTaskException(\"Error: Todo task cannot be empty\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e \u003d Command.createAddCommand(t);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        /* EVENT COMMAND */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        else if (checkForWord(s, \"event\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            String task \u003d cutOutTheWord(s, \"event \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (task.isBlank() || task.isEmpty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                throw new EmptyTaskException(\"Error: Event task cannot be empty\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            String[] arr \u003d task.split(\"/at\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (!TaskDate.isValidFormat(arr[1].trim())) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                throw new InvalidDateException(\"Error: Date format not accepted.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Task t \u003d Task.createEvent(arr[0].trim(), arr[1].trim());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e \u003d Command.createAddCommand(t);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        /* DEADLINE COMMAND */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        else  if (checkForWord(s, \"deadline\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            String task \u003d cutOutTheWord(s, \"deadline \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (task.isEmpty() || task.isBlank()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                throw new EmptyTaskException(\"Error: Deadline tasks cannot be empty\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            String[] arr \u003d task.split(\"/by\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (!TaskDate.isValidFormat(arr[1].trim())) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                throw new InvalidDateException(\"Error: Date format not accepted.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Task t \u003d Task.createDeadline(arr[0].trim(), arr[1].trim());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e \u003d Command.createAddCommand(t);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        /* DELETE COMMAND */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        else if (checkForWord(s, \"delete\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            String task \u003d cutOutTheWord(s, \"delete \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (task.isEmpty() || task.isBlank()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                throw new EmptyTaskException(\"Error: Task to be deleted cannot be empty\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Task t \u003d Task.createMiscTask(task);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e \u003d Command.createDeleteCommand(t);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        /* FIND COMMAND */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        else if (checkForWord(s, \"find\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            String task \u003d cutOutTheWord(s,\"find \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (task.isEmpty() || task.isBlank()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                throw new EmptyTaskException(\"Error: Empty field for find: keyword\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Task t \u003d Task.createMiscTask(task);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e \u003d Command.createFindCommand(t);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        /* CHECK AUTHENTICATION COMMAND */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        else if (checkForWord(s, \"clear data\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e \u003d Command.createCheckAuthCommand(null);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        /* CLEAR CACHE(TASK LIST) COMMAND */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        else if (checkForWord(s, \"authentication::success\")) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e \u003d Command.createClearCacheCommand(null);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        /* MYSTERIOUS ERROR/COMMAND */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new UnknownCommandException(\"Error: Unknown command\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new Parser(e);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Case insensitive check for a word."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param line Line to check."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param word Word to check for."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return True if the word is in the line."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static boolean checkForWord(String line, String word) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return Pattern.compile("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                String.format(\".*?\\\\b%s\\\\b.*?\", word),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                Pattern.CASE_INSENSITIVE)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .matcher(line)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .find();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the string with the given word cut out, case-insensitive removal"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param line Line to cut from."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param word Word to cut out."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Line without the command."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static String cutOutTheWord(String line, String word) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String c2 \u003d word.toUpperCase(Locale.UK);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String l2 \u003d line.toUpperCase(Locale.UK);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        int idx \u003d l2.indexOf(c2);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return line.substring(idx + word.length()).trim();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /* ---------------------------------------- Additional Feature Section ------------------------------------------ */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Instead of parsing just natural language, this function will be able to parse a natural sentence."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * eg. \"I have a meeting on Monday.\" -\u003e \"event meeting /at Monday\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Remember to edit this only in the branch \"add-ons\"."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static Parser parseNaturalLanguage(String s) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new Parser(null);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 229
    }
  },
  {
    "path": "src/main/java/duke/dependencies/storage/FNV64.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Fowler-No-Voll hash utility function."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class FNV64 {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    // Unused class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final long PRIME \u003d 0x100000001b3L;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final long OFFSET \u003d 0xcbf29ce484222325L;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Hash a string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param k hash a string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return a 64 bit hash"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static long hash(String k) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        long ret \u003d OFFSET;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        int l \u003d k.length();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        for (int i \u003d 0; i \u003c l; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            ret ^\u003d k.charAt(i);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            ret *\u003d PRIME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 28
    }
  },
  {
    "path": "src/main/java/duke/dependencies/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.io.DataInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.io.DataOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.dukeexceptions.MissingListException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Utility lass to handle the reading and writing to files."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Data read and written are objects implementating Serializable interface."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Errors and exceptions thrown during the reading and writing is handled here."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /** Paths for sa. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Path DIR_PATH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Path FILE_PATH;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final static Path CURRENT_DIR_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private boolean isContentStringalizable;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructor for the storage class to read and write to files."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public Storage(String dirName, String fileName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        DIR_PATH \u003d Paths.get(\".\", dirName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        FILE_PATH \u003d DIR_PATH.resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        isContentStringalizable \u003d Parser.checkForWord(fileName, \".dat\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns whether the save file is present."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return True if the file is present, else otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean isSavedFilePresent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return Files.exists(FILE_PATH );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Instantiates the file in specified directory. Does nothing if the file is present."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void instantiateFile() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assert !isSavedFilePresent();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (Files.exists(DIR_PATH)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                if (Files.exists(FILE_PATH)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    Files.createFile(FILE_PATH);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                System.out.println(\"Clean slate: Initialising cache...\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                Files.createDirectory(DIR_PATH);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                Files.createFile(FILE_PATH);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                System.out.println(\"Clean slate: Initialising cache...\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            System.out.println(\"Unexpected error occurred while trying to create a file to save your data.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Saves the given object. Overwrites the file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param t the given object to overwrite with"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param \u003cT\u003e type of the object given"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public \u003cT\u003e void overwriteAndSave(T t) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            FileOutputStream fos \u003d new FileOutputStream(FILE_PATH.toString(), false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            oos.writeObject(t);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            oos.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the object stored in the data file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param \u003cT\u003e Object of type T."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return T The object stored int he file. Serializable."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws MissingListException if the file is not found."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public \u003cT\u003e T openAndReadObject() throws MissingListException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(FILE_PATH.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return (T) ois.readObject();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new MissingListException(\"Error: Unable to load your saved list\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Reads the file contents as a String"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String readDataFileAsString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assert isContentStringalizable : \"Wrong usage of storage: .dat file expected instead .txt file found.\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            DataInputStream dis \u003d new DataInputStream(new FileInputStream(FILE_PATH.toString()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            String r \u003d dis.readUTF();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            dis.close();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return r;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Writes the given string to the file. This overwrites previous data in the file. Equivalent to the creation of"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * a new user details."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param pw The string to be written to the file."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void writeStringToFile(String pw) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assert isSavedFilePresent() \u0026\u0026 isContentStringalizable;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            DataOutputStream dos \u003d new DataOutputStream(new FileOutputStream(FILE_PATH.toString()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            dos.writeUTF(pw);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            dos.close();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /* ---------------------------------------- DEPRECATED ---------------------------------------------------------- */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//     * Checks the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//     * @return"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    public boolean checkFileCache() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            DataInputStream dis \u003d new DataInputStream(new FileInputStream(FILE_PATH.toString()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            dis.close();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//            return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 164
    }
  },
  {
    "path": "src/main/java/duke/dependencies/storage/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.dukeexceptions.MissingListException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.task.Schedulable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Class that implements the list of Tasks the user has. Implemented with an ArrayList,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /** Loader Object to read and write to save file. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Storage l;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /** todoList that stores the tasks. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private ArrayList\u003cSchedulable\u003e todoList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /** Private constructor */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        l \u003d new Storage(\"data\", \"taskdata.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // Checks if there are any save files of todoList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // If there is, attempt to read the object as arraylist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // If there is none, instantiates the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // And assigns the todolist to a new arraylist."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (l.isSavedFilePresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                todoList \u003d l.openAndReadObject();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            } catch (MissingListException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//                e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                System.out.println(\"OOPS, there seems to be data corruption in the todolist!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                System.out.println(\"Initialising new directory for saving your list...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                todoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            l.instantiateFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            todoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Initialises and returns the Store object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return the Store object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static TaskList initStorage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns a String in the form of a list with \\n appended"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * at the end of each item."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Returns"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String getTodosInList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        for (int i \u003d 0; i \u003c todoList.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            sb.append(i+1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            sb.append(\". \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            sb.append(todoList.get(i).toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            // The last item should not have a newline character. List form."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (i !\u003d todoList.size() - 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (todoList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            sb.append(\"Oops!!! Theres\u0027s nothing here!\\n\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    .append(\"Try adding something to your list?\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Deletes the entire list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return A string reply indicating list data is wiped."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String clearList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        todoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        l.overwriteAndSave(todoList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return \"List cleared.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Adds the specified task to the todoList. Returns a string representation"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * of the task that was added as a reply."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param task Task object to be added."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return String representing the newly added task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String add(Task task) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assert !task.isItEmpty() \u0026\u0026 !task.isMiscTask();  // Add Assertions"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        todoList.add(task);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        l.overwriteAndSave(todoList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return task.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Finds the given task at index and completes it."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param nums An array of numbers in string form."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return String representing the newly completed task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String done(Integer... nums) { // VARARGS // C-MassOps"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        for (int i \u003d 0; i \u003c nums.length; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Schedulable t \u003d todoList.get(nums[i] - 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            t.completed();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            sb.append(t.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (i !\u003d nums.length - 1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        l.overwriteAndSave(todoList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Finds all given task specified and deletes it from"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param nums An array of numbers in string form."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return String representing the deleted task."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String deleteTask(Integer... nums) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        List\u003cInteger\u003e arr \u003d Arrays.asList(nums);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        List\u003cInteger\u003e sortedArr \u003d arr.stream().sorted().collect(Collectors.toList()); // A-Streams"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        int offset \u003d 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        for (int i \u003d 0; i \u003c sortedArr.size(); i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            int taskIndex \u003d sortedArr.get(i) - offset - 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Schedulable t \u003d todoList.get(taskIndex);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            sb.append(t.toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (i !\u003d sortedArr.size() - 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            todoList.remove(taskIndex);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            offset++;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        l.overwriteAndSave(todoList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the number of tasks in the todoList. Includes completed task."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Size of the list as a String."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return todoList.size();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the number of completed tasks in the list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Integer number of completed items in the task list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public int getNumOfCompleted() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        int c \u003d 0;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        for (Schedulable schedulable : todoList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (schedulable.isCompleted()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                c++;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Finds and returns all matching task that has the keyword in the task."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param keyword Keyword to be matched."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return A list in the form of a string of all task matching the keyword."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String findMatching(String keyword) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        List\u003cSchedulable\u003e filteredList \u003d todoList.stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .filter(task -\u003e {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            String taskString \u003d task.toString();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return taskString.contains(keyword);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        for (Schedulable task : filteredList) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            String taskString \u003d task.toString();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            sb.append(i++)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    .append(taskString)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        sb.setLength(sb.length() - 1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the number of incomplete tasks in the list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Integer number of incomplete items in the task list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public int getNumOfIncomplete() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        int c \u003d 0;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        for (Schedulable schedulable : todoList) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (!schedulable.isCompleted()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                c++;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 218
    }
  },
  {
    "path": "src/main/java/duke/dependencies/task/CompletionState.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * To indicate whether a task has been completed or not."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "enum CompletionState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    COMPLETED, UNFINISHED"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 8
    }
  },
  {
    "path": "src/main/java/duke/dependencies/task/Schedulable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * An interface representing a contract that all implementing classes are able to complete the scheduled task, check"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * whether the task is completed and get a description of the task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public interface Schedulable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Initiates a completion of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * State of completion will be changed to completed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void completed();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Checks whether the task is completed is completed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return True if the task is completed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    boolean isCompleted();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Gets a description of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return String describing the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    String showTaskDescription();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 27
    }
  },
  {
    "path": "src/main/java/duke/dependencies/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static duke.dependencies.task.CompletionState.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Represents a task, something that is associated with a given Executable/command from the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public abstract class Task implements Serializable, Schedulable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    protected CompletionState state;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    protected String task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String TICK \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String CROSS \u003d \"\\u274c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    protected Task(String task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.state \u003d UNFINISHED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    abstract String getDateString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns whether the Task has a given date/deadline which is represented by a TaskDate object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return True if the Task has a Task Date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean hasADate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the String describing this Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return String representation of this Task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String showTaskDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns whether the Task is an empty Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return True if it is empty."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean isItEmpty() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns whether this task is a Miscellaneous task. Miscellaneous task are task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * defined to be task which are not for adding to the user\u0027s task list. These task do not represent"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * task in which the user can complete in any way shape or form. They are meant for the Duke\u0027s"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * implementation."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return True if the task is a Misc. task, false otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean isMiscTask() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Completes this Task. This represents the user finishing this task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void completed() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.state \u003d COMPLETED;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns whether this Task is completed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return True if the user has completed this task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return state \u003d\u003d COMPLETED;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /* -------------------------- Static factory methods to create different Tasks ----------------------- */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns a task representing the corresponding task index in the todoList of the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Task corresponds to Done, Delete commands."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param task This task should be in the inform \"1\" or \"1 2 3\"."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Miscellaneous Task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Task createMiscTask(String task) { return new DoneTask(task); }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns a task that is empty. Corresponds to a List command where there is no task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Empty Task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Task createEmptyTask(){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new EmptyTask();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns a task representing a todoTask. Task has no date or deadline associated."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param task String describing the task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Todo Task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Task createTodo(String task) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new ToDos(task);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns a task representing an event. Task will have a date associated with it,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * specifying when the event is taking place."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param task String describing the task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param date Date string, in valid format: \"dd/MM/uuuu\" or \"uuuy-MM-dd\"."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Event Task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Task createEvent(String task, String date) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new Events(task, date);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns a task representing a deadline. Deadlines has to be completed by the specified date"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * De deadline associatione is user referencion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param task String describing the task."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param date Date string, in valid format: \"dd/MM/uuuu\" or \"uuuy-MM-dd\"."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Deadline Task."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static Task createDeadline(String task, String date) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new Deadlines(task, date);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /* ----------------------------------------------- Subclasses---------------------------------------------------- */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static class EmptyTask extends Task{"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        private EmptyTask() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            super(null);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            super.state \u003d null;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public String getDateString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public boolean isItEmpty() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return \"There is nothing here to see...\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static class DoneTask extends Task{ // Should be Misc Task not Done Task"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        private DoneTask(String nums) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            super(nums);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            super.state \u003d null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public String getDateString() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public boolean isItEmpty() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public boolean isMiscTask() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return \"There is nothing here to see...\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static class Events extends Task {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        private String date;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        private TaskDate tDate;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        private Events(String task, String date) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            super(task);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            this.tDate \u003d new TaskDate(date);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public boolean hasADate() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public String getDateString() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return this.tDate.toString();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return String.format("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    \"[Event][%s] %s (at: %s)\", super.state \u003d\u003d UNFINISHED ? CROSS"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                            : TICK,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    super.task,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    date);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static class ToDos extends Task {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        private ToDos(String task) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            super(task);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public String getDateString() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return String.format("
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    \"[ToDo][%s] %s\", super.state \u003d\u003d UNFINISHED ? CROSS"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                            : TICK,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    super.task);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static class Deadlines extends Task {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        private String deadline;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        private TaskDate tDate;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        private Deadlines(String task, String deadline) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            super(task);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            this.tDate \u003d new TaskDate(deadline);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public boolean hasADate() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public String getDateString() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return this.tDate.toString();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return String.format("
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    \"[Deadline][%s] %s (by: %s)\", super.state \u003d\u003d UNFINISHED ? CROSS"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                            : TICK,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    super.task,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    deadline);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 261
    }
  },
  {
    "path": "src/main/java/duke/dependencies/task/TaskDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Class to handle the parsing of date strings of different format into a valid."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Encapsulates a LocalDate object as well."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class TaskDate implements Serializable, Comparable\u003cTaskDate\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /** Some common format for dates */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final DateTimeFormatter UK_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/y\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /** LocalDate object to be used to parse. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns true if the given date string is in valid format that Duke accepts."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param date date string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return true if date format is valid, false if date format is not valid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static boolean isValidFormat(String date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (date.contains(\"/\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                System.out.println(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                LocalDate.parse(date, UK_DATE_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                LocalDate.parse(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructor for a TaskDate. Specified date string has to be in correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Acceptable formats:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * 1. MM/dd/uuuu"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * 2. uuuu-MM-dd"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param date date string in correct format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public TaskDate(String date) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (date.contains(\"/\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            this.date \u003d LocalDate.parse(date, UK_DATE_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Establishes a natural ordering os TaskDates by Date precedence."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param o The other TaskDate to be compared to."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return -1, 0, 1 if this TaskDate is before , the same , after the other TaskDate."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public int compareTo(TaskDate o) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (this.date.equals(o.date)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } else if (this.date.isBefore(o.date)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns date in string format e.g. \"Oct 05 2020\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"MMM dd uuuu\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    public static void main(String[] args) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        //create dates from strings"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        LocalDate d1 \u003d LocalDate.parse(\"2019-12-01\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        LocalDate d2 \u003d LocalDate.parse(\"2019-12-02\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        LocalDate d3 \u003d LocalDate.parse(\"2019-12-02\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        LocalDate.parse("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//                \"30/12/2010\" ,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//                DateTimeFormatter.ofPattern( \"dd/MM/uuuu\" )"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        //compare dates"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        System.out.println(d1.isBefore(d2)); // -\u003e true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        System.out.println(d1.isAfter(d2)); // -\u003e false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        System.out.println(d2.equals(d3)); // -\u003e true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        //work with dates"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        System.out.println(d1.getDayOfWeek()); // -\u003e SUNDAY"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        System.out.println(d1.getMonth()); // -\u003e DECEMBER"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        System.out.println(d1.plus(1, ChronoUnit.YEARS));  // -\u003e 2020-12-01"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        // get today\u0027s date and print it in a specific format"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        LocalDate d4 \u003d LocalDate.now();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        System.out.println(d4); // -\u003e 2019-10-15"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        System.out.println(d4.format(DateTimeFormatter.ofPattern(\"MMM d uuuu\")) + \" HI\"); // -\u003e Oct 15 2019"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        System.out.println(TaskDate.isValidFormat(\"2019-05-15\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        TaskDate d1 \u003d new TaskDate(\"2019-05-08\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        TaskDate d2 \u003d new TaskDate(\"20/08/2020\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        TaskDate d3 \u003d new TaskDate(\"20/08/2020\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//        System.out.println(d1.compareTo(d3));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 115
    }
  },
  {
    "path": "src/main/java/duke/uicomponents/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.uicomponents;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * A single component for the rendering of the dialogue box in a chat dialogue."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructor for a dialogue box in an opened chat."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Flips the dialogue box into a mirrored position."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Creates and returns a user dialogue box for Duke GUI."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param text The text to be displayed underneath."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param img The display picture."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return User dialogue box."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Creates and returns a Duke dialogue box for the GUI."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param text The text to be displayed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param img The display picture."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Duke dialogue box."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 79
    }
  },
  {
    "path": "src/main/java/duke/uicomponents/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.uicomponents;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Image image \u003d new Image(this.getClass().getResourceAsStream(\"/images/Android-1320568265274623818.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            stage.getIcons().add(image);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            stage.setTitle(\"Juke\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 37
    }
  },
  {
    "path": "src/main/java/duke/uicomponents/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.uicomponents;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class MainWindow extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /* JAVAFX Main GUI Elements */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /* ------------------------- */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/https _specials-images.forbesimg.com_imageserve_5c76b7d331358e35dd2773a9_0x0.jpg background\u003d000000\u0026cropX1\u003d0\u0026cropX2\u003d4401\u0026cropY1\u003d0\u0026cropY2\u003d4401.jpg\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        duke.exit();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 67
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.effect.Reflection?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-border-color: silver; -fx-border-radius: 5px; -fx-border-width: 5px;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-font-size: 13; -fx-padding: 0 20 0 20;\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cReflection /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         \u003c/effect\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "   \u003ceffect\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "      \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "   \u003c/effect\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 24
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.effect.InnerShadow?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: lightgrey; -fx-background-radius: 10px;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.uicomponents.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "      \u003cAnchorPane layoutX\u003d\"350.0\" layoutY\u003d\"558.0\" prefHeight\u003d\"41.0\" prefWidth\u003d\"42.0\" style\u003d\"-fx-background-color: #0088cc; -fx-background-radius: 100%;\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "              \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"7.0\" layoutY\u003d\"8.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"27.0\" prefWidth\u003d\"26.0\" style\u003d\"-fx-background-color: white;\" stylesheets\u003d\"@styles.css\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         \u003c/effect\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"341.0\" style\u003d\"-fx-background-radius: 50px; -fx-border-radius: 50px; -fx-border-color: lightblue; -fx-background-color: white;\" styleClass\u003d\"textfield\" stylesheets\u003d\"@styles.css\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cInnerShadow color\u003d\"#0c3139\" height\u003d\"15.07\" radius\u003d\"5.4925\" width\u003d\"8.9\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         \u003c/effect\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"561.0\" prefWidth\u003d\"399.0\" style\u003d\"-fx-background-color: white;\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cInnerShadow /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         \u003c/effect\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "   \u003ceffect\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "      \u003cInnerShadow /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "   \u003c/effect\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 37
    }
  },
  {
    "path": "src/test/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 7
    }
  },
  {
    "path": "src/test/duke/dependencies/dukeexceptions/DukeExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "class DukeExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void test_DukeException_Message() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new DukeException(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            assertEquals(\"test\", e.getMessage());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 18
    }
  },
  {
    "path": "src/test/duke/dependencies/dukeexceptions/EmptyTaskExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "class EmptyTaskExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void test_EmptyTaskException_Message() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new EmptyTaskException(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (EmptyTaskException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            assertEquals(\"test\", e.getMessage());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 18
    }
  },
  {
    "path": "src/test/duke/dependencies/dukeexceptions/InvalidDateExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "class InvalidDateExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void test_InvalidDateException_Message() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new InvalidDateException(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            assertEquals(\"test\", e.getMessage());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 18
    }
  },
  {
    "path": "src/test/duke/dependencies/dukeexceptions/MissingListExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "class MissingListExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void test_MissingListException_Message() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new MissingListException(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (MissingListException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            assertEquals(\"test\", e.getMessage());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 18
    }
  },
  {
    "path": "src/test/duke/dependencies/dukeexceptions/UnknownCommandExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "class UnknownCommandExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void test_UnknownCommandException_Message() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new UnknownCommandException(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (UnknownCommandException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            assertEquals(\"test\", e.getMessage());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 17
    }
  },
  {
    "path": "src/test/duke/dependencies/dukeexceptions/UnspecifiedDateExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "class UnspecifiedDateExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void test_UnspecifiedDateException_Message() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new UnspecifiedDateException(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (UnspecifiedDateException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            assertEquals(\"test\", e.getMessage());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 18
    }
  },
  {
    "path": "src/test/duke/dependencies/executable/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.executable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void getTask() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Task t \u003d Task.createEmptyTask();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Executable e \u003d Command.createAddCommand(t);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertSame(t, e.getTask());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void test_createAddCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Executable e \u003d Command.createAddCommand(Task.createEmptyTask());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(CommandType.ADD, e.getType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void test_createDoneCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Executable e \u003d Command.createDoneCommand(Task.createEmptyTask());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(CommandType.DONE, e.getType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void test_createListCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Executable e \u003d Command.createListCommand(Task.createEmptyTask());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(CommandType.LIST, e.getType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void test_createDeleteCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Executable e \u003d Command.createDeleteCommand(Task.createEmptyTask());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(CommandType.DELETE, e.getType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 42
    }
  },
  {
    "path": "src/test/duke/dependencies/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.executable.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import duke.dependencies.executable.Executable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void getExecutable() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void test_parseAndCheck_valid_command() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Executable e \u003d Parser.parseAndCheck(\"todo run\").getExecutable();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Executable g \u003d Parser.parseAndCheck(\"clear data\").getExecutable();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            assertAll(()-\u003e assertEquals(g.getType(), CommandType.AUTHCHECK),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    () -\u003e assertEquals(e.getType(), CommandType.ADD));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 29
    }
  },
  {
    "path": "src/test/duke/dependencies/task/TaskDateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "class TaskDateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void test_isValidFormat_On_Correct_Date_Format() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String correct1 \u003d \"2019-05-08\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String correct2 \u003d \"20/08/2020\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertAll(\"The date format should be valid.\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertTrue(TaskDate.isValidFormat(correct1)),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertTrue(TaskDate.isValidFormat(correct2))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void test_TaskDate_compareTo() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        TaskDate d1 \u003d new TaskDate(\"2019-05-08\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        TaskDate d2 \u003d new TaskDate(\"20/08/2020\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        TaskDate d3 \u003d new TaskDate(\"20/08/2020\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertAll(() -\u003e assertEquals(0, d2.compareTo(d3)),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertEquals(-1, d1.compareTo(d2)),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertEquals(1, d2.compareTo(d1)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        TaskDate d1 \u003d new TaskDate(\"2019-05-08\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        TaskDate d2 \u003d new TaskDate(\"20/08/2020\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertAll(() -\u003e assertEquals(\"May 08 2019\", d1.toString()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertEquals(\"Aug 20 2020\", d2.toString()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 39
    }
  },
  {
    "path": "src/test/duke/dependencies/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package duke.dependencies.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void getDateLine() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Task t \u003d Task.createEvent(\"Meeting\", \"2020-08-05\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(\"Aug 05 2020\", t.getDateString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void showTask() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Task t \u003d Task.createEvent(\"Meeting\", \"2020-08-05\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(\"Meeting\", t.showTaskDescription());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void completed() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Task t \u003d Task.createTodo(\"Run\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        t.completed();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertTrue(t.isCompleted());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void createMiscTask() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Task t \u003d Task.createMiscTask(\"1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertAll(() -\u003e assertFalse(t.hasADate()),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertEquals(\"1\", t.showTaskDescription()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertNull(t.state));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void test_createEmptyTask() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertAll(() -\u003e assertTrue(Task.createEmptyTask().isItEmpty()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertNull(Task.createEmptyTask().showTaskDescription()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void createTodo() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Task t \u003d Task.createTodo(\"Run\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertAll(\"Checking task\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertFalse(t.isItEmpty()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertEquals(\"Run\", t.showTaskDescription()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void createEvent() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Task t \u003d Task.createEvent(\"Meeting\", \"08/12/2013\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertAll(() -\u003e assertEquals(\"Meeting\", t.showTaskDescription()),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertFalse(t.isItEmpty()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertEquals(\"Dec 08 2013\", t.getDateString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void createDeadline() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Task t \u003d Task.createDeadline(\"Return book\", \"30/08/2050\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertAll(() -\u003e assertEquals(\"Return book\", t.showTaskDescription()),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertFalse(t.isItEmpty()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                () -\u003e assertEquals(\"Aug 30 2050\", t.getDateString()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 67
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "todo run 100km"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "event meeting /at 2020-08-05"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "deadline return books /by 2019-11-05"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "todo change the world"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "blahhh"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "del /S .\\data\\*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 3,
      "-": 20
    }
  }
]
