[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    checkstyleTest.enabled \u003d false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 13,
      "-": 44
    }
  },
  {
    "path": "data/data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "D|0|return book|2020-01-01T19:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "D|0|shave|2020-01-01T18:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "D|0|shave|2020-01-02T16:05"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "D|1|read|2020-01-01T00:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "T|0|hello world"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 5
    }
  },
  {
    "path": "src/main/java/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class ByeCommand extends Command{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 5
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * Represents a single Command with or without parameters"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * @author  Ryan Lim"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /** array of strings where each element represents a parameter tagged to the command */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final String[] parameters;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Instantiate command without parameters"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.parameters \u003d new String[0];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Instantiate command with parameters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param parameters Array of parameters represented as strrings."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Command(String[] parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.parameters \u003d parameters;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns True if there is no parameter tagged to the Command, False otherwise."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @return boolean value indicating if command has parameter or not."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.parameters.length \u003d\u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns an Array of string where each element is a single parameter of the command tagged to it."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @return an array of parameters represented as strings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String[] getParameters() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.parameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 45
    }
  },
  {
    "path": "src/main/java/command/DateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class DateCommand extends Command {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public DateCommand(String parameter) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(new String[] {parameter});"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 6
    }
  },
  {
    "path": "src/main/java/command/DeadLineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class DeadLineCommand extends Command {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public DeadLineCommand (String[] parameters) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 6
    }
  },
  {
    "path": "src/main/java/command/DelCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class DelCommand extends Command {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public DelCommand(String parameter) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(new String[] {parameter});"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 6
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public DoneCommand(String parameter) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(new String[] {parameter});"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 6
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public EventCommand (String[] parameters) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 6
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public FindCommand (String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(new String[]{description});"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 7
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 3
    }
  },
  {
    "path": "src/main/java/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public TodoCommand (String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(new String[]{description});"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 6
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.DateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.DeadLineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.DelCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.TodoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * The Dukebot programme implements an application that assists the user in managing their tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * @author  Ryan Lim"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /** variable to check if duke is still running */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private boolean isRunning \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /** ArrayList to hold all tasks keyed in by the user for the session */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /** UI where the user will interact with the Dukebot */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /** Parser which handles user input */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /** Storage which manages the saving of tasks from the session into the hard disk  */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * initialises Duke bot"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param filePath Path which points to the desired location to store tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.ui.printLoadingError();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.ui.printGreeting();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Handles Tasks which are marked done and updates it in both hard disk accordingly as well as the task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param parameters the index of the task to be marked done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @throws DukeExceptions.NoUndoneTaskException"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private void doneHandler(String[] parameters) throws DukeExceptions.NoUndoneTaskException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!this.taskList.isEmpty() || this.taskList.allDone()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            int index \u003d Integer.parseInt(parameters[0].strip()) - 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.taskList.completeTask(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.ui.printDoneTask(this.taskList.getTask(index));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.updateFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DukeExceptions.NoUndoneTaskException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Handles addition of new Tasks and updates it in both hard disk accordingly as well as the task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param command the command which indicates which type of task to create."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @throws DukeExceptions.IncompleteCommandException"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private void addTaskHandler(Command command) throws DukeExceptions.IncompleteCommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!command.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            Task newTask \u003d this.taskList.addTask(command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.ui.printAddedNewTask(newTask, this.taskList.getNoTask());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.updateFile();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DukeExceptions.IncompleteCommandException(command.getClass().toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Handles addition of new Tasks and updates it in both hard disk accordingly as well as the task list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param parameters index of task to delete."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @throws DukeExceptions.NoTaskToDeleteException if tasklist is empty"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private void deleteTaskHandler(String[] parameters) throws DukeExceptions.NoTaskToDeleteException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!this.taskList.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            int index \u003d Integer.parseInt(parameters[0].strip()) - 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            Task task \u003d this.taskList.deleteTask(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.ui.printDeleteTask(task, this.taskList.getNoTask());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.updateFile();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new DukeExceptions.NoTaskToDeleteException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns True if Duke bot is still running."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @return boolean value indicating if Duke bot is still running or not."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.isRunning;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * saves tasks to hard disk"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private void updateFile() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.storage.save(this.taskList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.ui.printErrorInSaving();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Takes in a user input as a string, parses it and gets fed the appropriate commands to be handled."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param userInput commands and parameters that the user inputs through the user interface"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void run(String userInput) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Command command \u003d this.parser.parse(userInput);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (command.getClass() \u003d\u003d ByeCommand.class) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.isRunning \u003d false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.ui.printFarewell();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        } else if (command.getClass() \u003d\u003d ListCommand.class) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.ui.printTaskList(this.taskList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        } else if (command.getClass() \u003d\u003d DoneCommand.class) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                this.doneHandler(command.getParameters());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } catch (DukeExceptions.NoUndoneTaskException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                DukeExceptions.printNoUndoneTaskError();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                DukeExceptions.printIndexSizeMismatchError();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                DukeExceptions.noIndexKeyedError();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        } else if (command.getClass() \u003d\u003d TodoCommand.class"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                || command.getClass() \u003d\u003d EventCommand.class"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                || command.getClass() \u003d\u003d DeadLineCommand.class) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                this.addTaskHandler(command);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } catch (DukeExceptions.IncompleteCommandException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                DukeExceptions.printIncompleteCommandError();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                DukeExceptions.printNoDateInput();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                DukeExceptions.printIncorrectDateFormatError();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        } else if (command.getClass() \u003d\u003d DelCommand.class) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                this.deleteTaskHandler(command.getParameters());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } catch (DukeExceptions.NoTaskToDeleteException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                DukeExceptions.printNoTaskToDeleteError();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                DukeExceptions.printIndexSizeMismatchError();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                DukeExceptions.noIndexKeyedError();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        } else if (command.getClass() \u003d\u003d DateCommand.class) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            ui.printGetTaskOnDThisDate(command.getParameters()[0], this.taskList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        } else if (command.getClass() \u003d\u003d FindCommand.class) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            ui.printFindKeyword(command.getParameters()[0], this.taskList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * main method of duke.java where duke is runned"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Duke duke \u003d new Duke(\"./data/data.txt\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in); //scans for input"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        while (duke.isRunning()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            userInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                duke.run(userInput);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                DukeExceptions.printUnrecognizableCommandError();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 201,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeExceptions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class DukeExceptions {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Exception for scenario where an incomplete command is given"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static class IncompleteCommandException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        public IncompleteCommandException(String commandName) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            super(commandName);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return \"Master the description of \" + super.getMessage() + \" cannot be empty!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Exception for scenario where user attempts to do tasks manipulation on an empty task list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static class NoUndoneTaskException extends Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        public NoUndoneTaskException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return \"Master the list is empty\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Exception for scenario where user attempts to delete a task on an empty task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static class NoTaskToDeleteException extends Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        public NoTaskToDeleteException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return \"Master the list is empty\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * error message for when the user does not input a task number for task manipulation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static void noIndexKeyedError() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Master please enter a task number so that I know which to handle.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * error message when the user inputs an invalid task number for task manipulation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static void printIndexSizeMismatchError() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Master that is not a valid task number.\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * error message for when the user tries to mark a task as done when the task list is empty"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static void printNoUndoneTaskError() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Master there is no task that is undone.\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * error message for when the user fails to input additional parameters for the command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static void printIncompleteCommandError() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Master there is no description entered !\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * error message for when a user inputs an unrecognisable command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static void printUnrecognizableCommandError() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"I am sorry master but I do not understand that command.\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * error message for when the user attempts to delete a task from an empty task list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static void printNoTaskToDeleteError() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"I am sorry master but the task list is empty.\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * error message for user not inputting a date for a task with a deadline"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static void printNoDateInput() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Master Please enter the date for your task.\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * error message for user inputting wrong datetime format"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public static void printIncorrectDateFormatError() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Master the input date should be dd-mm-yyyy hhmm !\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 131
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.DateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.DeadLineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.DelCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.TodoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * The Parser class to handle the parsing of user inputs to the appropriate commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * @author  Ryan Lim"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *  returns the command (and its parameters) based on the user input that has been parsed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @return Command based on user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @throws IllegalArgumentException if user input does not match the appropriate commands"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Command parse(String input) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String command \u003d sc.next().toLowerCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new DateCommand(sc.nextLine().strip());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new DoneCommand(sc.nextLine().strip());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new DelCommand(sc.nextLine().strip());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new EventCommand(sc.nextLine().split(\"/at\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case \"deadline\" :"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new DeadLineCommand(sc.nextLine().split(\"/by\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new TodoCommand(sc.nextLine());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            return new FindCommand(sc.nextLine().strip());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 56
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * The Storage class to encapsulate the storing \u0026 loading of tasks to the hard disk and to the Duke bot respectively"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " * @author  Ryan Lim"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /** file path of desired storage locationn */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * retrieves the tasks that is stored on the hard disk previously in the form of a file. If the file does not exist"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * a new empty file is created"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @return File of the stored tasks or an empty file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @throws IOException if there is an error retrieving the file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public File load() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * saves the tasks that has been created/deleted/modified during the session"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @throws IOException if there is an error retrieving the file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        FileWriter updateFile \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            updateFile.write(task.writeToFile() + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        updateFile.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 53
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import command.TodoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Constructor for empty taskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param savedTasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public TaskList (File savedTasks) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        FileReader fr \u003d new FileReader(savedTasks); //reads the file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(fr); //creates a buffering character input stream"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            String[] parameters \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            String taskType \u003d parameters[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            boolean completionStatus \u003d parameters[1].equals(\"1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            String taskDescription \u003d parameters[2];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                task \u003d new Todo(taskDescription, completionStatus);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                task \u003d new Event(taskDescription, LocalDateTime.parse(parameters[3].strip()), completionStatus);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                task \u003d new Deadline(taskDescription, LocalDateTime.parse(parameters[3].strip()), completionStatus);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.taskList.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        fr.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Adds new task to the task list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @return the task that was added"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Task addTask(Command task) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (task.getClass() \u003d\u003d TodoCommand.class) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            newTask \u003d new Todo(task.getParameters()[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        } else if (task.getClass() \u003d\u003d EventCommand.class) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            newTask \u003d new Event(task.getParameters()[0].strip(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    LocalDateTime.parse(task.getParameters()[1].strip(), formatter));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            newTask \u003d new Deadline(task.getParameters()[0].strip(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                    LocalDateTime.parse(task.getParameters()[1].strip(), formatter));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Deletes a task from the task list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param index the index of the task in the list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @return the deleted task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Task deleteTask(int index) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Task task \u003d this.taskList.get(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.taskList.remove(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Retrieves the tasks that is due/occurring at a specified date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param dueDate a string representation of the due/event date for the tasks to be searched up"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @return the string representation of all the task due on that date"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String getTaskDueOn(String dueDate) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (task.isDueOn(LocalDate.parse(dueDate.strip(), DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")))) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                output +\u003d task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return (output \u003d\u003d \"\" ? \"None\\n\" : output);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Retrieves the tasks that has the specified keyword in their description"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param parameter a string representation of the keyword to be searched up"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @return the string representation of all the task that contains the keyword"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String getTaskWithKeyword(String parameter) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (task.hasKeyword(parameter.strip())) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                output +\u003d task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return (output \u003d\u003d \"\" ? \"None\\n\" : output);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * Returns True if all the tasks in the taskList is done."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @return True if all tasks in the taskList are marked done, false otherwise"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean allDone() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            if (!task.isDone()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void completeTask(int index) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.taskList.get(index).markDone();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.taskList.get(index);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public int getNoTask() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.taskList.isEmpty();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        if (this.taskList.size() \u003e 0) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            output \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            for (int i \u003d 1; i \u003c this.taskList.size() + 1; i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                output +\u003d String.valueOf(i) + \". \" + this.taskList.get(i - 1).toString() + \"\\n\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 171
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private String border \u003d \"----------------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * prints the greeting when user first boots duke"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void printGreeting() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "              \" ____        _        \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String greeting \u003d \"Sorry :( duke.Duke is getting some upgrades at the moment.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                + \"This is Tron, temporarily standing in for duke.Duke, how may I assist you ?\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println(this.border + greeting + this.border);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * prints the farewell message when the user closes duke"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void printFarewell() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String farewell \u003d \"Adios, pleasure to serve you!\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println(this.border + farewell + this.border);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * prints the current list of tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param taskList the current list of task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void printTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println(this.border + taskList.toString() + this.border);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * prints the task that was just marked complete"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param task the task that was just marked completed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void printDoneTask(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println(this.border"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                + \"Making great progress master.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                + this.border"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * prints the new task that was added and prints the updated total number of tasks for the user to see"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param task the new task that was created by the user"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param noTask the number of task currently in the task list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void printAddedNewTask(Task task, int noTask) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println(this.border"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                + \"Yes master. I\u0027ve added the task to the list: \\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                + \"You now have \" + noTask + \" task in the list master.\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                + this.border"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * prints the deleted task and prints the updated total number of tasks forthe user to see"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param task the task that was deleted by the user"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param noTask the number of task currently in the task list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void printDeleteTask(Task task, int noTask) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println(this.border"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                + \"Yes master. I\u0027ve deleted the task from the list: \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                + \"You now have \" + noTask + \" task in the list master.\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                + this.border"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * prints the tasks that falls on the date input by the user"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param dueDate the date in string"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param tasks the current list of task"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void printGetTaskOnDThisDate(String dueDate, TaskList tasks) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.border"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Master here are the tasks due on \" + dueDate.strip() + \" :\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + tasks.getTaskDueOn(dueDate)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + this.border"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * alerts the user that it has trouble loading the tasks that was saved on the hard disk and hence creating a new"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * file"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void printLoadingError() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.border"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Master i am unable to retrieve the file, initializing new one!\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + this.border"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * alerts the user that it has trouble saving the tasks onto the hard disk"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void printErrorInSaving() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.border"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Master i am unable to save the file!\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + this.border"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * prints the tasks that contains the keywords that is given by the user"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param parameter the keyword that the user inputs"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param taskList the current list of task"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void printFindKeyword(String parameter, TaskList taskList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            this.border"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + \"Master here are the tasks with keyword \" + parameter.strip() + \" :\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + taskList.getTaskWithKeyword(parameter)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "            + this.border"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 132
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Deadline(String description, LocalDateTime dueDate, boolean done) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(description, dueDate, done);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Deadline(String description, LocalDateTime dueDate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(description, dueDate);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return \"D|\" + super.writeToFile() + \"|\" + super.getDueDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by : \" + super.getDateString() + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 23
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Event(String description, LocalDateTime dueDate, boolean done) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(description, dueDate, done);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Event(String description, LocalDateTime dueDate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(description, dueDate);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return \"E|\" + super.writeToFile() + \"|\" + super.getDueDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at : \" + super.getDateString() + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 23
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    enum Status {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        COMPLETED,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        INCOMPLETE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private Status status \u003d Status.INCOMPLETE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    private final LocalDateTime dueDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * constructor for tasks that was saved into hard disk and mounted onto duke"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param dueDate the due date of the task if any"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param done the status of the task (complete or incomplete)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Task (String description, LocalDateTime dueDate, boolean done) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.status \u003d done ? Status.COMPLETED : Status.INCOMPLETE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * constructor for new task that is created through the duke UI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @param dueDate the due date of the task if any"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Task (String description, LocalDateTime dueDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        this.status \u003d Status.COMPLETED;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.status \u003d\u003d Status.COMPLETED;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * converts the task into string with a specific format to be written onto the hard disk"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     * @return the String representation of task in a specific format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return (this.status \u003d\u003d Status.COMPLETED ? \"1\" : \"0\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "                + \"|\" + this.description.strip();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean isDueOn(LocalDate date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.dueDate.toLocalDate().isEqual(date); }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public boolean hasKeyword(String keyword) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.description.contains(keyword);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public LocalDateTime getDueDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.dueDate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return this.dueDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\")).toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return (this.status \u003d\u003d Status.COMPLETED ? \"[\\u2713]\" : \"[\\u2718]\") + this.description;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 84
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Todo(String description, boolean done) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(description, LocalDateTime.now(), done);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        super(description, LocalDateTime.now());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return \"T|\" + super.writeToFile();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 24
    }
  },
  {
    "path": "src/test/java/duke/duketest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class duketest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void testErrOutput(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Duke testDuke \u003d new Duke(\"./\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e testDuke.run(\"blah\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 15
    }
  },
  {
    "path": "src/test/java/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void testStringPrinting1(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String expected \u003d \"[\\u2713]testing.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Task testTask \u003d new Task(\"testing.\", LocalDateTime.now(), true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertEquals(testTask.toString(),expected);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void testStringPrinting2(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String expected \u003d \"[T][\\u2713]testing.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Task testTask \u003d new Todo(\"testing.\", true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertEquals(testTask.toString(),expected);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void testStringPrinting3(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        String expected \u003d \"[E][\\u2713]testing. (at : 02 Jan 2020 1605)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Task testTask \u003d new Event(\"testing.\", LocalDateTime.of(2020,01,02,16,05), true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertEquals(expected, testTask.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void testDueOn1(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Task testTask \u003d new Event(\"testing.\", LocalDateTime.of(2020,01,02,16,05), true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertTrue(testTask.isDueOn(LocalDate.of(2020,01,02)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void testDueOn2(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Task testTask \u003d new Deadline(\"testing.\", LocalDateTime.of(2020,01,02,16,05), true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertFalse(testTask.isDueOn(LocalDate.of(2020,01,01)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void testIsDone1(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Task testTask \u003d new Event(\"testing.\", LocalDateTime.of(2020,01,02,16,05), true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertTrue(testTask.isDone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    public void testIsDone2(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        Task testTask \u003d new Deadline(\"testing.\", LocalDateTime.of(2020,01,02,16,05), false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "        assertFalse(testTask.isDone());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 55
    }
  },
  {
    "path": "text-ui-test/data/data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "E|0|return book|2020-01-01T19:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "E|0|shave|2020-01-01T18:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "D|0|shave|2020-01-02T16:05"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "D|0|read|2020-01-01T00:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "E|0|return book|2020-01-01T19:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "E|0|shave|2020-01-01T18:00"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "D|0|shave|2020-01-02T16:05"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "D|0|read|2020-01-01T00:00"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "E|0|return book|2020-01-01T19:00"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "E|0|shave|2020-01-01T18:00"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "D|0|shave|2020-01-02T16:05"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "D|0|read|2020-01-01T00:00"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "event return book /at 01-01-2020 1900"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "event shave /at 01-01-2020 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "deadline shave /by 02-01-2020 1605"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "deadline read /by 01-01-2020 0000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "date 01-01-2020"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\task\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\command\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "javac  -cp ..\\bin\\ -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanlimjr"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "ryanlimjr": 6,
      "-": 18
    }
  }
]
