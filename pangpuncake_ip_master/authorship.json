[
  {
    "path": "src/main/java/duke/command/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 7
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Parser class which is used to process commands passed down by the user and returns"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * the result of each command as a String."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private TaskList list;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public Parser(TaskList list) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Checks if the command to exit has been issued"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return True if \u0027bye\u0027 command has been issued, False otherwise."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * The function that processes the incoming command and executes different"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * functions depending on the command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param command String command provided by the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return String result of the provided command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @throws DukeException A custom Exception that carries a message for the user if thrown."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String processCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"^(.*?)\\\\s(.*?)(?:\\\\s/..\\\\s?(.*))?$\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return this.list.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (command.equals(\"hello\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return \"Hi! I\u0027m Duke! Pleasure to meet you :)\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            this.isExit \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return \"Bye! Hope to see you again soon!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (command.equals(\"help\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return \"Accepted commands:\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \"hello - hello!\\n\" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \"list - show current list\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \"bye - saves the current list and exits the program\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \"todo \u003cdescription\u003e - create a todo Task\\n\" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \"event \u003cdescription\u003e /at \u003cdd/MM/yyyy\u003e - create an event Task (date is optional)\\n\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \"deadline \u003cdescription\u003e /by \u003cdd/MM/yyyy\u003e - create a deadline Task (date is optional)\\n\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \"done \u003cindex\u003e - mark the specified task as done\\n\" +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \"undo \u003cindex\u003e - mark the specified task as not done\\n\" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \"delete \u003cindex\u003e - deletes the specified task from the list\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            String com \u003d matcher.group(1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            String task \u003d matcher.group(2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            String date \u003d matcher.group(3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            String index \u003d matcher.group(2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            switch (com) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            case (\"undo\"):"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            case (\"done\"):"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            case (\"delete\"):"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            case(\"find\"):"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                return this.processList(com, index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            case (\"todo\"):"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            case (\"deadline\"):"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            case (\"event\"):"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                return this.processTask(com, task, date);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        throw new DukeException(\"Sorry, I did not understand: \" + command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                + \".\\nUse \\\"help\\\" to look at available commands.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Helper function to process Task related commands."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param com The type of Task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param task The description of the Task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param date The date of the Task to be done at or by (if applicable)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return String result of the function executed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @throws DukeException A custom Exception that carries a message for the user if thrown."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private String processTask(String com, String task, String date) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        switch(com) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        case(\"todo\"):"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (!task.equals(\"\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                return list.addItem(new Todo(task));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                throw new DukeException(\"Please write a task to be done, with \\\"todo \u003ctask\u003e\\\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        case(\"deadline\"):"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            if (!task.equals(\"\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    return list.addItem(new Deadline(task, Parser.convertDate(date)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    throw new DukeException(\"Please write your date in the format \\\"dd/MM/yyyy\\\"\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                throw new DukeException(\"Please write a deadline, with \\\"deadline \u003ctask\u003e /by \u003cdate\u003e\\\"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        case(\"event\"):"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            if (!task.equals(\"\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    return list.addItem(new Event(task, Parser.convertDate(date)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    throw new DukeException(\"Please write your date in the format \\\"dd/MM/yyyy\\\"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                throw new DukeException(\"Please write an event, with \\\"event \u003ctask\u003e /at \u003cdate\u003e\\\"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Helper function to process list related commands."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param com The command keyword that interacts with the list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param index The index of which the command wishes to act on."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return String result of the function executed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @throws DukeException A custom Exception that carries a message for the user if thrown."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private String processList(String com, String index) throws DukeException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        switch(com) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        case(\"done\"):"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            if (!index.equals(\"\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                return list.markDone(Integer.parseInt(index) - 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                throw new DukeException(\"Please choose a task to mark as done, with \\\"done \u003ctask number\u003e\\\"\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        case(\"undo\"):"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            if (!index.equals(\"\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                return list.revertDone(Integer.parseInt(index) - 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                throw new DukeException(\"Please choose a task to undo, with \\\"undo \u003ctask number\u003e\\\"\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        case(\"delete\"):"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            if (!index.equals(\"\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                return list.deleteItem(Integer.parseInt(index) - 1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                throw new DukeException(\"Please choose a task to delete, with \\\"delete \u003ctask number\u003e\\\"\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        case(\"find\"):"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            if (!index.equals(\"\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                return list.findWord(index);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                throw new DukeException(\"Please input a word to find tasks with, using \\\"find \u003cword\u003e\\\"\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Helper function to convert a date String into a LocalDate object."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param date The date String to be converted."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return LocalDate object that follows the input date String."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @throws DateTimeParseException thrown if the inputted date is invalid."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private static LocalDate convertDate(String date) throws DateTimeParseException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 188
    }
  },
  {
    "path": "src/main/java/duke/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package duke.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Duke class that runs the Duke chat bot program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private TaskList list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.list \u003d storage.getList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.parser \u003d new Parser(this.list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Begin the Duke chat bot program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                ui.showOutput(parser.processCommand(fullCommand));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                isExit \u003d parser.isExit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        storage.updateFile(list);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 52,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package duke.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Ui class handles the interactions between user and the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Reads the next line provided by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return The command provided as a String."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Outputs the String provided by the program to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param output The String intended to be outputted to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void showOutput(String output) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Welcome message for the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String logo \u003d \" ____        _\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo + \"\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Line separator for user experience."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        System.out.println(\"\\n____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Provides the user an understanding of what went wrong during program execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param errorMessage The error message to be shown to the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 54
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Storage class is used to interact with the File System and gather the save data from the last use session."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private String currentDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private Path dataDir \u003d Paths.get(currentDir, \"src\", \"main\", \"data\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private Path fileDir \u003d Paths.get(currentDir, \"src\", \"main\", \"data\", \"list.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private static final Pattern pattern \u003d Pattern.compile(\"^\\\\[(.)]\\\\s\\\\[(.)]\\\\s(.*?)(?:\\\\s/..\\\\s(.*))?$\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Checks if the /data directory exists."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return True if it exists, False otherwise."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private boolean dirExists() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return Files.exists(dataDir);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Checks if the /data/list.txt file exists."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return True if it exists, False otherwise."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private boolean fileExists() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return Files.exists(fileDir);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Private method to create the list.txt file in the /data directory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return list.txt File"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private File createFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        File newFile \u003d new File(dataDir.toString(), \"list.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        System.out.println(\"Creating File...\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            newFile.createNewFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            System.out.println(\"Save file created at: \" + this.fileDir);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return newFile;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Private method that gets the list.txt file if present, else a new"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * file is created."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return list.txt File"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private File getFile() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (fileExists()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return fileDir.toFile();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } else if (dirExists()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return createFile();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            dataDir.toFile().mkdirs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return createFile();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Updates the list.txt File with the current list. If list.txt file is not"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * present, a new file is created."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param list The TaskList that is used to update the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return True if update is successful, False otherwise."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public boolean updateFile(TaskList list) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            System.out.println(\"Saving changes...\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            File file \u003d getFile();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            for (Task t : list.getList()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                writer.write(t.getSaveString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                writer.write(\"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            System.out.println(\"Changes saved.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            System.out.println(\"Something went wrong during saving!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Gets the TaskList that has been saved in list.txt File."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return TaskList."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public TaskList getList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            Scanner scanner \u003d new Scanner(this.getFile());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                Matcher matcher \u003d pattern.matcher(scanner.nextLine());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                if (matcher.find()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    boolean done \u003d matcher.group(2).equals(\"1\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    String task \u003d matcher.group(3);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    String date \u003d matcher.group(4);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    LocalDate localDate \u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    if (date !\u003d null \u0026\u0026 !date.equals(\"null\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                        localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    switch (matcher.group(1)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    case (\"T\"):"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                        list.addItem(new Todo(task, done));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    case (\"D\"):"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                        list.addItem(new Deadline(task, done, localDate));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    case (\"E\"):"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                        list.addItem(new Event(task, done, localDate));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 142
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Deadline task that takes in a description and date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public Deadline(String task, LocalDate date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public Deadline(String task, boolean done, LocalDate date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        super(task, done);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return \"[D] \" + super.getSaveString() + \" /by \" + this.date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String dateString \u003d \"No date set\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (this.date !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            DateTimeFormatter formatters \u003d DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            dateString \u003d this.date.format(formatters);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return \"[Deadline] \" + super.toString() + \" (by: \" + dateString + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 39
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Event task that takes in a description and a date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public Event(String task, LocalDate date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public Event(String task, boolean done, LocalDate date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        super(task, done);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return \"[D] \" + super.getSaveString() + \" /at \" + this.date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String dateString \u003d \"No date set\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (this.date !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            DateTimeFormatter formatters \u003d DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            dateString \u003d this.date.format(formatters);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return \"[Event] \" + super.toString() + \" (at: \" + dateString + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 38
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Abstract class Task that provides basic functionality to the other Task objects"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * that extends from it."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    boolean done;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    String task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    Task(String task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    Task(String task, boolean done) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    String markDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return \"Great job, keep it up!\\n\" + this.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    String revertDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return \"Guess you made a mistake huh?\\n\" + this.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (this.done) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            result +\u003d \"[1] \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            result +\u003d \"[0] \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        result +\u003d this.task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (this.done) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            result +\u003d \"[\\u2713] \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            result +\u003d \"[\\u2718] \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        result +\u003d this.task;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 54
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * TaskList class is used to store different Task objects and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * allows the user to modify the list of tasks through"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * this class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private int activeTasks \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private int completedTasks \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        for (Task t : this.list) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            if (t.done) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                this.completedTasks +\u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                this.activeTasks +\u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Adds a Task to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param item Task object to be added on to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return String result that describes the item added"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * if successful."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String addItem(Task item) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (item \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return \"Task is null! Nothing was added.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.list.add(item);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (item.done) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            this.completedTasks +\u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            this.activeTasks +\u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return \"added: \" + item + \"\\nActive Tasks: \" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                this.activeTasks + \"\\nCompleted Tasks: \" + this.completedTasks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Deletes a Task from the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param index The index of the Task object to be deleted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return String result that describes the deleted Task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * if successful."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String deleteItem(int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (index \u003e\u003d this.list.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return \"Please choose a valid task to delete\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Task deletedTask \u003d this.list.remove(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (deletedTask.done) this.completedTasks -\u003d 1; else this.activeTasks -\u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return \"Noted. I have deleted the following task: \\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                + deletedTask + \"\\nActive Tasks: \" +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                this.activeTasks + \"\\nCompleted Tasks: \" + this.completedTasks;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Marks a Task as completed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param index The index of the Task object to be marked as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return String result that describes the completed Task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * if successful."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String markDone(int index) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (index \u003e\u003d this.list.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return \"Please choose a valid task to mark as done\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (!this.list.get(index).done) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            this.activeTasks -\u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            this.completedTasks +\u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return this.list.get(index).markDone() + \"\\nActive Tasks: \" +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    this.activeTasks + \"\\nCompleted Tasks: \" + this.completedTasks;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return \"The task is already done!\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Marks a Task as not completed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param index The index of the Task object to be marked as not done."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return String result that describes the uncompleted Task if successful."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String revertDone(int index) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (index \u003e\u003d this.list.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return \"Please choose a valid task to mark as not done\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (this.list.get(index).done) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            this.activeTasks +\u003d 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            this.completedTasks -\u003d 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return this.list.get(index).revertDone() + \"\\nActive Tasks: \" +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    this.activeTasks + \"\\nCompleted Tasks: \" + this.completedTasks;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return \"The task is not yet done!\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Finds the tasks that have the word parameter in the task description."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param word The word to be searched for."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return TaskList of the results from the search."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String findWord(String word) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        List\u003cTask\u003e filteredList \u003d new ArrayList\u003c\u003e(this.list);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        filteredList \u003d filteredList.stream()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                .filter(task -\u003e task.task.contains(word))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return \"Using keyword: \" + word + \"\\n\" + new TaskList(filteredList).toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Custom toString representation of a TaskList which provides a view of the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * current Tasks in the list along with additional information such as"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * number of active tasks and completed tasks."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @return String representation of current Tasks in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (this.list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return \"There are currently no tasks.\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String result \u003d \"Current tasks:\\n\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d this.list.size(); i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            result +\u003d i + \". \" + this.list.get(i - 1) + \"\\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        result +\u003d \"\\nActive Tasks: \" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                this.activeTasks + \"\\nCompleted Tasks: \" + this.completedTasks;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 143
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Todo task that takes in a description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public Todo(String task) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public Todo(String task, boolean done) { super(task, done);}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return \"[T] \" + super.getSaveString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return \"[Todo] \" + super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 22,
      "-": 1
    }
  },
  {
    "path": "src/main/java/src/main/data/list.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "[D] [1] this one for the boys  /by null"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "[D] [0] mamma mia! Mister Roboto regato! /by 2020-03-22"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "[T] [0] AWS HACKATHON JITSI HOLY MOLY"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "[T] [0] what the"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 4
    }
  },
  {
    "path": "src/test/java/duke/commandTest/commandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package duke.commandTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class commandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void emptyCommand_errorThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Parser parser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            parser.processCommand(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            assertEquals(\"Sorry, I did not understand: \", e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void event_badDate_errorThrown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Parser parser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            parser.processCommand(\"event testing /at 22-03-2020\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            assertEquals(\"Please write your date in the format \\\"dd/MM/yyyy\\\"\", e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void deadline_badDate_errorThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Parser parser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            parser.processCommand(\"deadline testing /at 22-03-2020\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            assertEquals(\"Please write your date in the format \\\"dd/MM/yyyy\\\"\", e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void event_noDate_errorThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Parser parser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            String result \u003d parser.processCommand(\"event testing /at\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            assertEquals(\"Please write your date in the format \\\"dd/MM/yyyy\\\"\", e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void deadline_noDate_errorThrown() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Parser parser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            String result \u003d parser.processCommand(\"deadline testing /at\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            assertEquals(\"Please write your date in the format \\\"dd/MM/yyyy\\\"\", e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 70
    }
  },
  {
    "path": "src/test/java/duke/dukeTest/dukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package duke.dukeTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class dukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 11
    }
  },
  {
    "path": "src/test/java/duke/taskTest/taskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package duke.taskTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class taskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void invalidIndex_deleteItem() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(\"Please choose a valid task to delete\", list.deleteItem(0));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void null_addItem() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(\"Task is null! Nothing was added.\", list.addItem(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void invalidIndex_markDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(\"Please choose a valid task to mark as done\", list.markDone(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void invalidIndex_revertDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(\"Please choose a valid task to mark as not done\", list.revertDone(0));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 32
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "todo hello"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "event hello /at world"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "event hello"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "event"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "deadline hello /by world"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "deadline hello"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 17
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "  )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 5,
      "-": 37
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "../src/main/java/Parser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "../src/main/java/Event.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "../src/main/java/Task.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "../src/main/java/Duke.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "../src/main/java/Deadline.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "../src/main/java/Todo.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "../src/main/java/TaskList.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "../src/main/java/DukeException.java"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 8
    }
  }
]
