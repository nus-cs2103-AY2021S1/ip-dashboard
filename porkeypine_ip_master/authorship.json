[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 1,
      "-": 45
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "T/0/book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "D/0/asdlkfjaldksf/2020-03-25"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "T/1/"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 4
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 duke.command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "@rem Get duke.command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "@rem Slurp the duke.command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "@rem Setup the duke.command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 4,
      "-": 99
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * @author Hui Ling"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * @since 2020-09-18"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            taskList \u003d storage.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                ui.showDividerLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 46,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.TodoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.UpdateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.TerminationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.dukeexception.InvalidInputException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.dukeexception.InvalidTaskException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    static final String COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    static final String COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    static final String COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    static final String COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    static final String COMMAND_UPDATE \u003d \"update\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    static final String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    static final Set\u003cString\u003e terminationCommands \u003d new HashSet\u003cString\u003e("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Arrays.asList(\"bye\", \"toodles\", \"farewell\", \"sayonara\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    static final Set\u003cString\u003e nonTerminationCommands \u003d new HashSet\u003cString\u003e("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Arrays.asList(COMMAND_LIST, COMMAND_DONE, COMMAND_TODO, COMMAND_DEADLINE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    COMMAND_EVENT, COMMAND_DELETE, COMMAND_UPDATE, COMMAND_FIND));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Parser() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private static String getCommandType(String fullCommand) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return fullCommand.contains(\" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                ? fullCommand.split(\" \")[0]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                : fullCommand;  // list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static Command parse(String fullCommand) throws InvalidTaskException, InvalidInputException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String commandType \u003d getCommandType(fullCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (commandType.equals(COMMAND_LIST)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            // list is the only duke.command that takes only one word and nothing after a space"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (terminationCommands.contains(commandType)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return new TerminationCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (!nonTerminationCommands.contains(commandType)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new InvalidTaskException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // valid duke.command that is not list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (!fullCommand.contains(\" \")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new InvalidInputException(\"Did you put your task info after a space?\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // take the part of the duke.command without commandType"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String info \u003d fullCommand.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_DONE:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                int taskNumber \u003d parseInt(info) - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Specify the task number correctly.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_TODO:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new TodoCommand(info);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Did you put your task after a space?\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_EVENT:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                String[] descAndDate \u003d info.split(\" /at \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new EventCommand(descAndDate[0], LocalDate.parse(descAndDate[1]));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Format for dates is yyyy-mm-dd. \" +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        \"Also, did you put a task before and date after \u0027 /at \u0027?\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_DEADLINE:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                String[] descAndDate \u003d info.split(\" /by \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new DeadlineCommand(descAndDate[0], LocalDate.parse(descAndDate[1]));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Format for dates is yyyy-mm-dd. \" +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        \"Also, did you put a task before and deadline after \u0027 /by \u0027?\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_DELETE:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new FindCommand(info);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Somehow your input is wrong.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_UPDATE:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                int taskNumber \u003d parseInt(info) - 1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                String newTaskDesc \u003d new Ui().readUpdateDesc();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new UpdateCommand(taskNumber, newTaskDesc);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Specify the task number correctly.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_FIND:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new FindCommand(info);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Specify the task number correctly.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new InvalidTaskException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 122
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.dukeexception.InvalidTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /** Checks if there exists a file at dataDir/filePath"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * and creates one if it doesn\u0027t exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private void checkOrCreateFile() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Path fp \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Path parentFolder \u003d fp.getParent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        File dataDir \u003d parentFolder.toFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (!dataDir.exists()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            dataDir.mkdirs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        File dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /** Returns a TaskList of tasks described in the file at the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Storage object\u0027s dataDir/filePath"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return TaskList generated by file at dataDir/filePath"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private TaskList loadInputFromFile() throws IOException, InvalidTaskException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            if (line.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            // dissect info of a duke.task contained in one line"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            String[] info \u003d line.split(\"/\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            String taskType \u003d info[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            boolean done \u003d (parseInt(info[1]) \u003d\u003d 1);  // 1 stands for done, 0 for undone"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            String description \u003d info[2];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                if (done) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    todo.markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                tl.addTask(todo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, LocalDate.parse(info[3]));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                if (done) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    deadline.markAsDone();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                tl.addTask(deadline);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                Event event \u003d new Event(description, LocalDate.parse(info[3]));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                if (done) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    event.markAsDone();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                tl.addTask(event);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidTaskException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return tl;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /** Creates a file at the storage object\u0027s filePath if necessary,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * and returns a TaskList of tasks described in that file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Essentially, the initialisation function for Duke\u0027s duke.task list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return TaskList generated from file at dataDir/filePath"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public TaskList load() throws IOException, InvalidTaskException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        checkOrCreateFile();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return loadInputFromFile();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /** Saves the tasks from the given TaskList into the file at dataDir/filePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param taskList most-updated TaskList while Duke is running"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            writer.write(\"\\n\" + taskList.getTask(i).saveToFile());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 121
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Ui() {}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private enum Speech {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        GREETING(\"My name? You don\u0027t need to know that. Stop bothering me already... \"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        BYE(\"Finally... don\u0027t come back if you can possibly help it, please.\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        NEXTCOMMAND(\"What do you want now?\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        LIST(\"I wouldn\u0027t bother doing them if I were you.\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        DONE(\"Oh goody... You actually accomplished something!!\\n  \"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ADD(\"You\u0027re making me feel tired... But if you insist:\\n  \"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        DELETE(\"Oh, getting lazy are we? I approve. I\u0027ve removed this:\\n  \"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        UPDATEINPUT(\"You\u0027re so troublesome... What updated duke.task description do you want?\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        UPDATEDTASK(\"Donezorimasu. Your duke.task is now:\\n  \"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        LOADINGERROR(\"Something went wrong when loading the data file. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                + \"\\nGuess you\u0027ll be starting from zero.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        private final String line;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        private Speech(String line) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            this.line \u003d line;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(Speech.GREETING.line);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(Speech.BYE.line);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void showDividerLine() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(\"------------------------------\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void showAddTask(Task t) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(Speech.ADD.line + \"\\n\" + t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void showDoneTask(Task t) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(Speech.DONE.line + t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void showDeleteTask(Task t) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "//        String s \u003d Speech.DELETE.line + t;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "//        System.out.println(s);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "//        return s;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(Speech.DELETE.line + t);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void showUpdateTask(Task t) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(Speech.UPDATEDTASK.line + t);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void showNumberOfTasksLeft(TaskList taskList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        int length \u003d taskList.getSize();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(\"\\nYou now have \" + length"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                + (length \u003d\u003d 1 ? \" thing\" : \" things\") + \" in your list\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(Speech.LOADINGERROR.line);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void showError(String errorMsg) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(errorMsg);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void showAllTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            System.out.println(i + 1 + \". \" + taskList.getTask(i));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(Speech.LIST.line);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(Speech.NEXTCOMMAND.line);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "//        sc.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String readUpdateDesc() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(Speech.UPDATEINPUT.line);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String newDesc \u003d sc.nextLine();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "//        sc.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return newDesc;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 98
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Command() {}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throws main.java.duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 14
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    String desc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    LocalDate by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public DeadlineCommand(String desc, LocalDate by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Deadline deadline \u003d new Deadline(desc, by);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ui.showAddTask(deadline);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ui.showNumberOfTasksLeft(taskList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 30
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.dukeexception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    int taskNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            ui.showDeleteTask(taskList.getTask(taskNumber));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            taskList.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            ui.showNumberOfTasksLeft(taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new InvalidInputException(\"Task does not exist\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 29
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.dukeexception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    int taskNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            taskList.markAsDone(taskNumber);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            ui.showDoneTask(taskList.getTask(taskNumber));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new InvalidInputException(\"Task does not exist\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 28
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    String desc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    LocalDate at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public EventCommand(String desc, LocalDate at) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Event event \u003d new Event(desc, at);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ui.showAddTask(event);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ui.showNumberOfTasksLeft(taskList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 30
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        TaskList foundTasks \u003d taskList.find(keyword);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ui.showAllTasks(foundTasks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 24
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public ListCommand() {}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ui.showAllTasks(taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ui.showNumberOfTasksLeft(taskList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 19
    }
  },
  {
    "path": "src/main/java/duke/command/TerminationCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class TerminationCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public TerminationCommand() {}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            ui.showGoodbye();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new DukeException(\"Something went wrong saving the tasks to data file\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 26
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    String desc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public TodoCommand(String desc) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Todo todo \u003d new Todo(desc);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ui.showAddTask(todo);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ui.showNumberOfTasksLeft(taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 26
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.dukeexception.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    int taskNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    String newTaskDesc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public UpdateCommand(int taskNumber, String newTaskDesc) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.newTaskDesc \u003d newTaskDesc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Task updatedTask \u003d taskList.updateTaskDesc(taskNumber, newTaskDesc);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            ui.showUpdateTask(updatedTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new InvalidInputException(\"Task does not exist\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 31
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public DukeException(String e) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(e);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 7
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public InvalidInputException(String e) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(\"There\u0027s something wrong with your input for this... \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                + \"Sigh, life is tough.\\n\" + e);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 10
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class InvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public InvalidTaskException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(\"Did you make up a task type? I don\u0027t understand what you mean...\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 9
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "//    public void editDate(LocalDate newBy) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "//        this.by \u003d newBy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.getDayOfWeek() + \", \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String saveToFile() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"D/\" + super.saveToFile() + \"/\" + by;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 30
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "//    public void editDate(LocalDate newAt) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "//        this.at \u003d newAt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.getDayOfWeek() + \", \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String saveToFile() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"E/\" + super.saveToFile() + \"/\" + at;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 30
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void editDescription(String newDesc) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.description \u003d newDesc;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return (isDone ? \":)\" : \":(\"); //return tick or X symbols"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String saveToFile() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return isDone ? \"1/\" : \"0/\" + description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 31
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public TaskList() {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /** Adds a given duke.task to the taskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param t duke.task to be added."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /** Deletes a specified duke.task from the taskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param taskNumber index of the duke.task to be deleted in taskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskList.remove(taskNumber);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /** Updates a specified duke.task to a new description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param taskNumber index of the duke.task to be updated in taskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param newTaskDesc new description to update the duke.task with."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return the edited duke.task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Task updateTaskDesc(int taskNumber, String newTaskDesc) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Task taskToBeEdited \u003d taskList.get(taskNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskToBeEdited.editDescription(newTaskDesc);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return taskToBeEdited;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void markAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskList.get(taskNumber).markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Task getTask(int i) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return taskList.get(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public TaskList find(String keyword) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        TaskList foundTasks \u003d new TaskList(); // to return this"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // process the keyword to make it easier to match"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String searchTerm \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            String processedTaskString \u003d t.toString().toLowerCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            if (processedTaskString.contains(searchTerm)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                foundTasks.addTask(t);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String saveToFile() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"T/\" + super.saveToFile();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 19
    }
  },
  {
    "path": "src/test/java/duke/command/DeadlineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DeadlineCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    void isExit_normalDeadline_falseReturned() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        assertEquals(false, new DeadlineCommand(\"deadline1\", LocalDate.parse(\"2020-09-23\")).isExit());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 16
    }
  },
  {
    "path": "src/test/java/duke/command/TerminationCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.command.TerminationCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class TerminationCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    void isExit_normalTermination_trueReturned() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        assertEquals(true, new TerminationCommand().isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 13
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    void getSize_normalInput_success() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        assertEquals(0, tasks.getSize());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        tasks.addTask(new Todo(\"todo1\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        tasks.addTask(new Deadline(\"deadline1\", LocalDate.parse(\"2020-09-23\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        assertEquals(2, tasks.getSize());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        tasks.addTask(new Event(\"event1\", LocalDate.parse(\"2020-10-22\")));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        assertEquals(3, tasks.getSize());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    void getTask_normalInput_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        tasks.addTask(new Todo(\"todo1\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadline1\", LocalDate.parse(\"2020-09-23\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        tasks.addTask(new Event(\"event1\", LocalDate.parse(\"2020-10-22\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        assertEquals(deadline, tasks.getTask(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 35
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "blah"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 10
    }
  }
]
